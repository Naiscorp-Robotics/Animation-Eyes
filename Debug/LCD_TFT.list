
LCD_TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071e4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  080072f4  080072f4  000082f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077e8  080077e8  00009068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080077e8  080077e8  00009068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080077e8  080077e8  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077e8  080077e8  000087e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077ec  080077ec  000087ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080077f0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000068  08007858  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08007858  00009380  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008499  00000000  00000000  00009091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c34  00000000  00000000  0001152a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  00013160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000686  00000000  00000000  00013a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001824b  00000000  00000000  000140a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ade0  00000000  00000000  0002c2f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084f47  00000000  00000000  000370d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc018  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003098  00000000  00000000  000bc05c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000bf0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	080072dc 	.word	0x080072dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	080072dc 	.word	0x080072dc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_frsub>:
 800093c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000940:	e002      	b.n	8000948 <__addsf3>
 8000942:	bf00      	nop

08000944 <__aeabi_fsub>:
 8000944:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000948 <__addsf3>:
 8000948:	0042      	lsls	r2, r0, #1
 800094a:	bf1f      	itttt	ne
 800094c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000950:	ea92 0f03 	teqne	r2, r3
 8000954:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000958:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800095c:	d06a      	beq.n	8000a34 <__addsf3+0xec>
 800095e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000962:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000966:	bfc1      	itttt	gt
 8000968:	18d2      	addgt	r2, r2, r3
 800096a:	4041      	eorgt	r1, r0
 800096c:	4048      	eorgt	r0, r1
 800096e:	4041      	eorgt	r1, r0
 8000970:	bfb8      	it	lt
 8000972:	425b      	neglt	r3, r3
 8000974:	2b19      	cmp	r3, #25
 8000976:	bf88      	it	hi
 8000978:	4770      	bxhi	lr
 800097a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800097e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000982:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000992:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000996:	bf18      	it	ne
 8000998:	4249      	negne	r1, r1
 800099a:	ea92 0f03 	teq	r2, r3
 800099e:	d03f      	beq.n	8000a20 <__addsf3+0xd8>
 80009a0:	f1a2 0201 	sub.w	r2, r2, #1
 80009a4:	fa41 fc03 	asr.w	ip, r1, r3
 80009a8:	eb10 000c 	adds.w	r0, r0, ip
 80009ac:	f1c3 0320 	rsb	r3, r3, #32
 80009b0:	fa01 f103 	lsl.w	r1, r1, r3
 80009b4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009b8:	d502      	bpl.n	80009c0 <__addsf3+0x78>
 80009ba:	4249      	negs	r1, r1
 80009bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009c4:	d313      	bcc.n	80009ee <__addsf3+0xa6>
 80009c6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009ca:	d306      	bcc.n	80009da <__addsf3+0x92>
 80009cc:	0840      	lsrs	r0, r0, #1
 80009ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80009d2:	f102 0201 	add.w	r2, r2, #1
 80009d6:	2afe      	cmp	r2, #254	@ 0xfe
 80009d8:	d251      	bcs.n	8000a7e <__addsf3+0x136>
 80009da:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80009de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e2:	bf08      	it	eq
 80009e4:	f020 0001 	biceq.w	r0, r0, #1
 80009e8:	ea40 0003 	orr.w	r0, r0, r3
 80009ec:	4770      	bx	lr
 80009ee:	0049      	lsls	r1, r1, #1
 80009f0:	eb40 0000 	adc.w	r0, r0, r0
 80009f4:	3a01      	subs	r2, #1
 80009f6:	bf28      	it	cs
 80009f8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80009fc:	d2ed      	bcs.n	80009da <__addsf3+0x92>
 80009fe:	fab0 fc80 	clz	ip, r0
 8000a02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a06:	ebb2 020c 	subs.w	r2, r2, ip
 8000a0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a0e:	bfaa      	itet	ge
 8000a10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a14:	4252      	neglt	r2, r2
 8000a16:	4318      	orrge	r0, r3
 8000a18:	bfbc      	itt	lt
 8000a1a:	40d0      	lsrlt	r0, r2
 8000a1c:	4318      	orrlt	r0, r3
 8000a1e:	4770      	bx	lr
 8000a20:	f092 0f00 	teq	r2, #0
 8000a24:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a28:	bf06      	itte	eq
 8000a2a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a2e:	3201      	addeq	r2, #1
 8000a30:	3b01      	subne	r3, #1
 8000a32:	e7b5      	b.n	80009a0 <__addsf3+0x58>
 8000a34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a3c:	bf18      	it	ne
 8000a3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a42:	d021      	beq.n	8000a88 <__addsf3+0x140>
 8000a44:	ea92 0f03 	teq	r2, r3
 8000a48:	d004      	beq.n	8000a54 <__addsf3+0x10c>
 8000a4a:	f092 0f00 	teq	r2, #0
 8000a4e:	bf08      	it	eq
 8000a50:	4608      	moveq	r0, r1
 8000a52:	4770      	bx	lr
 8000a54:	ea90 0f01 	teq	r0, r1
 8000a58:	bf1c      	itt	ne
 8000a5a:	2000      	movne	r0, #0
 8000a5c:	4770      	bxne	lr
 8000a5e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a62:	d104      	bne.n	8000a6e <__addsf3+0x126>
 8000a64:	0040      	lsls	r0, r0, #1
 8000a66:	bf28      	it	cs
 8000a68:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a6c:	4770      	bx	lr
 8000a6e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a72:	bf3c      	itt	cc
 8000a74:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a78:	4770      	bxcc	lr
 8000a7a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a7e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a86:	4770      	bx	lr
 8000a88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a8c:	bf16      	itet	ne
 8000a8e:	4608      	movne	r0, r1
 8000a90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a94:	4601      	movne	r1, r0
 8000a96:	0242      	lsls	r2, r0, #9
 8000a98:	bf06      	itte	eq
 8000a9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a9e:	ea90 0f01 	teqeq	r0, r1
 8000aa2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_ui2f>:
 8000aa8:	f04f 0300 	mov.w	r3, #0
 8000aac:	e004      	b.n	8000ab8 <__aeabi_i2f+0x8>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_i2f>:
 8000ab0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ab4:	bf48      	it	mi
 8000ab6:	4240      	negmi	r0, r0
 8000ab8:	ea5f 0c00 	movs.w	ip, r0
 8000abc:	bf08      	it	eq
 8000abe:	4770      	bxeq	lr
 8000ac0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ac4:	4601      	mov	r1, r0
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	e01c      	b.n	8000b06 <__aeabi_l2f+0x2a>

08000acc <__aeabi_ul2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	e00a      	b.n	8000af0 <__aeabi_l2f+0x14>
 8000ada:	bf00      	nop

08000adc <__aeabi_l2f>:
 8000adc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae0:	bf08      	it	eq
 8000ae2:	4770      	bxeq	lr
 8000ae4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ae8:	d502      	bpl.n	8000af0 <__aeabi_l2f+0x14>
 8000aea:	4240      	negs	r0, r0
 8000aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af0:	ea5f 0c01 	movs.w	ip, r1
 8000af4:	bf02      	ittt	eq
 8000af6:	4684      	moveq	ip, r0
 8000af8:	4601      	moveq	r1, r0
 8000afa:	2000      	moveq	r0, #0
 8000afc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b00:	bf08      	it	eq
 8000b02:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b06:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b0a:	fabc f28c 	clz	r2, ip
 8000b0e:	3a08      	subs	r2, #8
 8000b10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b14:	db10      	blt.n	8000b38 <__aeabi_l2f+0x5c>
 8000b16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b20:	f1c2 0220 	rsb	r2, r2, #32
 8000b24:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b28:	fa20 f202 	lsr.w	r2, r0, r2
 8000b2c:	eb43 0002 	adc.w	r0, r3, r2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f102 0220 	add.w	r2, r2, #32
 8000b3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b40:	f1c2 0220 	rsb	r2, r2, #32
 8000b44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b48:	fa21 f202 	lsr.w	r2, r1, r2
 8000b4c:	eb43 0002 	adc.w	r0, r3, r2
 8000b50:	bf08      	it	eq
 8000b52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_fmul>:
 8000b58:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b60:	bf1e      	ittt	ne
 8000b62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b66:	ea92 0f0c 	teqne	r2, ip
 8000b6a:	ea93 0f0c 	teqne	r3, ip
 8000b6e:	d06f      	beq.n	8000c50 <__aeabi_fmul+0xf8>
 8000b70:	441a      	add	r2, r3
 8000b72:	ea80 0c01 	eor.w	ip, r0, r1
 8000b76:	0240      	lsls	r0, r0, #9
 8000b78:	bf18      	it	ne
 8000b7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b7e:	d01e      	beq.n	8000bbe <__aeabi_fmul+0x66>
 8000b80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b94:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000b98:	bf3e      	ittt	cc
 8000b9a:	0049      	lslcc	r1, r1, #1
 8000b9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ba0:	005b      	lslcc	r3, r3, #1
 8000ba2:	ea40 0001 	orr.w	r0, r0, r1
 8000ba6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000baa:	2afd      	cmp	r2, #253	@ 0xfd
 8000bac:	d81d      	bhi.n	8000bea <__aeabi_fmul+0x92>
 8000bae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000bb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bb6:	bf08      	it	eq
 8000bb8:	f020 0001 	biceq.w	r0, r0, #1
 8000bbc:	4770      	bx	lr
 8000bbe:	f090 0f00 	teq	r0, #0
 8000bc2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bc6:	bf08      	it	eq
 8000bc8:	0249      	lsleq	r1, r1, #9
 8000bca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bd2:	3a7f      	subs	r2, #127	@ 0x7f
 8000bd4:	bfc2      	ittt	gt
 8000bd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000bda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bde:	4770      	bxgt	lr
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	3a01      	subs	r2, #1
 8000bea:	dc5d      	bgt.n	8000ca8 <__aeabi_fmul+0x150>
 8000bec:	f112 0f19 	cmn.w	r2, #25
 8000bf0:	bfdc      	itt	le
 8000bf2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000bf6:	4770      	bxle	lr
 8000bf8:	f1c2 0200 	rsb	r2, r2, #0
 8000bfc:	0041      	lsls	r1, r0, #1
 8000bfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000c02:	f1c2 0220 	rsb	r2, r2, #32
 8000c06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c0e:	f140 0000 	adc.w	r0, r0, #0
 8000c12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c16:	bf08      	it	eq
 8000c18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c1c:	4770      	bx	lr
 8000c1e:	f092 0f00 	teq	r2, #0
 8000c22:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c26:	bf02      	ittt	eq
 8000c28:	0040      	lsleq	r0, r0, #1
 8000c2a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c2e:	3a01      	subeq	r2, #1
 8000c30:	d0f9      	beq.n	8000c26 <__aeabi_fmul+0xce>
 8000c32:	ea40 000c 	orr.w	r0, r0, ip
 8000c36:	f093 0f00 	teq	r3, #0
 8000c3a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c3e:	bf02      	ittt	eq
 8000c40:	0049      	lsleq	r1, r1, #1
 8000c42:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c46:	3b01      	subeq	r3, #1
 8000c48:	d0f9      	beq.n	8000c3e <__aeabi_fmul+0xe6>
 8000c4a:	ea41 010c 	orr.w	r1, r1, ip
 8000c4e:	e78f      	b.n	8000b70 <__aeabi_fmul+0x18>
 8000c50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c54:	ea92 0f0c 	teq	r2, ip
 8000c58:	bf18      	it	ne
 8000c5a:	ea93 0f0c 	teqne	r3, ip
 8000c5e:	d00a      	beq.n	8000c76 <__aeabi_fmul+0x11e>
 8000c60:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c64:	bf18      	it	ne
 8000c66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c6a:	d1d8      	bne.n	8000c1e <__aeabi_fmul+0xc6>
 8000c6c:	ea80 0001 	eor.w	r0, r0, r1
 8000c70:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c74:	4770      	bx	lr
 8000c76:	f090 0f00 	teq	r0, #0
 8000c7a:	bf17      	itett	ne
 8000c7c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c80:	4608      	moveq	r0, r1
 8000c82:	f091 0f00 	teqne	r1, #0
 8000c86:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c8a:	d014      	beq.n	8000cb6 <__aeabi_fmul+0x15e>
 8000c8c:	ea92 0f0c 	teq	r2, ip
 8000c90:	d101      	bne.n	8000c96 <__aeabi_fmul+0x13e>
 8000c92:	0242      	lsls	r2, r0, #9
 8000c94:	d10f      	bne.n	8000cb6 <__aeabi_fmul+0x15e>
 8000c96:	ea93 0f0c 	teq	r3, ip
 8000c9a:	d103      	bne.n	8000ca4 <__aeabi_fmul+0x14c>
 8000c9c:	024b      	lsls	r3, r1, #9
 8000c9e:	bf18      	it	ne
 8000ca0:	4608      	movne	r0, r1
 8000ca2:	d108      	bne.n	8000cb6 <__aeabi_fmul+0x15e>
 8000ca4:	ea80 0001 	eor.w	r0, r0, r1
 8000ca8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_fdiv>:
 8000cc0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc8:	bf1e      	ittt	ne
 8000cca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cce:	ea92 0f0c 	teqne	r2, ip
 8000cd2:	ea93 0f0c 	teqne	r3, ip
 8000cd6:	d069      	beq.n	8000dac <__aeabi_fdiv+0xec>
 8000cd8:	eba2 0203 	sub.w	r2, r2, r3
 8000cdc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce0:	0249      	lsls	r1, r1, #9
 8000ce2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ce6:	d037      	beq.n	8000d58 <__aeabi_fdiv+0x98>
 8000ce8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cf0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cf4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	bf38      	it	cc
 8000cfc:	005b      	lslcc	r3, r3, #1
 8000cfe:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d02:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d06:	428b      	cmp	r3, r1
 8000d08:	bf24      	itt	cs
 8000d0a:	1a5b      	subcs	r3, r3, r1
 8000d0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d14:	bf24      	itt	cs
 8000d16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d22:	bf24      	itt	cs
 8000d24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d30:	bf24      	itt	cs
 8000d32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d3a:	011b      	lsls	r3, r3, #4
 8000d3c:	bf18      	it	ne
 8000d3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d42:	d1e0      	bne.n	8000d06 <__aeabi_fdiv+0x46>
 8000d44:	2afd      	cmp	r2, #253	@ 0xfd
 8000d46:	f63f af50 	bhi.w	8000bea <__aeabi_fmul+0x92>
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d50:	bf08      	it	eq
 8000d52:	f020 0001 	biceq.w	r0, r0, #1
 8000d56:	4770      	bx	lr
 8000d58:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d60:	327f      	adds	r2, #127	@ 0x7f
 8000d62:	bfc2      	ittt	gt
 8000d64:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6c:	4770      	bxgt	lr
 8000d6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d72:	f04f 0300 	mov.w	r3, #0
 8000d76:	3a01      	subs	r2, #1
 8000d78:	e737      	b.n	8000bea <__aeabi_fmul+0x92>
 8000d7a:	f092 0f00 	teq	r2, #0
 8000d7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d82:	bf02      	ittt	eq
 8000d84:	0040      	lsleq	r0, r0, #1
 8000d86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d8a:	3a01      	subeq	r2, #1
 8000d8c:	d0f9      	beq.n	8000d82 <__aeabi_fdiv+0xc2>
 8000d8e:	ea40 000c 	orr.w	r0, r0, ip
 8000d92:	f093 0f00 	teq	r3, #0
 8000d96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d9a:	bf02      	ittt	eq
 8000d9c:	0049      	lsleq	r1, r1, #1
 8000d9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000da2:	3b01      	subeq	r3, #1
 8000da4:	d0f9      	beq.n	8000d9a <__aeabi_fdiv+0xda>
 8000da6:	ea41 010c 	orr.w	r1, r1, ip
 8000daa:	e795      	b.n	8000cd8 <__aeabi_fdiv+0x18>
 8000dac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db0:	ea92 0f0c 	teq	r2, ip
 8000db4:	d108      	bne.n	8000dc8 <__aeabi_fdiv+0x108>
 8000db6:	0242      	lsls	r2, r0, #9
 8000db8:	f47f af7d 	bne.w	8000cb6 <__aeabi_fmul+0x15e>
 8000dbc:	ea93 0f0c 	teq	r3, ip
 8000dc0:	f47f af70 	bne.w	8000ca4 <__aeabi_fmul+0x14c>
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e776      	b.n	8000cb6 <__aeabi_fmul+0x15e>
 8000dc8:	ea93 0f0c 	teq	r3, ip
 8000dcc:	d104      	bne.n	8000dd8 <__aeabi_fdiv+0x118>
 8000dce:	024b      	lsls	r3, r1, #9
 8000dd0:	f43f af4c 	beq.w	8000c6c <__aeabi_fmul+0x114>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e76e      	b.n	8000cb6 <__aeabi_fmul+0x15e>
 8000dd8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ddc:	bf18      	it	ne
 8000dde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000de2:	d1ca      	bne.n	8000d7a <__aeabi_fdiv+0xba>
 8000de4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000de8:	f47f af5c 	bne.w	8000ca4 <__aeabi_fmul+0x14c>
 8000dec:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000df0:	f47f af3c 	bne.w	8000c6c <__aeabi_fmul+0x114>
 8000df4:	e75f      	b.n	8000cb6 <__aeabi_fmul+0x15e>
 8000df6:	bf00      	nop

08000df8 <__gesf2>:
 8000df8:	f04f 3cff 	mov.w	ip, #4294967295
 8000dfc:	e006      	b.n	8000e0c <__cmpsf2+0x4>
 8000dfe:	bf00      	nop

08000e00 <__lesf2>:
 8000e00:	f04f 0c01 	mov.w	ip, #1
 8000e04:	e002      	b.n	8000e0c <__cmpsf2+0x4>
 8000e06:	bf00      	nop

08000e08 <__cmpsf2>:
 8000e08:	f04f 0c01 	mov.w	ip, #1
 8000e0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e1c:	bf18      	it	ne
 8000e1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e22:	d011      	beq.n	8000e48 <__cmpsf2+0x40>
 8000e24:	b001      	add	sp, #4
 8000e26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e2a:	bf18      	it	ne
 8000e2c:	ea90 0f01 	teqne	r0, r1
 8000e30:	bf58      	it	pl
 8000e32:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e36:	bf88      	it	hi
 8000e38:	17c8      	asrhi	r0, r1, #31
 8000e3a:	bf38      	it	cc
 8000e3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e40:	bf18      	it	ne
 8000e42:	f040 0001 	orrne.w	r0, r0, #1
 8000e46:	4770      	bx	lr
 8000e48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e4c:	d102      	bne.n	8000e54 <__cmpsf2+0x4c>
 8000e4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e52:	d105      	bne.n	8000e60 <__cmpsf2+0x58>
 8000e54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e58:	d1e4      	bne.n	8000e24 <__cmpsf2+0x1c>
 8000e5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e5e:	d0e1      	beq.n	8000e24 <__cmpsf2+0x1c>
 8000e60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <__aeabi_cfrcmple>:
 8000e68:	4684      	mov	ip, r0
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	4661      	mov	r1, ip
 8000e6e:	e7ff      	b.n	8000e70 <__aeabi_cfcmpeq>

08000e70 <__aeabi_cfcmpeq>:
 8000e70:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e72:	f7ff ffc9 	bl	8000e08 <__cmpsf2>
 8000e76:	2800      	cmp	r0, #0
 8000e78:	bf48      	it	mi
 8000e7a:	f110 0f00 	cmnmi.w	r0, #0
 8000e7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e80 <__aeabi_fcmpeq>:
 8000e80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e84:	f7ff fff4 	bl	8000e70 <__aeabi_cfcmpeq>
 8000e88:	bf0c      	ite	eq
 8000e8a:	2001      	moveq	r0, #1
 8000e8c:	2000      	movne	r0, #0
 8000e8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e92:	bf00      	nop

08000e94 <__aeabi_fcmplt>:
 8000e94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e98:	f7ff ffea 	bl	8000e70 <__aeabi_cfcmpeq>
 8000e9c:	bf34      	ite	cc
 8000e9e:	2001      	movcc	r0, #1
 8000ea0:	2000      	movcs	r0, #0
 8000ea2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_fcmple>:
 8000ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eac:	f7ff ffe0 	bl	8000e70 <__aeabi_cfcmpeq>
 8000eb0:	bf94      	ite	ls
 8000eb2:	2001      	movls	r0, #1
 8000eb4:	2000      	movhi	r0, #0
 8000eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eba:	bf00      	nop

08000ebc <__aeabi_fcmpge>:
 8000ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec0:	f7ff ffd2 	bl	8000e68 <__aeabi_cfrcmple>
 8000ec4:	bf94      	ite	ls
 8000ec6:	2001      	movls	r0, #1
 8000ec8:	2000      	movhi	r0, #0
 8000eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ece:	bf00      	nop

08000ed0 <__aeabi_fcmpgt>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff ffc8 	bl	8000e68 <__aeabi_cfrcmple>
 8000ed8:	bf34      	ite	cc
 8000eda:	2001      	movcc	r0, #1
 8000edc:	2000      	movcs	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmpun>:
 8000ee4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ee8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ef0:	d102      	bne.n	8000ef8 <__aeabi_fcmpun+0x14>
 8000ef2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef6:	d108      	bne.n	8000f0a <__aeabi_fcmpun+0x26>
 8000ef8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000efc:	d102      	bne.n	8000f04 <__aeabi_fcmpun+0x20>
 8000efe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f02:	d102      	bne.n	8000f0a <__aeabi_fcmpun+0x26>
 8000f04:	f04f 0000 	mov.w	r0, #0
 8000f08:	4770      	bx	lr
 8000f0a:	f04f 0001 	mov.w	r0, #1
 8000f0e:	4770      	bx	lr

08000f10 <__aeabi_f2iz>:
 8000f10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f14:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f18:	d30f      	bcc.n	8000f3a <__aeabi_f2iz+0x2a>
 8000f1a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f22:	d90d      	bls.n	8000f40 <__aeabi_f2iz+0x30>
 8000f24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f2c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f30:	fa23 f002 	lsr.w	r0, r3, r2
 8000f34:	bf18      	it	ne
 8000f36:	4240      	negne	r0, r0
 8000f38:	4770      	bx	lr
 8000f3a:	f04f 0000 	mov.w	r0, #0
 8000f3e:	4770      	bx	lr
 8000f40:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f44:	d101      	bne.n	8000f4a <__aeabi_f2iz+0x3a>
 8000f46:	0242      	lsls	r2, r0, #9
 8000f48:	d105      	bne.n	8000f56 <__aeabi_f2iz+0x46>
 8000f4a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f4e:	bf08      	it	eq
 8000f50:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f54:	4770      	bx	lr
 8000f56:	f04f 0000 	mov.w	r0, #0
 8000f5a:	4770      	bx	lr

08000f5c <__aeabi_f2uiz>:
 8000f5c:	0042      	lsls	r2, r0, #1
 8000f5e:	d20e      	bcs.n	8000f7e <__aeabi_f2uiz+0x22>
 8000f60:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f64:	d30b      	bcc.n	8000f7e <__aeabi_f2uiz+0x22>
 8000f66:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6e:	d409      	bmi.n	8000f84 <__aeabi_f2uiz+0x28>
 8000f70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f78:	fa23 f002 	lsr.w	r0, r3, r2
 8000f7c:	4770      	bx	lr
 8000f7e:	f04f 0000 	mov.w	r0, #0
 8000f82:	4770      	bx	lr
 8000f84:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f88:	d101      	bne.n	8000f8e <__aeabi_f2uiz+0x32>
 8000f8a:	0242      	lsls	r2, r0, #9
 8000f8c:	d102      	bne.n	8000f94 <__aeabi_f2uiz+0x38>
 8000f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f92:	4770      	bx	lr
 8000f94:	f04f 0000 	mov.w	r0, #0
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <LCD_Paint_DrawPixel>:
#include <stdlib.h>
#include <math.h>
#define _swap_int16_t(a, b) { int16_t t = a; a = b; b = t; }
#define min(a, b) (((a) < (b)) ? (a) : (b))

void LCD_Paint_DrawPixel(LCD128_HandleTypeDef* lcd, int16_t x, int16_t y, uint16_t color) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4603      	mov	r3, r0
 8000fac:	817b      	strh	r3, [r7, #10]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	813b      	strh	r3, [r7, #8]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	80fb      	strh	r3, [r7, #6]
    LCD128_DrawPixel(lcd, x, y, color);
 8000fb6:	8979      	ldrh	r1, [r7, #10]
 8000fb8:	893a      	ldrh	r2, [r7, #8]
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f000 feb7 	bl	8001d30 <LCD128_DrawPixel>
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <LCD_Paint_WritePixel>:

void LCD_Paint_FillRect(LCD128_HandleTypeDef* lcd, int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
    LCD128_FillRectangle(lcd, x, y, w, h, color);
}

void LCD_Paint_WritePixel(LCD128_HandleTypeDef* lcd, int16_t x, int16_t y, uint16_t color) {
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	60f8      	str	r0, [r7, #12]
 8000fd2:	4608      	mov	r0, r1
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4603      	mov	r3, r0
 8000fda:	817b      	strh	r3, [r7, #10]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	813b      	strh	r3, [r7, #8]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	80fb      	strh	r3, [r7, #6]
    LCD_Paint_DrawPixel(lcd, x, y, color);
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000fea:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f7ff ffd4 	bl	8000f9c <LCD_Paint_DrawPixel>
}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <LCD_Paint_WriteLine>:

void LCD_Paint_WriteLine(LCD128_HandleTypeDef* lcd, int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	@ 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	4608      	mov	r0, r1
 8001006:	4611      	mov	r1, r2
 8001008:	461a      	mov	r2, r3
 800100a:	4603      	mov	r3, r0
 800100c:	817b      	strh	r3, [r7, #10]
 800100e:	460b      	mov	r3, r1
 8001010:	813b      	strh	r3, [r7, #8]
 8001012:	4613      	mov	r3, r2
 8001014:	80fb      	strh	r3, [r7, #6]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001016:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 800101a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001024:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001028:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800102c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001030:	1acb      	subs	r3, r1, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	bfb8      	it	lt
 8001036:	425b      	neglt	r3, r3
 8001038:	429a      	cmp	r2, r3
 800103a:	bfcc      	ite	gt
 800103c:	2301      	movgt	r3, #1
 800103e:	2300      	movle	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	84bb      	strh	r3, [r7, #36]	@ 0x24
    if (steep) {
 8001044:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00b      	beq.n	8001064 <LCD_Paint_WriteLine+0x68>
        _swap_int16_t(x0, y0);
 800104c:	897b      	ldrh	r3, [r7, #10]
 800104e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001050:	893b      	ldrh	r3, [r7, #8]
 8001052:	817b      	strh	r3, [r7, #10]
 8001054:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001056:	813b      	strh	r3, [r7, #8]
        _swap_int16_t(x1, y1);
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	843b      	strh	r3, [r7, #32]
 800105c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800105e:	80fb      	strh	r3, [r7, #6]
 8001060:	8c3b      	ldrh	r3, [r7, #32]
 8001062:	863b      	strh	r3, [r7, #48]	@ 0x30
    }
    if (x0 > x1) {
 8001064:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106c:	429a      	cmp	r2, r3
 800106e:	dd0b      	ble.n	8001088 <LCD_Paint_WriteLine+0x8c>
        _swap_int16_t(x0, x1);
 8001070:	897b      	ldrh	r3, [r7, #10]
 8001072:	83fb      	strh	r3, [r7, #30]
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	817b      	strh	r3, [r7, #10]
 8001078:	8bfb      	ldrh	r3, [r7, #30]
 800107a:	80fb      	strh	r3, [r7, #6]
        _swap_int16_t(y0, y1);
 800107c:	893b      	ldrh	r3, [r7, #8]
 800107e:	83bb      	strh	r3, [r7, #28]
 8001080:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001082:	813b      	strh	r3, [r7, #8]
 8001084:	8bbb      	ldrh	r3, [r7, #28]
 8001086:	863b      	strh	r3, [r7, #48]	@ 0x30
    }
    int16_t dx = x1 - x0;
 8001088:	88fa      	ldrh	r2, [r7, #6]
 800108a:	897b      	ldrh	r3, [r7, #10]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	b29b      	uxth	r3, r3
 8001090:	837b      	strh	r3, [r7, #26]
    int16_t dy = abs(y1 - y0);
 8001092:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 8001096:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	bfb8      	it	lt
 80010a0:	425b      	neglt	r3, r3
 80010a2:	833b      	strh	r3, [r7, #24]
    int16_t err = dx / 2;
 80010a4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010a8:	0fda      	lsrs	r2, r3, #31
 80010aa:	4413      	add	r3, r2
 80010ac:	105b      	asrs	r3, r3, #1
 80010ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
    int16_t ystep = (y0 < y1) ? 1 : -1;
 80010b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80010b4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80010b8:	429a      	cmp	r2, r3
 80010ba:	da01      	bge.n	80010c0 <LCD_Paint_WriteLine+0xc4>
 80010bc:	2301      	movs	r3, #1
 80010be:	e001      	b.n	80010c4 <LCD_Paint_WriteLine+0xc8>
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	82fb      	strh	r3, [r7, #22]
    for (; x0 <= x1; x0++) {
 80010c6:	e02d      	b.n	8001124 <LCD_Paint_WriteLine+0x128>
        if (steep) {
 80010c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d008      	beq.n	80010e2 <LCD_Paint_WriteLine+0xe6>
            LCD_Paint_WritePixel(lcd, y0, x0, color);
 80010d0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80010d2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80010d6:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f7ff ff75 	bl	8000fca <LCD_Paint_WritePixel>
 80010e0:	e007      	b.n	80010f2 <LCD_Paint_WriteLine+0xf6>
        } else {
            LCD_Paint_WritePixel(lcd, x0, y0, color);
 80010e2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80010e4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80010e8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f7ff ff6c 	bl	8000fca <LCD_Paint_WritePixel>
        }
        err -= dy;
 80010f2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80010f4:	8b3b      	ldrh	r3, [r7, #24]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
        if (err < 0) {
 80010fc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001100:	2b00      	cmp	r3, #0
 8001102:	da09      	bge.n	8001118 <LCD_Paint_WriteLine+0x11c>
            y0 += ystep;
 8001104:	893a      	ldrh	r2, [r7, #8]
 8001106:	8afb      	ldrh	r3, [r7, #22]
 8001108:	4413      	add	r3, r2
 800110a:	b29b      	uxth	r3, r3
 800110c:	813b      	strh	r3, [r7, #8]
            err += dx;
 800110e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001110:	8b7b      	ldrh	r3, [r7, #26]
 8001112:	4413      	add	r3, r2
 8001114:	b29b      	uxth	r3, r3
 8001116:	84fb      	strh	r3, [r7, #38]	@ 0x26
    for (; x0 <= x1; x0++) {
 8001118:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800111c:	b29b      	uxth	r3, r3
 800111e:	3301      	adds	r3, #1
 8001120:	b29b      	uxth	r3, r3
 8001122:	817b      	strh	r3, [r7, #10]
 8001124:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800112c:	429a      	cmp	r2, r3
 800112e:	ddcb      	ble.n	80010c8 <LCD_Paint_WriteLine+0xcc>
        }
    }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	@ 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <LCD_Paint_DrawFastVLine>:

void LCD_Paint_DrawFastVLine(LCD128_HandleTypeDef* lcd, int16_t x, int16_t y, int16_t h, uint16_t color) {
 800113a:	b590      	push	{r4, r7, lr}
 800113c:	b087      	sub	sp, #28
 800113e:	af02      	add	r7, sp, #8
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	4608      	mov	r0, r1
 8001144:	4611      	mov	r1, r2
 8001146:	461a      	mov	r2, r3
 8001148:	4603      	mov	r3, r0
 800114a:	817b      	strh	r3, [r7, #10]
 800114c:	460b      	mov	r3, r1
 800114e:	813b      	strh	r3, [r7, #8]
 8001150:	4613      	mov	r3, r2
 8001152:	80fb      	strh	r3, [r7, #6]
    LCD_Paint_WriteLine(lcd, x, y, x, y + h - 1, color);
 8001154:	893a      	ldrh	r2, [r7, #8]
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	4413      	add	r3, r2
 800115a:	b29b      	uxth	r3, r3
 800115c:	3b01      	subs	r3, #1
 800115e:	b29b      	uxth	r3, r3
 8001160:	b21b      	sxth	r3, r3
 8001162:	f9b7 400a 	ldrsh.w	r4, [r7, #10]
 8001166:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 800116a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800116e:	8c3a      	ldrh	r2, [r7, #32]
 8001170:	9201      	str	r2, [sp, #4]
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	4623      	mov	r3, r4
 8001176:	4602      	mov	r2, r0
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f7ff ff3f 	bl	8000ffc <LCD_Paint_WriteLine>
}
 800117e:	bf00      	nop
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	bd90      	pop	{r4, r7, pc}

08001186 <LCD_Paint_FillCircleHelper>:
            LCD_Paint_WritePixel(lcd, x0 - x, y0 - y, color);
        }
    }
}

void LCD_Paint_FillCircleHelper(LCD128_HandleTypeDef* lcd, int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color) {
 8001186:	b580      	push	{r7, lr}
 8001188:	b08a      	sub	sp, #40	@ 0x28
 800118a:	af02      	add	r7, sp, #8
 800118c:	60f8      	str	r0, [r7, #12]
 800118e:	4608      	mov	r0, r1
 8001190:	4611      	mov	r1, r2
 8001192:	461a      	mov	r2, r3
 8001194:	4603      	mov	r3, r0
 8001196:	817b      	strh	r3, [r7, #10]
 8001198:	460b      	mov	r3, r1
 800119a:	813b      	strh	r3, [r7, #8]
 800119c:	4613      	mov	r3, r2
 800119e:	80fb      	strh	r3, [r7, #6]
    int16_t f = 1 - r;
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	f1c3 0301 	rsb	r3, r3, #1
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	461a      	mov	r2, r3
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	837b      	strh	r3, [r7, #26]
    int16_t x = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	833b      	strh	r3, [r7, #24]
    int16_t y = r;
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	82fb      	strh	r3, [r7, #22]
    int16_t px = x;
 80011c4:	8b3b      	ldrh	r3, [r7, #24]
 80011c6:	82bb      	strh	r3, [r7, #20]
    int16_t py = y;
 80011c8:	8afb      	ldrh	r3, [r7, #22]
 80011ca:	827b      	strh	r3, [r7, #18]
    delta++;
 80011cc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	3301      	adds	r3, #1
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    while (x < y) {
 80011d8:	e0a9      	b.n	800132e <LCD_Paint_FillCircleHelper+0x1a8>
        if (f >= 0) {
 80011da:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db0e      	blt.n	8001200 <LCD_Paint_FillCircleHelper+0x7a>
            y--;
 80011e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	3b01      	subs	r3, #1
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80011ee:	8b7b      	ldrh	r3, [r7, #26]
 80011f0:	3302      	adds	r3, #2
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	837b      	strh	r3, [r7, #26]
            f += ddF_y;
 80011f6:	8bfa      	ldrh	r2, [r7, #30]
 80011f8:	8b7b      	ldrh	r3, [r7, #26]
 80011fa:	4413      	add	r3, r2
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8001200:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001204:	b29b      	uxth	r3, r3
 8001206:	3301      	adds	r3, #1
 8001208:	b29b      	uxth	r3, r3
 800120a:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 800120c:	8bbb      	ldrh	r3, [r7, #28]
 800120e:	3302      	adds	r3, #2
 8001210:	b29b      	uxth	r3, r3
 8001212:	83bb      	strh	r3, [r7, #28]
        f += ddF_x;
 8001214:	8bfa      	ldrh	r2, [r7, #30]
 8001216:	8bbb      	ldrh	r3, [r7, #28]
 8001218:	4413      	add	r3, r2
 800121a:	b29b      	uxth	r3, r3
 800121c:	83fb      	strh	r3, [r7, #30]
        if (x < (y + 1)) {
 800121e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001222:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001226:	429a      	cmp	r2, r3
 8001228:	db3b      	blt.n	80012a2 <LCD_Paint_FillCircleHelper+0x11c>
            if (corners & 1) LCD_Paint_DrawFastVLine(lcd, x0 + x, y0 - y, 2 * y + delta, color);
 800122a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d017      	beq.n	8001266 <LCD_Paint_FillCircleHelper+0xe0>
 8001236:	897a      	ldrh	r2, [r7, #10]
 8001238:	8b3b      	ldrh	r3, [r7, #24]
 800123a:	4413      	add	r3, r2
 800123c:	b29b      	uxth	r3, r3
 800123e:	b219      	sxth	r1, r3
 8001240:	893a      	ldrh	r2, [r7, #8]
 8001242:	8afb      	ldrh	r3, [r7, #22]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	b29b      	uxth	r3, r3
 8001248:	b218      	sxth	r0, r3
 800124a:	8afb      	ldrh	r3, [r7, #22]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	b29a      	uxth	r2, r3
 8001250:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001252:	4413      	add	r3, r2
 8001254:	b29b      	uxth	r3, r3
 8001256:	b21a      	sxth	r2, r3
 8001258:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	4613      	mov	r3, r2
 800125e:	4602      	mov	r2, r0
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f7ff ff6a 	bl	800113a <LCD_Paint_DrawFastVLine>
            if (corners & 2) LCD_Paint_DrawFastVLine(lcd, x0 - x, y0 - y, 2 * y + delta, color);
 8001266:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d017      	beq.n	80012a2 <LCD_Paint_FillCircleHelper+0x11c>
 8001272:	897a      	ldrh	r2, [r7, #10]
 8001274:	8b3b      	ldrh	r3, [r7, #24]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	b29b      	uxth	r3, r3
 800127a:	b219      	sxth	r1, r3
 800127c:	893a      	ldrh	r2, [r7, #8]
 800127e:	8afb      	ldrh	r3, [r7, #22]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	b29b      	uxth	r3, r3
 8001284:	b218      	sxth	r0, r3
 8001286:	8afb      	ldrh	r3, [r7, #22]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	b29a      	uxth	r2, r3
 800128c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800128e:	4413      	add	r3, r2
 8001290:	b29b      	uxth	r3, r3
 8001292:	b21a      	sxth	r2, r3
 8001294:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	4613      	mov	r3, r2
 800129a:	4602      	mov	r2, r0
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f7ff ff4c 	bl	800113a <LCD_Paint_DrawFastVLine>
        }
        if (y != py) {
 80012a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80012a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d03d      	beq.n	800132a <LCD_Paint_FillCircleHelper+0x1a4>
            if (corners & 1) LCD_Paint_DrawFastVLine(lcd, x0 + py, y0 - px, 2 * px + delta, color);
 80012ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d017      	beq.n	80012ea <LCD_Paint_FillCircleHelper+0x164>
 80012ba:	897a      	ldrh	r2, [r7, #10]
 80012bc:	8a7b      	ldrh	r3, [r7, #18]
 80012be:	4413      	add	r3, r2
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	b219      	sxth	r1, r3
 80012c4:	893a      	ldrh	r2, [r7, #8]
 80012c6:	8abb      	ldrh	r3, [r7, #20]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	b218      	sxth	r0, r3
 80012ce:	8abb      	ldrh	r3, [r7, #20]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80012d6:	4413      	add	r3, r2
 80012d8:	b29b      	uxth	r3, r3
 80012da:	b21a      	sxth	r2, r3
 80012dc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	4613      	mov	r3, r2
 80012e2:	4602      	mov	r2, r0
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f7ff ff28 	bl	800113a <LCD_Paint_DrawFastVLine>
            if (corners & 2) LCD_Paint_DrawFastVLine(lcd, x0 - py, y0 - px, 2 * px + delta, color);
 80012ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d017      	beq.n	8001326 <LCD_Paint_FillCircleHelper+0x1a0>
 80012f6:	897a      	ldrh	r2, [r7, #10]
 80012f8:	8a7b      	ldrh	r3, [r7, #18]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	b219      	sxth	r1, r3
 8001300:	893a      	ldrh	r2, [r7, #8]
 8001302:	8abb      	ldrh	r3, [r7, #20]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	b29b      	uxth	r3, r3
 8001308:	b218      	sxth	r0, r3
 800130a:	8abb      	ldrh	r3, [r7, #20]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	b29a      	uxth	r2, r3
 8001310:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001312:	4413      	add	r3, r2
 8001314:	b29b      	uxth	r3, r3
 8001316:	b21a      	sxth	r2, r3
 8001318:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4613      	mov	r3, r2
 800131e:	4602      	mov	r2, r0
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f7ff ff0a 	bl	800113a <LCD_Paint_DrawFastVLine>
            py = y;
 8001326:	8afb      	ldrh	r3, [r7, #22]
 8001328:	827b      	strh	r3, [r7, #18]
        }
        px = x;
 800132a:	8b3b      	ldrh	r3, [r7, #24]
 800132c:	82bb      	strh	r3, [r7, #20]
    while (x < y) {
 800132e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001332:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001336:	429a      	cmp	r2, r3
 8001338:	f6ff af4f 	blt.w	80011da <LCD_Paint_FillCircleHelper+0x54>
    }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3720      	adds	r7, #32
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <LCD_Paint_FillCircle>:

void LCD_Paint_FillCircle(LCD128_HandleTypeDef* lcd, int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8001346:	b580      	push	{r7, lr}
 8001348:	b088      	sub	sp, #32
 800134a:	af04      	add	r7, sp, #16
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	4608      	mov	r0, r1
 8001350:	4611      	mov	r1, r2
 8001352:	461a      	mov	r2, r3
 8001354:	4603      	mov	r3, r0
 8001356:	817b      	strh	r3, [r7, #10]
 8001358:	460b      	mov	r3, r1
 800135a:	813b      	strh	r3, [r7, #8]
 800135c:	4613      	mov	r3, r2
 800135e:	80fb      	strh	r3, [r7, #6]
    LCD_Paint_DrawFastVLine(lcd, x0, y0 - r, 2 * r + 1, color);
 8001360:	893a      	ldrh	r2, [r7, #8]
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	b29b      	uxth	r3, r3
 8001368:	b21a      	sxth	r2, r3
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	b29b      	uxth	r3, r3
 8001370:	3301      	adds	r3, #1
 8001372:	b29b      	uxth	r3, r3
 8001374:	b218      	sxth	r0, r3
 8001376:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800137a:	8b3b      	ldrh	r3, [r7, #24]
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	4603      	mov	r3, r0
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f7ff feda 	bl	800113a <LCD_Paint_DrawFastVLine>
    LCD_Paint_FillCircleHelper(lcd, x0, y0, r, 3, 0, color);
 8001386:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800138a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800138e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001392:	8b3b      	ldrh	r3, [r7, #24]
 8001394:	9302      	str	r3, [sp, #8]
 8001396:	2300      	movs	r3, #0
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	2303      	movs	r3, #3
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	4603      	mov	r3, r0
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f7ff fef0 	bl	8001186 <LCD_Paint_FillCircleHelper>
}
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <LCD_Paint_DrawDashedEllipse>:
        if (a > b) _swap_int16_t(a, b);
        LCD_Paint_DrawFastHLine(lcd, a, y, b - a + 1, color);
    }
}

void LCD_Paint_DrawDashedEllipse(LCD128_HandleTypeDef* lcd, int16_t x0, int16_t y0, int16_t rx, int16_t ry, int dashStep, int dashLength, int dotRadius, uint16_t color) {
 80013b0:	b5b0      	push	{r4, r5, r7, lr}
 80013b2:	b08c      	sub	sp, #48	@ 0x30
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	4608      	mov	r0, r1
 80013ba:	4611      	mov	r1, r2
 80013bc:	461a      	mov	r2, r3
 80013be:	4603      	mov	r3, r0
 80013c0:	817b      	strh	r3, [r7, #10]
 80013c2:	460b      	mov	r3, r1
 80013c4:	813b      	strh	r3, [r7, #8]
 80013c6:	4613      	mov	r3, r2
 80013c8:	80fb      	strh	r3, [r7, #6]
    for (int angle = 0; angle < 360; angle += dashStep) {
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80013ce:	e06a      	b.n	80014a6 <LCD_Paint_DrawDashedEllipse+0xf6>
        for (int i = 0; i < dashLength; i++) {
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
 80013d4:	e05f      	b.n	8001496 <LCD_Paint_DrawDashedEllipse+0xe6>
            float theta = (angle + i) * 3.14159f / 180.0f;
 80013d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013d8:	6a3b      	ldr	r3, [r7, #32]
 80013da:	4413      	add	r3, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fb67 	bl	8000ab0 <__aeabi_i2f>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4934      	ldr	r1, [pc, #208]	@ (80014b8 <LCD_Paint_DrawDashedEllipse+0x108>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fbb6 	bl	8000b58 <__aeabi_fmul>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4933      	ldr	r1, [pc, #204]	@ (80014bc <LCD_Paint_DrawDashedEllipse+0x10c>)
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fc65 	bl	8000cc0 <__aeabi_fdiv>
 80013f6:	4603      	mov	r3, r0
 80013f8:	61fb      	str	r3, [r7, #28]
            int x = x0 + rx * cosf(theta);
 80013fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fb56 	bl	8000ab0 <__aeabi_i2f>
 8001404:	4604      	mov	r4, r0
 8001406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fb50 	bl	8000ab0 <__aeabi_i2f>
 8001410:	4605      	mov	r5, r0
 8001412:	69f8      	ldr	r0, [r7, #28]
 8001414:	f005 f8f4 	bl	8006600 <cosf>
 8001418:	4603      	mov	r3, r0
 800141a:	4619      	mov	r1, r3
 800141c:	4628      	mov	r0, r5
 800141e:	f7ff fb9b 	bl	8000b58 <__aeabi_fmul>
 8001422:	4603      	mov	r3, r0
 8001424:	4619      	mov	r1, r3
 8001426:	4620      	mov	r0, r4
 8001428:	f7ff fa8e 	bl	8000948 <__addsf3>
 800142c:	4603      	mov	r3, r0
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fd6e 	bl	8000f10 <__aeabi_f2iz>
 8001434:	4603      	mov	r3, r0
 8001436:	61bb      	str	r3, [r7, #24]
            int y = y0 + ry * sinf(theta);
 8001438:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fb37 	bl	8000ab0 <__aeabi_i2f>
 8001442:	4604      	mov	r4, r0
 8001444:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fb31 	bl	8000ab0 <__aeabi_i2f>
 800144e:	4605      	mov	r5, r0
 8001450:	69f8      	ldr	r0, [r7, #28]
 8001452:	f005 f90d 	bl	8006670 <sinf>
 8001456:	4603      	mov	r3, r0
 8001458:	4619      	mov	r1, r3
 800145a:	4628      	mov	r0, r5
 800145c:	f7ff fb7c 	bl	8000b58 <__aeabi_fmul>
 8001460:	4603      	mov	r3, r0
 8001462:	4619      	mov	r1, r3
 8001464:	4620      	mov	r0, r4
 8001466:	f7ff fa6f 	bl	8000948 <__addsf3>
 800146a:	4603      	mov	r3, r0
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fd4f 	bl	8000f10 <__aeabi_f2iz>
 8001472:	4603      	mov	r3, r0
 8001474:	617b      	str	r3, [r7, #20]
            LCD_Paint_FillCircle(lcd, x, y, dotRadius, color);
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	b219      	sxth	r1, r3
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	b21a      	sxth	r2, r3
 800147e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001480:	b218      	sxth	r0, r3
 8001482:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	4603      	mov	r3, r0
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f7ff ff5b 	bl	8001346 <LCD_Paint_FillCircle>
        for (int i = 0; i < dashLength; i++) {
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	3301      	adds	r3, #1
 8001494:	623b      	str	r3, [r7, #32]
 8001496:	6a3a      	ldr	r2, [r7, #32]
 8001498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800149a:	429a      	cmp	r2, r3
 800149c:	db9b      	blt.n	80013d6 <LCD_Paint_DrawDashedEllipse+0x26>
    for (int angle = 0; angle < 360; angle += dashStep) {
 800149e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014a2:	4413      	add	r3, r2
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80014a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a8:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80014ac:	db90      	blt.n	80013d0 <LCD_Paint_DrawDashedEllipse+0x20>
//            LCD_Paint_FillCircle(lcd, x + 3, y + 3, dotRadius, color);
        }
    }
} 
 80014ae:	bf00      	nop
 80014b0:	bf00      	nop
 80014b2:	3728      	adds	r7, #40	@ 0x28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bdb0      	pop	{r4, r5, r7, pc}
 80014b8:	40490fd0 	.word	0x40490fd0
 80014bc:	43340000 	.word	0x43340000

080014c0 <LCD128_CS_0>:
#define LCD128_MADCTL  0x36
#define LCD128_COLMOD  0x3A
#define LCD128_INVON   0x21
#define LCD128_INVOFF  0x20

static void LCD128_CS_0(LCD128_HandleTypeDef* lcd) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, GPIO_PIN_RESET);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6858      	ldr	r0, [r3, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	891b      	ldrh	r3, [r3, #8]
 80014d0:	2200      	movs	r2, #0
 80014d2:	4619      	mov	r1, r3
 80014d4:	f003 f8d6 	bl	8004684 <HAL_GPIO_WritePin>
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <LCD128_CS_1>:
static void LCD128_CS_1(LCD128_HandleTypeDef* lcd) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, GPIO_PIN_SET);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6858      	ldr	r0, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	891b      	ldrh	r3, [r3, #8]
 80014f0:	2201      	movs	r2, #1
 80014f2:	4619      	mov	r1, r3
 80014f4:	f003 f8c6 	bl	8004684 <HAL_GPIO_WritePin>
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <LCD128_DC_0>:
static void LCD128_DC_0(LCD128_HandleTypeDef* lcd) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->DC_Port, lcd->DC_Pin, GPIO_PIN_RESET);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68d8      	ldr	r0, [r3, #12]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	8a1b      	ldrh	r3, [r3, #16]
 8001510:	2200      	movs	r2, #0
 8001512:	4619      	mov	r1, r3
 8001514:	f003 f8b6 	bl	8004684 <HAL_GPIO_WritePin>
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <LCD128_DC_1>:
static void LCD128_DC_1(LCD128_HandleTypeDef* lcd) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->DC_Port, lcd->DC_Pin, GPIO_PIN_SET);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68d8      	ldr	r0, [r3, #12]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	8a1b      	ldrh	r3, [r3, #16]
 8001530:	2201      	movs	r2, #1
 8001532:	4619      	mov	r1, r3
 8001534:	f003 f8a6 	bl	8004684 <HAL_GPIO_WritePin>
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <LCD128_RST_0>:
static void LCD128_RST_0(LCD128_HandleTypeDef* lcd) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->RST_Port, lcd->RST_Pin, GPIO_PIN_RESET);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6958      	ldr	r0, [r3, #20]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	8b1b      	ldrh	r3, [r3, #24]
 8001550:	2200      	movs	r2, #0
 8001552:	4619      	mov	r1, r3
 8001554:	f003 f896 	bl	8004684 <HAL_GPIO_WritePin>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <LCD128_RST_1>:
static void LCD128_RST_1(LCD128_HandleTypeDef* lcd) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->RST_Port, lcd->RST_Pin, GPIO_PIN_SET);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6958      	ldr	r0, [r3, #20]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	8b1b      	ldrh	r3, [r3, #24]
 8001570:	2201      	movs	r2, #1
 8001572:	4619      	mov	r1, r3
 8001574:	f003 f886 	bl	8004684 <HAL_GPIO_WritePin>
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <LCD128_SPI_WRITE>:
static void LCD128_SPI_WRITE(LCD128_HandleTypeDef* lcd, uint8_t byte) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	70fb      	strb	r3, [r7, #3]
    HAL_SPI_Transmit(lcd->hspi, &byte, 1, HAL_MAX_DELAY);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	1cf9      	adds	r1, r7, #3
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	2201      	movs	r2, #1
 8001598:	f003 fcee 	bl	8004f78 <HAL_SPI_Transmit>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <LCD128_DELAY>:
static void LCD128_DELAY(uint32_t ms) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f002 fbc5 	bl	8003d3c <HAL_Delay>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <LCD128_WriteCommand>:

static void LCD128_WriteCommand(LCD128_HandleTypeDef* lcd, uint8_t cmd) {
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	460b      	mov	r3, r1
 80015c4:	70fb      	strb	r3, [r7, #3]
    LCD128_DC_0(lcd);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ff9a 	bl	8001500 <LCD128_DC_0>
    LCD128_CS_0(lcd);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ff77 	bl	80014c0 <LCD128_CS_0>
    LCD128_SPI_WRITE(lcd, cmd);
 80015d2:	78fb      	ldrb	r3, [r7, #3]
 80015d4:	4619      	mov	r1, r3
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ffd2 	bl	8001580 <LCD128_SPI_WRITE>
    LCD128_CS_1(lcd);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ff7f 	bl	80014e0 <LCD128_CS_1>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <LCD128_WriteData8>:

static void LCD128_WriteData8(LCD128_HandleTypeDef* lcd, uint8_t data) {
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	70fb      	strb	r3, [r7, #3]
    LCD128_DC_1(lcd);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ff92 	bl	8001520 <LCD128_DC_1>
    LCD128_CS_0(lcd);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ff5f 	bl	80014c0 <LCD128_CS_0>
    LCD128_SPI_WRITE(lcd, data);
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	4619      	mov	r1, r3
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ffba 	bl	8001580 <LCD128_SPI_WRITE>
    LCD128_CS_1(lcd);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff67 	bl	80014e0 <LCD128_CS_1>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <LCD128_WriteData16>:

static void LCD128_WriteData16(LCD128_HandleTypeDef* lcd, uint16_t data) {
 800161a:	b580      	push	{r7, lr}
 800161c:	b084      	sub	sp, #16
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	460b      	mov	r3, r1
 8001624:	807b      	strh	r3, [r7, #2]
    LCD128_DC_1(lcd);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ff7a 	bl	8001520 <LCD128_DC_1>
    LCD128_CS_0(lcd);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff47 	bl	80014c0 <LCD128_CS_0>
    uint8_t hi = data >> 8, lo = data & 0xFF;
 8001632:	887b      	ldrh	r3, [r7, #2]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	b29b      	uxth	r3, r3
 8001638:	73fb      	strb	r3, [r7, #15]
 800163a:	887b      	ldrh	r3, [r7, #2]
 800163c:	73bb      	strb	r3, [r7, #14]
    LCD128_SPI_WRITE(lcd, hi);
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	4619      	mov	r1, r3
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ff9c 	bl	8001580 <LCD128_SPI_WRITE>
    LCD128_SPI_WRITE(lcd, lo);
 8001648:	7bbb      	ldrb	r3, [r7, #14]
 800164a:	4619      	mov	r1, r3
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff97 	bl	8001580 <LCD128_SPI_WRITE>
    LCD128_CS_1(lcd);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ff44 	bl	80014e0 <LCD128_CS_1>
}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <LCD128_Reset>:
        LCD128_SPI_WRITE(lcd, buff[i]);
    }
    LCD128_CS_1(lcd);
}

static void LCD128_Reset(LCD128_HandleTypeDef* lcd) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
    LCD128_RST_1(lcd);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff ff79 	bl	8001560 <LCD128_RST_1>
    LCD128_DELAY(100);
 800166e:	2064      	movs	r0, #100	@ 0x64
 8001670:	f7ff ff98 	bl	80015a4 <LCD128_DELAY>
    LCD128_RST_0(lcd);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ff63 	bl	8001540 <LCD128_RST_0>
    LCD128_DELAY(100);
 800167a:	2064      	movs	r0, #100	@ 0x64
 800167c:	f7ff ff92 	bl	80015a4 <LCD128_DELAY>
    LCD128_RST_1(lcd);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff6d 	bl	8001560 <LCD128_RST_1>
    LCD128_DELAY(100);
 8001686:	2064      	movs	r0, #100	@ 0x64
 8001688:	f7ff ff8c 	bl	80015a4 <LCD128_DELAY>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <LCD128_SetAddressWindow>:

void LCD128_SetAddressWindow(LCD128_HandleTypeDef* lcd, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	4608      	mov	r0, r1
 800169e:	4611      	mov	r1, r2
 80016a0:	461a      	mov	r2, r3
 80016a2:	4603      	mov	r3, r0
 80016a4:	817b      	strh	r3, [r7, #10]
 80016a6:	460b      	mov	r3, r1
 80016a8:	813b      	strh	r3, [r7, #8]
 80016aa:	4613      	mov	r3, r2
 80016ac:	80fb      	strh	r3, [r7, #6]
    LCD128_WriteCommand(lcd, LCD128_CASET);
 80016ae:	212a      	movs	r1, #42	@ 0x2a
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f7ff ff82 	bl	80015ba <LCD128_WriteCommand>
    LCD128_WriteData8(lcd, x0 >> 8);
 80016b6:	897b      	ldrh	r3, [r7, #10]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	4619      	mov	r1, r3
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f7ff ff92 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteData8(lcd, x0 & 0xFF);
 80016c6:	897b      	ldrh	r3, [r7, #10]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	4619      	mov	r1, r3
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f7ff ff8c 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteData8(lcd, x1 >> 8);
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	4619      	mov	r1, r3
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f7ff ff84 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteData8(lcd, x1 & 0xFF);
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	4619      	mov	r1, r3
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f7ff ff7e 	bl	80015ea <LCD128_WriteData8>

    LCD128_WriteCommand(lcd, LCD128_RASET);
 80016ee:	212b      	movs	r1, #43	@ 0x2b
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f7ff ff62 	bl	80015ba <LCD128_WriteCommand>
    LCD128_WriteData8(lcd, y0 >> 8);
 80016f6:	893b      	ldrh	r3, [r7, #8]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	4619      	mov	r1, r3
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f7ff ff72 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteData8(lcd, y0 & 0xFF);
 8001706:	893b      	ldrh	r3, [r7, #8]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	4619      	mov	r1, r3
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f7ff ff6c 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteData8(lcd, y1 >> 8);
 8001712:	8b3b      	ldrh	r3, [r7, #24]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	b29b      	uxth	r3, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	4619      	mov	r1, r3
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f7ff ff64 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteData8(lcd, y1 & 0xFF);
 8001722:	8b3b      	ldrh	r3, [r7, #24]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	4619      	mov	r1, r3
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f7ff ff5e 	bl	80015ea <LCD128_WriteData8>

    LCD128_WriteCommand(lcd, LCD128_RAMWR);
 800172e:	212c      	movs	r1, #44	@ 0x2c
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f7ff ff42 	bl	80015ba <LCD128_WriteCommand>
}
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <LCD128_Init>:

void LCD128_Init(LCD128_HandleTypeDef* lcd) {
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
    LCD128_Reset(lcd);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ff8a 	bl	8001660 <LCD128_Reset>
    // Chuỗi lệnh khởi tạo GC9A01 (tham khảo LCD_1in28.c)
    LCD128_WriteCommand(lcd, 0xEF);
 800174c:	21ef      	movs	r1, #239	@ 0xef
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ff33 	bl	80015ba <LCD128_WriteCommand>
    LCD128_WriteCommand(lcd, 0xEB); LCD128_WriteData8(lcd, 0x14);
 8001754:	21eb      	movs	r1, #235	@ 0xeb
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ff2f 	bl	80015ba <LCD128_WriteCommand>
 800175c:	2114      	movs	r1, #20
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ff43 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xFE);
 8001764:	21fe      	movs	r1, #254	@ 0xfe
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ff27 	bl	80015ba <LCD128_WriteCommand>
    LCD128_WriteCommand(lcd, 0xEF);
 800176c:	21ef      	movs	r1, #239	@ 0xef
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff ff23 	bl	80015ba <LCD128_WriteCommand>
    LCD128_WriteCommand(lcd, 0xEB); LCD128_WriteData8(lcd, 0x14);
 8001774:	21eb      	movs	r1, #235	@ 0xeb
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ff1f 	bl	80015ba <LCD128_WriteCommand>
 800177c:	2114      	movs	r1, #20
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ff33 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x84); LCD128_WriteData8(lcd, 0x40);
 8001784:	2184      	movs	r1, #132	@ 0x84
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ff17 	bl	80015ba <LCD128_WriteCommand>
 800178c:	2140      	movs	r1, #64	@ 0x40
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ff2b 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x85); LCD128_WriteData8(lcd, 0xFF);
 8001794:	2185      	movs	r1, #133	@ 0x85
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ff0f 	bl	80015ba <LCD128_WriteCommand>
 800179c:	21ff      	movs	r1, #255	@ 0xff
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ff23 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x86); LCD128_WriteData8(lcd, 0xFF);
 80017a4:	2186      	movs	r1, #134	@ 0x86
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ff07 	bl	80015ba <LCD128_WriteCommand>
 80017ac:	21ff      	movs	r1, #255	@ 0xff
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ff1b 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x87); LCD128_WriteData8(lcd, 0xFF);
 80017b4:	2187      	movs	r1, #135	@ 0x87
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff feff 	bl	80015ba <LCD128_WriteCommand>
 80017bc:	21ff      	movs	r1, #255	@ 0xff
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ff13 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x88); LCD128_WriteData8(lcd, 0x0A);
 80017c4:	2188      	movs	r1, #136	@ 0x88
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff fef7 	bl	80015ba <LCD128_WriteCommand>
 80017cc:	210a      	movs	r1, #10
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ff0b 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x89); LCD128_WriteData8(lcd, 0x21);
 80017d4:	2189      	movs	r1, #137	@ 0x89
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff feef 	bl	80015ba <LCD128_WriteCommand>
 80017dc:	2121      	movs	r1, #33	@ 0x21
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ff03 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8A); LCD128_WriteData8(lcd, 0x00);
 80017e4:	218a      	movs	r1, #138	@ 0x8a
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fee7 	bl	80015ba <LCD128_WriteCommand>
 80017ec:	2100      	movs	r1, #0
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff fefb 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8B); LCD128_WriteData8(lcd, 0x80);
 80017f4:	218b      	movs	r1, #139	@ 0x8b
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fedf 	bl	80015ba <LCD128_WriteCommand>
 80017fc:	2180      	movs	r1, #128	@ 0x80
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fef3 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8C); LCD128_WriteData8(lcd, 0x01);
 8001804:	218c      	movs	r1, #140	@ 0x8c
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fed7 	bl	80015ba <LCD128_WriteCommand>
 800180c:	2101      	movs	r1, #1
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff feeb 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8D); LCD128_WriteData8(lcd, 0x01);
 8001814:	218d      	movs	r1, #141	@ 0x8d
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff fecf 	bl	80015ba <LCD128_WriteCommand>
 800181c:	2101      	movs	r1, #1
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fee3 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8E); LCD128_WriteData8(lcd, 0xFF);
 8001824:	218e      	movs	r1, #142	@ 0x8e
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff fec7 	bl	80015ba <LCD128_WriteCommand>
 800182c:	21ff      	movs	r1, #255	@ 0xff
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fedb 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8F); LCD128_WriteData8(lcd, 0xFF);
 8001834:	218f      	movs	r1, #143	@ 0x8f
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff febf 	bl	80015ba <LCD128_WriteCommand>
 800183c:	21ff      	movs	r1, #255	@ 0xff
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff fed3 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xB6); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x20);
 8001844:	21b6      	movs	r1, #182	@ 0xb6
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff feb7 	bl	80015ba <LCD128_WriteCommand>
 800184c:	2100      	movs	r1, #0
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fecb 	bl	80015ea <LCD128_WriteData8>
 8001854:	2120      	movs	r1, #32
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff fec7 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x36); LCD128_WriteData8(lcd, 0x08); // vertical
 800185c:	2136      	movs	r1, #54	@ 0x36
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff feab 	bl	80015ba <LCD128_WriteCommand>
 8001864:	2108      	movs	r1, #8
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff febf 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x3A); LCD128_WriteData8(lcd, 0x05);
 800186c:	213a      	movs	r1, #58	@ 0x3a
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff fea3 	bl	80015ba <LCD128_WriteCommand>
 8001874:	2105      	movs	r1, #5
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff feb7 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x90); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08);
 800187c:	2190      	movs	r1, #144	@ 0x90
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fe9b 	bl	80015ba <LCD128_WriteCommand>
 8001884:	2108      	movs	r1, #8
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff feaf 	bl	80015ea <LCD128_WriteData8>
 800188c:	2108      	movs	r1, #8
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff feab 	bl	80015ea <LCD128_WriteData8>
 8001894:	2108      	movs	r1, #8
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff fea7 	bl	80015ea <LCD128_WriteData8>
 800189c:	2108      	movs	r1, #8
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff fea3 	bl	80015ea <LCD128_WriteData8>
 80018a4:	2108      	movs	r1, #8
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff fe9f 	bl	80015ea <LCD128_WriteData8>
 80018ac:	2108      	movs	r1, #8
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff fe9b 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xBD); LCD128_WriteData8(lcd, 0x06);
 80018b4:	21bd      	movs	r1, #189	@ 0xbd
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff fe7f 	bl	80015ba <LCD128_WriteCommand>
 80018bc:	2106      	movs	r1, #6
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff fe93 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xBC); LCD128_WriteData8(lcd, 0x00);
 80018c4:	21bc      	movs	r1, #188	@ 0xbc
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fe77 	bl	80015ba <LCD128_WriteCommand>
 80018cc:	2100      	movs	r1, #0
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff fe8b 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xFF); LCD128_WriteData8(lcd, 0x60); LCD128_WriteData8(lcd, 0x01); LCD128_WriteData8(lcd, 0x04);
 80018d4:	21ff      	movs	r1, #255	@ 0xff
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fe6f 	bl	80015ba <LCD128_WriteCommand>
 80018dc:	2160      	movs	r1, #96	@ 0x60
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff fe83 	bl	80015ea <LCD128_WriteData8>
 80018e4:	2101      	movs	r1, #1
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff fe7f 	bl	80015ea <LCD128_WriteData8>
 80018ec:	2104      	movs	r1, #4
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff fe7b 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xC3); LCD128_WriteData8(lcd, 0x13);
 80018f4:	21c3      	movs	r1, #195	@ 0xc3
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff fe5f 	bl	80015ba <LCD128_WriteCommand>
 80018fc:	2113      	movs	r1, #19
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fe73 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xC4); LCD128_WriteData8(lcd, 0x13);
 8001904:	21c4      	movs	r1, #196	@ 0xc4
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff fe57 	bl	80015ba <LCD128_WriteCommand>
 800190c:	2113      	movs	r1, #19
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fe6b 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xC9); LCD128_WriteData8(lcd, 0x22);
 8001914:	21c9      	movs	r1, #201	@ 0xc9
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff fe4f 	bl	80015ba <LCD128_WriteCommand>
 800191c:	2122      	movs	r1, #34	@ 0x22
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff fe63 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xBE); LCD128_WriteData8(lcd, 0x11);
 8001924:	21be      	movs	r1, #190	@ 0xbe
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff fe47 	bl	80015ba <LCD128_WriteCommand>
 800192c:	2111      	movs	r1, #17
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff fe5b 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xE1); LCD128_WriteData8(lcd, 0x10); LCD128_WriteData8(lcd, 0x0E);
 8001934:	21e1      	movs	r1, #225	@ 0xe1
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff fe3f 	bl	80015ba <LCD128_WriteCommand>
 800193c:	2110      	movs	r1, #16
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff fe53 	bl	80015ea <LCD128_WriteData8>
 8001944:	210e      	movs	r1, #14
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff fe4f 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xDF); LCD128_WriteData8(lcd, 0x21); LCD128_WriteData8(lcd, 0x0c); LCD128_WriteData8(lcd, 0x02);
 800194c:	21df      	movs	r1, #223	@ 0xdf
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff fe33 	bl	80015ba <LCD128_WriteCommand>
 8001954:	2121      	movs	r1, #33	@ 0x21
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff fe47 	bl	80015ea <LCD128_WriteData8>
 800195c:	210c      	movs	r1, #12
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff fe43 	bl	80015ea <LCD128_WriteData8>
 8001964:	2102      	movs	r1, #2
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fe3f 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xF0); LCD128_WriteData8(lcd, 0x45); LCD128_WriteData8(lcd, 0x09); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x26); LCD128_WriteData8(lcd, 0x2A);
 800196c:	21f0      	movs	r1, #240	@ 0xf0
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff fe23 	bl	80015ba <LCD128_WriteCommand>
 8001974:	2145      	movs	r1, #69	@ 0x45
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff fe37 	bl	80015ea <LCD128_WriteData8>
 800197c:	2109      	movs	r1, #9
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff fe33 	bl	80015ea <LCD128_WriteData8>
 8001984:	2108      	movs	r1, #8
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff fe2f 	bl	80015ea <LCD128_WriteData8>
 800198c:	2108      	movs	r1, #8
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff fe2b 	bl	80015ea <LCD128_WriteData8>
 8001994:	2126      	movs	r1, #38	@ 0x26
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff fe27 	bl	80015ea <LCD128_WriteData8>
 800199c:	212a      	movs	r1, #42	@ 0x2a
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff fe23 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xF1); LCD128_WriteData8(lcd, 0x43); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x72); LCD128_WriteData8(lcd, 0x36); LCD128_WriteData8(lcd, 0x37); LCD128_WriteData8(lcd, 0x6F);
 80019a4:	21f1      	movs	r1, #241	@ 0xf1
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff fe07 	bl	80015ba <LCD128_WriteCommand>
 80019ac:	2143      	movs	r1, #67	@ 0x43
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff fe1b 	bl	80015ea <LCD128_WriteData8>
 80019b4:	2170      	movs	r1, #112	@ 0x70
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff fe17 	bl	80015ea <LCD128_WriteData8>
 80019bc:	2172      	movs	r1, #114	@ 0x72
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff fe13 	bl	80015ea <LCD128_WriteData8>
 80019c4:	2136      	movs	r1, #54	@ 0x36
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff fe0f 	bl	80015ea <LCD128_WriteData8>
 80019cc:	2137      	movs	r1, #55	@ 0x37
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff fe0b 	bl	80015ea <LCD128_WriteData8>
 80019d4:	216f      	movs	r1, #111	@ 0x6f
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff fe07 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xF2); LCD128_WriteData8(lcd, 0x45); LCD128_WriteData8(lcd, 0x09); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x26); LCD128_WriteData8(lcd, 0x2A);
 80019dc:	21f2      	movs	r1, #242	@ 0xf2
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fdeb 	bl	80015ba <LCD128_WriteCommand>
 80019e4:	2145      	movs	r1, #69	@ 0x45
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff fdff 	bl	80015ea <LCD128_WriteData8>
 80019ec:	2109      	movs	r1, #9
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff fdfb 	bl	80015ea <LCD128_WriteData8>
 80019f4:	2108      	movs	r1, #8
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff fdf7 	bl	80015ea <LCD128_WriteData8>
 80019fc:	2108      	movs	r1, #8
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff fdf3 	bl	80015ea <LCD128_WriteData8>
 8001a04:	2126      	movs	r1, #38	@ 0x26
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff fdef 	bl	80015ea <LCD128_WriteData8>
 8001a0c:	212a      	movs	r1, #42	@ 0x2a
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff fdeb 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xF3); LCD128_WriteData8(lcd, 0x43); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x72); LCD128_WriteData8(lcd, 0x36); LCD128_WriteData8(lcd, 0x37); LCD128_WriteData8(lcd, 0x6F);
 8001a14:	21f3      	movs	r1, #243	@ 0xf3
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff fdcf 	bl	80015ba <LCD128_WriteCommand>
 8001a1c:	2143      	movs	r1, #67	@ 0x43
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fde3 	bl	80015ea <LCD128_WriteData8>
 8001a24:	2170      	movs	r1, #112	@ 0x70
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff fddf 	bl	80015ea <LCD128_WriteData8>
 8001a2c:	2172      	movs	r1, #114	@ 0x72
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff fddb 	bl	80015ea <LCD128_WriteData8>
 8001a34:	2136      	movs	r1, #54	@ 0x36
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff fdd7 	bl	80015ea <LCD128_WriteData8>
 8001a3c:	2137      	movs	r1, #55	@ 0x37
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff fdd3 	bl	80015ea <LCD128_WriteData8>
 8001a44:	216f      	movs	r1, #111	@ 0x6f
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff fdcf 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xED); LCD128_WriteData8(lcd, 0x1B); LCD128_WriteData8(lcd, 0x0B);
 8001a4c:	21ed      	movs	r1, #237	@ 0xed
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff fdb3 	bl	80015ba <LCD128_WriteCommand>
 8001a54:	211b      	movs	r1, #27
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff fdc7 	bl	80015ea <LCD128_WriteData8>
 8001a5c:	210b      	movs	r1, #11
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff fdc3 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xAE); LCD128_WriteData8(lcd, 0x77);
 8001a64:	21ae      	movs	r1, #174	@ 0xae
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff fda7 	bl	80015ba <LCD128_WriteCommand>
 8001a6c:	2177      	movs	r1, #119	@ 0x77
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff fdbb 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xCD); LCD128_WriteData8(lcd, 0x63);
 8001a74:	21cd      	movs	r1, #205	@ 0xcd
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff fd9f 	bl	80015ba <LCD128_WriteCommand>
 8001a7c:	2163      	movs	r1, #99	@ 0x63
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff fdb3 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x70); LCD128_WriteData8(lcd, 0x07); LCD128_WriteData8(lcd, 0x07); LCD128_WriteData8(lcd, 0x04); LCD128_WriteData8(lcd, 0x0E); LCD128_WriteData8(lcd, 0x0F); LCD128_WriteData8(lcd, 0x09); LCD128_WriteData8(lcd, 0x07); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x03);
 8001a84:	2170      	movs	r1, #112	@ 0x70
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff fd97 	bl	80015ba <LCD128_WriteCommand>
 8001a8c:	2107      	movs	r1, #7
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff fdab 	bl	80015ea <LCD128_WriteData8>
 8001a94:	2107      	movs	r1, #7
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fda7 	bl	80015ea <LCD128_WriteData8>
 8001a9c:	2104      	movs	r1, #4
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff fda3 	bl	80015ea <LCD128_WriteData8>
 8001aa4:	210e      	movs	r1, #14
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff fd9f 	bl	80015ea <LCD128_WriteData8>
 8001aac:	210f      	movs	r1, #15
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff fd9b 	bl	80015ea <LCD128_WriteData8>
 8001ab4:	2109      	movs	r1, #9
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff fd97 	bl	80015ea <LCD128_WriteData8>
 8001abc:	2107      	movs	r1, #7
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff fd93 	bl	80015ea <LCD128_WriteData8>
 8001ac4:	2108      	movs	r1, #8
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff fd8f 	bl	80015ea <LCD128_WriteData8>
 8001acc:	2103      	movs	r1, #3
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff fd8b 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xE8); LCD128_WriteData8(lcd, 0x34);
 8001ad4:	21e8      	movs	r1, #232	@ 0xe8
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff fd6f 	bl	80015ba <LCD128_WriteCommand>
 8001adc:	2134      	movs	r1, #52	@ 0x34
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff fd83 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x62); LCD128_WriteData8(lcd, 0x18); LCD128_WriteData8(lcd, 0x0D); LCD128_WriteData8(lcd, 0x71); LCD128_WriteData8(lcd, 0xED); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x18); LCD128_WriteData8(lcd, 0x0F); LCD128_WriteData8(lcd, 0x71); LCD128_WriteData8(lcd, 0xEF); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x70);
 8001ae4:	2162      	movs	r1, #98	@ 0x62
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff fd67 	bl	80015ba <LCD128_WriteCommand>
 8001aec:	2118      	movs	r1, #24
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fd7b 	bl	80015ea <LCD128_WriteData8>
 8001af4:	210d      	movs	r1, #13
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff fd77 	bl	80015ea <LCD128_WriteData8>
 8001afc:	2171      	movs	r1, #113	@ 0x71
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff fd73 	bl	80015ea <LCD128_WriteData8>
 8001b04:	21ed      	movs	r1, #237	@ 0xed
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff fd6f 	bl	80015ea <LCD128_WriteData8>
 8001b0c:	2170      	movs	r1, #112	@ 0x70
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff fd6b 	bl	80015ea <LCD128_WriteData8>
 8001b14:	2170      	movs	r1, #112	@ 0x70
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff fd67 	bl	80015ea <LCD128_WriteData8>
 8001b1c:	2118      	movs	r1, #24
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff fd63 	bl	80015ea <LCD128_WriteData8>
 8001b24:	210f      	movs	r1, #15
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff fd5f 	bl	80015ea <LCD128_WriteData8>
 8001b2c:	2171      	movs	r1, #113	@ 0x71
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff fd5b 	bl	80015ea <LCD128_WriteData8>
 8001b34:	21ef      	movs	r1, #239	@ 0xef
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff fd57 	bl	80015ea <LCD128_WriteData8>
 8001b3c:	2170      	movs	r1, #112	@ 0x70
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff fd53 	bl	80015ea <LCD128_WriteData8>
 8001b44:	2170      	movs	r1, #112	@ 0x70
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fd4f 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x63); LCD128_WriteData8(lcd, 0x18); LCD128_WriteData8(lcd, 0x11); LCD128_WriteData8(lcd, 0x71); LCD128_WriteData8(lcd, 0xF1); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x18); LCD128_WriteData8(lcd, 0x13); LCD128_WriteData8(lcd, 0x71); LCD128_WriteData8(lcd, 0xF3); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x70);
 8001b4c:	2163      	movs	r1, #99	@ 0x63
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff fd33 	bl	80015ba <LCD128_WriteCommand>
 8001b54:	2118      	movs	r1, #24
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff fd47 	bl	80015ea <LCD128_WriteData8>
 8001b5c:	2111      	movs	r1, #17
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fd43 	bl	80015ea <LCD128_WriteData8>
 8001b64:	2171      	movs	r1, #113	@ 0x71
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff fd3f 	bl	80015ea <LCD128_WriteData8>
 8001b6c:	21f1      	movs	r1, #241	@ 0xf1
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff fd3b 	bl	80015ea <LCD128_WriteData8>
 8001b74:	2170      	movs	r1, #112	@ 0x70
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff fd37 	bl	80015ea <LCD128_WriteData8>
 8001b7c:	2170      	movs	r1, #112	@ 0x70
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff fd33 	bl	80015ea <LCD128_WriteData8>
 8001b84:	2118      	movs	r1, #24
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff fd2f 	bl	80015ea <LCD128_WriteData8>
 8001b8c:	2113      	movs	r1, #19
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fd2b 	bl	80015ea <LCD128_WriteData8>
 8001b94:	2171      	movs	r1, #113	@ 0x71
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fd27 	bl	80015ea <LCD128_WriteData8>
 8001b9c:	21f3      	movs	r1, #243	@ 0xf3
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff fd23 	bl	80015ea <LCD128_WriteData8>
 8001ba4:	2170      	movs	r1, #112	@ 0x70
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff fd1f 	bl	80015ea <LCD128_WriteData8>
 8001bac:	2170      	movs	r1, #112	@ 0x70
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff fd1b 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x64); LCD128_WriteData8(lcd, 0x28); LCD128_WriteData8(lcd, 0x29); LCD128_WriteData8(lcd, 0xF1); LCD128_WriteData8(lcd, 0x01); LCD128_WriteData8(lcd, 0xF1); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x07);
 8001bb4:	2164      	movs	r1, #100	@ 0x64
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fcff 	bl	80015ba <LCD128_WriteCommand>
 8001bbc:	2128      	movs	r1, #40	@ 0x28
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff fd13 	bl	80015ea <LCD128_WriteData8>
 8001bc4:	2129      	movs	r1, #41	@ 0x29
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff fd0f 	bl	80015ea <LCD128_WriteData8>
 8001bcc:	21f1      	movs	r1, #241	@ 0xf1
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff fd0b 	bl	80015ea <LCD128_WriteData8>
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff fd07 	bl	80015ea <LCD128_WriteData8>
 8001bdc:	21f1      	movs	r1, #241	@ 0xf1
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff fd03 	bl	80015ea <LCD128_WriteData8>
 8001be4:	2100      	movs	r1, #0
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fcff 	bl	80015ea <LCD128_WriteData8>
 8001bec:	2107      	movs	r1, #7
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fcfb 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x66); LCD128_WriteData8(lcd, 0x3C); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0xCD); LCD128_WriteData8(lcd, 0x67); LCD128_WriteData8(lcd, 0x45); LCD128_WriteData8(lcd, 0x45); LCD128_WriteData8(lcd, 0x10); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x00);
 8001bf4:	2166      	movs	r1, #102	@ 0x66
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff fcdf 	bl	80015ba <LCD128_WriteCommand>
 8001bfc:	213c      	movs	r1, #60	@ 0x3c
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff fcf3 	bl	80015ea <LCD128_WriteData8>
 8001c04:	2100      	movs	r1, #0
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fcef 	bl	80015ea <LCD128_WriteData8>
 8001c0c:	21cd      	movs	r1, #205	@ 0xcd
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff fceb 	bl	80015ea <LCD128_WriteData8>
 8001c14:	2167      	movs	r1, #103	@ 0x67
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff fce7 	bl	80015ea <LCD128_WriteData8>
 8001c1c:	2145      	movs	r1, #69	@ 0x45
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff fce3 	bl	80015ea <LCD128_WriteData8>
 8001c24:	2145      	movs	r1, #69	@ 0x45
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff fcdf 	bl	80015ea <LCD128_WriteData8>
 8001c2c:	2110      	movs	r1, #16
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff fcdb 	bl	80015ea <LCD128_WriteData8>
 8001c34:	2100      	movs	r1, #0
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fcd7 	bl	80015ea <LCD128_WriteData8>
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fcd3 	bl	80015ea <LCD128_WriteData8>
 8001c44:	2100      	movs	r1, #0
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff fccf 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x67); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x3C); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x01); LCD128_WriteData8(lcd, 0x54); LCD128_WriteData8(lcd, 0x10); LCD128_WriteData8(lcd, 0x32); LCD128_WriteData8(lcd, 0x98);
 8001c4c:	2167      	movs	r1, #103	@ 0x67
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff fcb3 	bl	80015ba <LCD128_WriteCommand>
 8001c54:	2100      	movs	r1, #0
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff fcc7 	bl	80015ea <LCD128_WriteData8>
 8001c5c:	213c      	movs	r1, #60	@ 0x3c
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fcc3 	bl	80015ea <LCD128_WriteData8>
 8001c64:	2100      	movs	r1, #0
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff fcbf 	bl	80015ea <LCD128_WriteData8>
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fcbb 	bl	80015ea <LCD128_WriteData8>
 8001c74:	2100      	movs	r1, #0
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff fcb7 	bl	80015ea <LCD128_WriteData8>
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff fcb3 	bl	80015ea <LCD128_WriteData8>
 8001c84:	2154      	movs	r1, #84	@ 0x54
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff fcaf 	bl	80015ea <LCD128_WriteData8>
 8001c8c:	2110      	movs	r1, #16
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff fcab 	bl	80015ea <LCD128_WriteData8>
 8001c94:	2132      	movs	r1, #50	@ 0x32
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff fca7 	bl	80015ea <LCD128_WriteData8>
 8001c9c:	2198      	movs	r1, #152	@ 0x98
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff fca3 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x74); LCD128_WriteData8(lcd, 0x10); LCD128_WriteData8(lcd, 0x85); LCD128_WriteData8(lcd, 0x80); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x4E); LCD128_WriteData8(lcd, 0x00);
 8001ca4:	2174      	movs	r1, #116	@ 0x74
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff fc87 	bl	80015ba <LCD128_WriteCommand>
 8001cac:	2110      	movs	r1, #16
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff fc9b 	bl	80015ea <LCD128_WriteData8>
 8001cb4:	2185      	movs	r1, #133	@ 0x85
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff fc97 	bl	80015ea <LCD128_WriteData8>
 8001cbc:	2180      	movs	r1, #128	@ 0x80
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff fc93 	bl	80015ea <LCD128_WriteData8>
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff fc8f 	bl	80015ea <LCD128_WriteData8>
 8001ccc:	2100      	movs	r1, #0
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff fc8b 	bl	80015ea <LCD128_WriteData8>
 8001cd4:	214e      	movs	r1, #78	@ 0x4e
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff fc87 	bl	80015ea <LCD128_WriteData8>
 8001cdc:	2100      	movs	r1, #0
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff fc83 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x98); LCD128_WriteData8(lcd, 0x3e); LCD128_WriteData8(lcd, 0x07);
 8001ce4:	2198      	movs	r1, #152	@ 0x98
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff fc67 	bl	80015ba <LCD128_WriteCommand>
 8001cec:	213e      	movs	r1, #62	@ 0x3e
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff fc7b 	bl	80015ea <LCD128_WriteData8>
 8001cf4:	2107      	movs	r1, #7
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff fc77 	bl	80015ea <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x35);
 8001cfc:	2135      	movs	r1, #53	@ 0x35
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff fc5b 	bl	80015ba <LCD128_WriteCommand>
    LCD128_WriteCommand(lcd, 0x21);
 8001d04:	2121      	movs	r1, #33	@ 0x21
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff fc57 	bl	80015ba <LCD128_WriteCommand>
    LCD128_WriteCommand(lcd, LCD128_SLPOUT);
 8001d0c:	2111      	movs	r1, #17
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff fc53 	bl	80015ba <LCD128_WriteCommand>
    LCD128_DELAY(120);
 8001d14:	2078      	movs	r0, #120	@ 0x78
 8001d16:	f7ff fc45 	bl	80015a4 <LCD128_DELAY>
    LCD128_WriteCommand(lcd, LCD128_DISPON);
 8001d1a:	2129      	movs	r1, #41	@ 0x29
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff fc4c 	bl	80015ba <LCD128_WriteCommand>
    LCD128_DELAY(20);
 8001d22:	2014      	movs	r0, #20
 8001d24:	f7ff fc3e 	bl	80015a4 <LCD128_DELAY>
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <LCD128_DrawPixel>:

void LCD128_DrawPixel(LCD128_HandleTypeDef* lcd, uint16_t x, uint16_t y, uint16_t color) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af02      	add	r7, sp, #8
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	4608      	mov	r0, r1
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4603      	mov	r3, r0
 8001d40:	817b      	strh	r3, [r7, #10]
 8001d42:	460b      	mov	r3, r1
 8001d44:	813b      	strh	r3, [r7, #8]
 8001d46:	4613      	mov	r3, r2
 8001d48:	80fb      	strh	r3, [r7, #6]
    if (x >= LCD128_WIDTH || y >= LCD128_HEIGHT) return;
 8001d4a:	897b      	ldrh	r3, [r7, #10]
 8001d4c:	2bef      	cmp	r3, #239	@ 0xef
 8001d4e:	d811      	bhi.n	8001d74 <LCD128_DrawPixel+0x44>
 8001d50:	893b      	ldrh	r3, [r7, #8]
 8001d52:	2bef      	cmp	r3, #239	@ 0xef
 8001d54:	d80e      	bhi.n	8001d74 <LCD128_DrawPixel+0x44>
    LCD128_SetAddressWindow(lcd, x, y, x, y);
 8001d56:	8978      	ldrh	r0, [r7, #10]
 8001d58:	893a      	ldrh	r2, [r7, #8]
 8001d5a:	8979      	ldrh	r1, [r7, #10]
 8001d5c:	893b      	ldrh	r3, [r7, #8]
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	4603      	mov	r3, r0
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f7ff fc96 	bl	8001694 <LCD128_SetAddressWindow>
    LCD128_WriteData16(lcd, color);
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f7ff fc54 	bl	800161a <LCD128_WriteData16>
 8001d72:	e000      	b.n	8001d76 <LCD128_DrawPixel+0x46>
    if (x >= LCD128_WIDTH || y >= LCD128_HEIGHT) return;
 8001d74:	bf00      	nop
}
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <LCD128_FillRectangle>:
        x += font.width;
        str++;
    }
}

void LCD128_FillRectangle(LCD128_HandleTypeDef* lcd, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	4608      	mov	r0, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	817b      	strh	r3, [r7, #10]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	813b      	strh	r3, [r7, #8]
 8001d92:	4613      	mov	r3, r2
 8001d94:	80fb      	strh	r3, [r7, #6]
    if ((x >= LCD128_WIDTH) || (y >= LCD128_HEIGHT)) return;
 8001d96:	897b      	ldrh	r3, [r7, #10]
 8001d98:	2bef      	cmp	r3, #239	@ 0xef
 8001d9a:	d83b      	bhi.n	8001e14 <LCD128_FillRectangle+0x98>
 8001d9c:	893b      	ldrh	r3, [r7, #8]
 8001d9e:	2bef      	cmp	r3, #239	@ 0xef
 8001da0:	d838      	bhi.n	8001e14 <LCD128_FillRectangle+0x98>
    if ((x + w - 1) >= LCD128_WIDTH) w = LCD128_WIDTH - x;
 8001da2:	897a      	ldrh	r2, [r7, #10]
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	4413      	add	r3, r2
 8001da8:	2bf0      	cmp	r3, #240	@ 0xf0
 8001daa:	dd03      	ble.n	8001db4 <LCD128_FillRectangle+0x38>
 8001dac:	897b      	ldrh	r3, [r7, #10]
 8001dae:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001db2:	80fb      	strh	r3, [r7, #6]
    if ((y + h - 1) >= LCD128_HEIGHT) h = LCD128_HEIGHT - y;
 8001db4:	893a      	ldrh	r2, [r7, #8]
 8001db6:	8c3b      	ldrh	r3, [r7, #32]
 8001db8:	4413      	add	r3, r2
 8001dba:	2bf0      	cmp	r3, #240	@ 0xf0
 8001dbc:	dd03      	ble.n	8001dc6 <LCD128_FillRectangle+0x4a>
 8001dbe:	893b      	ldrh	r3, [r7, #8]
 8001dc0:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001dc4:	843b      	strh	r3, [r7, #32]
    LCD128_SetAddressWindow(lcd, x, y, x + w - 1, y + h - 1);
 8001dc6:	897a      	ldrh	r2, [r7, #10]
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b298      	uxth	r0, r3
 8001dd2:	893a      	ldrh	r2, [r7, #8]
 8001dd4:	8c3b      	ldrh	r3, [r7, #32]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	893a      	ldrh	r2, [r7, #8]
 8001de0:	8979      	ldrh	r1, [r7, #10]
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	4603      	mov	r3, r0
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f7ff fc54 	bl	8001694 <LCD128_SetAddressWindow>
    for (uint32_t i = 0; i < w * h; i++) {
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	e007      	b.n	8001e02 <LCD128_FillRectangle+0x86>
        LCD128_WriteData16(lcd, color);
 8001df2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001df4:	4619      	mov	r1, r3
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f7ff fc0f 	bl	800161a <LCD128_WriteData16>
    for (uint32_t i = 0; i < w * h; i++) {
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	8c3a      	ldrh	r2, [r7, #32]
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d3ef      	bcc.n	8001df2 <LCD128_FillRectangle+0x76>
 8001e12:	e000      	b.n	8001e16 <LCD128_FillRectangle+0x9a>
    if ((x >= LCD128_WIDTH) || (y >= LCD128_HEIGHT)) return;
 8001e14:	bf00      	nop
    }
}
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <LCD128_FillScreen>:

void LCD128_FillScreen(LCD128_HandleTypeDef* lcd, uint16_t color) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	807b      	strh	r3, [r7, #2]
    LCD128_FillRectangle(lcd, 0, 0, LCD128_WIDTH, LCD128_HEIGHT, color);
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	23f0      	movs	r3, #240	@ 0xf0
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	23f0      	movs	r3, #240	@ 0xf0
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ffa0 	bl	8001d7c <LCD128_FillRectangle>
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <LCD128_DrawImage_DMA>:
}

// Biến trạng thái DMA (nên đặt volatile nếu dùng trong ngắt)
volatile uint8_t lcd128_dma_busy = 0;

void LCD128_DrawImage_DMA(LCD128_HandleTypeDef* lcd, uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af02      	add	r7, sp, #8
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	4608      	mov	r0, r1
 8001e4e:	4611      	mov	r1, r2
 8001e50:	461a      	mov	r2, r3
 8001e52:	4603      	mov	r3, r0
 8001e54:	817b      	strh	r3, [r7, #10]
 8001e56:	460b      	mov	r3, r1
 8001e58:	813b      	strh	r3, [r7, #8]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	80fb      	strh	r3, [r7, #6]
    if ((x >= LCD128_WIDTH) || (y >= LCD128_HEIGHT)) return;
 8001e5e:	897b      	ldrh	r3, [r7, #10]
 8001e60:	2bef      	cmp	r3, #239	@ 0xef
 8001e62:	d836      	bhi.n	8001ed2 <LCD128_DrawImage_DMA+0x8e>
 8001e64:	893b      	ldrh	r3, [r7, #8]
 8001e66:	2bef      	cmp	r3, #239	@ 0xef
 8001e68:	d833      	bhi.n	8001ed2 <LCD128_DrawImage_DMA+0x8e>
    if ((x + w - 1) >= LCD128_WIDTH) return;
 8001e6a:	897a      	ldrh	r2, [r7, #10]
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	4413      	add	r3, r2
 8001e70:	2bf0      	cmp	r3, #240	@ 0xf0
 8001e72:	dc30      	bgt.n	8001ed6 <LCD128_DrawImage_DMA+0x92>
    if ((y + h - 1) >= LCD128_HEIGHT) return;
 8001e74:	893a      	ldrh	r2, [r7, #8]
 8001e76:	8b3b      	ldrh	r3, [r7, #24]
 8001e78:	4413      	add	r3, r2
 8001e7a:	2bf0      	cmp	r3, #240	@ 0xf0
 8001e7c:	dc2d      	bgt.n	8001eda <LCD128_DrawImage_DMA+0x96>
    LCD128_SetAddressWindow(lcd, x, y, x + w - 1, y + h - 1);
 8001e7e:	897a      	ldrh	r2, [r7, #10]
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	4413      	add	r3, r2
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b298      	uxth	r0, r3
 8001e8a:	893a      	ldrh	r2, [r7, #8]
 8001e8c:	8b3b      	ldrh	r3, [r7, #24]
 8001e8e:	4413      	add	r3, r2
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	893a      	ldrh	r2, [r7, #8]
 8001e98:	8979      	ldrh	r1, [r7, #10]
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff fbf8 	bl	8001694 <LCD128_SetAddressWindow>
    LCD128_DC_1(lcd);
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f7ff fb3b 	bl	8001520 <LCD128_DC_1>
    LCD128_CS_0(lcd);
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f7ff fb08 	bl	80014c0 <LCD128_CS_0>
    lcd128_dma_busy = 1;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee4 <LCD128_DrawImage_DMA+0xa0>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
    // Truyền buffer qua DMA, mỗi pixel 2 byte
    HAL_SPI_Transmit_DMA(lcd->hspi, (uint8_t*)data, w * h * 2);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	8b3a      	ldrh	r2, [r7, #24]
 8001ebe:	fb02 f303 	mul.w	r3, r2, r3
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	69f9      	ldr	r1, [r7, #28]
 8001ecc:	f003 f998 	bl	8005200 <HAL_SPI_Transmit_DMA>
 8001ed0:	e004      	b.n	8001edc <LCD128_DrawImage_DMA+0x98>
    if ((x >= LCD128_WIDTH) || (y >= LCD128_HEIGHT)) return;
 8001ed2:	bf00      	nop
 8001ed4:	e002      	b.n	8001edc <LCD128_DrawImage_DMA+0x98>
    if ((x + w - 1) >= LCD128_WIDTH) return;
 8001ed6:	bf00      	nop
 8001ed8:	e000      	b.n	8001edc <LCD128_DrawImage_DMA+0x98>
    if ((y + h - 1) >= LCD128_HEIGHT) return;
 8001eda:	bf00      	nop
    // Không đóng CS ở đây, sẽ đóng trong callback khi DMA xong
}
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000084 	.word	0x20000084

08001ee8 <blend_color_fast>:
void draw_eye_with_pupil_to_buffer(int cx, int cy, int r, int pupil_r, int pupil_offset_x, int pupil_offset_y, uint16_t outer_color, uint16_t inner_color, uint16_t bgcolor, uint16_t pupil_color);
void draw_realistic_eye(int cx, int cy, int r, int pupil_r, int pupil_offset_x, int pupil_offset_y,uint16_t bgcolor); 
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi);
void Animation_Loop(void);
// === Blend nhanh giữa 2 màu RGB565 ===
uint16_t blend_color_fast(uint16_t c1, uint16_t c2, uint8_t t) {
 8001ee8:	b480      	push	{r7}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	80fb      	strh	r3, [r7, #6]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	80bb      	strh	r3, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	70fb      	strb	r3, [r7, #3]
    uint8_t r1 = (c1 >> 11) & 0x1F, g1 = (c1 >> 5) & 0x3F, b1 = c1 & 0x1F;
 8001efa:	88fb      	ldrh	r3, [r7, #6]
 8001efc:	0adb      	lsrs	r3, r3, #11
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	f003 031f 	and.w	r3, r3, #31
 8001f06:	75fb      	strb	r3, [r7, #23]
 8001f08:	88fb      	ldrh	r3, [r7, #6]
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f14:	75bb      	strb	r3, [r7, #22]
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	f003 031f 	and.w	r3, r3, #31
 8001f1e:	757b      	strb	r3, [r7, #21]
    uint8_t r2 = (c2 >> 11) & 0x1F, g2 = (c2 >> 5) & 0x3F, b2 = c2 & 0x1F;
 8001f20:	88bb      	ldrh	r3, [r7, #4]
 8001f22:	0adb      	lsrs	r3, r3, #11
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	753b      	strb	r3, [r7, #20]
 8001f2e:	88bb      	ldrh	r3, [r7, #4]
 8001f30:	095b      	lsrs	r3, r3, #5
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f3a:	74fb      	strb	r3, [r7, #19]
 8001f3c:	88bb      	ldrh	r3, [r7, #4]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	74bb      	strb	r3, [r7, #18]

    uint8_t r = ((r1 * (255 - t)) + (r2 * t)) >> 8;
 8001f46:	7dfb      	ldrb	r3, [r7, #23]
 8001f48:	78fa      	ldrb	r2, [r7, #3]
 8001f4a:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8001f4e:	fb03 f202 	mul.w	r2, r3, r2
 8001f52:	7d3b      	ldrb	r3, [r7, #20]
 8001f54:	78f9      	ldrb	r1, [r7, #3]
 8001f56:	fb01 f303 	mul.w	r3, r1, r3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	121b      	asrs	r3, r3, #8
 8001f5e:	747b      	strb	r3, [r7, #17]
    uint8_t g = ((g1 * (255 - t)) + (g2 * t)) >> 8;
 8001f60:	7dbb      	ldrb	r3, [r7, #22]
 8001f62:	78fa      	ldrb	r2, [r7, #3]
 8001f64:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8001f68:	fb03 f202 	mul.w	r2, r3, r2
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	78f9      	ldrb	r1, [r7, #3]
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	121b      	asrs	r3, r3, #8
 8001f78:	743b      	strb	r3, [r7, #16]
    uint8_t b = ((b1 * (255 - t)) + (b2 * t)) >> 8;
 8001f7a:	7d7b      	ldrb	r3, [r7, #21]
 8001f7c:	78fa      	ldrb	r2, [r7, #3]
 8001f7e:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8001f82:	fb03 f202 	mul.w	r2, r3, r2
 8001f86:	7cbb      	ldrb	r3, [r7, #18]
 8001f88:	78f9      	ldrb	r1, [r7, #3]
 8001f8a:	fb01 f303 	mul.w	r3, r1, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	121b      	asrs	r3, r3, #8
 8001f92:	73fb      	strb	r3, [r7, #15]

    return (r << 11) | (g << 5) | b;
 8001f94:	7c7b      	ldrb	r3, [r7, #17]
 8001f96:	b21b      	sxth	r3, r3
 8001f98:	02db      	lsls	r3, r3, #11
 8001f9a:	b21a      	sxth	r2, r3
 8001f9c:	7c3b      	ldrb	r3, [r7, #16]
 8001f9e:	b21b      	sxth	r3, r3
 8001fa0:	015b      	lsls	r3, r3, #5
 8001fa2:	b21b      	sxth	r3, r3
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	b21a      	sxth	r2, r3
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	b21b      	sxth	r3, r3
 8001fac:	4313      	orrs	r3, r2
 8001fae:	b21b      	sxth	r3, r3
 8001fb0:	b29b      	uxth	r3, r3
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	371c      	adds	r7, #28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fc2:	f001 fe59 	bl	8003c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fc6:	f001 fae3 	bl	8003590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fca:	f001 fbb9 	bl	8003740 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fce:	f001 fb91 	bl	80036f4 <MX_DMA_Init>
  MX_SPI1_Init();
 8001fd2:	f001 fb23 	bl	800361c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001fd6:	f001 fb57 	bl	8003688 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  lcd1.hspi = &hspi1;
 8001fda:	4b73      	ldr	r3, [pc, #460]	@ (80021a8 <main+0x1ec>)
 8001fdc:	4a73      	ldr	r2, [pc, #460]	@ (80021ac <main+0x1f0>)
 8001fde:	601a      	str	r2, [r3, #0]
  lcd1.CS_Port = GPIOB; lcd1.CS_Pin = GPIO_PIN_10;
 8001fe0:	4b71      	ldr	r3, [pc, #452]	@ (80021a8 <main+0x1ec>)
 8001fe2:	4a73      	ldr	r2, [pc, #460]	@ (80021b0 <main+0x1f4>)
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	4b70      	ldr	r3, [pc, #448]	@ (80021a8 <main+0x1ec>)
 8001fe8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fec:	811a      	strh	r2, [r3, #8]
  lcd1.DC_Port = GPIOB; lcd1.DC_Pin = GPIO_PIN_1;
 8001fee:	4b6e      	ldr	r3, [pc, #440]	@ (80021a8 <main+0x1ec>)
 8001ff0:	4a6f      	ldr	r2, [pc, #444]	@ (80021b0 <main+0x1f4>)
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	4b6c      	ldr	r3, [pc, #432]	@ (80021a8 <main+0x1ec>)
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	821a      	strh	r2, [r3, #16]
  lcd1.RST_Port = GPIOB; lcd1.RST_Pin = GPIO_PIN_0;
 8001ffa:	4b6b      	ldr	r3, [pc, #428]	@ (80021a8 <main+0x1ec>)
 8001ffc:	4a6c      	ldr	r2, [pc, #432]	@ (80021b0 <main+0x1f4>)
 8001ffe:	615a      	str	r2, [r3, #20]
 8002000:	4b69      	ldr	r3, [pc, #420]	@ (80021a8 <main+0x1ec>)
 8002002:	2201      	movs	r2, #1
 8002004:	831a      	strh	r2, [r3, #24]


  lcd2.hspi = &hspi2;
 8002006:	4b6b      	ldr	r3, [pc, #428]	@ (80021b4 <main+0x1f8>)
 8002008:	4a6b      	ldr	r2, [pc, #428]	@ (80021b8 <main+0x1fc>)
 800200a:	601a      	str	r2, [r3, #0]
  lcd2.CS_Port = GPIOA; lcd2.CS_Pin = GPIO_PIN_10;
 800200c:	4b69      	ldr	r3, [pc, #420]	@ (80021b4 <main+0x1f8>)
 800200e:	4a6b      	ldr	r2, [pc, #428]	@ (80021bc <main+0x200>)
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	4b68      	ldr	r3, [pc, #416]	@ (80021b4 <main+0x1f8>)
 8002014:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002018:	811a      	strh	r2, [r3, #8]
  lcd2.DC_Port = GPIOA; lcd2.DC_Pin = GPIO_PIN_9;
 800201a:	4b66      	ldr	r3, [pc, #408]	@ (80021b4 <main+0x1f8>)
 800201c:	4a67      	ldr	r2, [pc, #412]	@ (80021bc <main+0x200>)
 800201e:	60da      	str	r2, [r3, #12]
 8002020:	4b64      	ldr	r3, [pc, #400]	@ (80021b4 <main+0x1f8>)
 8002022:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002026:	821a      	strh	r2, [r3, #16]
  lcd2.RST_Port = GPIOA; lcd2.RST_Pin = GPIO_PIN_8;
 8002028:	4b62      	ldr	r3, [pc, #392]	@ (80021b4 <main+0x1f8>)
 800202a:	4a64      	ldr	r2, [pc, #400]	@ (80021bc <main+0x200>)
 800202c:	615a      	str	r2, [r3, #20]
 800202e:	4b61      	ldr	r3, [pc, #388]	@ (80021b4 <main+0x1f8>)
 8002030:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002034:	831a      	strh	r2, [r3, #24]

  LCD128_Init(&lcd1);
 8002036:	485c      	ldr	r0, [pc, #368]	@ (80021a8 <main+0x1ec>)
 8002038:	f7ff fb81 	bl	800173e <LCD128_Init>
  LCD128_Init(&lcd2);
 800203c:	485d      	ldr	r0, [pc, #372]	@ (80021b4 <main+0x1f8>)
 800203e:	f7ff fb7e 	bl	800173e <LCD128_Init>

  LCD128_FillScreen(&lcd1, LCD128_WHITE);
 8002042:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002046:	4858      	ldr	r0, [pc, #352]	@ (80021a8 <main+0x1ec>)
 8002048:	f7ff fee8 	bl	8001e1c <LCD128_FillScreen>
  LCD128_FillScreen(&lcd2, LCD128_WHITE);
 800204c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002050:	4858      	ldr	r0, [pc, #352]	@ (80021b4 <main+0x1f8>)
 8002052:	f7ff fee3 	bl	8001e1c <LCD128_FillScreen>

  LCD_Paint_DrawDashedEllipse(&lcd1, 120, 120, 105, 105, 10, 7, 2, LCD128_BLACK);
 8002056:	2300      	movs	r3, #0
 8002058:	9304      	str	r3, [sp, #16]
 800205a:	2302      	movs	r3, #2
 800205c:	9303      	str	r3, [sp, #12]
 800205e:	2307      	movs	r3, #7
 8002060:	9302      	str	r3, [sp, #8]
 8002062:	230a      	movs	r3, #10
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	2369      	movs	r3, #105	@ 0x69
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2369      	movs	r3, #105	@ 0x69
 800206c:	2278      	movs	r2, #120	@ 0x78
 800206e:	2178      	movs	r1, #120	@ 0x78
 8002070:	484d      	ldr	r0, [pc, #308]	@ (80021a8 <main+0x1ec>)
 8002072:	f7ff f99d 	bl	80013b0 <LCD_Paint_DrawDashedEllipse>
  LCD_Paint_DrawDashedEllipse(&lcd1, 120, 120, 112, 112, 10, 7, 2, LCD128_BLACK);
 8002076:	2300      	movs	r3, #0
 8002078:	9304      	str	r3, [sp, #16]
 800207a:	2302      	movs	r3, #2
 800207c:	9303      	str	r3, [sp, #12]
 800207e:	2307      	movs	r3, #7
 8002080:	9302      	str	r3, [sp, #8]
 8002082:	230a      	movs	r3, #10
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	2370      	movs	r3, #112	@ 0x70
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2370      	movs	r3, #112	@ 0x70
 800208c:	2278      	movs	r2, #120	@ 0x78
 800208e:	2178      	movs	r1, #120	@ 0x78
 8002090:	4845      	ldr	r0, [pc, #276]	@ (80021a8 <main+0x1ec>)
 8002092:	f7ff f98d 	bl	80013b0 <LCD_Paint_DrawDashedEllipse>
  LCD_Paint_DrawDashedEllipse(&lcd1, 120, 120, 118, 118, 10, 7, 2, LCD128_BLACK);
 8002096:	2300      	movs	r3, #0
 8002098:	9304      	str	r3, [sp, #16]
 800209a:	2302      	movs	r3, #2
 800209c:	9303      	str	r3, [sp, #12]
 800209e:	2307      	movs	r3, #7
 80020a0:	9302      	str	r3, [sp, #8]
 80020a2:	230a      	movs	r3, #10
 80020a4:	9301      	str	r3, [sp, #4]
 80020a6:	2376      	movs	r3, #118	@ 0x76
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	2376      	movs	r3, #118	@ 0x76
 80020ac:	2278      	movs	r2, #120	@ 0x78
 80020ae:	2178      	movs	r1, #120	@ 0x78
 80020b0:	483d      	ldr	r0, [pc, #244]	@ (80021a8 <main+0x1ec>)
 80020b2:	f7ff f97d 	bl	80013b0 <LCD_Paint_DrawDashedEllipse>

  LCD_Paint_DrawDashedEllipse(&lcd2, 120, 120, 105, 105, 10, 7, 2, LCD128_BLACK);
 80020b6:	2300      	movs	r3, #0
 80020b8:	9304      	str	r3, [sp, #16]
 80020ba:	2302      	movs	r3, #2
 80020bc:	9303      	str	r3, [sp, #12]
 80020be:	2307      	movs	r3, #7
 80020c0:	9302      	str	r3, [sp, #8]
 80020c2:	230a      	movs	r3, #10
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	2369      	movs	r3, #105	@ 0x69
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	2369      	movs	r3, #105	@ 0x69
 80020cc:	2278      	movs	r2, #120	@ 0x78
 80020ce:	2178      	movs	r1, #120	@ 0x78
 80020d0:	4838      	ldr	r0, [pc, #224]	@ (80021b4 <main+0x1f8>)
 80020d2:	f7ff f96d 	bl	80013b0 <LCD_Paint_DrawDashedEllipse>
  LCD_Paint_DrawDashedEllipse(&lcd2, 120, 120, 112, 112, 10, 7, 2, LCD128_BLACK);
 80020d6:	2300      	movs	r3, #0
 80020d8:	9304      	str	r3, [sp, #16]
 80020da:	2302      	movs	r3, #2
 80020dc:	9303      	str	r3, [sp, #12]
 80020de:	2307      	movs	r3, #7
 80020e0:	9302      	str	r3, [sp, #8]
 80020e2:	230a      	movs	r3, #10
 80020e4:	9301      	str	r3, [sp, #4]
 80020e6:	2370      	movs	r3, #112	@ 0x70
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	2370      	movs	r3, #112	@ 0x70
 80020ec:	2278      	movs	r2, #120	@ 0x78
 80020ee:	2178      	movs	r1, #120	@ 0x78
 80020f0:	4830      	ldr	r0, [pc, #192]	@ (80021b4 <main+0x1f8>)
 80020f2:	f7ff f95d 	bl	80013b0 <LCD_Paint_DrawDashedEllipse>
  LCD_Paint_DrawDashedEllipse(&lcd2, 120, 120, 118, 118, 10, 7, 2, LCD128_BLACK);
 80020f6:	2300      	movs	r3, #0
 80020f8:	9304      	str	r3, [sp, #16]
 80020fa:	2302      	movs	r3, #2
 80020fc:	9303      	str	r3, [sp, #12]
 80020fe:	2307      	movs	r3, #7
 8002100:	9302      	str	r3, [sp, #8]
 8002102:	230a      	movs	r3, #10
 8002104:	9301      	str	r3, [sp, #4]
 8002106:	2376      	movs	r3, #118	@ 0x76
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	2376      	movs	r3, #118	@ 0x76
 800210c:	2278      	movs	r2, #120	@ 0x78
 800210e:	2178      	movs	r1, #120	@ 0x78
 8002110:	4828      	ldr	r0, [pc, #160]	@ (80021b4 <main+0x1f8>)
 8002112:	f7ff f94d 	bl	80013b0 <LCD_Paint_DrawDashedEllipse>


  centerX = 120; centerY = 120;
 8002116:	4b2a      	ldr	r3, [pc, #168]	@ (80021c0 <main+0x204>)
 8002118:	2278      	movs	r2, #120	@ 0x78
 800211a:	701a      	strb	r2, [r3, #0]
 800211c:	4b29      	ldr	r3, [pc, #164]	@ (80021c4 <main+0x208>)
 800211e:	2278      	movs	r2, #120	@ 0x78
 8002120:	701a      	strb	r2, [r3, #0]
  rx_in  = 65; ry_in  = 65;
 8002122:	4b29      	ldr	r3, [pc, #164]	@ (80021c8 <main+0x20c>)
 8002124:	2241      	movs	r2, #65	@ 0x41
 8002126:	701a      	strb	r2, [r3, #0]
 8002128:	4b28      	ldr	r3, [pc, #160]	@ (80021cc <main+0x210>)
 800212a:	2241      	movs	r2, #65	@ 0x41
 800212c:	701a      	strb	r2, [r3, #0]
  pupilRadius = 55;
 800212e:	4b28      	ldr	r3, [pc, #160]	@ (80021d0 <main+0x214>)
 8002130:	2237      	movs	r2, #55	@ 0x37
 8002132:	701a      	strb	r2, [r3, #0]
  eyeRadius = pupilRadius / 2;
 8002134:	4b26      	ldr	r3, [pc, #152]	@ (80021d0 <main+0x214>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	085b      	lsrs	r3, r3, #1
 800213a:	b2da      	uxtb	r2, r3
 800213c:	4b25      	ldr	r3, [pc, #148]	@ (80021d4 <main+0x218>)
 800213e:	701a      	strb	r2, [r3, #0]
  pupilX = centerX; pupilY = centerY; 
 8002140:	4b1f      	ldr	r3, [pc, #124]	@ (80021c0 <main+0x204>)
 8002142:	781a      	ldrb	r2, [r3, #0]
 8002144:	4b24      	ldr	r3, [pc, #144]	@ (80021d8 <main+0x21c>)
 8002146:	701a      	strb	r2, [r3, #0]
 8002148:	4b1e      	ldr	r3, [pc, #120]	@ (80021c4 <main+0x208>)
 800214a:	781a      	ldrb	r2, [r3, #0]
 800214c:	4b23      	ldr	r3, [pc, #140]	@ (80021dc <main+0x220>)
 800214e:	701a      	strb	r2, [r3, #0]
  lerp_startX = lerp_startY = lerp_targetX = lerp_targetY = 0;
 8002150:	4b23      	ldr	r3, [pc, #140]	@ (80021e0 <main+0x224>)
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	4b22      	ldr	r3, [pc, #136]	@ (80021e0 <main+0x224>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a22      	ldr	r2, [pc, #136]	@ (80021e4 <main+0x228>)
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b21      	ldr	r3, [pc, #132]	@ (80021e4 <main+0x228>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a21      	ldr	r2, [pc, #132]	@ (80021e8 <main+0x22c>)
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b20      	ldr	r3, [pc, #128]	@ (80021e8 <main+0x22c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a20      	ldr	r2, [pc, #128]	@ (80021ec <main+0x230>)
 800216c:	6013      	str	r3, [r2, #0]
  lerp_t = 1.0f;
 800216e:	4b20      	ldr	r3, [pc, #128]	@ (80021f0 <main+0x234>)
 8002170:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002174:	601a      	str	r2, [r3, #0]
  lerp_steps = 10;
 8002176:	4b1f      	ldr	r3, [pc, #124]	@ (80021f4 <main+0x238>)
 8002178:	220a      	movs	r2, #10
 800217a:	601a      	str	r2, [r3, #0]
  random_count = 0;
 800217c:	4b1e      	ldr	r3, [pc, #120]	@ (80021f8 <main+0x23c>)
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
  state_sequence_len = sizeof(state_sequence) / sizeof(state_sequence[0]);
 8002182:	4b1e      	ldr	r3, [pc, #120]	@ (80021fc <main+0x240>)
 8002184:	2219      	movs	r2, #25
 8002186:	701a      	strb	r2, [r3, #0]
  state_index = 0;
 8002188:	4b1d      	ldr	r3, [pc, #116]	@ (8002200 <main+0x244>)
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
  state = state_sequence[state_index];
 800218e:	4b1c      	ldr	r3, [pc, #112]	@ (8002200 <main+0x244>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	4b1b      	ldr	r3, [pc, #108]	@ (8002204 <main+0x248>)
 8002196:	5c9a      	ldrb	r2, [r3, r2]
 8002198:	4b1b      	ldr	r3, [pc, #108]	@ (8002208 <main+0x24c>)
 800219a:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      // --- Cập nhật trạng thái animation ---
      update_animation_state();
 800219c:	f000 f978 	bl	8002490 <update_animation_state>

      // --- Khóa trạng thái, vẽ và gửi frame ---
      Animation_Loop();
 80021a0:	f000 f834 	bl	800220c <Animation_Loop>
      update_animation_state();
 80021a4:	bf00      	nop
 80021a6:	e7f9      	b.n	800219c <main+0x1e0>
 80021a8:	200001c0 	.word	0x200001c0
 80021ac:	20000088 	.word	0x20000088
 80021b0:	40010c00 	.word	0x40010c00
 80021b4:	200001dc 	.word	0x200001dc
 80021b8:	200000e0 	.word	0x200000e0
 80021bc:	40010800 	.word	0x40010800
 80021c0:	200001f8 	.word	0x200001f8
 80021c4:	200001f9 	.word	0x200001f9
 80021c8:	200001fa 	.word	0x200001fa
 80021cc:	200001fb 	.word	0x200001fb
 80021d0:	200001fc 	.word	0x200001fc
 80021d4:	200001fd 	.word	0x200001fd
 80021d8:	200001fe 	.word	0x200001fe
 80021dc:	200001ff 	.word	0x200001ff
 80021e0:	20000210 	.word	0x20000210
 80021e4:	2000020c 	.word	0x2000020c
 80021e8:	20000208 	.word	0x20000208
 80021ec:	20000204 	.word	0x20000204
 80021f0:	20000214 	.word	0x20000214
 80021f4:	20000218 	.word	0x20000218
 80021f8:	2000021e 	.word	0x2000021e
 80021fc:	2000021d 	.word	0x2000021d
 8002200:	2000021c 	.word	0x2000021c
 8002204:	080072f4 	.word	0x080072f4
 8002208:	20000200 	.word	0x20000200

0800220c <Animation_Loop>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void Animation_Loop(void){
 800220c:	b580      	push	{r7, lr}
 800220e:	b0d4      	sub	sp, #336	@ 0x150
 8002210:	af0a      	add	r7, sp, #40	@ 0x28

      // Tính offset pupil theo hướng di chuyển, giới hạn trong mắt trắng
      int pupil_offset_x = centerX - pupilX;  
 8002212:	4b92      	ldr	r3, [pc, #584]	@ (800245c <Animation_Loop+0x250>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	461a      	mov	r2, r3
 8002218:	4b91      	ldr	r3, [pc, #580]	@ (8002460 <Animation_Loop+0x254>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
      int pupil_offset_y = centerY - pupilY;
 8002222:	4b90      	ldr	r3, [pc, #576]	@ (8002464 <Animation_Loop+0x258>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	4b8f      	ldr	r3, [pc, #572]	@ (8002468 <Animation_Loop+0x25c>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

      float max_offset = eyeRadius - pupilRadius;
 8002232:	4b8e      	ldr	r3, [pc, #568]	@ (800246c <Animation_Loop+0x260>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	4b8d      	ldr	r3, [pc, #564]	@ (8002470 <Animation_Loop+0x264>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe fc36 	bl	8000ab0 <__aeabi_i2f>
 8002244:	4603      	mov	r3, r0
 8002246:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
      float dist = sqrtf(pupil_offset_x * pupil_offset_x + pupil_offset_y * pupil_offset_y);
 800224a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800224e:	fb03 f203 	mul.w	r2, r3, r3
 8002252:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002256:	fb03 f303 	mul.w	r3, r3, r3
 800225a:	4413      	add	r3, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe fc27 	bl	8000ab0 <__aeabi_i2f>
 8002262:	4603      	mov	r3, r0
 8002264:	4618      	mov	r0, r3
 8002266:	f004 f9b1 	bl	80065cc <sqrtf>
 800226a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
      if (dist > max_offset && dist > 0) {
 800226e:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8002272:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8002276:	f7fe fe2b 	bl	8000ed0 <__aeabi_fcmpgt>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d036      	beq.n	80022ee <Animation_Loop+0xe2>
 8002280:	f04f 0100 	mov.w	r1, #0
 8002284:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8002288:	f7fe fe22 	bl	8000ed0 <__aeabi_fcmpgt>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d02d      	beq.n	80022ee <Animation_Loop+0xe2>
          pupil_offset_x = (int)(pupil_offset_x * max_offset / dist);
 8002292:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8002296:	f7fe fc0b 	bl	8000ab0 <__aeabi_i2f>
 800229a:	4603      	mov	r3, r0
 800229c:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe fc59 	bl	8000b58 <__aeabi_fmul>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe fd07 	bl	8000cc0 <__aeabi_fdiv>
 80022b2:	4603      	mov	r3, r0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe fe2b 	bl	8000f10 <__aeabi_f2iz>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
          pupil_offset_y = (int)(pupil_offset_y * max_offset / dist);
 80022c0:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80022c4:	f7fe fbf4 	bl	8000ab0 <__aeabi_i2f>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe fc42 	bl	8000b58 <__aeabi_fmul>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fcf0 	bl	8000cc0 <__aeabi_fdiv>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe fe14 	bl	8000f10 <__aeabi_f2iz>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      }

      // --- KHÓA TRẠNG THÁI ---
      int pupilX_snapshot = pupilX;
 80022ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002460 <Animation_Loop+0x254>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
      int pupilY_snapshot = pupilY;
 80022f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002468 <Animation_Loop+0x25c>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
      int pupilRadius_snapshot = pupilRadius;
 80022fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002470 <Animation_Loop+0x264>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
      int eyeRadius_snapshot = eyeRadius;
 8002306:	4b59      	ldr	r3, [pc, #356]	@ (800246c <Animation_Loop+0x260>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
      int pupil_offset_x_snapshot = pupil_offset_x;
 800230e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002312:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
      int pupil_offset_y_snapshot = pupil_offset_y;
 8002316:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800231a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

      // Gửi từng hàng, KHÔNG cần framebuf lớn
      uint16_t linebuf[BUF_W * BLOCK_LINES];
      int highlight_tick_snapshot = global_highlight_tick;
 800231e:	4b55      	ldr	r3, [pc, #340]	@ (8002474 <Animation_Loop+0x268>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
      for (int y = 0; y < BUF_H; y += BLOCK_LINES) {
 8002326:	2300      	movs	r3, #0
 8002328:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800232c:	e08a      	b.n	8002444 <Animation_Loop+0x238>
          int lines_to_send = (y + BLOCK_LINES <= BUF_H) ? BLOCK_LINES : (BUF_H - y);
 800232e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002332:	2b77      	cmp	r3, #119	@ 0x77
 8002334:	dd04      	ble.n	8002340 <Animation_Loop+0x134>
 8002336:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800233a:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 800233e:	e000      	b.n	8002342 <Animation_Loop+0x136>
 8002340:	2301      	movs	r3, #1
 8002342:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
          for (int i = 0; i < lines_to_send; i++) {
 8002346:	2300      	movs	r3, #0
 8002348:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800234c:	e02f      	b.n	80023ae <Animation_Loop+0x1a2>
              draw_eye_line_with_pupil_to_buffer(y + i, BUF_W/2, BUF_H/2, pupilRadius_snapshot, eyeRadius_snapshot, pupil_offset_x_snapshot, pupil_offset_y_snapshot,
 800234e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002352:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002356:	18d0      	adds	r0, r2, r3
                                                 LCD128_BLACK, EYE_BLUE_1, LCD128_WHITE, LCD128_BLACK,
                                                 &linebuf[i * BUF_W],
 8002358:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800235c:	4613      	mov	r3, r2
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	00db      	lsls	r3, r3, #3
              draw_eye_line_with_pupil_to_buffer(y + i, BUF_W/2, BUF_H/2, pupilRadius_snapshot, eyeRadius_snapshot, pupil_offset_x_snapshot, pupil_offset_y_snapshot,
 8002364:	463a      	mov	r2, r7
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800236e:	9208      	str	r2, [sp, #32]
 8002370:	9307      	str	r3, [sp, #28]
 8002372:	2300      	movs	r3, #0
 8002374:	9306      	str	r3, [sp, #24]
 8002376:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800237a:	9305      	str	r3, [sp, #20]
 800237c:	f64f 030c 	movw	r3, #63500	@ 0xf80c
 8002380:	9304      	str	r3, [sp, #16]
 8002382:	2300      	movs	r3, #0
 8002384:	9303      	str	r3, [sp, #12]
 8002386:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800238a:	9302      	str	r3, [sp, #8]
 800238c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002390:	9301      	str	r3, [sp, #4]
 8002392:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800239c:	223c      	movs	r2, #60	@ 0x3c
 800239e:	213c      	movs	r1, #60	@ 0x3c
 80023a0:	f000 ff36 	bl	8003210 <draw_eye_line_with_pupil_to_buffer>
          for (int i = 0; i < lines_to_send; i++) {
 80023a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80023a8:	3301      	adds	r3, #1
 80023aa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80023ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80023b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80023b6:	429a      	cmp	r2, r3
 80023b8:	dbc9      	blt.n	800234e <Animation_Loop+0x142>
                                                 highlight_tick_snapshot);
          }
          LCD128_DrawImage_DMA(&lcd1, pupilX_snapshot - BUF_W/2, pupilY_snapshot - BUF_H/2 + y, BUF_W, lines_to_send, linebuf);
 80023ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80023be:	b29b      	uxth	r3, r3
 80023c0:	3b3c      	subs	r3, #60	@ 0x3c
 80023c2:	b299      	uxth	r1, r3
 80023c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b3c      	subs	r3, #60	@ 0x3c
 80023d6:	b298      	uxth	r0, r3
 80023d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80023dc:	b29b      	uxth	r3, r3
 80023de:	463a      	mov	r2, r7
 80023e0:	9201      	str	r2, [sp, #4]
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	2378      	movs	r3, #120	@ 0x78
 80023e6:	4602      	mov	r2, r0
 80023e8:	4823      	ldr	r0, [pc, #140]	@ (8002478 <Animation_Loop+0x26c>)
 80023ea:	f7ff fd2b 	bl	8001e44 <LCD128_DrawImage_DMA>
          while (lcd128_dma_busy);
 80023ee:	bf00      	nop
 80023f0:	4b22      	ldr	r3, [pc, #136]	@ (800247c <Animation_Loop+0x270>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1fa      	bne.n	80023f0 <Animation_Loop+0x1e4>
          LCD128_DrawImage_DMA(&lcd2, pupilX_snapshot - BUF_W/2, pupilY_snapshot - BUF_H/2 + y, BUF_W, lines_to_send, linebuf);
 80023fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b3c      	subs	r3, #60	@ 0x3c
 8002402:	b299      	uxth	r1, r3
 8002404:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002408:	b29a      	uxth	r2, r3
 800240a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800240e:	b29b      	uxth	r3, r3
 8002410:	4413      	add	r3, r2
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b3c      	subs	r3, #60	@ 0x3c
 8002416:	b298      	uxth	r0, r3
 8002418:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800241c:	b29b      	uxth	r3, r3
 800241e:	463a      	mov	r2, r7
 8002420:	9201      	str	r2, [sp, #4]
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	2378      	movs	r3, #120	@ 0x78
 8002426:	4602      	mov	r2, r0
 8002428:	4815      	ldr	r0, [pc, #84]	@ (8002480 <Animation_Loop+0x274>)
 800242a:	f7ff fd0b 	bl	8001e44 <LCD128_DrawImage_DMA>
          while (lcd128_dma_busy);
 800242e:	bf00      	nop
 8002430:	4b12      	ldr	r3, [pc, #72]	@ (800247c <Animation_Loop+0x270>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1fa      	bne.n	8002430 <Animation_Loop+0x224>
      for (int y = 0; y < BUF_H; y += BLOCK_LINES) {
 800243a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800243e:	3301      	adds	r3, #1
 8002440:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002444:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002448:	2b77      	cmp	r3, #119	@ 0x77
 800244a:	f77f af70 	ble.w	800232e <Animation_Loop+0x122>
      //       case STATE_PUPIL_ROTATE: // Moved to update_animation_state
      //           break; // Moved to update_animation_state
              
      //   } // Moved to update_animation_state
      // } // Moved to update_animation_state
}
 800244e:	bf00      	nop
 8002450:	bf00      	nop
 8002452:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	200001f8 	.word	0x200001f8
 8002460:	200001fe 	.word	0x200001fe
 8002464:	200001f9 	.word	0x200001f9
 8002468:	200001ff 	.word	0x200001ff
 800246c:	200001fd 	.word	0x200001fd
 8002470:	200001fc 	.word	0x200001fc
 8002474:	20000220 	.word	0x20000220
 8002478:	200001c0 	.word	0x200001c0
 800247c:	20000084 	.word	0x20000084
 8002480:	200001dc 	.word	0x200001dc

08002484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002488:	b672      	cpsid	i
}
 800248a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800248c:	bf00      	nop
 800248e:	e7fd      	b.n	800248c <Error_Handler+0x8>

08002490 <update_animation_state>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

// update_animation_state chỉ cập nhật logic chuyển động, không vẽ/gửi
void update_animation_state(void) {
 8002490:	b5b0      	push	{r4, r5, r7, lr}
 8002492:	b08a      	sub	sp, #40	@ 0x28
 8002494:	af00      	add	r7, sp, #0
    global_highlight_tick++;
 8002496:	4b6a      	ldr	r3, [pc, #424]	@ (8002640 <update_animation_state+0x1b0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3301      	adds	r3, #1
 800249c:	4a68      	ldr	r2, [pc, #416]	@ (8002640 <update_animation_state+0x1b0>)
 800249e:	6013      	str	r3, [r2, #0]
    static int pause_counter = 0;
    static int is_pausing = 0;
    int is_random_state = (state == STATE_RANDOM_MOVE || state == STATE_RANDOM_MOVE1 || state == STATE_RANDOM_TO_CENTER);
 80024a0:	4b68      	ldr	r3, [pc, #416]	@ (8002644 <update_animation_state+0x1b4>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b0f      	cmp	r3, #15
 80024a6:	d007      	beq.n	80024b8 <update_animation_state+0x28>
 80024a8:	4b66      	ldr	r3, [pc, #408]	@ (8002644 <update_animation_state+0x1b4>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	d003      	beq.n	80024b8 <update_animation_state+0x28>
 80024b0:	4b64      	ldr	r3, [pc, #400]	@ (8002644 <update_animation_state+0x1b4>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b11      	cmp	r3, #17
 80024b6:	d101      	bne.n	80024bc <update_animation_state+0x2c>
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <update_animation_state+0x2e>
 80024bc:	2300      	movs	r3, #0
 80024be:	627b      	str	r3, [r7, #36]	@ 0x24
    if (lerp_t >= 1.0f) {
 80024c0:	4b61      	ldr	r3, [pc, #388]	@ (8002648 <update_animation_state+0x1b8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe fcf7 	bl	8000ebc <__aeabi_fcmpge>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01a      	beq.n	800250a <update_animation_state+0x7a>
        if (!is_random_state) { // Chỉ pause nếu KHÔNG phải random
 80024d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d117      	bne.n	800250a <update_animation_state+0x7a>
            if (!is_pausing) {
 80024da:	4b5c      	ldr	r3, [pc, #368]	@ (800264c <update_animation_state+0x1bc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d105      	bne.n	80024ee <update_animation_state+0x5e>
                pause_counter = 0;
 80024e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002650 <update_animation_state+0x1c0>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
                is_pausing = 1;
 80024e8:	4b58      	ldr	r3, [pc, #352]	@ (800264c <update_animation_state+0x1bc>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]
            }
            if (pause_counter < 10) { // 40 frame ~ 0.7s
 80024ee:	4b58      	ldr	r3, [pc, #352]	@ (8002650 <update_animation_state+0x1c0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b09      	cmp	r3, #9
 80024f4:	dc06      	bgt.n	8002504 <update_animation_state+0x74>
                pause_counter++;
 80024f6:	4b56      	ldr	r3, [pc, #344]	@ (8002650 <update_animation_state+0x1c0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3301      	adds	r3, #1
 80024fc:	4a54      	ldr	r2, [pc, #336]	@ (8002650 <update_animation_state+0x1c0>)
 80024fe:	6013      	str	r3, [r2, #0]
                return;
 8002500:	f000 be60 	b.w	80031c4 <update_animation_state+0xd34>
            }
            is_pausing = 0;
 8002504:	4b51      	ldr	r3, [pc, #324]	@ (800264c <update_animation_state+0x1bc>)
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
        }
        // Sau khi pause (hoặc nếu là random), cho phép chuyển trạng thái mới
    }

    if (lerp_t < 1.0f) {
 800250a:	4b4f      	ldr	r3, [pc, #316]	@ (8002648 <update_animation_state+0x1b8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe fcbe 	bl	8000e94 <__aeabi_fcmplt>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d05d      	beq.n	80025da <update_animation_state+0x14a>
        lerp_t += 1.4f / lerp_steps;
 800251e:	4b4d      	ldr	r3, [pc, #308]	@ (8002654 <update_animation_state+0x1c4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe fac4 	bl	8000ab0 <__aeabi_i2f>
 8002528:	4603      	mov	r3, r0
 800252a:	4619      	mov	r1, r3
 800252c:	484a      	ldr	r0, [pc, #296]	@ (8002658 <update_animation_state+0x1c8>)
 800252e:	f7fe fbc7 	bl	8000cc0 <__aeabi_fdiv>
 8002532:	4603      	mov	r3, r0
 8002534:	461a      	mov	r2, r3
 8002536:	4b44      	ldr	r3, [pc, #272]	@ (8002648 <update_animation_state+0x1b8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4619      	mov	r1, r3
 800253c:	4610      	mov	r0, r2
 800253e:	f7fe fa03 	bl	8000948 <__addsf3>
 8002542:	4603      	mov	r3, r0
 8002544:	461a      	mov	r2, r3
 8002546:	4b40      	ldr	r3, [pc, #256]	@ (8002648 <update_animation_state+0x1b8>)
 8002548:	601a      	str	r2, [r3, #0]
        if (lerp_t > 1.0f) lerp_t = 1.0f;
 800254a:	4b3f      	ldr	r3, [pc, #252]	@ (8002648 <update_animation_state+0x1b8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fcbc 	bl	8000ed0 <__aeabi_fcmpgt>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <update_animation_state+0xd6>
 800255e:	4b3a      	ldr	r3, [pc, #232]	@ (8002648 <update_animation_state+0x1b8>)
 8002560:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002564:	601a      	str	r2, [r3, #0]
        pupilX = lerp_startX + (int)((lerp_targetX - lerp_startX) * lerp_t);
 8002566:	4b3d      	ldr	r3, [pc, #244]	@ (800265c <update_animation_state+0x1cc>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	4b3d      	ldr	r3, [pc, #244]	@ (8002660 <update_animation_state+0x1d0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe fa9d 	bl	8000ab0 <__aeabi_i2f>
 8002576:	4602      	mov	r2, r0
 8002578:	4b33      	ldr	r3, [pc, #204]	@ (8002648 <update_animation_state+0x1b8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4619      	mov	r1, r3
 800257e:	4610      	mov	r0, r2
 8002580:	f7fe faea 	bl	8000b58 <__aeabi_fmul>
 8002584:	4603      	mov	r3, r0
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe fcc2 	bl	8000f10 <__aeabi_f2iz>
 800258c:	4603      	mov	r3, r0
 800258e:	b2da      	uxtb	r2, r3
 8002590:	4b33      	ldr	r3, [pc, #204]	@ (8002660 <update_animation_state+0x1d0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	4413      	add	r3, r2
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b32      	ldr	r3, [pc, #200]	@ (8002664 <update_animation_state+0x1d4>)
 800259c:	701a      	strb	r2, [r3, #0]
        pupilY = lerp_startY + (int)((lerp_targetY - lerp_startY) * lerp_t);
 800259e:	4b32      	ldr	r3, [pc, #200]	@ (8002668 <update_animation_state+0x1d8>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4b32      	ldr	r3, [pc, #200]	@ (800266c <update_animation_state+0x1dc>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe fa81 	bl	8000ab0 <__aeabi_i2f>
 80025ae:	4602      	mov	r2, r0
 80025b0:	4b25      	ldr	r3, [pc, #148]	@ (8002648 <update_animation_state+0x1b8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4619      	mov	r1, r3
 80025b6:	4610      	mov	r0, r2
 80025b8:	f7fe face 	bl	8000b58 <__aeabi_fmul>
 80025bc:	4603      	mov	r3, r0
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fca6 	bl	8000f10 <__aeabi_f2iz>
 80025c4:	4603      	mov	r3, r0
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	4b28      	ldr	r3, [pc, #160]	@ (800266c <update_animation_state+0x1dc>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	4413      	add	r3, r2
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4b27      	ldr	r3, [pc, #156]	@ (8002670 <update_animation_state+0x1e0>)
 80025d4:	701a      	strb	r2, [r3, #0]
 80025d6:	f000 bdf5 	b.w	80031c4 <update_animation_state+0xd34>
    } else if (!is_pausing) {
 80025da:	4b1c      	ldr	r3, [pc, #112]	@ (800264c <update_animation_state+0x1bc>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f040 85f0 	bne.w	80031c4 <update_animation_state+0xd34>
        switch (state) {
 80025e4:	4b17      	ldr	r3, [pc, #92]	@ (8002644 <update_animation_state+0x1b4>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b12      	cmp	r3, #18
 80025ea:	f200 85eb 	bhi.w	80031c4 <update_animation_state+0xd34>
 80025ee:	a201      	add	r2, pc, #4	@ (adr r2, 80025f4 <update_animation_state+0x164>)
 80025f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f4:	080027ef 	.word	0x080027ef
 80025f8:	0800285d 	.word	0x0800285d
 80025fc:	08002905 	.word	0x08002905
 8002600:	08002973 	.word	0x08002973
 8002604:	080029d1 	.word	0x080029d1
 8002608:	08002a3d 	.word	0x08002a3d
 800260c:	08002a9b 	.word	0x08002a9b
 8002610:	08002b49 	.word	0x08002b49
 8002614:	08002ba7 	.word	0x08002ba7
 8002618:	08002c81 	.word	0x08002c81
 800261c:	08002d89 	.word	0x08002d89
 8002620:	08002e63 	.word	0x08002e63
 8002624:	08002ec1 	.word	0x08002ec1
 8002628:	08002cdf 	.word	0x08002cdf
 800262c:	08002f9b 	.word	0x08002f9b
 8002630:	08003041 	.word	0x08003041
 8002634:	08002675 	.word	0x08002675
 8002638:	08003167 	.word	0x08003167
 800263c:	080031c5 	.word	0x080031c5
 8002640:	20000220 	.word	0x20000220
 8002644:	20000200 	.word	0x20000200
 8002648:	20000214 	.word	0x20000214
 800264c:	20000224 	.word	0x20000224
 8002650:	20000228 	.word	0x20000228
 8002654:	20000218 	.word	0x20000218
 8002658:	3fb33333 	.word	0x3fb33333
 800265c:	2000020c 	.word	0x2000020c
 8002660:	20000204 	.word	0x20000204
 8002664:	200001fe 	.word	0x200001fe
 8002668:	20000210 	.word	0x20000210
 800266c:	20000208 	.word	0x20000208
 8002670:	200001ff 	.word	0x200001ff
            case STATE_RANDOM_MOVE1: {
                int rangeX = rx_in - pupilRadius * 0.5;
 8002674:	4b91      	ldr	r3, [pc, #580]	@ (80028bc <update_animation_state+0x42c>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7fd febb 	bl	80003f4 <__aeabi_i2d>
 800267e:	4604      	mov	r4, r0
 8002680:	460d      	mov	r5, r1
 8002682:	4b8f      	ldr	r3, [pc, #572]	@ (80028c0 <update_animation_state+0x430>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fd feb4 	bl	80003f4 <__aeabi_i2d>
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	4b8c      	ldr	r3, [pc, #560]	@ (80028c4 <update_animation_state+0x434>)
 8002692:	f7fd ff19 	bl	80004c8 <__aeabi_dmul>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4620      	mov	r0, r4
 800269c:	4629      	mov	r1, r5
 800269e:	f7fd fd5b 	bl	8000158 <__aeabi_dsub>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	f7fe f91f 	bl	80008ec <__aeabi_d2iz>
 80026ae:	4603      	mov	r3, r0
 80026b0:	623b      	str	r3, [r7, #32]
                int rangeY = ry_in - pupilRadius * 0.5;
 80026b2:	4b85      	ldr	r3, [pc, #532]	@ (80028c8 <update_animation_state+0x438>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fd fe9c 	bl	80003f4 <__aeabi_i2d>
 80026bc:	4604      	mov	r4, r0
 80026be:	460d      	mov	r5, r1
 80026c0:	4b7f      	ldr	r3, [pc, #508]	@ (80028c0 <update_animation_state+0x430>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fd fe95 	bl	80003f4 <__aeabi_i2d>
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	4b7d      	ldr	r3, [pc, #500]	@ (80028c4 <update_animation_state+0x434>)
 80026d0:	f7fd fefa 	bl	80004c8 <__aeabi_dmul>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4620      	mov	r0, r4
 80026da:	4629      	mov	r1, r5
 80026dc:	f7fd fd3c 	bl	8000158 <__aeabi_dsub>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	f7fe f900 	bl	80008ec <__aeabi_d2iz>
 80026ec:	4603      	mov	r3, r0
 80026ee:	61fb      	str	r3, [r7, #28]
                if (random_count < RANDOM_REPEAT) {
 80026f0:	4b76      	ldr	r3, [pc, #472]	@ (80028cc <update_animation_state+0x43c>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	2314      	movs	r3, #20
 80026f8:	429a      	cmp	r2, r3
 80026fa:	da45      	bge.n	8002788 <update_animation_state+0x2f8>
                    lerp_startX = pupilX;
 80026fc:	4b74      	ldr	r3, [pc, #464]	@ (80028d0 <update_animation_state+0x440>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	4b74      	ldr	r3, [pc, #464]	@ (80028d4 <update_animation_state+0x444>)
 8002704:	601a      	str	r2, [r3, #0]
                    lerp_startY = pupilY;
 8002706:	4b74      	ldr	r3, [pc, #464]	@ (80028d8 <update_animation_state+0x448>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	4b73      	ldr	r3, [pc, #460]	@ (80028dc <update_animation_state+0x44c>)
 800270e:	601a      	str	r2, [r3, #0]
                    int offsetX = (rand() % rangeX) - rangeX / 2;
 8002710:	f002 ff76 	bl	8005600 <rand>
 8002714:	4603      	mov	r3, r0
 8002716:	6a3a      	ldr	r2, [r7, #32]
 8002718:	fb93 f2f2 	sdiv	r2, r3, r2
 800271c:	6a39      	ldr	r1, [r7, #32]
 800271e:	fb01 f202 	mul.w	r2, r1, r2
 8002722:	1a9a      	subs	r2, r3, r2
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	0fd9      	lsrs	r1, r3, #31
 8002728:	440b      	add	r3, r1
 800272a:	105b      	asrs	r3, r3, #1
 800272c:	425b      	negs	r3, r3
 800272e:	4413      	add	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
                    int offsetY = (rand() % rangeY) - rangeY / 2;
 8002732:	f002 ff65 	bl	8005600 <rand>
 8002736:	4603      	mov	r3, r0
 8002738:	69fa      	ldr	r2, [r7, #28]
 800273a:	fb93 f2f2 	sdiv	r2, r3, r2
 800273e:	69f9      	ldr	r1, [r7, #28]
 8002740:	fb01 f202 	mul.w	r2, r1, r2
 8002744:	1a9a      	subs	r2, r3, r2
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	0fd9      	lsrs	r1, r3, #31
 800274a:	440b      	add	r3, r1
 800274c:	105b      	asrs	r3, r3, #1
 800274e:	425b      	negs	r3, r3
 8002750:	4413      	add	r3, r2
 8002752:	617b      	str	r3, [r7, #20]
                    lerp_targetX = centerX + offsetX;
 8002754:	4b62      	ldr	r3, [pc, #392]	@ (80028e0 <update_animation_state+0x450>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	461a      	mov	r2, r3
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	4413      	add	r3, r2
 800275e:	4a61      	ldr	r2, [pc, #388]	@ (80028e4 <update_animation_state+0x454>)
 8002760:	6013      	str	r3, [r2, #0]
                    lerp_targetY = centerY + offsetY;
 8002762:	4b61      	ldr	r3, [pc, #388]	@ (80028e8 <update_animation_state+0x458>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	4413      	add	r3, r2
 800276c:	4a5f      	ldr	r2, [pc, #380]	@ (80028ec <update_animation_state+0x45c>)
 800276e:	6013      	str	r3, [r2, #0]
                    lerp_t = 0.0f;
 8002770:	4b5f      	ldr	r3, [pc, #380]	@ (80028f0 <update_animation_state+0x460>)
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
                    random_count++;
 8002778:	4b54      	ldr	r3, [pc, #336]	@ (80028cc <update_animation_state+0x43c>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	3301      	adds	r3, #1
 800277e:	b2da      	uxtb	r2, r3
 8002780:	4b52      	ldr	r3, [pc, #328]	@ (80028cc <update_animation_state+0x43c>)
 8002782:	701a      	strb	r2, [r3, #0]
                    lerp_t = 0.0f;
                    state_index++;
                    if (state_index >= state_sequence_len) state_index = 0;
                    state = state_sequence[state_index];
                }
                break;
 8002784:	f000 bd1e 	b.w	80031c4 <update_animation_state+0xd34>
                    random_count = 0;
 8002788:	4b50      	ldr	r3, [pc, #320]	@ (80028cc <update_animation_state+0x43c>)
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
                    lerp_startX = pupilX;
 800278e:	4b50      	ldr	r3, [pc, #320]	@ (80028d0 <update_animation_state+0x440>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	4b4f      	ldr	r3, [pc, #316]	@ (80028d4 <update_animation_state+0x444>)
 8002796:	601a      	str	r2, [r3, #0]
                    lerp_startY = pupilY;
 8002798:	4b4f      	ldr	r3, [pc, #316]	@ (80028d8 <update_animation_state+0x448>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	4b4f      	ldr	r3, [pc, #316]	@ (80028dc <update_animation_state+0x44c>)
 80027a0:	601a      	str	r2, [r3, #0]
                    lerp_targetX = centerX;
 80027a2:	4b4f      	ldr	r3, [pc, #316]	@ (80028e0 <update_animation_state+0x450>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	4b4e      	ldr	r3, [pc, #312]	@ (80028e4 <update_animation_state+0x454>)
 80027aa:	601a      	str	r2, [r3, #0]
                    lerp_targetY = centerY;
 80027ac:	4b4e      	ldr	r3, [pc, #312]	@ (80028e8 <update_animation_state+0x458>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b4e      	ldr	r3, [pc, #312]	@ (80028ec <update_animation_state+0x45c>)
 80027b4:	601a      	str	r2, [r3, #0]
                    lerp_t = 0.0f;
 80027b6:	4b4e      	ldr	r3, [pc, #312]	@ (80028f0 <update_animation_state+0x460>)
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
                    state_index++;
 80027be:	4b4d      	ldr	r3, [pc, #308]	@ (80028f4 <update_animation_state+0x464>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	3301      	adds	r3, #1
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	4b4b      	ldr	r3, [pc, #300]	@ (80028f4 <update_animation_state+0x464>)
 80027c8:	701a      	strb	r2, [r3, #0]
                    if (state_index >= state_sequence_len) state_index = 0;
 80027ca:	4b4a      	ldr	r3, [pc, #296]	@ (80028f4 <update_animation_state+0x464>)
 80027cc:	781a      	ldrb	r2, [r3, #0]
 80027ce:	4b4a      	ldr	r3, [pc, #296]	@ (80028f8 <update_animation_state+0x468>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d302      	bcc.n	80027dc <update_animation_state+0x34c>
 80027d6:	4b47      	ldr	r3, [pc, #284]	@ (80028f4 <update_animation_state+0x464>)
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
                    state = state_sequence[state_index];
 80027dc:	4b45      	ldr	r3, [pc, #276]	@ (80028f4 <update_animation_state+0x464>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b46      	ldr	r3, [pc, #280]	@ (80028fc <update_animation_state+0x46c>)
 80027e4:	5c9a      	ldrb	r2, [r3, r2]
 80027e6:	4b46      	ldr	r3, [pc, #280]	@ (8002900 <update_animation_state+0x470>)
 80027e8:	701a      	strb	r2, [r3, #0]
                break;
 80027ea:	f000 bceb 	b.w	80031c4 <update_animation_state+0xd34>
            }
            case STATE_UP_FROM_CENTER:
                lerp_startX = pupilX; lerp_startY = pupilY;
 80027ee:	4b38      	ldr	r3, [pc, #224]	@ (80028d0 <update_animation_state+0x440>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	4b37      	ldr	r3, [pc, #220]	@ (80028d4 <update_animation_state+0x444>)
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	4b37      	ldr	r3, [pc, #220]	@ (80028d8 <update_animation_state+0x448>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b37      	ldr	r3, [pc, #220]	@ (80028dc <update_animation_state+0x44c>)
 8002800:	601a      	str	r2, [r3, #0]
                lerp_targetX = centerX;
 8002802:	4b37      	ldr	r3, [pc, #220]	@ (80028e0 <update_animation_state+0x450>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	4b36      	ldr	r3, [pc, #216]	@ (80028e4 <update_animation_state+0x454>)
 800280a:	601a      	str	r2, [r3, #0]
                lerp_targetY = centerY - (ry_in - pupilRadius);
 800280c:	4b36      	ldr	r3, [pc, #216]	@ (80028e8 <update_animation_state+0x458>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	4b2d      	ldr	r3, [pc, #180]	@ (80028c8 <update_animation_state+0x438>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	4619      	mov	r1, r3
 8002818:	4b29      	ldr	r3, [pc, #164]	@ (80028c0 <update_animation_state+0x430>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	1acb      	subs	r3, r1, r3
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	4a32      	ldr	r2, [pc, #200]	@ (80028ec <update_animation_state+0x45c>)
 8002822:	6013      	str	r3, [r2, #0]
                lerp_t = 0.0f;
 8002824:	4b32      	ldr	r3, [pc, #200]	@ (80028f0 <update_animation_state+0x460>)
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
                state_index++;
 800282c:	4b31      	ldr	r3, [pc, #196]	@ (80028f4 <update_animation_state+0x464>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	b2da      	uxtb	r2, r3
 8002834:	4b2f      	ldr	r3, [pc, #188]	@ (80028f4 <update_animation_state+0x464>)
 8002836:	701a      	strb	r2, [r3, #0]
                if (state_index >= state_sequence_len) state_index = 0;
 8002838:	4b2e      	ldr	r3, [pc, #184]	@ (80028f4 <update_animation_state+0x464>)
 800283a:	781a      	ldrb	r2, [r3, #0]
 800283c:	4b2e      	ldr	r3, [pc, #184]	@ (80028f8 <update_animation_state+0x468>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d302      	bcc.n	800284a <update_animation_state+0x3ba>
 8002844:	4b2b      	ldr	r3, [pc, #172]	@ (80028f4 <update_animation_state+0x464>)
 8002846:	2200      	movs	r2, #0
 8002848:	701a      	strb	r2, [r3, #0]
                state = state_sequence[state_index];
 800284a:	4b2a      	ldr	r3, [pc, #168]	@ (80028f4 <update_animation_state+0x464>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	4b2a      	ldr	r3, [pc, #168]	@ (80028fc <update_animation_state+0x46c>)
 8002852:	5c9a      	ldrb	r2, [r3, r2]
 8002854:	4b2a      	ldr	r3, [pc, #168]	@ (8002900 <update_animation_state+0x470>)
 8002856:	701a      	strb	r2, [r3, #0]
                break;
 8002858:	f000 bcb4 	b.w	80031c4 <update_animation_state+0xd34>
            case STATE_DOWN_TO_CENTER:
                lerp_startX = pupilX; lerp_startY = pupilY;
 800285c:	4b1c      	ldr	r3, [pc, #112]	@ (80028d0 <update_animation_state+0x440>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	4b1c      	ldr	r3, [pc, #112]	@ (80028d4 <update_animation_state+0x444>)
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	4b1c      	ldr	r3, [pc, #112]	@ (80028d8 <update_animation_state+0x448>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	4b1b      	ldr	r3, [pc, #108]	@ (80028dc <update_animation_state+0x44c>)
 800286e:	601a      	str	r2, [r3, #0]
                lerp_targetX = centerX;
 8002870:	4b1b      	ldr	r3, [pc, #108]	@ (80028e0 <update_animation_state+0x450>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	4b1b      	ldr	r3, [pc, #108]	@ (80028e4 <update_animation_state+0x454>)
 8002878:	601a      	str	r2, [r3, #0]
                lerp_targetY = centerY;
 800287a:	4b1b      	ldr	r3, [pc, #108]	@ (80028e8 <update_animation_state+0x458>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	4b1a      	ldr	r3, [pc, #104]	@ (80028ec <update_animation_state+0x45c>)
 8002882:	601a      	str	r2, [r3, #0]
                lerp_t = 0.0f;
 8002884:	4b1a      	ldr	r3, [pc, #104]	@ (80028f0 <update_animation_state+0x460>)
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
                state_index++;
 800288c:	4b19      	ldr	r3, [pc, #100]	@ (80028f4 <update_animation_state+0x464>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	3301      	adds	r3, #1
 8002892:	b2da      	uxtb	r2, r3
 8002894:	4b17      	ldr	r3, [pc, #92]	@ (80028f4 <update_animation_state+0x464>)
 8002896:	701a      	strb	r2, [r3, #0]
                if (state_index >= state_sequence_len) state_index = 0;
 8002898:	4b16      	ldr	r3, [pc, #88]	@ (80028f4 <update_animation_state+0x464>)
 800289a:	781a      	ldrb	r2, [r3, #0]
 800289c:	4b16      	ldr	r3, [pc, #88]	@ (80028f8 <update_animation_state+0x468>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d302      	bcc.n	80028aa <update_animation_state+0x41a>
 80028a4:	4b13      	ldr	r3, [pc, #76]	@ (80028f4 <update_animation_state+0x464>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]
                state = state_sequence[state_index];
 80028aa:	4b12      	ldr	r3, [pc, #72]	@ (80028f4 <update_animation_state+0x464>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	4b12      	ldr	r3, [pc, #72]	@ (80028fc <update_animation_state+0x46c>)
 80028b2:	5c9a      	ldrb	r2, [r3, r2]
 80028b4:	4b12      	ldr	r3, [pc, #72]	@ (8002900 <update_animation_state+0x470>)
 80028b6:	701a      	strb	r2, [r3, #0]
                break;
 80028b8:	f000 bc84 	b.w	80031c4 <update_animation_state+0xd34>
 80028bc:	200001fa 	.word	0x200001fa
 80028c0:	200001fc 	.word	0x200001fc
 80028c4:	3fe00000 	.word	0x3fe00000
 80028c8:	200001fb 	.word	0x200001fb
 80028cc:	2000021e 	.word	0x2000021e
 80028d0:	200001fe 	.word	0x200001fe
 80028d4:	20000204 	.word	0x20000204
 80028d8:	200001ff 	.word	0x200001ff
 80028dc:	20000208 	.word	0x20000208
 80028e0:	200001f8 	.word	0x200001f8
 80028e4:	2000020c 	.word	0x2000020c
 80028e8:	200001f9 	.word	0x200001f9
 80028ec:	20000210 	.word	0x20000210
 80028f0:	20000214 	.word	0x20000214
 80028f4:	2000021c 	.word	0x2000021c
 80028f8:	2000021d 	.word	0x2000021d
 80028fc:	080072f4 	.word	0x080072f4
 8002900:	20000200 	.word	0x20000200
            case STATE_LEFT_FROM_CENTER:
                lerp_startX = pupilX; lerp_startY = pupilY;
 8002904:	4b80      	ldr	r3, [pc, #512]	@ (8002b08 <update_animation_state+0x678>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	4b80      	ldr	r3, [pc, #512]	@ (8002b0c <update_animation_state+0x67c>)
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	4b80      	ldr	r3, [pc, #512]	@ (8002b10 <update_animation_state+0x680>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	4b7f      	ldr	r3, [pc, #508]	@ (8002b14 <update_animation_state+0x684>)
 8002916:	601a      	str	r2, [r3, #0]
                lerp_targetX = centerX - (rx_in - pupilRadius);
 8002918:	4b7f      	ldr	r3, [pc, #508]	@ (8002b18 <update_animation_state+0x688>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b1c <update_animation_state+0x68c>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	4619      	mov	r1, r3
 8002924:	4b7e      	ldr	r3, [pc, #504]	@ (8002b20 <update_animation_state+0x690>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	1acb      	subs	r3, r1, r3
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	4a7d      	ldr	r2, [pc, #500]	@ (8002b24 <update_animation_state+0x694>)
 800292e:	6013      	str	r3, [r2, #0]
                lerp_targetY = centerY;
 8002930:	4b7d      	ldr	r3, [pc, #500]	@ (8002b28 <update_animation_state+0x698>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	4b7d      	ldr	r3, [pc, #500]	@ (8002b2c <update_animation_state+0x69c>)
 8002938:	601a      	str	r2, [r3, #0]
                lerp_t = 0.0f;
 800293a:	4b7d      	ldr	r3, [pc, #500]	@ (8002b30 <update_animation_state+0x6a0>)
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
                state_index++;
 8002942:	4b7c      	ldr	r3, [pc, #496]	@ (8002b34 <update_animation_state+0x6a4>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	3301      	adds	r3, #1
 8002948:	b2da      	uxtb	r2, r3
 800294a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b34 <update_animation_state+0x6a4>)
 800294c:	701a      	strb	r2, [r3, #0]
                if (state_index >= state_sequence_len) state_index = 0;
 800294e:	4b79      	ldr	r3, [pc, #484]	@ (8002b34 <update_animation_state+0x6a4>)
 8002950:	781a      	ldrb	r2, [r3, #0]
 8002952:	4b79      	ldr	r3, [pc, #484]	@ (8002b38 <update_animation_state+0x6a8>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d302      	bcc.n	8002960 <update_animation_state+0x4d0>
 800295a:	4b76      	ldr	r3, [pc, #472]	@ (8002b34 <update_animation_state+0x6a4>)
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
                state = state_sequence[state_index];
 8002960:	4b74      	ldr	r3, [pc, #464]	@ (8002b34 <update_animation_state+0x6a4>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	4b75      	ldr	r3, [pc, #468]	@ (8002b3c <update_animation_state+0x6ac>)
 8002968:	5c9a      	ldrb	r2, [r3, r2]
 800296a:	4b75      	ldr	r3, [pc, #468]	@ (8002b40 <update_animation_state+0x6b0>)
 800296c:	701a      	strb	r2, [r3, #0]
                break;
 800296e:	f000 bc29 	b.w	80031c4 <update_animation_state+0xd34>
            case STATE_RIGHT_TO_CENTER:
                lerp_startX = pupilX; lerp_startY = pupilY;
 8002972:	4b65      	ldr	r3, [pc, #404]	@ (8002b08 <update_animation_state+0x678>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	4b64      	ldr	r3, [pc, #400]	@ (8002b0c <update_animation_state+0x67c>)
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	4b64      	ldr	r3, [pc, #400]	@ (8002b10 <update_animation_state+0x680>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	4b64      	ldr	r3, [pc, #400]	@ (8002b14 <update_animation_state+0x684>)
 8002984:	601a      	str	r2, [r3, #0]
                lerp_targetX = centerX;
 8002986:	4b64      	ldr	r3, [pc, #400]	@ (8002b18 <update_animation_state+0x688>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	4b65      	ldr	r3, [pc, #404]	@ (8002b24 <update_animation_state+0x694>)
 800298e:	601a      	str	r2, [r3, #0]
                lerp_targetY = centerY;
 8002990:	4b65      	ldr	r3, [pc, #404]	@ (8002b28 <update_animation_state+0x698>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	4b65      	ldr	r3, [pc, #404]	@ (8002b2c <update_animation_state+0x69c>)
 8002998:	601a      	str	r2, [r3, #0]
                lerp_t = 0.0f;
 800299a:	4b65      	ldr	r3, [pc, #404]	@ (8002b30 <update_animation_state+0x6a0>)
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
                state_index++;
 80029a2:	4b64      	ldr	r3, [pc, #400]	@ (8002b34 <update_animation_state+0x6a4>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	3301      	adds	r3, #1
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	4b62      	ldr	r3, [pc, #392]	@ (8002b34 <update_animation_state+0x6a4>)
 80029ac:	701a      	strb	r2, [r3, #0]
                if (state_index >= state_sequence_len) state_index = 0;
 80029ae:	4b61      	ldr	r3, [pc, #388]	@ (8002b34 <update_animation_state+0x6a4>)
 80029b0:	781a      	ldrb	r2, [r3, #0]
 80029b2:	4b61      	ldr	r3, [pc, #388]	@ (8002b38 <update_animation_state+0x6a8>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d302      	bcc.n	80029c0 <update_animation_state+0x530>
 80029ba:	4b5e      	ldr	r3, [pc, #376]	@ (8002b34 <update_animation_state+0x6a4>)
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]
                state = state_sequence[state_index];
 80029c0:	4b5c      	ldr	r3, [pc, #368]	@ (8002b34 <update_animation_state+0x6a4>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	4b5d      	ldr	r3, [pc, #372]	@ (8002b3c <update_animation_state+0x6ac>)
 80029c8:	5c9a      	ldrb	r2, [r3, r2]
 80029ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002b40 <update_animation_state+0x6b0>)
 80029cc:	701a      	strb	r2, [r3, #0]
                break;
 80029ce:	e3f9      	b.n	80031c4 <update_animation_state+0xd34>
            case STATE_DOWN_FROM_CENTER:
                lerp_startX = pupilX; lerp_startY = pupilY;
 80029d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002b08 <update_animation_state+0x678>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	4b4d      	ldr	r3, [pc, #308]	@ (8002b0c <update_animation_state+0x67c>)
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	4b4d      	ldr	r3, [pc, #308]	@ (8002b10 <update_animation_state+0x680>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002b14 <update_animation_state+0x684>)
 80029e2:	601a      	str	r2, [r3, #0]
                lerp_targetX = centerX;
 80029e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002b18 <update_animation_state+0x688>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002b24 <update_animation_state+0x694>)
 80029ec:	601a      	str	r2, [r3, #0]
                lerp_targetY = centerY + (ry_in - pupilRadius);
 80029ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002b28 <update_animation_state+0x698>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	4b53      	ldr	r3, [pc, #332]	@ (8002b44 <update_animation_state+0x6b4>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	4619      	mov	r1, r3
 80029fa:	4b49      	ldr	r3, [pc, #292]	@ (8002b20 <update_animation_state+0x690>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	1acb      	subs	r3, r1, r3
 8002a00:	4413      	add	r3, r2
 8002a02:	4a4a      	ldr	r2, [pc, #296]	@ (8002b2c <update_animation_state+0x69c>)
 8002a04:	6013      	str	r3, [r2, #0]
                lerp_t = 0.0f;
 8002a06:	4b4a      	ldr	r3, [pc, #296]	@ (8002b30 <update_animation_state+0x6a0>)
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
                state_index++;
 8002a0e:	4b49      	ldr	r3, [pc, #292]	@ (8002b34 <update_animation_state+0x6a4>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	3301      	adds	r3, #1
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	4b47      	ldr	r3, [pc, #284]	@ (8002b34 <update_animation_state+0x6a4>)
 8002a18:	701a      	strb	r2, [r3, #0]
                if (state_index >= state_sequence_len) state_index = 0;
 8002a1a:	4b46      	ldr	r3, [pc, #280]	@ (8002b34 <update_animation_state+0x6a4>)
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	4b46      	ldr	r3, [pc, #280]	@ (8002b38 <update_animation_state+0x6a8>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d302      	bcc.n	8002a2c <update_animation_state+0x59c>
 8002a26:	4b43      	ldr	r3, [pc, #268]	@ (8002b34 <update_animation_state+0x6a4>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
                state = state_sequence[state_index];
 8002a2c:	4b41      	ldr	r3, [pc, #260]	@ (8002b34 <update_animation_state+0x6a4>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b42      	ldr	r3, [pc, #264]	@ (8002b3c <update_animation_state+0x6ac>)
 8002a34:	5c9a      	ldrb	r2, [r3, r2]
 8002a36:	4b42      	ldr	r3, [pc, #264]	@ (8002b40 <update_animation_state+0x6b0>)
 8002a38:	701a      	strb	r2, [r3, #0]
                break;
 8002a3a:	e3c3      	b.n	80031c4 <update_animation_state+0xd34>
            case STATE_UP_TO_CENTER:
                lerp_startX = pupilX; lerp_startY = pupilY;
 8002a3c:	4b32      	ldr	r3, [pc, #200]	@ (8002b08 <update_animation_state+0x678>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	4b32      	ldr	r3, [pc, #200]	@ (8002b0c <update_animation_state+0x67c>)
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	4b32      	ldr	r3, [pc, #200]	@ (8002b10 <update_animation_state+0x680>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4b31      	ldr	r3, [pc, #196]	@ (8002b14 <update_animation_state+0x684>)
 8002a4e:	601a      	str	r2, [r3, #0]
                lerp_targetX = centerX;
 8002a50:	4b31      	ldr	r3, [pc, #196]	@ (8002b18 <update_animation_state+0x688>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	461a      	mov	r2, r3
 8002a56:	4b33      	ldr	r3, [pc, #204]	@ (8002b24 <update_animation_state+0x694>)
 8002a58:	601a      	str	r2, [r3, #0]
                lerp_targetY = centerY;
 8002a5a:	4b33      	ldr	r3, [pc, #204]	@ (8002b28 <update_animation_state+0x698>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	4b32      	ldr	r3, [pc, #200]	@ (8002b2c <update_animation_state+0x69c>)
 8002a62:	601a      	str	r2, [r3, #0]
                lerp_t = 0.0f;
 8002a64:	4b32      	ldr	r3, [pc, #200]	@ (8002b30 <update_animation_state+0x6a0>)
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
                state_index++;
 8002a6c:	4b31      	ldr	r3, [pc, #196]	@ (8002b34 <update_animation_state+0x6a4>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	3301      	adds	r3, #1
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	4b2f      	ldr	r3, [pc, #188]	@ (8002b34 <update_animation_state+0x6a4>)
 8002a76:	701a      	strb	r2, [r3, #0]
                if (state_index >= state_sequence_len) state_index = 0;
 8002a78:	4b2e      	ldr	r3, [pc, #184]	@ (8002b34 <update_animation_state+0x6a4>)
 8002a7a:	781a      	ldrb	r2, [r3, #0]
 8002a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002b38 <update_animation_state+0x6a8>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d302      	bcc.n	8002a8a <update_animation_state+0x5fa>
 8002a84:	4b2b      	ldr	r3, [pc, #172]	@ (8002b34 <update_animation_state+0x6a4>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
                state = state_sequence[state_index];
 8002a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b34 <update_animation_state+0x6a4>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	4b2a      	ldr	r3, [pc, #168]	@ (8002b3c <update_animation_state+0x6ac>)
 8002a92:	5c9a      	ldrb	r2, [r3, r2]
 8002a94:	4b2a      	ldr	r3, [pc, #168]	@ (8002b40 <update_animation_state+0x6b0>)
 8002a96:	701a      	strb	r2, [r3, #0]
                break;
 8002a98:	e394      	b.n	80031c4 <update_animation_state+0xd34>
            case STATE_RIGHT_FROM_CENTER:
                lerp_startX = pupilX; lerp_startY = pupilY;
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b08 <update_animation_state+0x678>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b0c <update_animation_state+0x67c>)
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b10 <update_animation_state+0x680>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8002b14 <update_animation_state+0x684>)
 8002aac:	601a      	str	r2, [r3, #0]
                lerp_targetX = centerX + (rx_in - pupilRadius);
 8002aae:	4b1a      	ldr	r3, [pc, #104]	@ (8002b18 <update_animation_state+0x688>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	4b19      	ldr	r3, [pc, #100]	@ (8002b1c <update_animation_state+0x68c>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4b19      	ldr	r3, [pc, #100]	@ (8002b20 <update_animation_state+0x690>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	1acb      	subs	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	4a18      	ldr	r2, [pc, #96]	@ (8002b24 <update_animation_state+0x694>)
 8002ac4:	6013      	str	r3, [r2, #0]
                lerp_targetY = centerY;
 8002ac6:	4b18      	ldr	r3, [pc, #96]	@ (8002b28 <update_animation_state+0x698>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	4b17      	ldr	r3, [pc, #92]	@ (8002b2c <update_animation_state+0x69c>)
 8002ace:	601a      	str	r2, [r3, #0]
                lerp_t = 0.0f;
 8002ad0:	4b17      	ldr	r3, [pc, #92]	@ (8002b30 <update_animation_state+0x6a0>)
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
                state_index++;
 8002ad8:	4b16      	ldr	r3, [pc, #88]	@ (8002b34 <update_animation_state+0x6a4>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	3301      	adds	r3, #1
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	4b14      	ldr	r3, [pc, #80]	@ (8002b34 <update_animation_state+0x6a4>)
 8002ae2:	701a      	strb	r2, [r3, #0]
                if (state_index >= state_sequence_len) state_index = 0;
 8002ae4:	4b13      	ldr	r3, [pc, #76]	@ (8002b34 <update_animation_state+0x6a4>)
 8002ae6:	781a      	ldrb	r2, [r3, #0]
 8002ae8:	4b13      	ldr	r3, [pc, #76]	@ (8002b38 <update_animation_state+0x6a8>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d302      	bcc.n	8002af6 <update_animation_state+0x666>
 8002af0:	4b10      	ldr	r3, [pc, #64]	@ (8002b34 <update_animation_state+0x6a4>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
                state = state_sequence[state_index];
 8002af6:	4b0f      	ldr	r3, [pc, #60]	@ (8002b34 <update_animation_state+0x6a4>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b0f      	ldr	r3, [pc, #60]	@ (8002b3c <update_animation_state+0x6ac>)
 8002afe:	5c9a      	ldrb	r2, [r3, r2]
 8002b00:	4b0f      	ldr	r3, [pc, #60]	@ (8002b40 <update_animation_state+0x6b0>)
 8002b02:	701a      	strb	r2, [r3, #0]
                break;
 8002b04:	e35e      	b.n	80031c4 <update_animation_state+0xd34>
 8002b06:	bf00      	nop
 8002b08:	200001fe 	.word	0x200001fe
 8002b0c:	20000204 	.word	0x20000204
 8002b10:	200001ff 	.word	0x200001ff
 8002b14:	20000208 	.word	0x20000208
 8002b18:	200001f8 	.word	0x200001f8
 8002b1c:	200001fa 	.word	0x200001fa
 8002b20:	200001fc 	.word	0x200001fc
 8002b24:	2000020c 	.word	0x2000020c
 8002b28:	200001f9 	.word	0x200001f9
 8002b2c:	20000210 	.word	0x20000210
 8002b30:	20000214 	.word	0x20000214
 8002b34:	2000021c 	.word	0x2000021c
 8002b38:	2000021d 	.word	0x2000021d
 8002b3c:	080072f4 	.word	0x080072f4
 8002b40:	20000200 	.word	0x20000200
 8002b44:	200001fb 	.word	0x200001fb
            case STATE_LEFT_TO_CENTER:
                lerp_startX = pupilX; lerp_startY = pupilY;
 8002b48:	4b7f      	ldr	r3, [pc, #508]	@ (8002d48 <update_animation_state+0x8b8>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d4c <update_animation_state+0x8bc>)
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	4b7f      	ldr	r3, [pc, #508]	@ (8002d50 <update_animation_state+0x8c0>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	4b7e      	ldr	r3, [pc, #504]	@ (8002d54 <update_animation_state+0x8c4>)
 8002b5a:	601a      	str	r2, [r3, #0]
                lerp_targetX = centerX;
 8002b5c:	4b7e      	ldr	r3, [pc, #504]	@ (8002d58 <update_animation_state+0x8c8>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b7e      	ldr	r3, [pc, #504]	@ (8002d5c <update_animation_state+0x8cc>)
 8002b64:	601a      	str	r2, [r3, #0]
                lerp_targetY = centerY;
 8002b66:	4b7e      	ldr	r3, [pc, #504]	@ (8002d60 <update_animation_state+0x8d0>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4b7d      	ldr	r3, [pc, #500]	@ (8002d64 <update_animation_state+0x8d4>)
 8002b6e:	601a      	str	r2, [r3, #0]
                lerp_t = 0.0f;
 8002b70:	4b7d      	ldr	r3, [pc, #500]	@ (8002d68 <update_animation_state+0x8d8>)
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
                state_index++;
 8002b78:	4b7c      	ldr	r3, [pc, #496]	@ (8002d6c <update_animation_state+0x8dc>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	4b7a      	ldr	r3, [pc, #488]	@ (8002d6c <update_animation_state+0x8dc>)
 8002b82:	701a      	strb	r2, [r3, #0]
                if (state_index >= state_sequence_len) state_index = 0;
 8002b84:	4b79      	ldr	r3, [pc, #484]	@ (8002d6c <update_animation_state+0x8dc>)
 8002b86:	781a      	ldrb	r2, [r3, #0]
 8002b88:	4b79      	ldr	r3, [pc, #484]	@ (8002d70 <update_animation_state+0x8e0>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d302      	bcc.n	8002b96 <update_animation_state+0x706>
 8002b90:	4b76      	ldr	r3, [pc, #472]	@ (8002d6c <update_animation_state+0x8dc>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
                state = state_sequence[state_index];
 8002b96:	4b75      	ldr	r3, [pc, #468]	@ (8002d6c <update_animation_state+0x8dc>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4b75      	ldr	r3, [pc, #468]	@ (8002d74 <update_animation_state+0x8e4>)
 8002b9e:	5c9a      	ldrb	r2, [r3, r2]
 8002ba0:	4b75      	ldr	r3, [pc, #468]	@ (8002d78 <update_animation_state+0x8e8>)
 8002ba2:	701a      	strb	r2, [r3, #0]
                break;
 8002ba4:	e30e      	b.n	80031c4 <update_animation_state+0xd34>
            case STATE_UPLEFT_FROM_CENTER:
                lerp_startX = pupilX; lerp_startY = pupilY;
 8002ba6:	4b68      	ldr	r3, [pc, #416]	@ (8002d48 <update_animation_state+0x8b8>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	4b67      	ldr	r3, [pc, #412]	@ (8002d4c <update_animation_state+0x8bc>)
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	4b67      	ldr	r3, [pc, #412]	@ (8002d50 <update_animation_state+0x8c0>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b67      	ldr	r3, [pc, #412]	@ (8002d54 <update_animation_state+0x8c4>)
 8002bb8:	601a      	str	r2, [r3, #0]
                lerp_targetX = centerX - (rx_in - pupilRadius) / 1.4;
 8002bba:	4b67      	ldr	r3, [pc, #412]	@ (8002d58 <update_animation_state+0x8c8>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd fc18 	bl	80003f4 <__aeabi_i2d>
 8002bc4:	4604      	mov	r4, r0
 8002bc6:	460d      	mov	r5, r1
 8002bc8:	4b6c      	ldr	r3, [pc, #432]	@ (8002d7c <update_animation_state+0x8ec>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4b6c      	ldr	r3, [pc, #432]	@ (8002d80 <update_animation_state+0x8f0>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fd fc0d 	bl	80003f4 <__aeabi_i2d>
 8002bda:	a359      	add	r3, pc, #356	@ (adr r3, 8002d40 <update_animation_state+0x8b0>)
 8002bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be0:	f7fd fd9c 	bl	800071c <__aeabi_ddiv>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4620      	mov	r0, r4
 8002bea:	4629      	mov	r1, r5
 8002bec:	f7fd fab4 	bl	8000158 <__aeabi_dsub>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	f7fd fe78 	bl	80008ec <__aeabi_d2iz>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	4a57      	ldr	r2, [pc, #348]	@ (8002d5c <update_animation_state+0x8cc>)
 8002c00:	6013      	str	r3, [r2, #0]
                lerp_targetY = centerY - (ry_in - pupilRadius) / 1.4;
 8002c02:	4b57      	ldr	r3, [pc, #348]	@ (8002d60 <update_animation_state+0x8d0>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fd fbf4 	bl	80003f4 <__aeabi_i2d>
 8002c0c:	4604      	mov	r4, r0
 8002c0e:	460d      	mov	r5, r1
 8002c10:	4b5c      	ldr	r3, [pc, #368]	@ (8002d84 <update_animation_state+0x8f4>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	4b5a      	ldr	r3, [pc, #360]	@ (8002d80 <update_animation_state+0x8f0>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fd fbe9 	bl	80003f4 <__aeabi_i2d>
 8002c22:	a347      	add	r3, pc, #284	@ (adr r3, 8002d40 <update_animation_state+0x8b0>)
 8002c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c28:	f7fd fd78 	bl	800071c <__aeabi_ddiv>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4620      	mov	r0, r4
 8002c32:	4629      	mov	r1, r5
 8002c34:	f7fd fa90 	bl	8000158 <__aeabi_dsub>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f7fd fe54 	bl	80008ec <__aeabi_d2iz>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4a47      	ldr	r2, [pc, #284]	@ (8002d64 <update_animation_state+0x8d4>)
 8002c48:	6013      	str	r3, [r2, #0]
                lerp_t = 0.0f;
 8002c4a:	4b47      	ldr	r3, [pc, #284]	@ (8002d68 <update_animation_state+0x8d8>)
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
                state_index++;
 8002c52:	4b46      	ldr	r3, [pc, #280]	@ (8002d6c <update_animation_state+0x8dc>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	3301      	adds	r3, #1
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	4b44      	ldr	r3, [pc, #272]	@ (8002d6c <update_animation_state+0x8dc>)
 8002c5c:	701a      	strb	r2, [r3, #0]
                if (state_index >= state_sequence_len) state_index = 0;
 8002c5e:	4b43      	ldr	r3, [pc, #268]	@ (8002d6c <update_animation_state+0x8dc>)
 8002c60:	781a      	ldrb	r2, [r3, #0]
 8002c62:	4b43      	ldr	r3, [pc, #268]	@ (8002d70 <update_animation_state+0x8e0>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d302      	bcc.n	8002c70 <update_animation_state+0x7e0>
 8002c6a:	4b40      	ldr	r3, [pc, #256]	@ (8002d6c <update_animation_state+0x8dc>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
                state = state_sequence[state_index];
 8002c70:	4b3e      	ldr	r3, [pc, #248]	@ (8002d6c <update_animation_state+0x8dc>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b3f      	ldr	r3, [pc, #252]	@ (8002d74 <update_animation_state+0x8e4>)
 8002c78:	5c9a      	ldrb	r2, [r3, r2]
 8002c7a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d78 <update_animation_state+0x8e8>)
 8002c7c:	701a      	strb	r2, [r3, #0]
                break;
 8002c7e:	e2a1      	b.n	80031c4 <update_animation_state+0xd34>
            case STATE_DOWNRIGHT_TO_CENTER:
                lerp_startX = pupilX; lerp_startY = pupilY;
 8002c80:	4b31      	ldr	r3, [pc, #196]	@ (8002d48 <update_animation_state+0x8b8>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	4b31      	ldr	r3, [pc, #196]	@ (8002d4c <update_animation_state+0x8bc>)
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	4b31      	ldr	r3, [pc, #196]	@ (8002d50 <update_animation_state+0x8c0>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4b30      	ldr	r3, [pc, #192]	@ (8002d54 <update_animation_state+0x8c4>)
 8002c92:	601a      	str	r2, [r3, #0]
                lerp_targetX = centerX;
 8002c94:	4b30      	ldr	r3, [pc, #192]	@ (8002d58 <update_animation_state+0x8c8>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4b30      	ldr	r3, [pc, #192]	@ (8002d5c <update_animation_state+0x8cc>)
 8002c9c:	601a      	str	r2, [r3, #0]
                lerp_targetY = centerY;
 8002c9e:	4b30      	ldr	r3, [pc, #192]	@ (8002d60 <update_animation_state+0x8d0>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4b2f      	ldr	r3, [pc, #188]	@ (8002d64 <update_animation_state+0x8d4>)
 8002ca6:	601a      	str	r2, [r3, #0]
                lerp_t = 0.0f;
 8002ca8:	4b2f      	ldr	r3, [pc, #188]	@ (8002d68 <update_animation_state+0x8d8>)
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
                state_index++;
 8002cb0:	4b2e      	ldr	r3, [pc, #184]	@ (8002d6c <update_animation_state+0x8dc>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	4b2c      	ldr	r3, [pc, #176]	@ (8002d6c <update_animation_state+0x8dc>)
 8002cba:	701a      	strb	r2, [r3, #0]
                if (state_index >= state_sequence_len) state_index = 0;
 8002cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8002d6c <update_animation_state+0x8dc>)
 8002cbe:	781a      	ldrb	r2, [r3, #0]
 8002cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d70 <update_animation_state+0x8e0>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d302      	bcc.n	8002cce <update_animation_state+0x83e>
 8002cc8:	4b28      	ldr	r3, [pc, #160]	@ (8002d6c <update_animation_state+0x8dc>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
                state = state_sequence[state_index];
 8002cce:	4b27      	ldr	r3, [pc, #156]	@ (8002d6c <update_animation_state+0x8dc>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	4b27      	ldr	r3, [pc, #156]	@ (8002d74 <update_animation_state+0x8e4>)
 8002cd6:	5c9a      	ldrb	r2, [r3, r2]
 8002cd8:	4b27      	ldr	r3, [pc, #156]	@ (8002d78 <update_animation_state+0x8e8>)
 8002cda:	701a      	strb	r2, [r3, #0]
                break;
 8002cdc:	e272      	b.n	80031c4 <update_animation_state+0xd34>
            case STATE_UPRIGHT_TO_CENTER:
                lerp_startX = pupilX; lerp_startY = pupilY;
 8002cde:	4b1a      	ldr	r3, [pc, #104]	@ (8002d48 <update_animation_state+0x8b8>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4b19      	ldr	r3, [pc, #100]	@ (8002d4c <update_animation_state+0x8bc>)
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	4b19      	ldr	r3, [pc, #100]	@ (8002d50 <update_animation_state+0x8c0>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	4b19      	ldr	r3, [pc, #100]	@ (8002d54 <update_animation_state+0x8c4>)
 8002cf0:	601a      	str	r2, [r3, #0]
                lerp_targetX = centerX;
 8002cf2:	4b19      	ldr	r3, [pc, #100]	@ (8002d58 <update_animation_state+0x8c8>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4b18      	ldr	r3, [pc, #96]	@ (8002d5c <update_animation_state+0x8cc>)
 8002cfa:	601a      	str	r2, [r3, #0]
                lerp_targetY = centerY;
 8002cfc:	4b18      	ldr	r3, [pc, #96]	@ (8002d60 <update_animation_state+0x8d0>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	461a      	mov	r2, r3
 8002d02:	4b18      	ldr	r3, [pc, #96]	@ (8002d64 <update_animation_state+0x8d4>)
 8002d04:	601a      	str	r2, [r3, #0]
                lerp_t = 0.0f;
 8002d06:	4b18      	ldr	r3, [pc, #96]	@ (8002d68 <update_animation_state+0x8d8>)
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
                state_index++;
 8002d0e:	4b17      	ldr	r3, [pc, #92]	@ (8002d6c <update_animation_state+0x8dc>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	3301      	adds	r3, #1
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	4b15      	ldr	r3, [pc, #84]	@ (8002d6c <update_animation_state+0x8dc>)
 8002d18:	701a      	strb	r2, [r3, #0]
                if (state_index >= state_sequence_len) state_index = 0;
 8002d1a:	4b14      	ldr	r3, [pc, #80]	@ (8002d6c <update_animation_state+0x8dc>)
 8002d1c:	781a      	ldrb	r2, [r3, #0]
 8002d1e:	4b14      	ldr	r3, [pc, #80]	@ (8002d70 <update_animation_state+0x8e0>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d302      	bcc.n	8002d2c <update_animation_state+0x89c>
 8002d26:	4b11      	ldr	r3, [pc, #68]	@ (8002d6c <update_animation_state+0x8dc>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
                state = state_sequence[state_index];
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d6c <update_animation_state+0x8dc>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	461a      	mov	r2, r3
 8002d32:	4b10      	ldr	r3, [pc, #64]	@ (8002d74 <update_animation_state+0x8e4>)
 8002d34:	5c9a      	ldrb	r2, [r3, r2]
 8002d36:	4b10      	ldr	r3, [pc, #64]	@ (8002d78 <update_animation_state+0x8e8>)
 8002d38:	701a      	strb	r2, [r3, #0]
                break;
 8002d3a:	e243      	b.n	80031c4 <update_animation_state+0xd34>
 8002d3c:	f3af 8000 	nop.w
 8002d40:	66666666 	.word	0x66666666
 8002d44:	3ff66666 	.word	0x3ff66666
 8002d48:	200001fe 	.word	0x200001fe
 8002d4c:	20000204 	.word	0x20000204
 8002d50:	200001ff 	.word	0x200001ff
 8002d54:	20000208 	.word	0x20000208
 8002d58:	200001f8 	.word	0x200001f8
 8002d5c:	2000020c 	.word	0x2000020c
 8002d60:	200001f9 	.word	0x200001f9
 8002d64:	20000210 	.word	0x20000210
 8002d68:	20000214 	.word	0x20000214
 8002d6c:	2000021c 	.word	0x2000021c
 8002d70:	2000021d 	.word	0x2000021d
 8002d74:	080072f4 	.word	0x080072f4
 8002d78:	20000200 	.word	0x20000200
 8002d7c:	200001fa 	.word	0x200001fa
 8002d80:	200001fc 	.word	0x200001fc
 8002d84:	200001fb 	.word	0x200001fb
            case STATE_UPRIGHT_FROM_CENTER:
                lerp_startX = pupilX; lerp_startY = pupilY;
 8002d88:	4b9d      	ldr	r3, [pc, #628]	@ (8003000 <update_animation_state+0xb70>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4b9d      	ldr	r3, [pc, #628]	@ (8003004 <update_animation_state+0xb74>)
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	4b9d      	ldr	r3, [pc, #628]	@ (8003008 <update_animation_state+0xb78>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	4b9c      	ldr	r3, [pc, #624]	@ (800300c <update_animation_state+0xb7c>)
 8002d9a:	601a      	str	r2, [r3, #0]
                lerp_targetX = centerX + (rx_in - pupilRadius) / 1.4;
 8002d9c:	4b9c      	ldr	r3, [pc, #624]	@ (8003010 <update_animation_state+0xb80>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fd fb27 	bl	80003f4 <__aeabi_i2d>
 8002da6:	4604      	mov	r4, r0
 8002da8:	460d      	mov	r5, r1
 8002daa:	4b9a      	ldr	r3, [pc, #616]	@ (8003014 <update_animation_state+0xb84>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	4b99      	ldr	r3, [pc, #612]	@ (8003018 <update_animation_state+0xb88>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd fb1c 	bl	80003f4 <__aeabi_i2d>
 8002dbc:	a38e      	add	r3, pc, #568	@ (adr r3, 8002ff8 <update_animation_state+0xb68>)
 8002dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc2:	f7fd fcab 	bl	800071c <__aeabi_ddiv>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4620      	mov	r0, r4
 8002dcc:	4629      	mov	r1, r5
 8002dce:	f7fd f9c5 	bl	800015c <__adddf3>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f7fd fd87 	bl	80008ec <__aeabi_d2iz>
 8002dde:	4603      	mov	r3, r0
 8002de0:	4a8e      	ldr	r2, [pc, #568]	@ (800301c <update_animation_state+0xb8c>)
 8002de2:	6013      	str	r3, [r2, #0]
                lerp_targetY = centerY - (ry_in - pupilRadius) / 1.4;
 8002de4:	4b8e      	ldr	r3, [pc, #568]	@ (8003020 <update_animation_state+0xb90>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd fb03 	bl	80003f4 <__aeabi_i2d>
 8002dee:	4604      	mov	r4, r0
 8002df0:	460d      	mov	r5, r1
 8002df2:	4b8c      	ldr	r3, [pc, #560]	@ (8003024 <update_animation_state+0xb94>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	4b87      	ldr	r3, [pc, #540]	@ (8003018 <update_animation_state+0xb88>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd faf8 	bl	80003f4 <__aeabi_i2d>
 8002e04:	a37c      	add	r3, pc, #496	@ (adr r3, 8002ff8 <update_animation_state+0xb68>)
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f7fd fc87 	bl	800071c <__aeabi_ddiv>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4620      	mov	r0, r4
 8002e14:	4629      	mov	r1, r5
 8002e16:	f7fd f99f 	bl	8000158 <__aeabi_dsub>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4619      	mov	r1, r3
 8002e22:	f7fd fd63 	bl	80008ec <__aeabi_d2iz>
 8002e26:	4603      	mov	r3, r0
 8002e28:	4a7f      	ldr	r2, [pc, #508]	@ (8003028 <update_animation_state+0xb98>)
 8002e2a:	6013      	str	r3, [r2, #0]
                lerp_t = 0.0f;
 8002e2c:	4b7f      	ldr	r3, [pc, #508]	@ (800302c <update_animation_state+0xb9c>)
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
                state_index++;
 8002e34:	4b7e      	ldr	r3, [pc, #504]	@ (8003030 <update_animation_state+0xba0>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	4b7c      	ldr	r3, [pc, #496]	@ (8003030 <update_animation_state+0xba0>)
 8002e3e:	701a      	strb	r2, [r3, #0]
                if (state_index >= state_sequence_len) state_index = 0;
 8002e40:	4b7b      	ldr	r3, [pc, #492]	@ (8003030 <update_animation_state+0xba0>)
 8002e42:	781a      	ldrb	r2, [r3, #0]
 8002e44:	4b7b      	ldr	r3, [pc, #492]	@ (8003034 <update_animation_state+0xba4>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d302      	bcc.n	8002e52 <update_animation_state+0x9c2>
 8002e4c:	4b78      	ldr	r3, [pc, #480]	@ (8003030 <update_animation_state+0xba0>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
                state = state_sequence[state_index];
 8002e52:	4b77      	ldr	r3, [pc, #476]	@ (8003030 <update_animation_state+0xba0>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	4b77      	ldr	r3, [pc, #476]	@ (8003038 <update_animation_state+0xba8>)
 8002e5a:	5c9a      	ldrb	r2, [r3, r2]
 8002e5c:	4b77      	ldr	r3, [pc, #476]	@ (800303c <update_animation_state+0xbac>)
 8002e5e:	701a      	strb	r2, [r3, #0]
                break;
 8002e60:	e1b0      	b.n	80031c4 <update_animation_state+0xd34>
            case STATE_DOWNLEFT_TO_CENTER:
                lerp_startX = pupilX; lerp_startY = pupilY;
 8002e62:	4b67      	ldr	r3, [pc, #412]	@ (8003000 <update_animation_state+0xb70>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	4b66      	ldr	r3, [pc, #408]	@ (8003004 <update_animation_state+0xb74>)
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	4b66      	ldr	r3, [pc, #408]	@ (8003008 <update_animation_state+0xb78>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	4b66      	ldr	r3, [pc, #408]	@ (800300c <update_animation_state+0xb7c>)
 8002e74:	601a      	str	r2, [r3, #0]
                lerp_targetX = centerX;
 8002e76:	4b66      	ldr	r3, [pc, #408]	@ (8003010 <update_animation_state+0xb80>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	4b67      	ldr	r3, [pc, #412]	@ (800301c <update_animation_state+0xb8c>)
 8002e7e:	601a      	str	r2, [r3, #0]
                lerp_targetY = centerY;
 8002e80:	4b67      	ldr	r3, [pc, #412]	@ (8003020 <update_animation_state+0xb90>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b68      	ldr	r3, [pc, #416]	@ (8003028 <update_animation_state+0xb98>)
 8002e88:	601a      	str	r2, [r3, #0]
                lerp_t = 0.0f;
 8002e8a:	4b68      	ldr	r3, [pc, #416]	@ (800302c <update_animation_state+0xb9c>)
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
                state_index++;
 8002e92:	4b67      	ldr	r3, [pc, #412]	@ (8003030 <update_animation_state+0xba0>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	3301      	adds	r3, #1
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	4b65      	ldr	r3, [pc, #404]	@ (8003030 <update_animation_state+0xba0>)
 8002e9c:	701a      	strb	r2, [r3, #0]
                if (state_index >= state_sequence_len) state_index = 0;
 8002e9e:	4b64      	ldr	r3, [pc, #400]	@ (8003030 <update_animation_state+0xba0>)
 8002ea0:	781a      	ldrb	r2, [r3, #0]
 8002ea2:	4b64      	ldr	r3, [pc, #400]	@ (8003034 <update_animation_state+0xba4>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d302      	bcc.n	8002eb0 <update_animation_state+0xa20>
 8002eaa:	4b61      	ldr	r3, [pc, #388]	@ (8003030 <update_animation_state+0xba0>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
                state = state_sequence[state_index];
 8002eb0:	4b5f      	ldr	r3, [pc, #380]	@ (8003030 <update_animation_state+0xba0>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b60      	ldr	r3, [pc, #384]	@ (8003038 <update_animation_state+0xba8>)
 8002eb8:	5c9a      	ldrb	r2, [r3, r2]
 8002eba:	4b60      	ldr	r3, [pc, #384]	@ (800303c <update_animation_state+0xbac>)
 8002ebc:	701a      	strb	r2, [r3, #0]
                break;
 8002ebe:	e181      	b.n	80031c4 <update_animation_state+0xd34>
            case STATE_DOWNLEFT_FROM_CENTER:
                lerp_startX = pupilX; lerp_startY = pupilY;
 8002ec0:	4b4f      	ldr	r3, [pc, #316]	@ (8003000 <update_animation_state+0xb70>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4b4f      	ldr	r3, [pc, #316]	@ (8003004 <update_animation_state+0xb74>)
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	4b4f      	ldr	r3, [pc, #316]	@ (8003008 <update_animation_state+0xb78>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4b4e      	ldr	r3, [pc, #312]	@ (800300c <update_animation_state+0xb7c>)
 8002ed2:	601a      	str	r2, [r3, #0]
                lerp_targetX = centerX - (rx_in - pupilRadius) / 1.4;
 8002ed4:	4b4e      	ldr	r3, [pc, #312]	@ (8003010 <update_animation_state+0xb80>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd fa8b 	bl	80003f4 <__aeabi_i2d>
 8002ede:	4604      	mov	r4, r0
 8002ee0:	460d      	mov	r5, r1
 8002ee2:	4b4c      	ldr	r3, [pc, #304]	@ (8003014 <update_animation_state+0xb84>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	4b4b      	ldr	r3, [pc, #300]	@ (8003018 <update_animation_state+0xb88>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fd fa80 	bl	80003f4 <__aeabi_i2d>
 8002ef4:	a340      	add	r3, pc, #256	@ (adr r3, 8002ff8 <update_animation_state+0xb68>)
 8002ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efa:	f7fd fc0f 	bl	800071c <__aeabi_ddiv>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4620      	mov	r0, r4
 8002f04:	4629      	mov	r1, r5
 8002f06:	f7fd f927 	bl	8000158 <__aeabi_dsub>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4610      	mov	r0, r2
 8002f10:	4619      	mov	r1, r3
 8002f12:	f7fd fceb 	bl	80008ec <__aeabi_d2iz>
 8002f16:	4603      	mov	r3, r0
 8002f18:	4a40      	ldr	r2, [pc, #256]	@ (800301c <update_animation_state+0xb8c>)
 8002f1a:	6013      	str	r3, [r2, #0]
                lerp_targetY = centerY + (ry_in - pupilRadius) / 1.4;
 8002f1c:	4b40      	ldr	r3, [pc, #256]	@ (8003020 <update_animation_state+0xb90>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd fa67 	bl	80003f4 <__aeabi_i2d>
 8002f26:	4604      	mov	r4, r0
 8002f28:	460d      	mov	r5, r1
 8002f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003024 <update_animation_state+0xb94>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	4b39      	ldr	r3, [pc, #228]	@ (8003018 <update_animation_state+0xb88>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fd fa5c 	bl	80003f4 <__aeabi_i2d>
 8002f3c:	a32e      	add	r3, pc, #184	@ (adr r3, 8002ff8 <update_animation_state+0xb68>)
 8002f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f42:	f7fd fbeb 	bl	800071c <__aeabi_ddiv>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	4629      	mov	r1, r5
 8002f4e:	f7fd f905 	bl	800015c <__adddf3>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f7fd fcc7 	bl	80008ec <__aeabi_d2iz>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4a31      	ldr	r2, [pc, #196]	@ (8003028 <update_animation_state+0xb98>)
 8002f62:	6013      	str	r3, [r2, #0]
                lerp_t = 0.0f;
 8002f64:	4b31      	ldr	r3, [pc, #196]	@ (800302c <update_animation_state+0xb9c>)
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
                state_index++;
 8002f6c:	4b30      	ldr	r3, [pc, #192]	@ (8003030 <update_animation_state+0xba0>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	3301      	adds	r3, #1
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	4b2e      	ldr	r3, [pc, #184]	@ (8003030 <update_animation_state+0xba0>)
 8002f76:	701a      	strb	r2, [r3, #0]
                if (state_index >= state_sequence_len) state_index = 0;
 8002f78:	4b2d      	ldr	r3, [pc, #180]	@ (8003030 <update_animation_state+0xba0>)
 8002f7a:	781a      	ldrb	r2, [r3, #0]
 8002f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8003034 <update_animation_state+0xba4>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d302      	bcc.n	8002f8a <update_animation_state+0xafa>
 8002f84:	4b2a      	ldr	r3, [pc, #168]	@ (8003030 <update_animation_state+0xba0>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]
                state = state_sequence[state_index];
 8002f8a:	4b29      	ldr	r3, [pc, #164]	@ (8003030 <update_animation_state+0xba0>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	4b29      	ldr	r3, [pc, #164]	@ (8003038 <update_animation_state+0xba8>)
 8002f92:	5c9a      	ldrb	r2, [r3, r2]
 8002f94:	4b29      	ldr	r3, [pc, #164]	@ (800303c <update_animation_state+0xbac>)
 8002f96:	701a      	strb	r2, [r3, #0]
                break;
 8002f98:	e114      	b.n	80031c4 <update_animation_state+0xd34>
            case STATE_UPLEFT_TO_CENTER:
                lerp_startX = pupilX; lerp_startY = pupilY;
 8002f9a:	4b19      	ldr	r3, [pc, #100]	@ (8003000 <update_animation_state+0xb70>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	4b18      	ldr	r3, [pc, #96]	@ (8003004 <update_animation_state+0xb74>)
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	4b18      	ldr	r3, [pc, #96]	@ (8003008 <update_animation_state+0xb78>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4b18      	ldr	r3, [pc, #96]	@ (800300c <update_animation_state+0xb7c>)
 8002fac:	601a      	str	r2, [r3, #0]
                lerp_targetX = centerX;
 8002fae:	4b18      	ldr	r3, [pc, #96]	@ (8003010 <update_animation_state+0xb80>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	4b19      	ldr	r3, [pc, #100]	@ (800301c <update_animation_state+0xb8c>)
 8002fb6:	601a      	str	r2, [r3, #0]
                lerp_targetY = centerY;
 8002fb8:	4b19      	ldr	r3, [pc, #100]	@ (8003020 <update_animation_state+0xb90>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8003028 <update_animation_state+0xb98>)
 8002fc0:	601a      	str	r2, [r3, #0]
                lerp_t = 0.0f;
 8002fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800302c <update_animation_state+0xb9c>)
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
                state_index++;
 8002fca:	4b19      	ldr	r3, [pc, #100]	@ (8003030 <update_animation_state+0xba0>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	4b17      	ldr	r3, [pc, #92]	@ (8003030 <update_animation_state+0xba0>)
 8002fd4:	701a      	strb	r2, [r3, #0]
                if (state_index >= state_sequence_len) state_index = 0;
 8002fd6:	4b16      	ldr	r3, [pc, #88]	@ (8003030 <update_animation_state+0xba0>)
 8002fd8:	781a      	ldrb	r2, [r3, #0]
 8002fda:	4b16      	ldr	r3, [pc, #88]	@ (8003034 <update_animation_state+0xba4>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d302      	bcc.n	8002fe8 <update_animation_state+0xb58>
 8002fe2:	4b13      	ldr	r3, [pc, #76]	@ (8003030 <update_animation_state+0xba0>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
                state = state_sequence[state_index];
 8002fe8:	4b11      	ldr	r3, [pc, #68]	@ (8003030 <update_animation_state+0xba0>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	4b12      	ldr	r3, [pc, #72]	@ (8003038 <update_animation_state+0xba8>)
 8002ff0:	5c9a      	ldrb	r2, [r3, r2]
 8002ff2:	4b12      	ldr	r3, [pc, #72]	@ (800303c <update_animation_state+0xbac>)
 8002ff4:	701a      	strb	r2, [r3, #0]
                break;
 8002ff6:	e0e5      	b.n	80031c4 <update_animation_state+0xd34>
 8002ff8:	66666666 	.word	0x66666666
 8002ffc:	3ff66666 	.word	0x3ff66666
 8003000:	200001fe 	.word	0x200001fe
 8003004:	20000204 	.word	0x20000204
 8003008:	200001ff 	.word	0x200001ff
 800300c:	20000208 	.word	0x20000208
 8003010:	200001f8 	.word	0x200001f8
 8003014:	200001fa 	.word	0x200001fa
 8003018:	200001fc 	.word	0x200001fc
 800301c:	2000020c 	.word	0x2000020c
 8003020:	200001f9 	.word	0x200001f9
 8003024:	200001fb 	.word	0x200001fb
 8003028:	20000210 	.word	0x20000210
 800302c:	20000214 	.word	0x20000214
 8003030:	2000021c 	.word	0x2000021c
 8003034:	2000021d 	.word	0x2000021d
 8003038:	080072f4 	.word	0x080072f4
 800303c:	20000200 	.word	0x20000200
            case STATE_RANDOM_MOVE:
                {
                    int rangeX = rx_in - pupilRadius * 0.5;
 8003040:	4b62      	ldr	r3, [pc, #392]	@ (80031cc <update_animation_state+0xd3c>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7fd f9d5 	bl	80003f4 <__aeabi_i2d>
 800304a:	4604      	mov	r4, r0
 800304c:	460d      	mov	r5, r1
 800304e:	4b60      	ldr	r3, [pc, #384]	@ (80031d0 <update_animation_state+0xd40>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd f9ce 	bl	80003f4 <__aeabi_i2d>
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	4b5d      	ldr	r3, [pc, #372]	@ (80031d4 <update_animation_state+0xd44>)
 800305e:	f7fd fa33 	bl	80004c8 <__aeabi_dmul>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4620      	mov	r0, r4
 8003068:	4629      	mov	r1, r5
 800306a:	f7fd f875 	bl	8000158 <__aeabi_dsub>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4610      	mov	r0, r2
 8003074:	4619      	mov	r1, r3
 8003076:	f7fd fc39 	bl	80008ec <__aeabi_d2iz>
 800307a:	4603      	mov	r3, r0
 800307c:	613b      	str	r3, [r7, #16]
                    int rangeY = ry_in - pupilRadius * 0.5;
 800307e:	4b56      	ldr	r3, [pc, #344]	@ (80031d8 <update_animation_state+0xd48>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd f9b6 	bl	80003f4 <__aeabi_i2d>
 8003088:	4604      	mov	r4, r0
 800308a:	460d      	mov	r5, r1
 800308c:	4b50      	ldr	r3, [pc, #320]	@ (80031d0 <update_animation_state+0xd40>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f7fd f9af 	bl	80003f4 <__aeabi_i2d>
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	4b4e      	ldr	r3, [pc, #312]	@ (80031d4 <update_animation_state+0xd44>)
 800309c:	f7fd fa14 	bl	80004c8 <__aeabi_dmul>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4620      	mov	r0, r4
 80030a6:	4629      	mov	r1, r5
 80030a8:	f7fd f856 	bl	8000158 <__aeabi_dsub>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4610      	mov	r0, r2
 80030b2:	4619      	mov	r1, r3
 80030b4:	f7fd fc1a 	bl	80008ec <__aeabi_d2iz>
 80030b8:	4603      	mov	r3, r0
 80030ba:	60fb      	str	r3, [r7, #12]
                    lerp_startX = pupilX;
 80030bc:	4b47      	ldr	r3, [pc, #284]	@ (80031dc <update_animation_state+0xd4c>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	4b47      	ldr	r3, [pc, #284]	@ (80031e0 <update_animation_state+0xd50>)
 80030c4:	601a      	str	r2, [r3, #0]
                    lerp_startY = pupilY;
 80030c6:	4b47      	ldr	r3, [pc, #284]	@ (80031e4 <update_animation_state+0xd54>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	4b46      	ldr	r3, [pc, #280]	@ (80031e8 <update_animation_state+0xd58>)
 80030ce:	601a      	str	r2, [r3, #0]
                    int offsetX = (rand() % rangeX) - rangeX / 2;
 80030d0:	f002 fa96 	bl	8005600 <rand>
 80030d4:	4603      	mov	r3, r0
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	fb93 f2f2 	sdiv	r2, r3, r2
 80030dc:	6939      	ldr	r1, [r7, #16]
 80030de:	fb01 f202 	mul.w	r2, r1, r2
 80030e2:	1a9a      	subs	r2, r3, r2
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	0fd9      	lsrs	r1, r3, #31
 80030e8:	440b      	add	r3, r1
 80030ea:	105b      	asrs	r3, r3, #1
 80030ec:	425b      	negs	r3, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	60bb      	str	r3, [r7, #8]
                    int offsetY = (rand() % rangeY) - rangeY / 2;
 80030f2:	f002 fa85 	bl	8005600 <rand>
 80030f6:	4603      	mov	r3, r0
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	fb93 f2f2 	sdiv	r2, r3, r2
 80030fe:	68f9      	ldr	r1, [r7, #12]
 8003100:	fb01 f202 	mul.w	r2, r1, r2
 8003104:	1a9a      	subs	r2, r3, r2
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	0fd9      	lsrs	r1, r3, #31
 800310a:	440b      	add	r3, r1
 800310c:	105b      	asrs	r3, r3, #1
 800310e:	425b      	negs	r3, r3
 8003110:	4413      	add	r3, r2
 8003112:	607b      	str	r3, [r7, #4]
                    lerp_targetX = centerX + offsetX;
 8003114:	4b35      	ldr	r3, [pc, #212]	@ (80031ec <update_animation_state+0xd5c>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	4413      	add	r3, r2
 800311e:	4a34      	ldr	r2, [pc, #208]	@ (80031f0 <update_animation_state+0xd60>)
 8003120:	6013      	str	r3, [r2, #0]
                    lerp_targetY = centerY + offsetY;
 8003122:	4b34      	ldr	r3, [pc, #208]	@ (80031f4 <update_animation_state+0xd64>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4413      	add	r3, r2
 800312c:	4a32      	ldr	r2, [pc, #200]	@ (80031f8 <update_animation_state+0xd68>)
 800312e:	6013      	str	r3, [r2, #0]
                    lerp_t = 0.0f;
 8003130:	4b32      	ldr	r3, [pc, #200]	@ (80031fc <update_animation_state+0xd6c>)
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
                    state_index++;
 8003138:	4b31      	ldr	r3, [pc, #196]	@ (8003200 <update_animation_state+0xd70>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	3301      	adds	r3, #1
 800313e:	b2da      	uxtb	r2, r3
 8003140:	4b2f      	ldr	r3, [pc, #188]	@ (8003200 <update_animation_state+0xd70>)
 8003142:	701a      	strb	r2, [r3, #0]
                    if (state_index >= state_sequence_len) state_index = 0;
 8003144:	4b2e      	ldr	r3, [pc, #184]	@ (8003200 <update_animation_state+0xd70>)
 8003146:	781a      	ldrb	r2, [r3, #0]
 8003148:	4b2e      	ldr	r3, [pc, #184]	@ (8003204 <update_animation_state+0xd74>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d302      	bcc.n	8003156 <update_animation_state+0xcc6>
 8003150:	4b2b      	ldr	r3, [pc, #172]	@ (8003200 <update_animation_state+0xd70>)
 8003152:	2200      	movs	r2, #0
 8003154:	701a      	strb	r2, [r3, #0]
                    state = state_sequence[state_index];
 8003156:	4b2a      	ldr	r3, [pc, #168]	@ (8003200 <update_animation_state+0xd70>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	4b2a      	ldr	r3, [pc, #168]	@ (8003208 <update_animation_state+0xd78>)
 800315e:	5c9a      	ldrb	r2, [r3, r2]
 8003160:	4b2a      	ldr	r3, [pc, #168]	@ (800320c <update_animation_state+0xd7c>)
 8003162:	701a      	strb	r2, [r3, #0]
                }
                break;
 8003164:	e02e      	b.n	80031c4 <update_animation_state+0xd34>
            case STATE_RANDOM_TO_CENTER:
                lerp_startX = pupilX; lerp_startY = pupilY;
 8003166:	4b1d      	ldr	r3, [pc, #116]	@ (80031dc <update_animation_state+0xd4c>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	4b1c      	ldr	r3, [pc, #112]	@ (80031e0 <update_animation_state+0xd50>)
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	4b1c      	ldr	r3, [pc, #112]	@ (80031e4 <update_animation_state+0xd54>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	4b1c      	ldr	r3, [pc, #112]	@ (80031e8 <update_animation_state+0xd58>)
 8003178:	601a      	str	r2, [r3, #0]
                lerp_targetX = centerX;
 800317a:	4b1c      	ldr	r3, [pc, #112]	@ (80031ec <update_animation_state+0xd5c>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	4b1b      	ldr	r3, [pc, #108]	@ (80031f0 <update_animation_state+0xd60>)
 8003182:	601a      	str	r2, [r3, #0]
                lerp_targetY = centerY;
 8003184:	4b1b      	ldr	r3, [pc, #108]	@ (80031f4 <update_animation_state+0xd64>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	4b1b      	ldr	r3, [pc, #108]	@ (80031f8 <update_animation_state+0xd68>)
 800318c:	601a      	str	r2, [r3, #0]
                lerp_t = 0.0f;
 800318e:	4b1b      	ldr	r3, [pc, #108]	@ (80031fc <update_animation_state+0xd6c>)
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
                state_index++;
 8003196:	4b1a      	ldr	r3, [pc, #104]	@ (8003200 <update_animation_state+0xd70>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	3301      	adds	r3, #1
 800319c:	b2da      	uxtb	r2, r3
 800319e:	4b18      	ldr	r3, [pc, #96]	@ (8003200 <update_animation_state+0xd70>)
 80031a0:	701a      	strb	r2, [r3, #0]
                if (state_index >= state_sequence_len) state_index = 0;
 80031a2:	4b17      	ldr	r3, [pc, #92]	@ (8003200 <update_animation_state+0xd70>)
 80031a4:	781a      	ldrb	r2, [r3, #0]
 80031a6:	4b17      	ldr	r3, [pc, #92]	@ (8003204 <update_animation_state+0xd74>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d302      	bcc.n	80031b4 <update_animation_state+0xd24>
 80031ae:	4b14      	ldr	r3, [pc, #80]	@ (8003200 <update_animation_state+0xd70>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
                state = state_sequence[state_index];
 80031b4:	4b12      	ldr	r3, [pc, #72]	@ (8003200 <update_animation_state+0xd70>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b13      	ldr	r3, [pc, #76]	@ (8003208 <update_animation_state+0xd78>)
 80031bc:	5c9a      	ldrb	r2, [r3, r2]
 80031be:	4b13      	ldr	r3, [pc, #76]	@ (800320c <update_animation_state+0xd7c>)
 80031c0:	701a      	strb	r2, [r3, #0]
                break;
 80031c2:	bf00      	nop
            case STATE_PUPIL_ROTATE:
                break;
        }
    }
}
 80031c4:	3728      	adds	r7, #40	@ 0x28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bdb0      	pop	{r4, r5, r7, pc}
 80031ca:	bf00      	nop
 80031cc:	200001fa 	.word	0x200001fa
 80031d0:	200001fc 	.word	0x200001fc
 80031d4:	3fe00000 	.word	0x3fe00000
 80031d8:	200001fb 	.word	0x200001fb
 80031dc:	200001fe 	.word	0x200001fe
 80031e0:	20000204 	.word	0x20000204
 80031e4:	200001ff 	.word	0x200001ff
 80031e8:	20000208 	.word	0x20000208
 80031ec:	200001f8 	.word	0x200001f8
 80031f0:	2000020c 	.word	0x2000020c
 80031f4:	200001f9 	.word	0x200001f9
 80031f8:	20000210 	.word	0x20000210
 80031fc:	20000214 	.word	0x20000214
 8003200:	2000021c 	.word	0x2000021c
 8003204:	2000021d 	.word	0x2000021d
 8003208:	080072f4 	.word	0x080072f4
 800320c:	20000200 	.word	0x20000200

08003210 <draw_eye_line_with_pupil_to_buffer>:
  int y, int cx, int cy, int r,
  int pupil_r, int pupil_offset_x, int pupil_offset_y,
  uint16_t outer_color, uint16_t inner_color, uint16_t bgcolor, uint16_t pupil_color,
  uint16_t* linebuf,
  int highlight_tick
) {
 8003210:	b590      	push	{r4, r7, lr}
 8003212:	b0a5      	sub	sp, #148	@ 0x94
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
 800321c:	603b      	str	r3, [r7, #0]
  int r2 = r * r ;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	fb03 f303 	mul.w	r3, r3, r3
 8003224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  int pupil_cx = cx;
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  int pupil_cy = cy;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	67fb      	str	r3, [r7, #124]	@ 0x7c
  float shake_ampl = 2.0f;
 8003232:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003236:	67bb      	str	r3, [r7, #120]	@ 0x78
  float shake1 = shake_ampl * sinf(highlight_tick * 0.15f);
 8003238:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800323c:	f7fd fc38 	bl	8000ab0 <__aeabi_i2f>
 8003240:	4603      	mov	r3, r0
 8003242:	49b5      	ldr	r1, [pc, #724]	@ (8003518 <draw_eye_line_with_pupil_to_buffer+0x308>)
 8003244:	4618      	mov	r0, r3
 8003246:	f7fd fc87 	bl	8000b58 <__aeabi_fmul>
 800324a:	4603      	mov	r3, r0
 800324c:	4618      	mov	r0, r3
 800324e:	f003 fa0f 	bl	8006670 <sinf>
 8003252:	4603      	mov	r3, r0
 8003254:	4619      	mov	r1, r3
 8003256:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8003258:	f7fd fc7e 	bl	8000b58 <__aeabi_fmul>
 800325c:	4603      	mov	r3, r0
 800325e:	677b      	str	r3, [r7, #116]	@ 0x74
  float shake2 = shake_ampl * cosf(highlight_tick * 0.18f);
 8003260:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8003264:	f7fd fc24 	bl	8000ab0 <__aeabi_i2f>
 8003268:	4603      	mov	r3, r0
 800326a:	49ac      	ldr	r1, [pc, #688]	@ (800351c <draw_eye_line_with_pupil_to_buffer+0x30c>)
 800326c:	4618      	mov	r0, r3
 800326e:	f7fd fc73 	bl	8000b58 <__aeabi_fmul>
 8003272:	4603      	mov	r3, r0
 8003274:	4618      	mov	r0, r3
 8003276:	f003 f9c3 	bl	8006600 <cosf>
 800327a:	4603      	mov	r3, r0
 800327c:	4619      	mov	r1, r3
 800327e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8003280:	f7fd fc6a 	bl	8000b58 <__aeabi_fmul>
 8003284:	4603      	mov	r3, r0
 8003286:	673b      	str	r3, [r7, #112]	@ 0x70
  int highlight_cx3 = cx - r / 3 + (int)(1.5f * sinf(highlight_tick * 0.22f)) + 35;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	4aa5      	ldr	r2, [pc, #660]	@ (8003520 <draw_eye_line_with_pupil_to_buffer+0x310>)
 800328c:	fb82 1203 	smull	r1, r2, r2, r3
 8003290:	17db      	asrs	r3, r3, #31
 8003292:	1a9a      	subs	r2, r3, r2
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	18d4      	adds	r4, r2, r3
 8003298:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800329c:	f7fd fc08 	bl	8000ab0 <__aeabi_i2f>
 80032a0:	4603      	mov	r3, r0
 80032a2:	49a0      	ldr	r1, [pc, #640]	@ (8003524 <draw_eye_line_with_pupil_to_buffer+0x314>)
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fd fc57 	bl	8000b58 <__aeabi_fmul>
 80032aa:	4603      	mov	r3, r0
 80032ac:	4618      	mov	r0, r3
 80032ae:	f003 f9df 	bl	8006670 <sinf>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd fc4d 	bl	8000b58 <__aeabi_fmul>
 80032be:	4603      	mov	r3, r0
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fd fe25 	bl	8000f10 <__aeabi_f2iz>
 80032c6:	4603      	mov	r3, r0
 80032c8:	4423      	add	r3, r4
 80032ca:	3323      	adds	r3, #35	@ 0x23
 80032cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  int highlight_cy3 = cy - r / 3 + (int)(1.5f * cosf(highlight_tick * 0.19f)) - 10;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	4a93      	ldr	r2, [pc, #588]	@ (8003520 <draw_eye_line_with_pupil_to_buffer+0x310>)
 80032d2:	fb82 1203 	smull	r1, r2, r2, r3
 80032d6:	17db      	asrs	r3, r3, #31
 80032d8:	1a9a      	subs	r2, r3, r2
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	18d4      	adds	r4, r2, r3
 80032de:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80032e2:	f7fd fbe5 	bl	8000ab0 <__aeabi_i2f>
 80032e6:	4603      	mov	r3, r0
 80032e8:	498f      	ldr	r1, [pc, #572]	@ (8003528 <draw_eye_line_with_pupil_to_buffer+0x318>)
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd fc34 	bl	8000b58 <__aeabi_fmul>
 80032f0:	4603      	mov	r3, r0
 80032f2:	4618      	mov	r0, r3
 80032f4:	f003 f984 	bl	8006600 <cosf>
 80032f8:	4603      	mov	r3, r0
 80032fa:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fd fc2a 	bl	8000b58 <__aeabi_fmul>
 8003304:	4603      	mov	r3, r0
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd fe02 	bl	8000f10 <__aeabi_f2iz>
 800330c:	4603      	mov	r3, r0
 800330e:	4423      	add	r3, r4
 8003310:	3b0a      	subs	r3, #10
 8003312:	66bb      	str	r3, [r7, #104]	@ 0x68
  int show_highlight3 = ((highlight_tick % 120) < 10);
 8003314:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003318:	4b84      	ldr	r3, [pc, #528]	@ (800352c <draw_eye_line_with_pupil_to_buffer+0x31c>)
 800331a:	fb83 1302 	smull	r1, r3, r3, r2
 800331e:	4413      	add	r3, r2
 8003320:	1199      	asrs	r1, r3, #6
 8003322:	17d3      	asrs	r3, r2, #31
 8003324:	1ac9      	subs	r1, r1, r3
 8003326:	460b      	mov	r3, r1
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a5b      	subs	r3, r3, r1
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	1ad1      	subs	r1, r2, r3
 8003330:	2909      	cmp	r1, #9
 8003332:	bfd4      	ite	le
 8003334:	2301      	movle	r3, #1
 8003336:	2300      	movgt	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	667b      	str	r3, [r7, #100]	@ 0x64
  int dy = y - cy;
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	663b      	str	r3, [r7, #96]	@ 0x60
  int dy2 = dy * dy;
 8003344:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003346:	fb03 f303 	mul.w	r3, r3, r3
 800334a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  for (int x = 0; x < BUF_W; x++) {
 800334c:	2300      	movs	r3, #0
 800334e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003352:	e0d6      	b.n	8003502 <draw_eye_line_with_pupil_to_buffer+0x2f2>
      int dx = x - cx;
 8003354:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	65bb      	str	r3, [r7, #88]	@ 0x58
      int dist2 = dx * dx + dy2;
 800335e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003360:	fb03 f303 	mul.w	r3, r3, r3
 8003364:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003366:	4413      	add	r3, r2
 8003368:	657b      	str	r3, [r7, #84]	@ 0x54
      uint16_t color = bgcolor;
 800336a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 800336e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
      if (dist2 <= r2) {
 8003372:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003374:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003378:	429a      	cmp	r2, r3
 800337a:	dc3a      	bgt.n	80033f2 <draw_eye_line_with_pupil_to_buffer+0x1e2>
          int t = (dist2 * 255) / r2;
 800337c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800337e:	4613      	mov	r3, r2
 8003380:	021b      	lsls	r3, r3, #8
 8003382:	1a9a      	subs	r2, r3, r2
 8003384:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003388:	fb92 f3f3 	sdiv	r3, r2, r3
 800338c:	653b      	str	r3, [r7, #80]	@ 0x50
          color = blend_color_fast(inner_color, outer_color, (uint8_t)(t*0.7f));
 800338e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8003390:	f7fd fb8e 	bl	8000ab0 <__aeabi_i2f>
 8003394:	4603      	mov	r3, r0
 8003396:	4966      	ldr	r1, [pc, #408]	@ (8003530 <draw_eye_line_with_pupil_to_buffer+0x320>)
 8003398:	4618      	mov	r0, r3
 800339a:	f7fd fbdd 	bl	8000b58 <__aeabi_fmul>
 800339e:	4603      	mov	r3, r0
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fd fddb 	bl	8000f5c <__aeabi_f2uiz>
 80033a6:	4603      	mov	r3, r0
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	@ 0xac
 80033ae:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe fd98 	bl	8001ee8 <blend_color_fast>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
          int dx_pupil = x - pupil_cx;
 80033be:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80033c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
          int dy_pupil = y - pupil_cy;
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	64bb      	str	r3, [r7, #72]	@ 0x48
          if (dx_pupil * dx_pupil + dy_pupil * dy_pupil <= pupil_r * pupil_r) {
 80033d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033d4:	fb03 f203 	mul.w	r2, r3, r3
 80033d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033da:	fb03 f303 	mul.w	r3, r3, r3
 80033de:	441a      	add	r2, r3
 80033e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033e4:	fb03 f303 	mul.w	r3, r3, r3
 80033e8:	429a      	cmp	r2, r3
 80033ea:	dc02      	bgt.n	80033f2 <draw_eye_line_with_pupil_to_buffer+0x1e2>
              color = 0x0000;
 80033ec:	2300      	movs	r3, #0
 80033ee:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
          }
      }
      int highlight_radius = 10;
 80033f2:	230a      	movs	r3, #10
 80033f4:	647b      	str	r3, [r7, #68]	@ 0x44
      int highlight_cx = cx - r / 3 + (int)shake1;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	4a49      	ldr	r2, [pc, #292]	@ (8003520 <draw_eye_line_with_pupil_to_buffer+0x310>)
 80033fa:	fb82 1203 	smull	r1, r2, r2, r3
 80033fe:	17db      	asrs	r3, r3, #31
 8003400:	1a9a      	subs	r2, r3, r2
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	18d4      	adds	r4, r2, r3
 8003406:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8003408:	f7fd fd82 	bl	8000f10 <__aeabi_f2iz>
 800340c:	4603      	mov	r3, r0
 800340e:	4423      	add	r3, r4
 8003410:	643b      	str	r3, [r7, #64]	@ 0x40
      int highlight_cy = cy - r / 3 + (int)shake2;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	4a42      	ldr	r2, [pc, #264]	@ (8003520 <draw_eye_line_with_pupil_to_buffer+0x310>)
 8003416:	fb82 1203 	smull	r1, r2, r2, r3
 800341a:	17db      	asrs	r3, r3, #31
 800341c:	1a9a      	subs	r2, r3, r2
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	18d4      	adds	r4, r2, r3
 8003422:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003424:	f7fd fd74 	bl	8000f10 <__aeabi_f2iz>
 8003428:	4603      	mov	r3, r0
 800342a:	4423      	add	r3, r4
 800342c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      int dx_h = x - highlight_cx;
 800342e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003432:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	63bb      	str	r3, [r7, #56]	@ 0x38
      int dy_h = y - highlight_cy;
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (dx_h * dx_h + dy_h * dy_h <= highlight_radius * highlight_radius) {
 8003440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003442:	fb03 f203 	mul.w	r2, r3, r3
 8003446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003448:	fb03 f303 	mul.w	r3, r3, r3
 800344c:	441a      	add	r2, r3
 800344e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003450:	fb03 f303 	mul.w	r3, r3, r3
 8003454:	429a      	cmp	r2, r3
 8003456:	dc03      	bgt.n	8003460 <draw_eye_line_with_pupil_to_buffer+0x250>
          color = 0xFFFF;
 8003458:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800345c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
      }
      int highlight_radius1 = 4;
 8003460:	2304      	movs	r3, #4
 8003462:	633b      	str	r3, [r7, #48]	@ 0x30
      int highlight_cx1 = 2 * cx - highlight_cx;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	005a      	lsls	r2, r3, #1
 8003468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      int highlight_cy1 = 2 * cy - highlight_cy;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	005a      	lsls	r2, r3, #1
 8003472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	62bb      	str	r3, [r7, #40]	@ 0x28
      int dx_h1 = x - highlight_cx1;
 8003478:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800347c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
      int dy_h1 = y - highlight_cy1;
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	623b      	str	r3, [r7, #32]
      if (dx_h1 * dx_h1 + dy_h1 * dy_h1 <= highlight_radius1 * highlight_radius1) {
 800348a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348c:	fb03 f203 	mul.w	r2, r3, r3
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	fb03 f303 	mul.w	r3, r3, r3
 8003496:	441a      	add	r2, r3
 8003498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349a:	fb03 f303 	mul.w	r3, r3, r3
 800349e:	429a      	cmp	r2, r3
 80034a0:	dc03      	bgt.n	80034aa <draw_eye_line_with_pupil_to_buffer+0x29a>
          color = 0xFFFF;
 80034a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034a6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
      }
      int highlight_radius3 = 8;
 80034aa:	2308      	movs	r3, #8
 80034ac:	61fb      	str	r3, [r7, #28]
      int dx_h3 = x - highlight_cx3;
 80034ae:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80034b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	61bb      	str	r3, [r7, #24]
      int dy_h3 = y - highlight_cy3;
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	617b      	str	r3, [r7, #20]
      if (show_highlight3 && (dx_h3 * dx_h3 + dy_h3 * dy_h3 <= highlight_radius3 * highlight_radius3)) {
 80034c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00f      	beq.n	80034e6 <draw_eye_line_with_pupil_to_buffer+0x2d6>
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	fb03 f203 	mul.w	r2, r3, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	fb03 f303 	mul.w	r3, r3, r3
 80034d2:	441a      	add	r2, r3
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	fb03 f303 	mul.w	r3, r3, r3
 80034da:	429a      	cmp	r2, r3
 80034dc:	dc03      	bgt.n	80034e6 <draw_eye_line_with_pupil_to_buffer+0x2d6>
          color = 0xFFFF;
 80034de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034e2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
      }
      linebuf[x] = color;
 80034e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80034f0:	4413      	add	r3, r2
 80034f2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80034f6:	801a      	strh	r2, [r3, #0]
  for (int x = 0; x < BUF_W; x++) {
 80034f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034fc:	3301      	adds	r3, #1
 80034fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003506:	2b77      	cmp	r3, #119	@ 0x77
 8003508:	f77f af24 	ble.w	8003354 <draw_eye_line_with_pupil_to_buffer+0x144>
  }
}
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	3794      	adds	r7, #148	@ 0x94
 8003512:	46bd      	mov	sp, r7
 8003514:	bd90      	pop	{r4, r7, pc}
 8003516:	bf00      	nop
 8003518:	3e19999a 	.word	0x3e19999a
 800351c:	3e3851ec 	.word	0x3e3851ec
 8003520:	55555556 	.word	0x55555556
 8003524:	3e6147ae 	.word	0x3e6147ae
 8003528:	3e428f5c 	.word	0x3e428f5c
 800352c:	88888889 	.word	0x88888889
 8003530:	3f333333 	.word	0x3f333333

08003534 <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1) {
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0e      	ldr	r2, [pc, #56]	@ (800357c <HAL_SPI_TxCpltCallback+0x48>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d108      	bne.n	8003558 <HAL_SPI_TxCpltCallback+0x24>
        // Đóng CS sau khi DMA xong cho LCD1
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); // CS_Pin LCD1
 8003546:	2201      	movs	r2, #1
 8003548:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800354c:	480c      	ldr	r0, [pc, #48]	@ (8003580 <HAL_SPI_TxCpltCallback+0x4c>)
 800354e:	f001 f899 	bl	8004684 <HAL_GPIO_WritePin>
        lcd128_dma_busy = 0;
 8003552:	4b0c      	ldr	r3, [pc, #48]	@ (8003584 <HAL_SPI_TxCpltCallback+0x50>)
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
    }
    if (hspi->Instance == SPI2) {
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a0a      	ldr	r2, [pc, #40]	@ (8003588 <HAL_SPI_TxCpltCallback+0x54>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d108      	bne.n	8003574 <HAL_SPI_TxCpltCallback+0x40>
        // Đóng CS sau khi DMA xong cho LCD2
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // CS_Pin LCD2
 8003562:	2201      	movs	r2, #1
 8003564:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003568:	4808      	ldr	r0, [pc, #32]	@ (800358c <HAL_SPI_TxCpltCallback+0x58>)
 800356a:	f001 f88b 	bl	8004684 <HAL_GPIO_WritePin>
        lcd128_dma_busy = 0;
 800356e:	4b05      	ldr	r3, [pc, #20]	@ (8003584 <HAL_SPI_TxCpltCallback+0x50>)
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
    }
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40013000 	.word	0x40013000
 8003580:	40010c00 	.word	0x40010c00
 8003584:	20000084 	.word	0x20000084
 8003588:	40003800 	.word	0x40003800
 800358c:	40010800 	.word	0x40010800

08003590 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b090      	sub	sp, #64	@ 0x40
 8003594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003596:	f107 0318 	add.w	r3, r7, #24
 800359a:	2228      	movs	r2, #40	@ 0x28
 800359c:	2100      	movs	r1, #0
 800359e:	4618      	mov	r0, r3
 80035a0:	f002 f971 	bl	8005886 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035a4:	1d3b      	adds	r3, r7, #4
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	605a      	str	r2, [r3, #4]
 80035ac:	609a      	str	r2, [r3, #8]
 80035ae:	60da      	str	r2, [r3, #12]
 80035b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80035b2:	2301      	movs	r3, #1
 80035b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80035bc:	2300      	movs	r3, #0
 80035be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035c0:	2301      	movs	r3, #1
 80035c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035c4:	2302      	movs	r3, #2
 80035c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80035ce:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80035d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035d4:	f107 0318 	add.w	r3, r7, #24
 80035d8:	4618      	mov	r0, r3
 80035da:	f001 f86b 	bl	80046b4 <HAL_RCC_OscConfig>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80035e4:	f7fe ff4e 	bl	8002484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035e8:	230f      	movs	r3, #15
 80035ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035ec:	2302      	movs	r3, #2
 80035ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80035f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035fa:	2300      	movs	r3, #0
 80035fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80035fe:	1d3b      	adds	r3, r7, #4
 8003600:	2102      	movs	r1, #2
 8003602:	4618      	mov	r0, r3
 8003604:	f001 fad8 	bl	8004bb8 <HAL_RCC_ClockConfig>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800360e:	f7fe ff39 	bl	8002484 <Error_Handler>
  }
}
 8003612:	bf00      	nop
 8003614:	3740      	adds	r7, #64	@ 0x40
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003620:	4b17      	ldr	r3, [pc, #92]	@ (8003680 <MX_SPI1_Init+0x64>)
 8003622:	4a18      	ldr	r2, [pc, #96]	@ (8003684 <MX_SPI1_Init+0x68>)
 8003624:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003626:	4b16      	ldr	r3, [pc, #88]	@ (8003680 <MX_SPI1_Init+0x64>)
 8003628:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800362c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800362e:	4b14      	ldr	r3, [pc, #80]	@ (8003680 <MX_SPI1_Init+0x64>)
 8003630:	2200      	movs	r2, #0
 8003632:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003634:	4b12      	ldr	r3, [pc, #72]	@ (8003680 <MX_SPI1_Init+0x64>)
 8003636:	2200      	movs	r2, #0
 8003638:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800363a:	4b11      	ldr	r3, [pc, #68]	@ (8003680 <MX_SPI1_Init+0x64>)
 800363c:	2200      	movs	r2, #0
 800363e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003640:	4b0f      	ldr	r3, [pc, #60]	@ (8003680 <MX_SPI1_Init+0x64>)
 8003642:	2200      	movs	r2, #0
 8003644:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003646:	4b0e      	ldr	r3, [pc, #56]	@ (8003680 <MX_SPI1_Init+0x64>)
 8003648:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800364c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800364e:	4b0c      	ldr	r3, [pc, #48]	@ (8003680 <MX_SPI1_Init+0x64>)
 8003650:	2208      	movs	r2, #8
 8003652:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003654:	4b0a      	ldr	r3, [pc, #40]	@ (8003680 <MX_SPI1_Init+0x64>)
 8003656:	2200      	movs	r2, #0
 8003658:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800365a:	4b09      	ldr	r3, [pc, #36]	@ (8003680 <MX_SPI1_Init+0x64>)
 800365c:	2200      	movs	r2, #0
 800365e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003660:	4b07      	ldr	r3, [pc, #28]	@ (8003680 <MX_SPI1_Init+0x64>)
 8003662:	2200      	movs	r2, #0
 8003664:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003666:	4b06      	ldr	r3, [pc, #24]	@ (8003680 <MX_SPI1_Init+0x64>)
 8003668:	220a      	movs	r2, #10
 800366a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800366c:	4804      	ldr	r0, [pc, #16]	@ (8003680 <MX_SPI1_Init+0x64>)
 800366e:	f001 fbff 	bl	8004e70 <HAL_SPI_Init>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003678:	f7fe ff04 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800367c:	bf00      	nop
 800367e:	bd80      	pop	{r7, pc}
 8003680:	20000088 	.word	0x20000088
 8003684:	40013000 	.word	0x40013000

08003688 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800368c:	4b17      	ldr	r3, [pc, #92]	@ (80036ec <MX_SPI2_Init+0x64>)
 800368e:	4a18      	ldr	r2, [pc, #96]	@ (80036f0 <MX_SPI2_Init+0x68>)
 8003690:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003692:	4b16      	ldr	r3, [pc, #88]	@ (80036ec <MX_SPI2_Init+0x64>)
 8003694:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003698:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800369a:	4b14      	ldr	r3, [pc, #80]	@ (80036ec <MX_SPI2_Init+0x64>)
 800369c:	2200      	movs	r2, #0
 800369e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80036a0:	4b12      	ldr	r3, [pc, #72]	@ (80036ec <MX_SPI2_Init+0x64>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036a6:	4b11      	ldr	r3, [pc, #68]	@ (80036ec <MX_SPI2_Init+0x64>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036ac:	4b0f      	ldr	r3, [pc, #60]	@ (80036ec <MX_SPI2_Init+0x64>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80036b2:	4b0e      	ldr	r3, [pc, #56]	@ (80036ec <MX_SPI2_Init+0x64>)
 80036b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036ba:	4b0c      	ldr	r3, [pc, #48]	@ (80036ec <MX_SPI2_Init+0x64>)
 80036bc:	2200      	movs	r2, #0
 80036be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036c0:	4b0a      	ldr	r3, [pc, #40]	@ (80036ec <MX_SPI2_Init+0x64>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80036c6:	4b09      	ldr	r3, [pc, #36]	@ (80036ec <MX_SPI2_Init+0x64>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036cc:	4b07      	ldr	r3, [pc, #28]	@ (80036ec <MX_SPI2_Init+0x64>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80036d2:	4b06      	ldr	r3, [pc, #24]	@ (80036ec <MX_SPI2_Init+0x64>)
 80036d4:	220a      	movs	r2, #10
 80036d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80036d8:	4804      	ldr	r0, [pc, #16]	@ (80036ec <MX_SPI2_Init+0x64>)
 80036da:	f001 fbc9 	bl	8004e70 <HAL_SPI_Init>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80036e4:	f7fe fece 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80036e8:	bf00      	nop
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	200000e0 	.word	0x200000e0
 80036f0:	40003800 	.word	0x40003800

080036f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80036fa:	4b10      	ldr	r3, [pc, #64]	@ (800373c <MX_DMA_Init+0x48>)
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	4a0f      	ldr	r2, [pc, #60]	@ (800373c <MX_DMA_Init+0x48>)
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	6153      	str	r3, [r2, #20]
 8003706:	4b0d      	ldr	r3, [pc, #52]	@ (800373c <MX_DMA_Init+0x48>)
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	607b      	str	r3, [r7, #4]
 8003710:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003712:	2200      	movs	r2, #0
 8003714:	2100      	movs	r1, #0
 8003716:	200d      	movs	r0, #13
 8003718:	f000 fc0b 	bl	8003f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800371c:	200d      	movs	r0, #13
 800371e:	f000 fc24 	bl	8003f6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003722:	2200      	movs	r2, #0
 8003724:	2100      	movs	r1, #0
 8003726:	200f      	movs	r0, #15
 8003728:	f000 fc03 	bl	8003f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800372c:	200f      	movs	r0, #15
 800372e:	f000 fc1c 	bl	8003f6a <HAL_NVIC_EnableIRQ>

}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000

08003740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003746:	f107 0310 	add.w	r3, r7, #16
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	605a      	str	r2, [r3, #4]
 8003750:	609a      	str	r2, [r3, #8]
 8003752:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003754:	4b28      	ldr	r3, [pc, #160]	@ (80037f8 <MX_GPIO_Init+0xb8>)
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	4a27      	ldr	r2, [pc, #156]	@ (80037f8 <MX_GPIO_Init+0xb8>)
 800375a:	f043 0320 	orr.w	r3, r3, #32
 800375e:	6193      	str	r3, [r2, #24]
 8003760:	4b25      	ldr	r3, [pc, #148]	@ (80037f8 <MX_GPIO_Init+0xb8>)
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800376c:	4b22      	ldr	r3, [pc, #136]	@ (80037f8 <MX_GPIO_Init+0xb8>)
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	4a21      	ldr	r2, [pc, #132]	@ (80037f8 <MX_GPIO_Init+0xb8>)
 8003772:	f043 0304 	orr.w	r3, r3, #4
 8003776:	6193      	str	r3, [r2, #24]
 8003778:	4b1f      	ldr	r3, [pc, #124]	@ (80037f8 <MX_GPIO_Init+0xb8>)
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003784:	4b1c      	ldr	r3, [pc, #112]	@ (80037f8 <MX_GPIO_Init+0xb8>)
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	4a1b      	ldr	r2, [pc, #108]	@ (80037f8 <MX_GPIO_Init+0xb8>)
 800378a:	f043 0308 	orr.w	r3, r3, #8
 800378e:	6193      	str	r3, [r2, #24]
 8003790:	4b19      	ldr	r3, [pc, #100]	@ (80037f8 <MX_GPIO_Init+0xb8>)
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	607b      	str	r3, [r7, #4]
 800379a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 800379c:	2200      	movs	r2, #0
 800379e:	f240 4103 	movw	r1, #1027	@ 0x403
 80037a2:	4816      	ldr	r0, [pc, #88]	@ (80037fc <MX_GPIO_Init+0xbc>)
 80037a4:	f000 ff6e 	bl	8004684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80037a8:	2200      	movs	r2, #0
 80037aa:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80037ae:	4814      	ldr	r0, [pc, #80]	@ (8003800 <MX_GPIO_Init+0xc0>)
 80037b0:	f000 ff68 	bl	8004684 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 80037b4:	f240 4303 	movw	r3, #1027	@ 0x403
 80037b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037ba:	2301      	movs	r3, #1
 80037bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c2:	2302      	movs	r3, #2
 80037c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c6:	f107 0310 	add.w	r3, r7, #16
 80037ca:	4619      	mov	r1, r3
 80037cc:	480b      	ldr	r0, [pc, #44]	@ (80037fc <MX_GPIO_Init+0xbc>)
 80037ce:	f000 fdd5 	bl	800437c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80037d2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80037d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037d8:	2301      	movs	r3, #1
 80037da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e0:	2302      	movs	r3, #2
 80037e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e4:	f107 0310 	add.w	r3, r7, #16
 80037e8:	4619      	mov	r1, r3
 80037ea:	4805      	ldr	r0, [pc, #20]	@ (8003800 <MX_GPIO_Init+0xc0>)
 80037ec:	f000 fdc6 	bl	800437c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80037f0:	bf00      	nop
 80037f2:	3720      	adds	r7, #32
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40010c00 	.word	0x40010c00
 8003800:	40010800 	.word	0x40010800

08003804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800380a:	4b15      	ldr	r3, [pc, #84]	@ (8003860 <HAL_MspInit+0x5c>)
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	4a14      	ldr	r2, [pc, #80]	@ (8003860 <HAL_MspInit+0x5c>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	6193      	str	r3, [r2, #24]
 8003816:	4b12      	ldr	r3, [pc, #72]	@ (8003860 <HAL_MspInit+0x5c>)
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	60bb      	str	r3, [r7, #8]
 8003820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003822:	4b0f      	ldr	r3, [pc, #60]	@ (8003860 <HAL_MspInit+0x5c>)
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	4a0e      	ldr	r2, [pc, #56]	@ (8003860 <HAL_MspInit+0x5c>)
 8003828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800382c:	61d3      	str	r3, [r2, #28]
 800382e:	4b0c      	ldr	r3, [pc, #48]	@ (8003860 <HAL_MspInit+0x5c>)
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003836:	607b      	str	r3, [r7, #4]
 8003838:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800383a:	4b0a      	ldr	r3, [pc, #40]	@ (8003864 <HAL_MspInit+0x60>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	4a04      	ldr	r2, [pc, #16]	@ (8003864 <HAL_MspInit+0x60>)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003856:	bf00      	nop
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr
 8003860:	40021000 	.word	0x40021000
 8003864:	40010000 	.word	0x40010000

08003868 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08a      	sub	sp, #40	@ 0x28
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003870:	f107 0318 	add.w	r3, r7, #24
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a5d      	ldr	r2, [pc, #372]	@ (80039f8 <HAL_SPI_MspInit+0x190>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d156      	bne.n	8003936 <HAL_SPI_MspInit+0xce>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003888:	4b5c      	ldr	r3, [pc, #368]	@ (80039fc <HAL_SPI_MspInit+0x194>)
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	4a5b      	ldr	r2, [pc, #364]	@ (80039fc <HAL_SPI_MspInit+0x194>)
 800388e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003892:	6193      	str	r3, [r2, #24]
 8003894:	4b59      	ldr	r3, [pc, #356]	@ (80039fc <HAL_SPI_MspInit+0x194>)
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a0:	4b56      	ldr	r3, [pc, #344]	@ (80039fc <HAL_SPI_MspInit+0x194>)
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	4a55      	ldr	r2, [pc, #340]	@ (80039fc <HAL_SPI_MspInit+0x194>)
 80038a6:	f043 0304 	orr.w	r3, r3, #4
 80038aa:	6193      	str	r3, [r2, #24]
 80038ac:	4b53      	ldr	r3, [pc, #332]	@ (80039fc <HAL_SPI_MspInit+0x194>)
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80038b8:	23a0      	movs	r3, #160	@ 0xa0
 80038ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038bc:	2302      	movs	r3, #2
 80038be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038c0:	2303      	movs	r3, #3
 80038c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c4:	f107 0318 	add.w	r3, r7, #24
 80038c8:	4619      	mov	r1, r3
 80038ca:	484d      	ldr	r0, [pc, #308]	@ (8003a00 <HAL_SPI_MspInit+0x198>)
 80038cc:	f000 fd56 	bl	800437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80038d0:	2340      	movs	r3, #64	@ 0x40
 80038d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038dc:	f107 0318 	add.w	r3, r7, #24
 80038e0:	4619      	mov	r1, r3
 80038e2:	4847      	ldr	r0, [pc, #284]	@ (8003a00 <HAL_SPI_MspInit+0x198>)
 80038e4:	f000 fd4a 	bl	800437c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80038e8:	4b46      	ldr	r3, [pc, #280]	@ (8003a04 <HAL_SPI_MspInit+0x19c>)
 80038ea:	4a47      	ldr	r2, [pc, #284]	@ (8003a08 <HAL_SPI_MspInit+0x1a0>)
 80038ec:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038ee:	4b45      	ldr	r3, [pc, #276]	@ (8003a04 <HAL_SPI_MspInit+0x19c>)
 80038f0:	2210      	movs	r2, #16
 80038f2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038f4:	4b43      	ldr	r3, [pc, #268]	@ (8003a04 <HAL_SPI_MspInit+0x19c>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038fa:	4b42      	ldr	r3, [pc, #264]	@ (8003a04 <HAL_SPI_MspInit+0x19c>)
 80038fc:	2280      	movs	r2, #128	@ 0x80
 80038fe:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003900:	4b40      	ldr	r3, [pc, #256]	@ (8003a04 <HAL_SPI_MspInit+0x19c>)
 8003902:	2200      	movs	r2, #0
 8003904:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003906:	4b3f      	ldr	r3, [pc, #252]	@ (8003a04 <HAL_SPI_MspInit+0x19c>)
 8003908:	2200      	movs	r2, #0
 800390a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800390c:	4b3d      	ldr	r3, [pc, #244]	@ (8003a04 <HAL_SPI_MspInit+0x19c>)
 800390e:	2200      	movs	r2, #0
 8003910:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003912:	4b3c      	ldr	r3, [pc, #240]	@ (8003a04 <HAL_SPI_MspInit+0x19c>)
 8003914:	2200      	movs	r2, #0
 8003916:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003918:	483a      	ldr	r0, [pc, #232]	@ (8003a04 <HAL_SPI_MspInit+0x19c>)
 800391a:	f000 fb41 	bl	8003fa0 <HAL_DMA_Init>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8003924:	f7fe fdae 	bl	8002484 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a36      	ldr	r2, [pc, #216]	@ (8003a04 <HAL_SPI_MspInit+0x19c>)
 800392c:	649a      	str	r2, [r3, #72]	@ 0x48
 800392e:	4a35      	ldr	r2, [pc, #212]	@ (8003a04 <HAL_SPI_MspInit+0x19c>)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6253      	str	r3, [r2, #36]	@ 0x24
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003934:	e05c      	b.n	80039f0 <HAL_SPI_MspInit+0x188>
  else if(hspi->Instance==SPI2)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a34      	ldr	r2, [pc, #208]	@ (8003a0c <HAL_SPI_MspInit+0x1a4>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d157      	bne.n	80039f0 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003940:	4b2e      	ldr	r3, [pc, #184]	@ (80039fc <HAL_SPI_MspInit+0x194>)
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	4a2d      	ldr	r2, [pc, #180]	@ (80039fc <HAL_SPI_MspInit+0x194>)
 8003946:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800394a:	61d3      	str	r3, [r2, #28]
 800394c:	4b2b      	ldr	r3, [pc, #172]	@ (80039fc <HAL_SPI_MspInit+0x194>)
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003958:	4b28      	ldr	r3, [pc, #160]	@ (80039fc <HAL_SPI_MspInit+0x194>)
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	4a27      	ldr	r2, [pc, #156]	@ (80039fc <HAL_SPI_MspInit+0x194>)
 800395e:	f043 0308 	orr.w	r3, r3, #8
 8003962:	6193      	str	r3, [r2, #24]
 8003964:	4b25      	ldr	r3, [pc, #148]	@ (80039fc <HAL_SPI_MspInit+0x194>)
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	60bb      	str	r3, [r7, #8]
 800396e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003970:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8003974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003976:	2302      	movs	r3, #2
 8003978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800397a:	2303      	movs	r3, #3
 800397c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800397e:	f107 0318 	add.w	r3, r7, #24
 8003982:	4619      	mov	r1, r3
 8003984:	4822      	ldr	r0, [pc, #136]	@ (8003a10 <HAL_SPI_MspInit+0x1a8>)
 8003986:	f000 fcf9 	bl	800437c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800398a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800398e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003990:	2300      	movs	r3, #0
 8003992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003994:	2300      	movs	r3, #0
 8003996:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003998:	f107 0318 	add.w	r3, r7, #24
 800399c:	4619      	mov	r1, r3
 800399e:	481c      	ldr	r0, [pc, #112]	@ (8003a10 <HAL_SPI_MspInit+0x1a8>)
 80039a0:	f000 fcec 	bl	800437c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80039a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a14 <HAL_SPI_MspInit+0x1ac>)
 80039a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a18 <HAL_SPI_MspInit+0x1b0>)
 80039a8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003a14 <HAL_SPI_MspInit+0x1ac>)
 80039ac:	2210      	movs	r2, #16
 80039ae:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039b0:	4b18      	ldr	r3, [pc, #96]	@ (8003a14 <HAL_SPI_MspInit+0x1ac>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039b6:	4b17      	ldr	r3, [pc, #92]	@ (8003a14 <HAL_SPI_MspInit+0x1ac>)
 80039b8:	2280      	movs	r2, #128	@ 0x80
 80039ba:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039bc:	4b15      	ldr	r3, [pc, #84]	@ (8003a14 <HAL_SPI_MspInit+0x1ac>)
 80039be:	2200      	movs	r2, #0
 80039c0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039c2:	4b14      	ldr	r3, [pc, #80]	@ (8003a14 <HAL_SPI_MspInit+0x1ac>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80039c8:	4b12      	ldr	r3, [pc, #72]	@ (8003a14 <HAL_SPI_MspInit+0x1ac>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039ce:	4b11      	ldr	r3, [pc, #68]	@ (8003a14 <HAL_SPI_MspInit+0x1ac>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80039d4:	480f      	ldr	r0, [pc, #60]	@ (8003a14 <HAL_SPI_MspInit+0x1ac>)
 80039d6:	f000 fae3 	bl	8003fa0 <HAL_DMA_Init>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_SPI_MspInit+0x17c>
      Error_Handler();
 80039e0:	f7fe fd50 	bl	8002484 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a0b      	ldr	r2, [pc, #44]	@ (8003a14 <HAL_SPI_MspInit+0x1ac>)
 80039e8:	649a      	str	r2, [r3, #72]	@ 0x48
 80039ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003a14 <HAL_SPI_MspInit+0x1ac>)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80039f0:	bf00      	nop
 80039f2:	3728      	adds	r7, #40	@ 0x28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40013000 	.word	0x40013000
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40010800 	.word	0x40010800
 8003a04:	20000138 	.word	0x20000138
 8003a08:	40020030 	.word	0x40020030
 8003a0c:	40003800 	.word	0x40003800
 8003a10:	40010c00 	.word	0x40010c00
 8003a14:	2000017c 	.word	0x2000017c
 8003a18:	40020058 	.word	0x40020058

08003a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a20:	bf00      	nop
 8003a22:	e7fd      	b.n	8003a20 <NMI_Handler+0x4>

08003a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a28:	bf00      	nop
 8003a2a:	e7fd      	b.n	8003a28 <HardFault_Handler+0x4>

08003a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a30:	bf00      	nop
 8003a32:	e7fd      	b.n	8003a30 <MemManage_Handler+0x4>

08003a34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a38:	bf00      	nop
 8003a3a:	e7fd      	b.n	8003a38 <BusFault_Handler+0x4>

08003a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a40:	bf00      	nop
 8003a42:	e7fd      	b.n	8003a40 <UsageFault_Handler+0x4>

08003a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a48:	bf00      	nop
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr

08003a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr

08003a5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a60:	bf00      	nop
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr

08003a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a6c:	f000 f94a 	bl	8003d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a70:	bf00      	nop
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003a78:	4802      	ldr	r0, [pc, #8]	@ (8003a84 <DMA1_Channel3_IRQHandler+0x10>)
 8003a7a:	f000 fb4b 	bl	8004114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000138 	.word	0x20000138

08003a88 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003a8c:	4802      	ldr	r0, [pc, #8]	@ (8003a98 <DMA1_Channel5_IRQHandler+0x10>)
 8003a8e:	f000 fb41 	bl	8004114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	2000017c 	.word	0x2000017c

08003a9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return 1;
 8003aa0:	2301      	movs	r3, #1
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr

08003aaa <_kill>:

int _kill(int pid, int sig)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ab4:	f001 ff36 	bl	8005924 <__errno>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2216      	movs	r2, #22
 8003abc:	601a      	str	r2, [r3, #0]
  return -1;
 8003abe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <_exit>:

void _exit (int status)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b082      	sub	sp, #8
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ad2:	f04f 31ff 	mov.w	r1, #4294967295
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff ffe7 	bl	8003aaa <_kill>
  while (1) {}    /* Make sure we hang here */
 8003adc:	bf00      	nop
 8003ade:	e7fd      	b.n	8003adc <_exit+0x12>

08003ae0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	e00a      	b.n	8003b08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003af2:	f3af 8000 	nop.w
 8003af6:	4601      	mov	r1, r0
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	60ba      	str	r2, [r7, #8]
 8003afe:	b2ca      	uxtb	r2, r1
 8003b00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	3301      	adds	r3, #1
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	dbf0      	blt.n	8003af2 <_read+0x12>
  }

  return len;
 8003b10:	687b      	ldr	r3, [r7, #4]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b086      	sub	sp, #24
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b26:	2300      	movs	r3, #0
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	e009      	b.n	8003b40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	60ba      	str	r2, [r7, #8]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	dbf1      	blt.n	8003b2c <_write+0x12>
  }
  return len;
 8003b48:	687b      	ldr	r3, [r7, #4]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <_close>:

int _close(int file)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr

08003b68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b78:	605a      	str	r2, [r3, #4]
  return 0;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr

08003b86 <_isatty>:

int _isatty(int file)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b8e:	2301      	movs	r3, #1
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bc80      	pop	{r7}
 8003b98:	4770      	bx	lr

08003b9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b085      	sub	sp, #20
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr
	...

08003bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bbc:	4a14      	ldr	r2, [pc, #80]	@ (8003c10 <_sbrk+0x5c>)
 8003bbe:	4b15      	ldr	r3, [pc, #84]	@ (8003c14 <_sbrk+0x60>)
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bc8:	4b13      	ldr	r3, [pc, #76]	@ (8003c18 <_sbrk+0x64>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d102      	bne.n	8003bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bd0:	4b11      	ldr	r3, [pc, #68]	@ (8003c18 <_sbrk+0x64>)
 8003bd2:	4a12      	ldr	r2, [pc, #72]	@ (8003c1c <_sbrk+0x68>)
 8003bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bd6:	4b10      	ldr	r3, [pc, #64]	@ (8003c18 <_sbrk+0x64>)
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4413      	add	r3, r2
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d207      	bcs.n	8003bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003be4:	f001 fe9e 	bl	8005924 <__errno>
 8003be8:	4603      	mov	r3, r0
 8003bea:	220c      	movs	r2, #12
 8003bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bee:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf2:	e009      	b.n	8003c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bf4:	4b08      	ldr	r3, [pc, #32]	@ (8003c18 <_sbrk+0x64>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bfa:	4b07      	ldr	r3, [pc, #28]	@ (8003c18 <_sbrk+0x64>)
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4413      	add	r3, r2
 8003c02:	4a05      	ldr	r2, [pc, #20]	@ (8003c18 <_sbrk+0x64>)
 8003c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c06:	68fb      	ldr	r3, [r7, #12]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20005000 	.word	0x20005000
 8003c14:	00000400 	.word	0x00000400
 8003c18:	2000022c 	.word	0x2000022c
 8003c1c:	20000380 	.word	0x20000380

08003c20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c24:	bf00      	nop
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c2c:	f7ff fff8 	bl	8003c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c30:	480b      	ldr	r0, [pc, #44]	@ (8003c60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003c32:	490c      	ldr	r1, [pc, #48]	@ (8003c64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003c34:	4a0c      	ldr	r2, [pc, #48]	@ (8003c68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c38:	e002      	b.n	8003c40 <LoopCopyDataInit>

08003c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c3e:	3304      	adds	r3, #4

08003c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c44:	d3f9      	bcc.n	8003c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c46:	4a09      	ldr	r2, [pc, #36]	@ (8003c6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003c48:	4c09      	ldr	r4, [pc, #36]	@ (8003c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c4c:	e001      	b.n	8003c52 <LoopFillZerobss>

08003c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c50:	3204      	adds	r2, #4

08003c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c54:	d3fb      	bcc.n	8003c4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c56:	f001 fe6b 	bl	8005930 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c5a:	f7fe f9af 	bl	8001fbc <main>
  bx lr
 8003c5e:	4770      	bx	lr
  ldr r0, =_sdata
 8003c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c64:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8003c68:	080077f0 	.word	0x080077f0
  ldr r2, =_sbss
 8003c6c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8003c70:	20000380 	.word	0x20000380

08003c74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c74:	e7fe      	b.n	8003c74 <ADC1_2_IRQHandler>
	...

08003c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c7c:	4b08      	ldr	r3, [pc, #32]	@ (8003ca0 <HAL_Init+0x28>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a07      	ldr	r2, [pc, #28]	@ (8003ca0 <HAL_Init+0x28>)
 8003c82:	f043 0310 	orr.w	r3, r3, #16
 8003c86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c88:	2003      	movs	r0, #3
 8003c8a:	f000 f947 	bl	8003f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c8e:	200f      	movs	r0, #15
 8003c90:	f000 f808 	bl	8003ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c94:	f7ff fdb6 	bl	8003804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40022000 	.word	0x40022000

08003ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cac:	4b12      	ldr	r3, [pc, #72]	@ (8003cf8 <HAL_InitTick+0x54>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	4b12      	ldr	r3, [pc, #72]	@ (8003cfc <HAL_InitTick+0x58>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 f95f 	bl	8003f86 <HAL_SYSTICK_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e00e      	b.n	8003cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b0f      	cmp	r3, #15
 8003cd6:	d80a      	bhi.n	8003cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cd8:	2200      	movs	r2, #0
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	f000 f927 	bl	8003f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ce4:	4a06      	ldr	r2, [pc, #24]	@ (8003d00 <HAL_InitTick+0x5c>)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e000      	b.n	8003cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	20000000 	.word	0x20000000
 8003cfc:	20000008 	.word	0x20000008
 8003d00:	20000004 	.word	0x20000004

08003d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d08:	4b05      	ldr	r3, [pc, #20]	@ (8003d20 <HAL_IncTick+0x1c>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b05      	ldr	r3, [pc, #20]	@ (8003d24 <HAL_IncTick+0x20>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4413      	add	r3, r2
 8003d14:	4a03      	ldr	r2, [pc, #12]	@ (8003d24 <HAL_IncTick+0x20>)
 8003d16:	6013      	str	r3, [r2, #0]
}
 8003d18:	bf00      	nop
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr
 8003d20:	20000008 	.word	0x20000008
 8003d24:	20000230 	.word	0x20000230

08003d28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d2c:	4b02      	ldr	r3, [pc, #8]	@ (8003d38 <HAL_GetTick+0x10>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr
 8003d38:	20000230 	.word	0x20000230

08003d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d44:	f7ff fff0 	bl	8003d28 <HAL_GetTick>
 8003d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d54:	d005      	beq.n	8003d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d56:	4b0a      	ldr	r3, [pc, #40]	@ (8003d80 <HAL_Delay+0x44>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4413      	add	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d62:	bf00      	nop
 8003d64:	f7ff ffe0 	bl	8003d28 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d8f7      	bhi.n	8003d64 <HAL_Delay+0x28>
  {
  }
}
 8003d74:	bf00      	nop
 8003d76:	bf00      	nop
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000008 	.word	0x20000008

08003d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d94:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003da0:	4013      	ands	r3, r2
 8003da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003db6:	4a04      	ldr	r2, [pc, #16]	@ (8003dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	60d3      	str	r3, [r2, #12]
}
 8003dbc:	bf00      	nop
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dd0:	4b04      	ldr	r3, [pc, #16]	@ (8003de4 <__NVIC_GetPriorityGrouping+0x18>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	0a1b      	lsrs	r3, r3, #8
 8003dd6:	f003 0307 	and.w	r3, r3, #7
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bc80      	pop	{r7}
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	db0b      	blt.n	8003e12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	f003 021f 	and.w	r2, r3, #31
 8003e00:	4906      	ldr	r1, [pc, #24]	@ (8003e1c <__NVIC_EnableIRQ+0x34>)
 8003e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	2001      	movs	r0, #1
 8003e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr
 8003e1c:	e000e100 	.word	0xe000e100

08003e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	6039      	str	r1, [r7, #0]
 8003e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	db0a      	blt.n	8003e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	490c      	ldr	r1, [pc, #48]	@ (8003e6c <__NVIC_SetPriority+0x4c>)
 8003e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3e:	0112      	lsls	r2, r2, #4
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	440b      	add	r3, r1
 8003e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e48:	e00a      	b.n	8003e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	4908      	ldr	r1, [pc, #32]	@ (8003e70 <__NVIC_SetPriority+0x50>)
 8003e50:	79fb      	ldrb	r3, [r7, #7]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	3b04      	subs	r3, #4
 8003e58:	0112      	lsls	r2, r2, #4
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	761a      	strb	r2, [r3, #24]
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	e000e100 	.word	0xe000e100
 8003e70:	e000ed00 	.word	0xe000ed00

08003e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b089      	sub	sp, #36	@ 0x24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f1c3 0307 	rsb	r3, r3, #7
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	bf28      	it	cs
 8003e92:	2304      	movcs	r3, #4
 8003e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	2b06      	cmp	r3, #6
 8003e9c:	d902      	bls.n	8003ea4 <NVIC_EncodePriority+0x30>
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	3b03      	subs	r3, #3
 8003ea2:	e000      	b.n	8003ea6 <NVIC_EncodePriority+0x32>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43da      	mvns	r2, r3
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	401a      	ands	r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec6:	43d9      	mvns	r1, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ecc:	4313      	orrs	r3, r2
         );
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3724      	adds	r7, #36	@ 0x24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr

08003ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ee8:	d301      	bcc.n	8003eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eea:	2301      	movs	r3, #1
 8003eec:	e00f      	b.n	8003f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eee:	4a0a      	ldr	r2, [pc, #40]	@ (8003f18 <SysTick_Config+0x40>)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ef6:	210f      	movs	r1, #15
 8003ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8003efc:	f7ff ff90 	bl	8003e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f00:	4b05      	ldr	r3, [pc, #20]	@ (8003f18 <SysTick_Config+0x40>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f06:	4b04      	ldr	r3, [pc, #16]	@ (8003f18 <SysTick_Config+0x40>)
 8003f08:	2207      	movs	r2, #7
 8003f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	e000e010 	.word	0xe000e010

08003f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff ff2d 	bl	8003d84 <__NVIC_SetPriorityGrouping>
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	4603      	mov	r3, r0
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f44:	f7ff ff42 	bl	8003dcc <__NVIC_GetPriorityGrouping>
 8003f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	6978      	ldr	r0, [r7, #20]
 8003f50:	f7ff ff90 	bl	8003e74 <NVIC_EncodePriority>
 8003f54:	4602      	mov	r2, r0
 8003f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ff5f 	bl	8003e20 <__NVIC_SetPriority>
}
 8003f62:	bf00      	nop
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	4603      	mov	r3, r0
 8003f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff ff35 	bl	8003de8 <__NVIC_EnableIRQ>
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff ffa2 	bl	8003ed8 <SysTick_Config>
 8003f94:	4603      	mov	r3, r0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e043      	b.n	800403e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	4b22      	ldr	r3, [pc, #136]	@ (8004048 <HAL_DMA_Init+0xa8>)
 8003fbe:	4413      	add	r3, r2
 8003fc0:	4a22      	ldr	r2, [pc, #136]	@ (800404c <HAL_DMA_Init+0xac>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	009a      	lsls	r2, r3, #2
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a1f      	ldr	r2, [pc, #124]	@ (8004050 <HAL_DMA_Init+0xb0>)
 8003fd2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003fea:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003fee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004004:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004010:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr
 8004048:	bffdfff8 	.word	0xbffdfff8
 800404c:	cccccccd 	.word	0xcccccccd
 8004050:	40020000 	.word	0x40020000

08004054 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_DMA_Start_IT+0x20>
 8004070:	2302      	movs	r3, #2
 8004072:	e04b      	b.n	800410c <HAL_DMA_Start_IT+0xb8>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b01      	cmp	r3, #1
 8004086:	d13a      	bne.n	80040fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0201 	bic.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 f937 	bl	8004320 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d008      	beq.n	80040cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 020e 	orr.w	r2, r2, #14
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	e00f      	b.n	80040ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0204 	bic.w	r2, r2, #4
 80040da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 020a 	orr.w	r2, r2, #10
 80040ea:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	e005      	b.n	800410a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004106:	2302      	movs	r3, #2
 8004108:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800410a:	7dfb      	ldrb	r3, [r7, #23]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004130:	2204      	movs	r2, #4
 8004132:	409a      	lsls	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4013      	ands	r3, r2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d04f      	beq.n	80041dc <HAL_DMA_IRQHandler+0xc8>
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b00      	cmp	r3, #0
 8004144:	d04a      	beq.n	80041dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b00      	cmp	r3, #0
 8004152:	d107      	bne.n	8004164 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0204 	bic.w	r2, r2, #4
 8004162:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a66      	ldr	r2, [pc, #408]	@ (8004304 <HAL_DMA_IRQHandler+0x1f0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d029      	beq.n	80041c2 <HAL_DMA_IRQHandler+0xae>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a65      	ldr	r2, [pc, #404]	@ (8004308 <HAL_DMA_IRQHandler+0x1f4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d022      	beq.n	80041be <HAL_DMA_IRQHandler+0xaa>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a63      	ldr	r2, [pc, #396]	@ (800430c <HAL_DMA_IRQHandler+0x1f8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d01a      	beq.n	80041b8 <HAL_DMA_IRQHandler+0xa4>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a62      	ldr	r2, [pc, #392]	@ (8004310 <HAL_DMA_IRQHandler+0x1fc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d012      	beq.n	80041b2 <HAL_DMA_IRQHandler+0x9e>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a60      	ldr	r2, [pc, #384]	@ (8004314 <HAL_DMA_IRQHandler+0x200>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00a      	beq.n	80041ac <HAL_DMA_IRQHandler+0x98>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a5f      	ldr	r2, [pc, #380]	@ (8004318 <HAL_DMA_IRQHandler+0x204>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d102      	bne.n	80041a6 <HAL_DMA_IRQHandler+0x92>
 80041a0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80041a4:	e00e      	b.n	80041c4 <HAL_DMA_IRQHandler+0xb0>
 80041a6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80041aa:	e00b      	b.n	80041c4 <HAL_DMA_IRQHandler+0xb0>
 80041ac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80041b0:	e008      	b.n	80041c4 <HAL_DMA_IRQHandler+0xb0>
 80041b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80041b6:	e005      	b.n	80041c4 <HAL_DMA_IRQHandler+0xb0>
 80041b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041bc:	e002      	b.n	80041c4 <HAL_DMA_IRQHandler+0xb0>
 80041be:	2340      	movs	r3, #64	@ 0x40
 80041c0:	e000      	b.n	80041c4 <HAL_DMA_IRQHandler+0xb0>
 80041c2:	2304      	movs	r3, #4
 80041c4:	4a55      	ldr	r2, [pc, #340]	@ (800431c <HAL_DMA_IRQHandler+0x208>)
 80041c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 8094 	beq.w	80042fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80041da:	e08e      	b.n	80042fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e0:	2202      	movs	r2, #2
 80041e2:	409a      	lsls	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d056      	beq.n	800429a <HAL_DMA_IRQHandler+0x186>
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d051      	beq.n	800429a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10b      	bne.n	800421c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 020a 	bic.w	r2, r2, #10
 8004212:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a38      	ldr	r2, [pc, #224]	@ (8004304 <HAL_DMA_IRQHandler+0x1f0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d029      	beq.n	800427a <HAL_DMA_IRQHandler+0x166>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a37      	ldr	r2, [pc, #220]	@ (8004308 <HAL_DMA_IRQHandler+0x1f4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d022      	beq.n	8004276 <HAL_DMA_IRQHandler+0x162>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a35      	ldr	r2, [pc, #212]	@ (800430c <HAL_DMA_IRQHandler+0x1f8>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d01a      	beq.n	8004270 <HAL_DMA_IRQHandler+0x15c>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a34      	ldr	r2, [pc, #208]	@ (8004310 <HAL_DMA_IRQHandler+0x1fc>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d012      	beq.n	800426a <HAL_DMA_IRQHandler+0x156>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a32      	ldr	r2, [pc, #200]	@ (8004314 <HAL_DMA_IRQHandler+0x200>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00a      	beq.n	8004264 <HAL_DMA_IRQHandler+0x150>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a31      	ldr	r2, [pc, #196]	@ (8004318 <HAL_DMA_IRQHandler+0x204>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d102      	bne.n	800425e <HAL_DMA_IRQHandler+0x14a>
 8004258:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800425c:	e00e      	b.n	800427c <HAL_DMA_IRQHandler+0x168>
 800425e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004262:	e00b      	b.n	800427c <HAL_DMA_IRQHandler+0x168>
 8004264:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004268:	e008      	b.n	800427c <HAL_DMA_IRQHandler+0x168>
 800426a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800426e:	e005      	b.n	800427c <HAL_DMA_IRQHandler+0x168>
 8004270:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004274:	e002      	b.n	800427c <HAL_DMA_IRQHandler+0x168>
 8004276:	2320      	movs	r3, #32
 8004278:	e000      	b.n	800427c <HAL_DMA_IRQHandler+0x168>
 800427a:	2302      	movs	r3, #2
 800427c:	4a27      	ldr	r2, [pc, #156]	@ (800431c <HAL_DMA_IRQHandler+0x208>)
 800427e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428c:	2b00      	cmp	r3, #0
 800428e:	d034      	beq.n	80042fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004298:	e02f      	b.n	80042fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429e:	2208      	movs	r2, #8
 80042a0:	409a      	lsls	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d028      	beq.n	80042fc <HAL_DMA_IRQHandler+0x1e8>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d023      	beq.n	80042fc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 020e 	bic.w	r2, r2, #14
 80042c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042cc:	2101      	movs	r1, #1
 80042ce:	fa01 f202 	lsl.w	r2, r1, r2
 80042d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d004      	beq.n	80042fc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	4798      	blx	r3
    }
  }
  return;
 80042fa:	bf00      	nop
 80042fc:	bf00      	nop
}
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40020008 	.word	0x40020008
 8004308:	4002001c 	.word	0x4002001c
 800430c:	40020030 	.word	0x40020030
 8004310:	40020044 	.word	0x40020044
 8004314:	40020058 	.word	0x40020058
 8004318:	4002006c 	.word	0x4002006c
 800431c:	40020000 	.word	0x40020000

08004320 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
 800432c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004336:	2101      	movs	r1, #1
 8004338:	fa01 f202 	lsl.w	r2, r1, r2
 800433c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b10      	cmp	r3, #16
 800434c:	d108      	bne.n	8004360 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800435e:	e007      	b.n	8004370 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	60da      	str	r2, [r3, #12]
}
 8004370:	bf00      	nop
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr
	...

0800437c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800437c:	b480      	push	{r7}
 800437e:	b08b      	sub	sp, #44	@ 0x2c
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004386:	2300      	movs	r3, #0
 8004388:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800438a:	2300      	movs	r3, #0
 800438c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800438e:	e169      	b.n	8004664 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004390:	2201      	movs	r2, #1
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69fa      	ldr	r2, [r7, #28]
 80043a0:	4013      	ands	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	f040 8158 	bne.w	800465e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	4a9a      	ldr	r2, [pc, #616]	@ (800461c <HAL_GPIO_Init+0x2a0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d05e      	beq.n	8004476 <HAL_GPIO_Init+0xfa>
 80043b8:	4a98      	ldr	r2, [pc, #608]	@ (800461c <HAL_GPIO_Init+0x2a0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d875      	bhi.n	80044aa <HAL_GPIO_Init+0x12e>
 80043be:	4a98      	ldr	r2, [pc, #608]	@ (8004620 <HAL_GPIO_Init+0x2a4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d058      	beq.n	8004476 <HAL_GPIO_Init+0xfa>
 80043c4:	4a96      	ldr	r2, [pc, #600]	@ (8004620 <HAL_GPIO_Init+0x2a4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d86f      	bhi.n	80044aa <HAL_GPIO_Init+0x12e>
 80043ca:	4a96      	ldr	r2, [pc, #600]	@ (8004624 <HAL_GPIO_Init+0x2a8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d052      	beq.n	8004476 <HAL_GPIO_Init+0xfa>
 80043d0:	4a94      	ldr	r2, [pc, #592]	@ (8004624 <HAL_GPIO_Init+0x2a8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d869      	bhi.n	80044aa <HAL_GPIO_Init+0x12e>
 80043d6:	4a94      	ldr	r2, [pc, #592]	@ (8004628 <HAL_GPIO_Init+0x2ac>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d04c      	beq.n	8004476 <HAL_GPIO_Init+0xfa>
 80043dc:	4a92      	ldr	r2, [pc, #584]	@ (8004628 <HAL_GPIO_Init+0x2ac>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d863      	bhi.n	80044aa <HAL_GPIO_Init+0x12e>
 80043e2:	4a92      	ldr	r2, [pc, #584]	@ (800462c <HAL_GPIO_Init+0x2b0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d046      	beq.n	8004476 <HAL_GPIO_Init+0xfa>
 80043e8:	4a90      	ldr	r2, [pc, #576]	@ (800462c <HAL_GPIO_Init+0x2b0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d85d      	bhi.n	80044aa <HAL_GPIO_Init+0x12e>
 80043ee:	2b12      	cmp	r3, #18
 80043f0:	d82a      	bhi.n	8004448 <HAL_GPIO_Init+0xcc>
 80043f2:	2b12      	cmp	r3, #18
 80043f4:	d859      	bhi.n	80044aa <HAL_GPIO_Init+0x12e>
 80043f6:	a201      	add	r2, pc, #4	@ (adr r2, 80043fc <HAL_GPIO_Init+0x80>)
 80043f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fc:	08004477 	.word	0x08004477
 8004400:	08004451 	.word	0x08004451
 8004404:	08004463 	.word	0x08004463
 8004408:	080044a5 	.word	0x080044a5
 800440c:	080044ab 	.word	0x080044ab
 8004410:	080044ab 	.word	0x080044ab
 8004414:	080044ab 	.word	0x080044ab
 8004418:	080044ab 	.word	0x080044ab
 800441c:	080044ab 	.word	0x080044ab
 8004420:	080044ab 	.word	0x080044ab
 8004424:	080044ab 	.word	0x080044ab
 8004428:	080044ab 	.word	0x080044ab
 800442c:	080044ab 	.word	0x080044ab
 8004430:	080044ab 	.word	0x080044ab
 8004434:	080044ab 	.word	0x080044ab
 8004438:	080044ab 	.word	0x080044ab
 800443c:	080044ab 	.word	0x080044ab
 8004440:	08004459 	.word	0x08004459
 8004444:	0800446d 	.word	0x0800446d
 8004448:	4a79      	ldr	r2, [pc, #484]	@ (8004630 <HAL_GPIO_Init+0x2b4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d013      	beq.n	8004476 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800444e:	e02c      	b.n	80044aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	623b      	str	r3, [r7, #32]
          break;
 8004456:	e029      	b.n	80044ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	3304      	adds	r3, #4
 800445e:	623b      	str	r3, [r7, #32]
          break;
 8004460:	e024      	b.n	80044ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	3308      	adds	r3, #8
 8004468:	623b      	str	r3, [r7, #32]
          break;
 800446a:	e01f      	b.n	80044ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	330c      	adds	r3, #12
 8004472:	623b      	str	r3, [r7, #32]
          break;
 8004474:	e01a      	b.n	80044ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d102      	bne.n	8004484 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800447e:	2304      	movs	r3, #4
 8004480:	623b      	str	r3, [r7, #32]
          break;
 8004482:	e013      	b.n	80044ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d105      	bne.n	8004498 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800448c:	2308      	movs	r3, #8
 800448e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	611a      	str	r2, [r3, #16]
          break;
 8004496:	e009      	b.n	80044ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004498:	2308      	movs	r3, #8
 800449a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69fa      	ldr	r2, [r7, #28]
 80044a0:	615a      	str	r2, [r3, #20]
          break;
 80044a2:	e003      	b.n	80044ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80044a4:	2300      	movs	r3, #0
 80044a6:	623b      	str	r3, [r7, #32]
          break;
 80044a8:	e000      	b.n	80044ac <HAL_GPIO_Init+0x130>
          break;
 80044aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	2bff      	cmp	r3, #255	@ 0xff
 80044b0:	d801      	bhi.n	80044b6 <HAL_GPIO_Init+0x13a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	e001      	b.n	80044ba <HAL_GPIO_Init+0x13e>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3304      	adds	r3, #4
 80044ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	2bff      	cmp	r3, #255	@ 0xff
 80044c0:	d802      	bhi.n	80044c8 <HAL_GPIO_Init+0x14c>
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	e002      	b.n	80044ce <HAL_GPIO_Init+0x152>
 80044c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ca:	3b08      	subs	r3, #8
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	210f      	movs	r1, #15
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	fa01 f303 	lsl.w	r3, r1, r3
 80044dc:	43db      	mvns	r3, r3
 80044de:	401a      	ands	r2, r3
 80044e0:	6a39      	ldr	r1, [r7, #32]
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	fa01 f303 	lsl.w	r3, r1, r3
 80044e8:	431a      	orrs	r2, r3
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 80b1 	beq.w	800465e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80044fc:	4b4d      	ldr	r3, [pc, #308]	@ (8004634 <HAL_GPIO_Init+0x2b8>)
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	4a4c      	ldr	r2, [pc, #304]	@ (8004634 <HAL_GPIO_Init+0x2b8>)
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	6193      	str	r3, [r2, #24]
 8004508:	4b4a      	ldr	r3, [pc, #296]	@ (8004634 <HAL_GPIO_Init+0x2b8>)
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	60bb      	str	r3, [r7, #8]
 8004512:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004514:	4a48      	ldr	r2, [pc, #288]	@ (8004638 <HAL_GPIO_Init+0x2bc>)
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	089b      	lsrs	r3, r3, #2
 800451a:	3302      	adds	r3, #2
 800451c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004520:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	220f      	movs	r2, #15
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	43db      	mvns	r3, r3
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	4013      	ands	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a40      	ldr	r2, [pc, #256]	@ (800463c <HAL_GPIO_Init+0x2c0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d013      	beq.n	8004568 <HAL_GPIO_Init+0x1ec>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a3f      	ldr	r2, [pc, #252]	@ (8004640 <HAL_GPIO_Init+0x2c4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00d      	beq.n	8004564 <HAL_GPIO_Init+0x1e8>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a3e      	ldr	r2, [pc, #248]	@ (8004644 <HAL_GPIO_Init+0x2c8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d007      	beq.n	8004560 <HAL_GPIO_Init+0x1e4>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a3d      	ldr	r2, [pc, #244]	@ (8004648 <HAL_GPIO_Init+0x2cc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d101      	bne.n	800455c <HAL_GPIO_Init+0x1e0>
 8004558:	2303      	movs	r3, #3
 800455a:	e006      	b.n	800456a <HAL_GPIO_Init+0x1ee>
 800455c:	2304      	movs	r3, #4
 800455e:	e004      	b.n	800456a <HAL_GPIO_Init+0x1ee>
 8004560:	2302      	movs	r3, #2
 8004562:	e002      	b.n	800456a <HAL_GPIO_Init+0x1ee>
 8004564:	2301      	movs	r3, #1
 8004566:	e000      	b.n	800456a <HAL_GPIO_Init+0x1ee>
 8004568:	2300      	movs	r3, #0
 800456a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800456c:	f002 0203 	and.w	r2, r2, #3
 8004570:	0092      	lsls	r2, r2, #2
 8004572:	4093      	lsls	r3, r2
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800457a:	492f      	ldr	r1, [pc, #188]	@ (8004638 <HAL_GPIO_Init+0x2bc>)
 800457c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457e:	089b      	lsrs	r3, r3, #2
 8004580:	3302      	adds	r3, #2
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d006      	beq.n	80045a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004594:	4b2d      	ldr	r3, [pc, #180]	@ (800464c <HAL_GPIO_Init+0x2d0>)
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	492c      	ldr	r1, [pc, #176]	@ (800464c <HAL_GPIO_Init+0x2d0>)
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	4313      	orrs	r3, r2
 800459e:	608b      	str	r3, [r1, #8]
 80045a0:	e006      	b.n	80045b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80045a2:	4b2a      	ldr	r3, [pc, #168]	@ (800464c <HAL_GPIO_Init+0x2d0>)
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	43db      	mvns	r3, r3
 80045aa:	4928      	ldr	r1, [pc, #160]	@ (800464c <HAL_GPIO_Init+0x2d0>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d006      	beq.n	80045ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80045bc:	4b23      	ldr	r3, [pc, #140]	@ (800464c <HAL_GPIO_Init+0x2d0>)
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	4922      	ldr	r1, [pc, #136]	@ (800464c <HAL_GPIO_Init+0x2d0>)
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60cb      	str	r3, [r1, #12]
 80045c8:	e006      	b.n	80045d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80045ca:	4b20      	ldr	r3, [pc, #128]	@ (800464c <HAL_GPIO_Init+0x2d0>)
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	43db      	mvns	r3, r3
 80045d2:	491e      	ldr	r1, [pc, #120]	@ (800464c <HAL_GPIO_Init+0x2d0>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d006      	beq.n	80045f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80045e4:	4b19      	ldr	r3, [pc, #100]	@ (800464c <HAL_GPIO_Init+0x2d0>)
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	4918      	ldr	r1, [pc, #96]	@ (800464c <HAL_GPIO_Init+0x2d0>)
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	604b      	str	r3, [r1, #4]
 80045f0:	e006      	b.n	8004600 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80045f2:	4b16      	ldr	r3, [pc, #88]	@ (800464c <HAL_GPIO_Init+0x2d0>)
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	43db      	mvns	r3, r3
 80045fa:	4914      	ldr	r1, [pc, #80]	@ (800464c <HAL_GPIO_Init+0x2d0>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d021      	beq.n	8004650 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800460c:	4b0f      	ldr	r3, [pc, #60]	@ (800464c <HAL_GPIO_Init+0x2d0>)
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	490e      	ldr	r1, [pc, #56]	@ (800464c <HAL_GPIO_Init+0x2d0>)
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	4313      	orrs	r3, r2
 8004616:	600b      	str	r3, [r1, #0]
 8004618:	e021      	b.n	800465e <HAL_GPIO_Init+0x2e2>
 800461a:	bf00      	nop
 800461c:	10320000 	.word	0x10320000
 8004620:	10310000 	.word	0x10310000
 8004624:	10220000 	.word	0x10220000
 8004628:	10210000 	.word	0x10210000
 800462c:	10120000 	.word	0x10120000
 8004630:	10110000 	.word	0x10110000
 8004634:	40021000 	.word	0x40021000
 8004638:	40010000 	.word	0x40010000
 800463c:	40010800 	.word	0x40010800
 8004640:	40010c00 	.word	0x40010c00
 8004644:	40011000 	.word	0x40011000
 8004648:	40011400 	.word	0x40011400
 800464c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004650:	4b0b      	ldr	r3, [pc, #44]	@ (8004680 <HAL_GPIO_Init+0x304>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	43db      	mvns	r3, r3
 8004658:	4909      	ldr	r1, [pc, #36]	@ (8004680 <HAL_GPIO_Init+0x304>)
 800465a:	4013      	ands	r3, r2
 800465c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800465e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004660:	3301      	adds	r3, #1
 8004662:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466a:	fa22 f303 	lsr.w	r3, r2, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	f47f ae8e 	bne.w	8004390 <HAL_GPIO_Init+0x14>
  }
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop
 8004678:	372c      	adds	r7, #44	@ 0x2c
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr
 8004680:	40010400 	.word	0x40010400

08004684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	807b      	strh	r3, [r7, #2]
 8004690:	4613      	mov	r3, r2
 8004692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004694:	787b      	ldrb	r3, [r7, #1]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800469a:	887a      	ldrh	r2, [r7, #2]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80046a0:	e003      	b.n	80046aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046a2:	887b      	ldrh	r3, [r7, #2]
 80046a4:	041a      	lsls	r2, r3, #16
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	611a      	str	r2, [r3, #16]
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr

080046b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e272      	b.n	8004bac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 8087 	beq.w	80047e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046d4:	4b92      	ldr	r3, [pc, #584]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 030c 	and.w	r3, r3, #12
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d00c      	beq.n	80046fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046e0:	4b8f      	ldr	r3, [pc, #572]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 030c 	and.w	r3, r3, #12
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d112      	bne.n	8004712 <HAL_RCC_OscConfig+0x5e>
 80046ec:	4b8c      	ldr	r3, [pc, #560]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046f8:	d10b      	bne.n	8004712 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046fa:	4b89      	ldr	r3, [pc, #548]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d06c      	beq.n	80047e0 <HAL_RCC_OscConfig+0x12c>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d168      	bne.n	80047e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e24c      	b.n	8004bac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800471a:	d106      	bne.n	800472a <HAL_RCC_OscConfig+0x76>
 800471c:	4b80      	ldr	r3, [pc, #512]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a7f      	ldr	r2, [pc, #508]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004722:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	e02e      	b.n	8004788 <HAL_RCC_OscConfig+0xd4>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10c      	bne.n	800474c <HAL_RCC_OscConfig+0x98>
 8004732:	4b7b      	ldr	r3, [pc, #492]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a7a      	ldr	r2, [pc, #488]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004738:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	4b78      	ldr	r3, [pc, #480]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a77      	ldr	r2, [pc, #476]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004744:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	e01d      	b.n	8004788 <HAL_RCC_OscConfig+0xd4>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004754:	d10c      	bne.n	8004770 <HAL_RCC_OscConfig+0xbc>
 8004756:	4b72      	ldr	r3, [pc, #456]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a71      	ldr	r2, [pc, #452]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 800475c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	4b6f      	ldr	r3, [pc, #444]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a6e      	ldr	r2, [pc, #440]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	e00b      	b.n	8004788 <HAL_RCC_OscConfig+0xd4>
 8004770:	4b6b      	ldr	r3, [pc, #428]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a6a      	ldr	r2, [pc, #424]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	4b68      	ldr	r3, [pc, #416]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a67      	ldr	r2, [pc, #412]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004786:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d013      	beq.n	80047b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004790:	f7ff faca 	bl	8003d28 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004798:	f7ff fac6 	bl	8003d28 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b64      	cmp	r3, #100	@ 0x64
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e200      	b.n	8004bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047aa:	4b5d      	ldr	r3, [pc, #372]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0f0      	beq.n	8004798 <HAL_RCC_OscConfig+0xe4>
 80047b6:	e014      	b.n	80047e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b8:	f7ff fab6 	bl	8003d28 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c0:	f7ff fab2 	bl	8003d28 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b64      	cmp	r3, #100	@ 0x64
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e1ec      	b.n	8004bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d2:	4b53      	ldr	r3, [pc, #332]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f0      	bne.n	80047c0 <HAL_RCC_OscConfig+0x10c>
 80047de:	e000      	b.n	80047e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d063      	beq.n	80048b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047ee:	4b4c      	ldr	r3, [pc, #304]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f003 030c 	and.w	r3, r3, #12
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00b      	beq.n	8004812 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80047fa:	4b49      	ldr	r3, [pc, #292]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f003 030c 	and.w	r3, r3, #12
 8004802:	2b08      	cmp	r3, #8
 8004804:	d11c      	bne.n	8004840 <HAL_RCC_OscConfig+0x18c>
 8004806:	4b46      	ldr	r3, [pc, #280]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d116      	bne.n	8004840 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004812:	4b43      	ldr	r3, [pc, #268]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d005      	beq.n	800482a <HAL_RCC_OscConfig+0x176>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d001      	beq.n	800482a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e1c0      	b.n	8004bac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482a:	4b3d      	ldr	r3, [pc, #244]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	4939      	ldr	r1, [pc, #228]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 800483a:	4313      	orrs	r3, r2
 800483c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800483e:	e03a      	b.n	80048b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d020      	beq.n	800488a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004848:	4b36      	ldr	r3, [pc, #216]	@ (8004924 <HAL_RCC_OscConfig+0x270>)
 800484a:	2201      	movs	r2, #1
 800484c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484e:	f7ff fa6b 	bl	8003d28 <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004856:	f7ff fa67 	bl	8003d28 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e1a1      	b.n	8004bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004868:	4b2d      	ldr	r3, [pc, #180]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0f0      	beq.n	8004856 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004874:	4b2a      	ldr	r3, [pc, #168]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	4927      	ldr	r1, [pc, #156]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004884:	4313      	orrs	r3, r2
 8004886:	600b      	str	r3, [r1, #0]
 8004888:	e015      	b.n	80048b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800488a:	4b26      	ldr	r3, [pc, #152]	@ (8004924 <HAL_RCC_OscConfig+0x270>)
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004890:	f7ff fa4a 	bl	8003d28 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004898:	f7ff fa46 	bl	8003d28 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e180      	b.n	8004bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f0      	bne.n	8004898 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d03a      	beq.n	8004938 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d019      	beq.n	80048fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ca:	4b17      	ldr	r3, [pc, #92]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80048cc:	2201      	movs	r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d0:	f7ff fa2a 	bl	8003d28 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d8:	f7ff fa26 	bl	8003d28 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e160      	b.n	8004bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004920 <HAL_RCC_OscConfig+0x26c>)
 80048ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f0      	beq.n	80048d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80048f6:	2001      	movs	r0, #1
 80048f8:	f000 fa9c 	bl	8004e34 <RCC_Delay>
 80048fc:	e01c      	b.n	8004938 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004904:	f7ff fa10 	bl	8003d28 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800490a:	e00f      	b.n	800492c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800490c:	f7ff fa0c 	bl	8003d28 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d908      	bls.n	800492c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e146      	b.n	8004bac <HAL_RCC_OscConfig+0x4f8>
 800491e:	bf00      	nop
 8004920:	40021000 	.word	0x40021000
 8004924:	42420000 	.word	0x42420000
 8004928:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800492c:	4b92      	ldr	r3, [pc, #584]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 800492e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1e9      	bne.n	800490c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80a6 	beq.w	8004a92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004946:	2300      	movs	r3, #0
 8004948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800494a:	4b8b      	ldr	r3, [pc, #556]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10d      	bne.n	8004972 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004956:	4b88      	ldr	r3, [pc, #544]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	4a87      	ldr	r2, [pc, #540]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 800495c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004960:	61d3      	str	r3, [r2, #28]
 8004962:	4b85      	ldr	r3, [pc, #532]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800496a:	60bb      	str	r3, [r7, #8]
 800496c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800496e:	2301      	movs	r3, #1
 8004970:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004972:	4b82      	ldr	r3, [pc, #520]	@ (8004b7c <HAL_RCC_OscConfig+0x4c8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d118      	bne.n	80049b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800497e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b7c <HAL_RCC_OscConfig+0x4c8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a7e      	ldr	r2, [pc, #504]	@ (8004b7c <HAL_RCC_OscConfig+0x4c8>)
 8004984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800498a:	f7ff f9cd 	bl	8003d28 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004992:	f7ff f9c9 	bl	8003d28 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b64      	cmp	r3, #100	@ 0x64
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e103      	b.n	8004bac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a4:	4b75      	ldr	r3, [pc, #468]	@ (8004b7c <HAL_RCC_OscConfig+0x4c8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0f0      	beq.n	8004992 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d106      	bne.n	80049c6 <HAL_RCC_OscConfig+0x312>
 80049b8:	4b6f      	ldr	r3, [pc, #444]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	4a6e      	ldr	r2, [pc, #440]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	6213      	str	r3, [r2, #32]
 80049c4:	e02d      	b.n	8004a22 <HAL_RCC_OscConfig+0x36e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10c      	bne.n	80049e8 <HAL_RCC_OscConfig+0x334>
 80049ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	4a69      	ldr	r2, [pc, #420]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 80049d4:	f023 0301 	bic.w	r3, r3, #1
 80049d8:	6213      	str	r3, [r2, #32]
 80049da:	4b67      	ldr	r3, [pc, #412]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	4a66      	ldr	r2, [pc, #408]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 80049e0:	f023 0304 	bic.w	r3, r3, #4
 80049e4:	6213      	str	r3, [r2, #32]
 80049e6:	e01c      	b.n	8004a22 <HAL_RCC_OscConfig+0x36e>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	2b05      	cmp	r3, #5
 80049ee:	d10c      	bne.n	8004a0a <HAL_RCC_OscConfig+0x356>
 80049f0:	4b61      	ldr	r3, [pc, #388]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	4a60      	ldr	r2, [pc, #384]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 80049f6:	f043 0304 	orr.w	r3, r3, #4
 80049fa:	6213      	str	r3, [r2, #32]
 80049fc:	4b5e      	ldr	r3, [pc, #376]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	4a5d      	ldr	r2, [pc, #372]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 8004a02:	f043 0301 	orr.w	r3, r3, #1
 8004a06:	6213      	str	r3, [r2, #32]
 8004a08:	e00b      	b.n	8004a22 <HAL_RCC_OscConfig+0x36e>
 8004a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	4a5a      	ldr	r2, [pc, #360]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 8004a10:	f023 0301 	bic.w	r3, r3, #1
 8004a14:	6213      	str	r3, [r2, #32]
 8004a16:	4b58      	ldr	r3, [pc, #352]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	4a57      	ldr	r2, [pc, #348]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 8004a1c:	f023 0304 	bic.w	r3, r3, #4
 8004a20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d015      	beq.n	8004a56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2a:	f7ff f97d 	bl	8003d28 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a30:	e00a      	b.n	8004a48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a32:	f7ff f979 	bl	8003d28 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e0b1      	b.n	8004bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a48:	4b4b      	ldr	r3, [pc, #300]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0ee      	beq.n	8004a32 <HAL_RCC_OscConfig+0x37e>
 8004a54:	e014      	b.n	8004a80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a56:	f7ff f967 	bl	8003d28 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a5c:	e00a      	b.n	8004a74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a5e:	f7ff f963 	bl	8003d28 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e09b      	b.n	8004bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a74:	4b40      	ldr	r3, [pc, #256]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1ee      	bne.n	8004a5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a80:	7dfb      	ldrb	r3, [r7, #23]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d105      	bne.n	8004a92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a86:	4b3c      	ldr	r3, [pc, #240]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	4a3b      	ldr	r2, [pc, #236]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 8004a8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 8087 	beq.w	8004baa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a9c:	4b36      	ldr	r3, [pc, #216]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f003 030c 	and.w	r3, r3, #12
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d061      	beq.n	8004b6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d146      	bne.n	8004b3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab0:	4b33      	ldr	r3, [pc, #204]	@ (8004b80 <HAL_RCC_OscConfig+0x4cc>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab6:	f7ff f937 	bl	8003d28 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004abe:	f7ff f933 	bl	8003d28 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e06d      	b.n	8004bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ad0:	4b29      	ldr	r3, [pc, #164]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1f0      	bne.n	8004abe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ae4:	d108      	bne.n	8004af8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ae6:	4b24      	ldr	r3, [pc, #144]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	4921      	ldr	r1, [pc, #132]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004af8:	4b1f      	ldr	r3, [pc, #124]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a19      	ldr	r1, [r3, #32]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	491b      	ldr	r1, [pc, #108]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b10:	4b1b      	ldr	r3, [pc, #108]	@ (8004b80 <HAL_RCC_OscConfig+0x4cc>)
 8004b12:	2201      	movs	r2, #1
 8004b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b16:	f7ff f907 	bl	8003d28 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1e:	f7ff f903 	bl	8003d28 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e03d      	b.n	8004bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b30:	4b11      	ldr	r3, [pc, #68]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0f0      	beq.n	8004b1e <HAL_RCC_OscConfig+0x46a>
 8004b3c:	e035      	b.n	8004baa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b3e:	4b10      	ldr	r3, [pc, #64]	@ (8004b80 <HAL_RCC_OscConfig+0x4cc>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b44:	f7ff f8f0 	bl	8003d28 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b4c:	f7ff f8ec 	bl	8003d28 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e026      	b.n	8004bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b5e:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <HAL_RCC_OscConfig+0x4c4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f0      	bne.n	8004b4c <HAL_RCC_OscConfig+0x498>
 8004b6a:	e01e      	b.n	8004baa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d107      	bne.n	8004b84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e019      	b.n	8004bac <HAL_RCC_OscConfig+0x4f8>
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	40007000 	.word	0x40007000
 8004b80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b84:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb4 <HAL_RCC_OscConfig+0x500>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d106      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d001      	beq.n	8004baa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40021000 	.word	0x40021000

08004bb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e0d0      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bcc:	4b6a      	ldr	r3, [pc, #424]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c0>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d910      	bls.n	8004bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bda:	4b67      	ldr	r3, [pc, #412]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f023 0207 	bic.w	r2, r3, #7
 8004be2:	4965      	ldr	r1, [pc, #404]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c0>)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bea:	4b63      	ldr	r3, [pc, #396]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d001      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e0b8      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d020      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c14:	4b59      	ldr	r3, [pc, #356]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c4>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	4a58      	ldr	r2, [pc, #352]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c4>)
 8004c1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c2c:	4b53      	ldr	r3, [pc, #332]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c4>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	4a52      	ldr	r2, [pc, #328]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c4>)
 8004c32:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004c36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c38:	4b50      	ldr	r3, [pc, #320]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c4>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	494d      	ldr	r1, [pc, #308]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c4>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d040      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d107      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5e:	4b47      	ldr	r3, [pc, #284]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c4>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d115      	bne.n	8004c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e07f      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d107      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c76:	4b41      	ldr	r3, [pc, #260]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c4>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d109      	bne.n	8004c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e073      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c86:	4b3d      	ldr	r3, [pc, #244]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c4>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e06b      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c96:	4b39      	ldr	r3, [pc, #228]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c4>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f023 0203 	bic.w	r2, r3, #3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	4936      	ldr	r1, [pc, #216]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c4>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ca8:	f7ff f83e 	bl	8003d28 <HAL_GetTick>
 8004cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cae:	e00a      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb0:	f7ff f83a 	bl	8003d28 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e053      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c4>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f003 020c 	and.w	r2, r3, #12
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d1eb      	bne.n	8004cb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cd8:	4b27      	ldr	r3, [pc, #156]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c0>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d210      	bcs.n	8004d08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce6:	4b24      	ldr	r3, [pc, #144]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f023 0207 	bic.w	r2, r3, #7
 8004cee:	4922      	ldr	r1, [pc, #136]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c0>)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf6:	4b20      	ldr	r3, [pc, #128]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c0>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d001      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e032      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d008      	beq.n	8004d26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d14:	4b19      	ldr	r3, [pc, #100]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c4>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	4916      	ldr	r1, [pc, #88]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c4>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d009      	beq.n	8004d46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d32:	4b12      	ldr	r3, [pc, #72]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c4>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	490e      	ldr	r1, [pc, #56]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c4>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d46:	f000 f821 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c4>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	091b      	lsrs	r3, r3, #4
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	490a      	ldr	r1, [pc, #40]	@ (8004d80 <HAL_RCC_ClockConfig+0x1c8>)
 8004d58:	5ccb      	ldrb	r3, [r1, r3]
 8004d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5e:	4a09      	ldr	r2, [pc, #36]	@ (8004d84 <HAL_RCC_ClockConfig+0x1cc>)
 8004d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d62:	4b09      	ldr	r3, [pc, #36]	@ (8004d88 <HAL_RCC_ClockConfig+0x1d0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fe ff9c 	bl	8003ca4 <HAL_InitTick>

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40022000 	.word	0x40022000
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	08007310 	.word	0x08007310
 8004d84:	20000000 	.word	0x20000000
 8004d88:	20000004 	.word	0x20000004

08004d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	2300      	movs	r3, #0
 8004d98:	60bb      	str	r3, [r7, #8]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004da6:	4b1e      	ldr	r3, [pc, #120]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x94>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d002      	beq.n	8004dbc <HAL_RCC_GetSysClockFreq+0x30>
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d003      	beq.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x36>
 8004dba:	e027      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004dbc:	4b19      	ldr	r3, [pc, #100]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dbe:	613b      	str	r3, [r7, #16]
      break;
 8004dc0:	e027      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	0c9b      	lsrs	r3, r3, #18
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	4a17      	ldr	r2, [pc, #92]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004dcc:	5cd3      	ldrb	r3, [r2, r3]
 8004dce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d010      	beq.n	8004dfc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004dda:	4b11      	ldr	r3, [pc, #68]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	0c5b      	lsrs	r3, r3, #17
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	4a11      	ldr	r2, [pc, #68]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004de6:	5cd3      	ldrb	r3, [r2, r3]
 8004de8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a0d      	ldr	r2, [pc, #52]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dee:	fb03 f202 	mul.w	r2, r3, r2
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	e004      	b.n	8004e06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a0c      	ldr	r2, [pc, #48]	@ (8004e30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e00:	fb02 f303 	mul.w	r3, r2, r3
 8004e04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	613b      	str	r3, [r7, #16]
      break;
 8004e0a:	e002      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e0c:	4b05      	ldr	r3, [pc, #20]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e0e:	613b      	str	r3, [r7, #16]
      break;
 8004e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e12:	693b      	ldr	r3, [r7, #16]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	371c      	adds	r7, #28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	40021000 	.word	0x40021000
 8004e24:	007a1200 	.word	0x007a1200
 8004e28:	08007320 	.word	0x08007320
 8004e2c:	08007330 	.word	0x08007330
 8004e30:	003d0900 	.word	0x003d0900

08004e34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e68 <RCC_Delay+0x34>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a0a      	ldr	r2, [pc, #40]	@ (8004e6c <RCC_Delay+0x38>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	0a5b      	lsrs	r3, r3, #9
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	fb02 f303 	mul.w	r3, r2, r3
 8004e4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e50:	bf00      	nop
  }
  while (Delay --);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	1e5a      	subs	r2, r3, #1
 8004e56:	60fa      	str	r2, [r7, #12]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1f9      	bne.n	8004e50 <RCC_Delay+0x1c>
}
 8004e5c:	bf00      	nop
 8004e5e:	bf00      	nop
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bc80      	pop	{r7}
 8004e66:	4770      	bx	lr
 8004e68:	20000000 	.word	0x20000000
 8004e6c:	10624dd3 	.word	0x10624dd3

08004e70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e076      	b.n	8004f70 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d108      	bne.n	8004e9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e92:	d009      	beq.n	8004ea8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	61da      	str	r2, [r3, #28]
 8004e9a:	e005      	b.n	8004ea8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7fe fcd0 	bl	8003868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ede:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f2c:	ea42 0103 	orr.w	r1, r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f34:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	0c1a      	lsrs	r2, r3, #16
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f002 0204 	and.w	r2, r2, #4
 8004f4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69da      	ldr	r2, [r3, #28]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	603b      	str	r3, [r7, #0]
 8004f84:	4613      	mov	r3, r2
 8004f86:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f88:	f7fe fece 	bl	8003d28 <HAL_GetTick>
 8004f8c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004f8e:	88fb      	ldrh	r3, [r7, #6]
 8004f90:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d001      	beq.n	8004fa2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	e12a      	b.n	80051f8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <HAL_SPI_Transmit+0x36>
 8004fa8:	88fb      	ldrh	r3, [r7, #6]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e122      	b.n	80051f8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <HAL_SPI_Transmit+0x48>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	e11b      	b.n	80051f8 <HAL_SPI_Transmit+0x280>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2203      	movs	r2, #3
 8004fcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	88fa      	ldrh	r2, [r7, #6]
 8004fe0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	88fa      	ldrh	r2, [r7, #6]
 8004fe6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800500e:	d10f      	bne.n	8005030 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800501e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800502e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503a:	2b40      	cmp	r3, #64	@ 0x40
 800503c:	d007      	beq.n	800504e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800504c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005056:	d152      	bne.n	80050fe <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <HAL_SPI_Transmit+0xee>
 8005060:	8b7b      	ldrh	r3, [r7, #26]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d145      	bne.n	80050f2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506a:	881a      	ldrh	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005076:	1c9a      	adds	r2, r3, #2
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005080:	b29b      	uxth	r3, r3
 8005082:	3b01      	subs	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800508a:	e032      	b.n	80050f2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b02      	cmp	r3, #2
 8005098:	d112      	bne.n	80050c0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509e:	881a      	ldrh	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050aa:	1c9a      	adds	r2, r3, #2
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80050be:	e018      	b.n	80050f2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050c0:	f7fe fe32 	bl	8003d28 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d803      	bhi.n	80050d8 <HAL_SPI_Transmit+0x160>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d6:	d102      	bne.n	80050de <HAL_SPI_Transmit+0x166>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d109      	bne.n	80050f2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e082      	b.n	80051f8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1c7      	bne.n	800508c <HAL_SPI_Transmit+0x114>
 80050fc:	e053      	b.n	80051a6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <HAL_SPI_Transmit+0x194>
 8005106:	8b7b      	ldrh	r3, [r7, #26]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d147      	bne.n	800519c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	330c      	adds	r3, #12
 8005116:	7812      	ldrb	r2, [r2, #0]
 8005118:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005132:	e033      	b.n	800519c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b02      	cmp	r3, #2
 8005140:	d113      	bne.n	800516a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	330c      	adds	r3, #12
 800514c:	7812      	ldrb	r2, [r2, #0]
 800514e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005168:	e018      	b.n	800519c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800516a:	f7fe fddd 	bl	8003d28 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d803      	bhi.n	8005182 <HAL_SPI_Transmit+0x20a>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005180:	d102      	bne.n	8005188 <HAL_SPI_Transmit+0x210>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d109      	bne.n	800519c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e02d      	b.n	80051f8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1c6      	bne.n	8005134 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051a6:	69fa      	ldr	r2, [r7, #28]
 80051a8:	6839      	ldr	r1, [r7, #0]
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 f9f6 	bl	800559c <SPI_EndRxTxTransaction>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2220      	movs	r2, #32
 80051ba:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10a      	bne.n	80051da <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051c4:	2300      	movs	r3, #0
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	617b      	str	r3, [r7, #20]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e000      	b.n	80051f8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80051f6:	2300      	movs	r3, #0
  }
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3720      	adds	r7, #32
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	4613      	mov	r3, r2
 800520c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b01      	cmp	r3, #1
 8005218:	d001      	beq.n	800521e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800521a:	2302      	movs	r3, #2
 800521c:	e097      	b.n	800534e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <HAL_SPI_Transmit_DMA+0x2a>
 8005224:	88fb      	ldrh	r3, [r7, #6]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e08f      	b.n	800534e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005234:	2b01      	cmp	r3, #1
 8005236:	d101      	bne.n	800523c <HAL_SPI_Transmit_DMA+0x3c>
 8005238:	2302      	movs	r3, #2
 800523a:	e088      	b.n	800534e <HAL_SPI_Transmit_DMA+0x14e>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2203      	movs	r2, #3
 8005248:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	88fa      	ldrh	r2, [r7, #6]
 800525c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	88fa      	ldrh	r2, [r7, #6]
 8005262:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800528a:	d10f      	bne.n	80052ac <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800529a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052b0:	4a29      	ldr	r2, [pc, #164]	@ (8005358 <HAL_SPI_Transmit_DMA+0x158>)
 80052b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052b8:	4a28      	ldr	r2, [pc, #160]	@ (800535c <HAL_SPI_Transmit_DMA+0x15c>)
 80052ba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052c0:	4a27      	ldr	r2, [pc, #156]	@ (8005360 <HAL_SPI_Transmit_DMA+0x160>)
 80052c2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052c8:	2200      	movs	r2, #0
 80052ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d4:	4619      	mov	r1, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	330c      	adds	r3, #12
 80052dc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052e2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80052e4:	f7fe feb6 	bl	8004054 <HAL_DMA_Start_IT>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00b      	beq.n	8005306 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f2:	f043 0210 	orr.w	r2, r3, #16
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e023      	b.n	800534e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005310:	2b40      	cmp	r3, #64	@ 0x40
 8005312:	d007      	beq.n	8005324 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005322:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0220 	orr.w	r2, r2, #32
 800533a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0202 	orr.w	r2, r2, #2
 800534a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	0800542f 	.word	0x0800542f
 800535c:	08005389 	.word	0x08005389
 8005360:	0800544b 	.word	0x0800544b

08005364 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	bc80      	pop	{r7}
 8005374:	4770      	bx	lr

08005376 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr

08005388 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005394:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005396:	f7fe fcc7 	bl	8003d28 <HAL_GetTick>
 800539a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d03b      	beq.n	8005422 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0220 	bic.w	r2, r2, #32
 80053b8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0202 	bic.w	r2, r2, #2
 80053c8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	2164      	movs	r1, #100	@ 0x64
 80053ce:	6978      	ldr	r0, [r7, #20]
 80053d0:	f000 f8e4 	bl	800559c <SPI_EndRxTxTransaction>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d005      	beq.n	80053e6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053de:	f043 0220 	orr.w	r2, r3, #32
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10a      	bne.n	8005404 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2200      	movs	r2, #0
 8005408:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800541a:	6978      	ldr	r0, [r7, #20]
 800541c:	f7ff ffab 	bl	8005376 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005420:	e002      	b.n	8005428 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005422:	6978      	ldr	r0, [r7, #20]
 8005424:	f7fe f886 	bl	8003534 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b084      	sub	sp, #16
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f7ff ff91 	bl	8005364 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005442:	bf00      	nop
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005456:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0203 	bic.w	r2, r2, #3
 8005466:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546c:	f043 0210 	orr.w	r2, r3, #16
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f7ff ff7a 	bl	8005376 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005482:	bf00      	nop
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	4613      	mov	r3, r2
 800549a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800549c:	f7fe fc44 	bl	8003d28 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a4:	1a9b      	subs	r3, r3, r2
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	4413      	add	r3, r2
 80054aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054ac:	f7fe fc3c 	bl	8003d28 <HAL_GetTick>
 80054b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054b2:	4b39      	ldr	r3, [pc, #228]	@ (8005598 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	015b      	lsls	r3, r3, #5
 80054b8:	0d1b      	lsrs	r3, r3, #20
 80054ba:	69fa      	ldr	r2, [r7, #28]
 80054bc:	fb02 f303 	mul.w	r3, r2, r3
 80054c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054c2:	e054      	b.n	800556e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ca:	d050      	beq.n	800556e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054cc:	f7fe fc2c 	bl	8003d28 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d902      	bls.n	80054e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d13d      	bne.n	800555e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80054f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054fa:	d111      	bne.n	8005520 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005504:	d004      	beq.n	8005510 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800550e:	d107      	bne.n	8005520 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800551e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005524:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005528:	d10f      	bne.n	800554a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005548:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e017      	b.n	800558e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	3b01      	subs	r3, #1
 800556c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4013      	ands	r3, r2
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	429a      	cmp	r2, r3
 800557c:	bf0c      	ite	eq
 800557e:	2301      	moveq	r3, #1
 8005580:	2300      	movne	r3, #0
 8005582:	b2db      	uxtb	r3, r3
 8005584:	461a      	mov	r2, r3
 8005586:	79fb      	ldrb	r3, [r7, #7]
 8005588:	429a      	cmp	r2, r3
 800558a:	d19b      	bne.n	80054c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3720      	adds	r7, #32
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20000000 	.word	0x20000000

0800559c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2201      	movs	r2, #1
 80055b0:	2102      	movs	r1, #2
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f7ff ff6a 	bl	800548c <SPI_WaitFlagStateUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d007      	beq.n	80055ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c2:	f043 0220 	orr.w	r2, r3, #32
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e013      	b.n	80055f6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2200      	movs	r2, #0
 80055d6:	2180      	movs	r1, #128	@ 0x80
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f7ff ff57 	bl	800548c <SPI_WaitFlagStateUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d007      	beq.n	80055f4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e8:	f043 0220 	orr.w	r2, r3, #32
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e000      	b.n	80055f6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <rand>:
 8005600:	4b16      	ldr	r3, [pc, #88]	@ (800565c <rand+0x5c>)
 8005602:	b510      	push	{r4, lr}
 8005604:	681c      	ldr	r4, [r3, #0]
 8005606:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005608:	b9b3      	cbnz	r3, 8005638 <rand+0x38>
 800560a:	2018      	movs	r0, #24
 800560c:	f000 fa1e 	bl	8005a4c <malloc>
 8005610:	4602      	mov	r2, r0
 8005612:	6320      	str	r0, [r4, #48]	@ 0x30
 8005614:	b920      	cbnz	r0, 8005620 <rand+0x20>
 8005616:	2152      	movs	r1, #82	@ 0x52
 8005618:	4b11      	ldr	r3, [pc, #68]	@ (8005660 <rand+0x60>)
 800561a:	4812      	ldr	r0, [pc, #72]	@ (8005664 <rand+0x64>)
 800561c:	f000 f9b0 	bl	8005980 <__assert_func>
 8005620:	4911      	ldr	r1, [pc, #68]	@ (8005668 <rand+0x68>)
 8005622:	4b12      	ldr	r3, [pc, #72]	@ (800566c <rand+0x6c>)
 8005624:	e9c0 1300 	strd	r1, r3, [r0]
 8005628:	4b11      	ldr	r3, [pc, #68]	@ (8005670 <rand+0x70>)
 800562a:	2100      	movs	r1, #0
 800562c:	6083      	str	r3, [r0, #8]
 800562e:	230b      	movs	r3, #11
 8005630:	8183      	strh	r3, [r0, #12]
 8005632:	2001      	movs	r0, #1
 8005634:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005638:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800563a:	480e      	ldr	r0, [pc, #56]	@ (8005674 <rand+0x74>)
 800563c:	690b      	ldr	r3, [r1, #16]
 800563e:	694c      	ldr	r4, [r1, #20]
 8005640:	4358      	muls	r0, r3
 8005642:	4a0d      	ldr	r2, [pc, #52]	@ (8005678 <rand+0x78>)
 8005644:	fb02 0004 	mla	r0, r2, r4, r0
 8005648:	fba3 3202 	umull	r3, r2, r3, r2
 800564c:	3301      	adds	r3, #1
 800564e:	eb40 0002 	adc.w	r0, r0, r2
 8005652:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005656:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800565a:	bd10      	pop	{r4, pc}
 800565c:	20000018 	.word	0x20000018
 8005660:	08007332 	.word	0x08007332
 8005664:	08007349 	.word	0x08007349
 8005668:	abcd330e 	.word	0xabcd330e
 800566c:	e66d1234 	.word	0xe66d1234
 8005670:	0005deec 	.word	0x0005deec
 8005674:	5851f42d 	.word	0x5851f42d
 8005678:	4c957f2d 	.word	0x4c957f2d

0800567c <std>:
 800567c:	2300      	movs	r3, #0
 800567e:	b510      	push	{r4, lr}
 8005680:	4604      	mov	r4, r0
 8005682:	e9c0 3300 	strd	r3, r3, [r0]
 8005686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800568a:	6083      	str	r3, [r0, #8]
 800568c:	8181      	strh	r1, [r0, #12]
 800568e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005690:	81c2      	strh	r2, [r0, #14]
 8005692:	6183      	str	r3, [r0, #24]
 8005694:	4619      	mov	r1, r3
 8005696:	2208      	movs	r2, #8
 8005698:	305c      	adds	r0, #92	@ 0x5c
 800569a:	f000 f8f4 	bl	8005886 <memset>
 800569e:	4b0d      	ldr	r3, [pc, #52]	@ (80056d4 <std+0x58>)
 80056a0:	6224      	str	r4, [r4, #32]
 80056a2:	6263      	str	r3, [r4, #36]	@ 0x24
 80056a4:	4b0c      	ldr	r3, [pc, #48]	@ (80056d8 <std+0x5c>)
 80056a6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80056a8:	4b0c      	ldr	r3, [pc, #48]	@ (80056dc <std+0x60>)
 80056aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80056ac:	4b0c      	ldr	r3, [pc, #48]	@ (80056e0 <std+0x64>)
 80056ae:	6323      	str	r3, [r4, #48]	@ 0x30
 80056b0:	4b0c      	ldr	r3, [pc, #48]	@ (80056e4 <std+0x68>)
 80056b2:	429c      	cmp	r4, r3
 80056b4:	d006      	beq.n	80056c4 <std+0x48>
 80056b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80056ba:	4294      	cmp	r4, r2
 80056bc:	d002      	beq.n	80056c4 <std+0x48>
 80056be:	33d0      	adds	r3, #208	@ 0xd0
 80056c0:	429c      	cmp	r4, r3
 80056c2:	d105      	bne.n	80056d0 <std+0x54>
 80056c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80056c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056cc:	f000 b954 	b.w	8005978 <__retarget_lock_init_recursive>
 80056d0:	bd10      	pop	{r4, pc}
 80056d2:	bf00      	nop
 80056d4:	08005801 	.word	0x08005801
 80056d8:	08005823 	.word	0x08005823
 80056dc:	0800585b 	.word	0x0800585b
 80056e0:	0800587f 	.word	0x0800587f
 80056e4:	20000234 	.word	0x20000234

080056e8 <stdio_exit_handler>:
 80056e8:	4a02      	ldr	r2, [pc, #8]	@ (80056f4 <stdio_exit_handler+0xc>)
 80056ea:	4903      	ldr	r1, [pc, #12]	@ (80056f8 <stdio_exit_handler+0x10>)
 80056ec:	4803      	ldr	r0, [pc, #12]	@ (80056fc <stdio_exit_handler+0x14>)
 80056ee:	f000 b869 	b.w	80057c4 <_fwalk_sglue>
 80056f2:	bf00      	nop
 80056f4:	2000000c 	.word	0x2000000c
 80056f8:	08005cb9 	.word	0x08005cb9
 80056fc:	2000001c 	.word	0x2000001c

08005700 <cleanup_stdio>:
 8005700:	6841      	ldr	r1, [r0, #4]
 8005702:	4b0c      	ldr	r3, [pc, #48]	@ (8005734 <cleanup_stdio+0x34>)
 8005704:	b510      	push	{r4, lr}
 8005706:	4299      	cmp	r1, r3
 8005708:	4604      	mov	r4, r0
 800570a:	d001      	beq.n	8005710 <cleanup_stdio+0x10>
 800570c:	f000 fad4 	bl	8005cb8 <_fflush_r>
 8005710:	68a1      	ldr	r1, [r4, #8]
 8005712:	4b09      	ldr	r3, [pc, #36]	@ (8005738 <cleanup_stdio+0x38>)
 8005714:	4299      	cmp	r1, r3
 8005716:	d002      	beq.n	800571e <cleanup_stdio+0x1e>
 8005718:	4620      	mov	r0, r4
 800571a:	f000 facd 	bl	8005cb8 <_fflush_r>
 800571e:	68e1      	ldr	r1, [r4, #12]
 8005720:	4b06      	ldr	r3, [pc, #24]	@ (800573c <cleanup_stdio+0x3c>)
 8005722:	4299      	cmp	r1, r3
 8005724:	d004      	beq.n	8005730 <cleanup_stdio+0x30>
 8005726:	4620      	mov	r0, r4
 8005728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800572c:	f000 bac4 	b.w	8005cb8 <_fflush_r>
 8005730:	bd10      	pop	{r4, pc}
 8005732:	bf00      	nop
 8005734:	20000234 	.word	0x20000234
 8005738:	2000029c 	.word	0x2000029c
 800573c:	20000304 	.word	0x20000304

08005740 <global_stdio_init.part.0>:
 8005740:	b510      	push	{r4, lr}
 8005742:	4b0b      	ldr	r3, [pc, #44]	@ (8005770 <global_stdio_init.part.0+0x30>)
 8005744:	4c0b      	ldr	r4, [pc, #44]	@ (8005774 <global_stdio_init.part.0+0x34>)
 8005746:	4a0c      	ldr	r2, [pc, #48]	@ (8005778 <global_stdio_init.part.0+0x38>)
 8005748:	4620      	mov	r0, r4
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	2104      	movs	r1, #4
 800574e:	2200      	movs	r2, #0
 8005750:	f7ff ff94 	bl	800567c <std>
 8005754:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005758:	2201      	movs	r2, #1
 800575a:	2109      	movs	r1, #9
 800575c:	f7ff ff8e 	bl	800567c <std>
 8005760:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005764:	2202      	movs	r2, #2
 8005766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800576a:	2112      	movs	r1, #18
 800576c:	f7ff bf86 	b.w	800567c <std>
 8005770:	2000036c 	.word	0x2000036c
 8005774:	20000234 	.word	0x20000234
 8005778:	080056e9 	.word	0x080056e9

0800577c <__sfp_lock_acquire>:
 800577c:	4801      	ldr	r0, [pc, #4]	@ (8005784 <__sfp_lock_acquire+0x8>)
 800577e:	f000 b8fc 	b.w	800597a <__retarget_lock_acquire_recursive>
 8005782:	bf00      	nop
 8005784:	20000375 	.word	0x20000375

08005788 <__sfp_lock_release>:
 8005788:	4801      	ldr	r0, [pc, #4]	@ (8005790 <__sfp_lock_release+0x8>)
 800578a:	f000 b8f7 	b.w	800597c <__retarget_lock_release_recursive>
 800578e:	bf00      	nop
 8005790:	20000375 	.word	0x20000375

08005794 <__sinit>:
 8005794:	b510      	push	{r4, lr}
 8005796:	4604      	mov	r4, r0
 8005798:	f7ff fff0 	bl	800577c <__sfp_lock_acquire>
 800579c:	6a23      	ldr	r3, [r4, #32]
 800579e:	b11b      	cbz	r3, 80057a8 <__sinit+0x14>
 80057a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057a4:	f7ff bff0 	b.w	8005788 <__sfp_lock_release>
 80057a8:	4b04      	ldr	r3, [pc, #16]	@ (80057bc <__sinit+0x28>)
 80057aa:	6223      	str	r3, [r4, #32]
 80057ac:	4b04      	ldr	r3, [pc, #16]	@ (80057c0 <__sinit+0x2c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1f5      	bne.n	80057a0 <__sinit+0xc>
 80057b4:	f7ff ffc4 	bl	8005740 <global_stdio_init.part.0>
 80057b8:	e7f2      	b.n	80057a0 <__sinit+0xc>
 80057ba:	bf00      	nop
 80057bc:	08005701 	.word	0x08005701
 80057c0:	2000036c 	.word	0x2000036c

080057c4 <_fwalk_sglue>:
 80057c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057c8:	4607      	mov	r7, r0
 80057ca:	4688      	mov	r8, r1
 80057cc:	4614      	mov	r4, r2
 80057ce:	2600      	movs	r6, #0
 80057d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057d4:	f1b9 0901 	subs.w	r9, r9, #1
 80057d8:	d505      	bpl.n	80057e6 <_fwalk_sglue+0x22>
 80057da:	6824      	ldr	r4, [r4, #0]
 80057dc:	2c00      	cmp	r4, #0
 80057de:	d1f7      	bne.n	80057d0 <_fwalk_sglue+0xc>
 80057e0:	4630      	mov	r0, r6
 80057e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057e6:	89ab      	ldrh	r3, [r5, #12]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d907      	bls.n	80057fc <_fwalk_sglue+0x38>
 80057ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057f0:	3301      	adds	r3, #1
 80057f2:	d003      	beq.n	80057fc <_fwalk_sglue+0x38>
 80057f4:	4629      	mov	r1, r5
 80057f6:	4638      	mov	r0, r7
 80057f8:	47c0      	blx	r8
 80057fa:	4306      	orrs	r6, r0
 80057fc:	3568      	adds	r5, #104	@ 0x68
 80057fe:	e7e9      	b.n	80057d4 <_fwalk_sglue+0x10>

08005800 <__sread>:
 8005800:	b510      	push	{r4, lr}
 8005802:	460c      	mov	r4, r1
 8005804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005808:	f000 f868 	bl	80058dc <_read_r>
 800580c:	2800      	cmp	r0, #0
 800580e:	bfab      	itete	ge
 8005810:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005812:	89a3      	ldrhlt	r3, [r4, #12]
 8005814:	181b      	addge	r3, r3, r0
 8005816:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800581a:	bfac      	ite	ge
 800581c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800581e:	81a3      	strhlt	r3, [r4, #12]
 8005820:	bd10      	pop	{r4, pc}

08005822 <__swrite>:
 8005822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005826:	461f      	mov	r7, r3
 8005828:	898b      	ldrh	r3, [r1, #12]
 800582a:	4605      	mov	r5, r0
 800582c:	05db      	lsls	r3, r3, #23
 800582e:	460c      	mov	r4, r1
 8005830:	4616      	mov	r6, r2
 8005832:	d505      	bpl.n	8005840 <__swrite+0x1e>
 8005834:	2302      	movs	r3, #2
 8005836:	2200      	movs	r2, #0
 8005838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800583c:	f000 f83c 	bl	80058b8 <_lseek_r>
 8005840:	89a3      	ldrh	r3, [r4, #12]
 8005842:	4632      	mov	r2, r6
 8005844:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005848:	81a3      	strh	r3, [r4, #12]
 800584a:	4628      	mov	r0, r5
 800584c:	463b      	mov	r3, r7
 800584e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005856:	f000 b853 	b.w	8005900 <_write_r>

0800585a <__sseek>:
 800585a:	b510      	push	{r4, lr}
 800585c:	460c      	mov	r4, r1
 800585e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005862:	f000 f829 	bl	80058b8 <_lseek_r>
 8005866:	1c43      	adds	r3, r0, #1
 8005868:	89a3      	ldrh	r3, [r4, #12]
 800586a:	bf15      	itete	ne
 800586c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800586e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005872:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005876:	81a3      	strheq	r3, [r4, #12]
 8005878:	bf18      	it	ne
 800587a:	81a3      	strhne	r3, [r4, #12]
 800587c:	bd10      	pop	{r4, pc}

0800587e <__sclose>:
 800587e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005882:	f000 b809 	b.w	8005898 <_close_r>

08005886 <memset>:
 8005886:	4603      	mov	r3, r0
 8005888:	4402      	add	r2, r0
 800588a:	4293      	cmp	r3, r2
 800588c:	d100      	bne.n	8005890 <memset+0xa>
 800588e:	4770      	bx	lr
 8005890:	f803 1b01 	strb.w	r1, [r3], #1
 8005894:	e7f9      	b.n	800588a <memset+0x4>
	...

08005898 <_close_r>:
 8005898:	b538      	push	{r3, r4, r5, lr}
 800589a:	2300      	movs	r3, #0
 800589c:	4d05      	ldr	r5, [pc, #20]	@ (80058b4 <_close_r+0x1c>)
 800589e:	4604      	mov	r4, r0
 80058a0:	4608      	mov	r0, r1
 80058a2:	602b      	str	r3, [r5, #0]
 80058a4:	f7fe f955 	bl	8003b52 <_close>
 80058a8:	1c43      	adds	r3, r0, #1
 80058aa:	d102      	bne.n	80058b2 <_close_r+0x1a>
 80058ac:	682b      	ldr	r3, [r5, #0]
 80058ae:	b103      	cbz	r3, 80058b2 <_close_r+0x1a>
 80058b0:	6023      	str	r3, [r4, #0]
 80058b2:	bd38      	pop	{r3, r4, r5, pc}
 80058b4:	20000370 	.word	0x20000370

080058b8 <_lseek_r>:
 80058b8:	b538      	push	{r3, r4, r5, lr}
 80058ba:	4604      	mov	r4, r0
 80058bc:	4608      	mov	r0, r1
 80058be:	4611      	mov	r1, r2
 80058c0:	2200      	movs	r2, #0
 80058c2:	4d05      	ldr	r5, [pc, #20]	@ (80058d8 <_lseek_r+0x20>)
 80058c4:	602a      	str	r2, [r5, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	f7fe f967 	bl	8003b9a <_lseek>
 80058cc:	1c43      	adds	r3, r0, #1
 80058ce:	d102      	bne.n	80058d6 <_lseek_r+0x1e>
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	b103      	cbz	r3, 80058d6 <_lseek_r+0x1e>
 80058d4:	6023      	str	r3, [r4, #0]
 80058d6:	bd38      	pop	{r3, r4, r5, pc}
 80058d8:	20000370 	.word	0x20000370

080058dc <_read_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	4604      	mov	r4, r0
 80058e0:	4608      	mov	r0, r1
 80058e2:	4611      	mov	r1, r2
 80058e4:	2200      	movs	r2, #0
 80058e6:	4d05      	ldr	r5, [pc, #20]	@ (80058fc <_read_r+0x20>)
 80058e8:	602a      	str	r2, [r5, #0]
 80058ea:	461a      	mov	r2, r3
 80058ec:	f7fe f8f8 	bl	8003ae0 <_read>
 80058f0:	1c43      	adds	r3, r0, #1
 80058f2:	d102      	bne.n	80058fa <_read_r+0x1e>
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	b103      	cbz	r3, 80058fa <_read_r+0x1e>
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	bd38      	pop	{r3, r4, r5, pc}
 80058fc:	20000370 	.word	0x20000370

08005900 <_write_r>:
 8005900:	b538      	push	{r3, r4, r5, lr}
 8005902:	4604      	mov	r4, r0
 8005904:	4608      	mov	r0, r1
 8005906:	4611      	mov	r1, r2
 8005908:	2200      	movs	r2, #0
 800590a:	4d05      	ldr	r5, [pc, #20]	@ (8005920 <_write_r+0x20>)
 800590c:	602a      	str	r2, [r5, #0]
 800590e:	461a      	mov	r2, r3
 8005910:	f7fe f903 	bl	8003b1a <_write>
 8005914:	1c43      	adds	r3, r0, #1
 8005916:	d102      	bne.n	800591e <_write_r+0x1e>
 8005918:	682b      	ldr	r3, [r5, #0]
 800591a:	b103      	cbz	r3, 800591e <_write_r+0x1e>
 800591c:	6023      	str	r3, [r4, #0]
 800591e:	bd38      	pop	{r3, r4, r5, pc}
 8005920:	20000370 	.word	0x20000370

08005924 <__errno>:
 8005924:	4b01      	ldr	r3, [pc, #4]	@ (800592c <__errno+0x8>)
 8005926:	6818      	ldr	r0, [r3, #0]
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20000018 	.word	0x20000018

08005930 <__libc_init_array>:
 8005930:	b570      	push	{r4, r5, r6, lr}
 8005932:	2600      	movs	r6, #0
 8005934:	4d0c      	ldr	r5, [pc, #48]	@ (8005968 <__libc_init_array+0x38>)
 8005936:	4c0d      	ldr	r4, [pc, #52]	@ (800596c <__libc_init_array+0x3c>)
 8005938:	1b64      	subs	r4, r4, r5
 800593a:	10a4      	asrs	r4, r4, #2
 800593c:	42a6      	cmp	r6, r4
 800593e:	d109      	bne.n	8005954 <__libc_init_array+0x24>
 8005940:	f001 fccc 	bl	80072dc <_init>
 8005944:	2600      	movs	r6, #0
 8005946:	4d0a      	ldr	r5, [pc, #40]	@ (8005970 <__libc_init_array+0x40>)
 8005948:	4c0a      	ldr	r4, [pc, #40]	@ (8005974 <__libc_init_array+0x44>)
 800594a:	1b64      	subs	r4, r4, r5
 800594c:	10a4      	asrs	r4, r4, #2
 800594e:	42a6      	cmp	r6, r4
 8005950:	d105      	bne.n	800595e <__libc_init_array+0x2e>
 8005952:	bd70      	pop	{r4, r5, r6, pc}
 8005954:	f855 3b04 	ldr.w	r3, [r5], #4
 8005958:	4798      	blx	r3
 800595a:	3601      	adds	r6, #1
 800595c:	e7ee      	b.n	800593c <__libc_init_array+0xc>
 800595e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005962:	4798      	blx	r3
 8005964:	3601      	adds	r6, #1
 8005966:	e7f2      	b.n	800594e <__libc_init_array+0x1e>
 8005968:	080077e8 	.word	0x080077e8
 800596c:	080077e8 	.word	0x080077e8
 8005970:	080077e8 	.word	0x080077e8
 8005974:	080077ec 	.word	0x080077ec

08005978 <__retarget_lock_init_recursive>:
 8005978:	4770      	bx	lr

0800597a <__retarget_lock_acquire_recursive>:
 800597a:	4770      	bx	lr

0800597c <__retarget_lock_release_recursive>:
 800597c:	4770      	bx	lr
	...

08005980 <__assert_func>:
 8005980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005982:	4614      	mov	r4, r2
 8005984:	461a      	mov	r2, r3
 8005986:	4b09      	ldr	r3, [pc, #36]	@ (80059ac <__assert_func+0x2c>)
 8005988:	4605      	mov	r5, r0
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68d8      	ldr	r0, [r3, #12]
 800598e:	b14c      	cbz	r4, 80059a4 <__assert_func+0x24>
 8005990:	4b07      	ldr	r3, [pc, #28]	@ (80059b0 <__assert_func+0x30>)
 8005992:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005996:	9100      	str	r1, [sp, #0]
 8005998:	462b      	mov	r3, r5
 800599a:	4906      	ldr	r1, [pc, #24]	@ (80059b4 <__assert_func+0x34>)
 800599c:	f000 f9b4 	bl	8005d08 <fiprintf>
 80059a0:	f000 f9d4 	bl	8005d4c <abort>
 80059a4:	4b04      	ldr	r3, [pc, #16]	@ (80059b8 <__assert_func+0x38>)
 80059a6:	461c      	mov	r4, r3
 80059a8:	e7f3      	b.n	8005992 <__assert_func+0x12>
 80059aa:	bf00      	nop
 80059ac:	20000018 	.word	0x20000018
 80059b0:	080073a1 	.word	0x080073a1
 80059b4:	080073ae 	.word	0x080073ae
 80059b8:	080073dc 	.word	0x080073dc

080059bc <_free_r>:
 80059bc:	b538      	push	{r3, r4, r5, lr}
 80059be:	4605      	mov	r5, r0
 80059c0:	2900      	cmp	r1, #0
 80059c2:	d040      	beq.n	8005a46 <_free_r+0x8a>
 80059c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059c8:	1f0c      	subs	r4, r1, #4
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	bfb8      	it	lt
 80059ce:	18e4      	addlt	r4, r4, r3
 80059d0:	f000 f8e6 	bl	8005ba0 <__malloc_lock>
 80059d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a48 <_free_r+0x8c>)
 80059d6:	6813      	ldr	r3, [r2, #0]
 80059d8:	b933      	cbnz	r3, 80059e8 <_free_r+0x2c>
 80059da:	6063      	str	r3, [r4, #4]
 80059dc:	6014      	str	r4, [r2, #0]
 80059de:	4628      	mov	r0, r5
 80059e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059e4:	f000 b8e2 	b.w	8005bac <__malloc_unlock>
 80059e8:	42a3      	cmp	r3, r4
 80059ea:	d908      	bls.n	80059fe <_free_r+0x42>
 80059ec:	6820      	ldr	r0, [r4, #0]
 80059ee:	1821      	adds	r1, r4, r0
 80059f0:	428b      	cmp	r3, r1
 80059f2:	bf01      	itttt	eq
 80059f4:	6819      	ldreq	r1, [r3, #0]
 80059f6:	685b      	ldreq	r3, [r3, #4]
 80059f8:	1809      	addeq	r1, r1, r0
 80059fa:	6021      	streq	r1, [r4, #0]
 80059fc:	e7ed      	b.n	80059da <_free_r+0x1e>
 80059fe:	461a      	mov	r2, r3
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	b10b      	cbz	r3, 8005a08 <_free_r+0x4c>
 8005a04:	42a3      	cmp	r3, r4
 8005a06:	d9fa      	bls.n	80059fe <_free_r+0x42>
 8005a08:	6811      	ldr	r1, [r2, #0]
 8005a0a:	1850      	adds	r0, r2, r1
 8005a0c:	42a0      	cmp	r0, r4
 8005a0e:	d10b      	bne.n	8005a28 <_free_r+0x6c>
 8005a10:	6820      	ldr	r0, [r4, #0]
 8005a12:	4401      	add	r1, r0
 8005a14:	1850      	adds	r0, r2, r1
 8005a16:	4283      	cmp	r3, r0
 8005a18:	6011      	str	r1, [r2, #0]
 8005a1a:	d1e0      	bne.n	80059de <_free_r+0x22>
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	4408      	add	r0, r1
 8005a22:	6010      	str	r0, [r2, #0]
 8005a24:	6053      	str	r3, [r2, #4]
 8005a26:	e7da      	b.n	80059de <_free_r+0x22>
 8005a28:	d902      	bls.n	8005a30 <_free_r+0x74>
 8005a2a:	230c      	movs	r3, #12
 8005a2c:	602b      	str	r3, [r5, #0]
 8005a2e:	e7d6      	b.n	80059de <_free_r+0x22>
 8005a30:	6820      	ldr	r0, [r4, #0]
 8005a32:	1821      	adds	r1, r4, r0
 8005a34:	428b      	cmp	r3, r1
 8005a36:	bf01      	itttt	eq
 8005a38:	6819      	ldreq	r1, [r3, #0]
 8005a3a:	685b      	ldreq	r3, [r3, #4]
 8005a3c:	1809      	addeq	r1, r1, r0
 8005a3e:	6021      	streq	r1, [r4, #0]
 8005a40:	6063      	str	r3, [r4, #4]
 8005a42:	6054      	str	r4, [r2, #4]
 8005a44:	e7cb      	b.n	80059de <_free_r+0x22>
 8005a46:	bd38      	pop	{r3, r4, r5, pc}
 8005a48:	2000037c 	.word	0x2000037c

08005a4c <malloc>:
 8005a4c:	4b02      	ldr	r3, [pc, #8]	@ (8005a58 <malloc+0xc>)
 8005a4e:	4601      	mov	r1, r0
 8005a50:	6818      	ldr	r0, [r3, #0]
 8005a52:	f000 b825 	b.w	8005aa0 <_malloc_r>
 8005a56:	bf00      	nop
 8005a58:	20000018 	.word	0x20000018

08005a5c <sbrk_aligned>:
 8005a5c:	b570      	push	{r4, r5, r6, lr}
 8005a5e:	4e0f      	ldr	r6, [pc, #60]	@ (8005a9c <sbrk_aligned+0x40>)
 8005a60:	460c      	mov	r4, r1
 8005a62:	6831      	ldr	r1, [r6, #0]
 8005a64:	4605      	mov	r5, r0
 8005a66:	b911      	cbnz	r1, 8005a6e <sbrk_aligned+0x12>
 8005a68:	f000 f960 	bl	8005d2c <_sbrk_r>
 8005a6c:	6030      	str	r0, [r6, #0]
 8005a6e:	4621      	mov	r1, r4
 8005a70:	4628      	mov	r0, r5
 8005a72:	f000 f95b 	bl	8005d2c <_sbrk_r>
 8005a76:	1c43      	adds	r3, r0, #1
 8005a78:	d103      	bne.n	8005a82 <sbrk_aligned+0x26>
 8005a7a:	f04f 34ff 	mov.w	r4, #4294967295
 8005a7e:	4620      	mov	r0, r4
 8005a80:	bd70      	pop	{r4, r5, r6, pc}
 8005a82:	1cc4      	adds	r4, r0, #3
 8005a84:	f024 0403 	bic.w	r4, r4, #3
 8005a88:	42a0      	cmp	r0, r4
 8005a8a:	d0f8      	beq.n	8005a7e <sbrk_aligned+0x22>
 8005a8c:	1a21      	subs	r1, r4, r0
 8005a8e:	4628      	mov	r0, r5
 8005a90:	f000 f94c 	bl	8005d2c <_sbrk_r>
 8005a94:	3001      	adds	r0, #1
 8005a96:	d1f2      	bne.n	8005a7e <sbrk_aligned+0x22>
 8005a98:	e7ef      	b.n	8005a7a <sbrk_aligned+0x1e>
 8005a9a:	bf00      	nop
 8005a9c:	20000378 	.word	0x20000378

08005aa0 <_malloc_r>:
 8005aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aa4:	1ccd      	adds	r5, r1, #3
 8005aa6:	f025 0503 	bic.w	r5, r5, #3
 8005aaa:	3508      	adds	r5, #8
 8005aac:	2d0c      	cmp	r5, #12
 8005aae:	bf38      	it	cc
 8005ab0:	250c      	movcc	r5, #12
 8005ab2:	2d00      	cmp	r5, #0
 8005ab4:	4606      	mov	r6, r0
 8005ab6:	db01      	blt.n	8005abc <_malloc_r+0x1c>
 8005ab8:	42a9      	cmp	r1, r5
 8005aba:	d904      	bls.n	8005ac6 <_malloc_r+0x26>
 8005abc:	230c      	movs	r3, #12
 8005abe:	6033      	str	r3, [r6, #0]
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ac6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b9c <_malloc_r+0xfc>
 8005aca:	f000 f869 	bl	8005ba0 <__malloc_lock>
 8005ace:	f8d8 3000 	ldr.w	r3, [r8]
 8005ad2:	461c      	mov	r4, r3
 8005ad4:	bb44      	cbnz	r4, 8005b28 <_malloc_r+0x88>
 8005ad6:	4629      	mov	r1, r5
 8005ad8:	4630      	mov	r0, r6
 8005ada:	f7ff ffbf 	bl	8005a5c <sbrk_aligned>
 8005ade:	1c43      	adds	r3, r0, #1
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	d158      	bne.n	8005b96 <_malloc_r+0xf6>
 8005ae4:	f8d8 4000 	ldr.w	r4, [r8]
 8005ae8:	4627      	mov	r7, r4
 8005aea:	2f00      	cmp	r7, #0
 8005aec:	d143      	bne.n	8005b76 <_malloc_r+0xd6>
 8005aee:	2c00      	cmp	r4, #0
 8005af0:	d04b      	beq.n	8005b8a <_malloc_r+0xea>
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	4639      	mov	r1, r7
 8005af6:	4630      	mov	r0, r6
 8005af8:	eb04 0903 	add.w	r9, r4, r3
 8005afc:	f000 f916 	bl	8005d2c <_sbrk_r>
 8005b00:	4581      	cmp	r9, r0
 8005b02:	d142      	bne.n	8005b8a <_malloc_r+0xea>
 8005b04:	6821      	ldr	r1, [r4, #0]
 8005b06:	4630      	mov	r0, r6
 8005b08:	1a6d      	subs	r5, r5, r1
 8005b0a:	4629      	mov	r1, r5
 8005b0c:	f7ff ffa6 	bl	8005a5c <sbrk_aligned>
 8005b10:	3001      	adds	r0, #1
 8005b12:	d03a      	beq.n	8005b8a <_malloc_r+0xea>
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	442b      	add	r3, r5
 8005b18:	6023      	str	r3, [r4, #0]
 8005b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	bb62      	cbnz	r2, 8005b7c <_malloc_r+0xdc>
 8005b22:	f8c8 7000 	str.w	r7, [r8]
 8005b26:	e00f      	b.n	8005b48 <_malloc_r+0xa8>
 8005b28:	6822      	ldr	r2, [r4, #0]
 8005b2a:	1b52      	subs	r2, r2, r5
 8005b2c:	d420      	bmi.n	8005b70 <_malloc_r+0xd0>
 8005b2e:	2a0b      	cmp	r2, #11
 8005b30:	d917      	bls.n	8005b62 <_malloc_r+0xc2>
 8005b32:	1961      	adds	r1, r4, r5
 8005b34:	42a3      	cmp	r3, r4
 8005b36:	6025      	str	r5, [r4, #0]
 8005b38:	bf18      	it	ne
 8005b3a:	6059      	strne	r1, [r3, #4]
 8005b3c:	6863      	ldr	r3, [r4, #4]
 8005b3e:	bf08      	it	eq
 8005b40:	f8c8 1000 	streq.w	r1, [r8]
 8005b44:	5162      	str	r2, [r4, r5]
 8005b46:	604b      	str	r3, [r1, #4]
 8005b48:	4630      	mov	r0, r6
 8005b4a:	f000 f82f 	bl	8005bac <__malloc_unlock>
 8005b4e:	f104 000b 	add.w	r0, r4, #11
 8005b52:	1d23      	adds	r3, r4, #4
 8005b54:	f020 0007 	bic.w	r0, r0, #7
 8005b58:	1ac2      	subs	r2, r0, r3
 8005b5a:	bf1c      	itt	ne
 8005b5c:	1a1b      	subne	r3, r3, r0
 8005b5e:	50a3      	strne	r3, [r4, r2]
 8005b60:	e7af      	b.n	8005ac2 <_malloc_r+0x22>
 8005b62:	6862      	ldr	r2, [r4, #4]
 8005b64:	42a3      	cmp	r3, r4
 8005b66:	bf0c      	ite	eq
 8005b68:	f8c8 2000 	streq.w	r2, [r8]
 8005b6c:	605a      	strne	r2, [r3, #4]
 8005b6e:	e7eb      	b.n	8005b48 <_malloc_r+0xa8>
 8005b70:	4623      	mov	r3, r4
 8005b72:	6864      	ldr	r4, [r4, #4]
 8005b74:	e7ae      	b.n	8005ad4 <_malloc_r+0x34>
 8005b76:	463c      	mov	r4, r7
 8005b78:	687f      	ldr	r7, [r7, #4]
 8005b7a:	e7b6      	b.n	8005aea <_malloc_r+0x4a>
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	42a3      	cmp	r3, r4
 8005b82:	d1fb      	bne.n	8005b7c <_malloc_r+0xdc>
 8005b84:	2300      	movs	r3, #0
 8005b86:	6053      	str	r3, [r2, #4]
 8005b88:	e7de      	b.n	8005b48 <_malloc_r+0xa8>
 8005b8a:	230c      	movs	r3, #12
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	6033      	str	r3, [r6, #0]
 8005b90:	f000 f80c 	bl	8005bac <__malloc_unlock>
 8005b94:	e794      	b.n	8005ac0 <_malloc_r+0x20>
 8005b96:	6005      	str	r5, [r0, #0]
 8005b98:	e7d6      	b.n	8005b48 <_malloc_r+0xa8>
 8005b9a:	bf00      	nop
 8005b9c:	2000037c 	.word	0x2000037c

08005ba0 <__malloc_lock>:
 8005ba0:	4801      	ldr	r0, [pc, #4]	@ (8005ba8 <__malloc_lock+0x8>)
 8005ba2:	f7ff beea 	b.w	800597a <__retarget_lock_acquire_recursive>
 8005ba6:	bf00      	nop
 8005ba8:	20000374 	.word	0x20000374

08005bac <__malloc_unlock>:
 8005bac:	4801      	ldr	r0, [pc, #4]	@ (8005bb4 <__malloc_unlock+0x8>)
 8005bae:	f7ff bee5 	b.w	800597c <__retarget_lock_release_recursive>
 8005bb2:	bf00      	nop
 8005bb4:	20000374 	.word	0x20000374

08005bb8 <__sflush_r>:
 8005bb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bbe:	0716      	lsls	r6, r2, #28
 8005bc0:	4605      	mov	r5, r0
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	d454      	bmi.n	8005c70 <__sflush_r+0xb8>
 8005bc6:	684b      	ldr	r3, [r1, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	dc02      	bgt.n	8005bd2 <__sflush_r+0x1a>
 8005bcc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	dd48      	ble.n	8005c64 <__sflush_r+0xac>
 8005bd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005bd4:	2e00      	cmp	r6, #0
 8005bd6:	d045      	beq.n	8005c64 <__sflush_r+0xac>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005bde:	682f      	ldr	r7, [r5, #0]
 8005be0:	6a21      	ldr	r1, [r4, #32]
 8005be2:	602b      	str	r3, [r5, #0]
 8005be4:	d030      	beq.n	8005c48 <__sflush_r+0x90>
 8005be6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005be8:	89a3      	ldrh	r3, [r4, #12]
 8005bea:	0759      	lsls	r1, r3, #29
 8005bec:	d505      	bpl.n	8005bfa <__sflush_r+0x42>
 8005bee:	6863      	ldr	r3, [r4, #4]
 8005bf0:	1ad2      	subs	r2, r2, r3
 8005bf2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005bf4:	b10b      	cbz	r3, 8005bfa <__sflush_r+0x42>
 8005bf6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005bf8:	1ad2      	subs	r2, r2, r3
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c00:	6a21      	ldr	r1, [r4, #32]
 8005c02:	47b0      	blx	r6
 8005c04:	1c43      	adds	r3, r0, #1
 8005c06:	89a3      	ldrh	r3, [r4, #12]
 8005c08:	d106      	bne.n	8005c18 <__sflush_r+0x60>
 8005c0a:	6829      	ldr	r1, [r5, #0]
 8005c0c:	291d      	cmp	r1, #29
 8005c0e:	d82b      	bhi.n	8005c68 <__sflush_r+0xb0>
 8005c10:	4a28      	ldr	r2, [pc, #160]	@ (8005cb4 <__sflush_r+0xfc>)
 8005c12:	40ca      	lsrs	r2, r1
 8005c14:	07d6      	lsls	r6, r2, #31
 8005c16:	d527      	bpl.n	8005c68 <__sflush_r+0xb0>
 8005c18:	2200      	movs	r2, #0
 8005c1a:	6062      	str	r2, [r4, #4]
 8005c1c:	6922      	ldr	r2, [r4, #16]
 8005c1e:	04d9      	lsls	r1, r3, #19
 8005c20:	6022      	str	r2, [r4, #0]
 8005c22:	d504      	bpl.n	8005c2e <__sflush_r+0x76>
 8005c24:	1c42      	adds	r2, r0, #1
 8005c26:	d101      	bne.n	8005c2c <__sflush_r+0x74>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	b903      	cbnz	r3, 8005c2e <__sflush_r+0x76>
 8005c2c:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c2e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c30:	602f      	str	r7, [r5, #0]
 8005c32:	b1b9      	cbz	r1, 8005c64 <__sflush_r+0xac>
 8005c34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c38:	4299      	cmp	r1, r3
 8005c3a:	d002      	beq.n	8005c42 <__sflush_r+0x8a>
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	f7ff febd 	bl	80059bc <_free_r>
 8005c42:	2300      	movs	r3, #0
 8005c44:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c46:	e00d      	b.n	8005c64 <__sflush_r+0xac>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	47b0      	blx	r6
 8005c4e:	4602      	mov	r2, r0
 8005c50:	1c50      	adds	r0, r2, #1
 8005c52:	d1c9      	bne.n	8005be8 <__sflush_r+0x30>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d0c6      	beq.n	8005be8 <__sflush_r+0x30>
 8005c5a:	2b1d      	cmp	r3, #29
 8005c5c:	d001      	beq.n	8005c62 <__sflush_r+0xaa>
 8005c5e:	2b16      	cmp	r3, #22
 8005c60:	d11d      	bne.n	8005c9e <__sflush_r+0xe6>
 8005c62:	602f      	str	r7, [r5, #0]
 8005c64:	2000      	movs	r0, #0
 8005c66:	e021      	b.n	8005cac <__sflush_r+0xf4>
 8005c68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c6c:	b21b      	sxth	r3, r3
 8005c6e:	e01a      	b.n	8005ca6 <__sflush_r+0xee>
 8005c70:	690f      	ldr	r7, [r1, #16]
 8005c72:	2f00      	cmp	r7, #0
 8005c74:	d0f6      	beq.n	8005c64 <__sflush_r+0xac>
 8005c76:	0793      	lsls	r3, r2, #30
 8005c78:	bf18      	it	ne
 8005c7a:	2300      	movne	r3, #0
 8005c7c:	680e      	ldr	r6, [r1, #0]
 8005c7e:	bf08      	it	eq
 8005c80:	694b      	ldreq	r3, [r1, #20]
 8005c82:	1bf6      	subs	r6, r6, r7
 8005c84:	600f      	str	r7, [r1, #0]
 8005c86:	608b      	str	r3, [r1, #8]
 8005c88:	2e00      	cmp	r6, #0
 8005c8a:	ddeb      	ble.n	8005c64 <__sflush_r+0xac>
 8005c8c:	4633      	mov	r3, r6
 8005c8e:	463a      	mov	r2, r7
 8005c90:	4628      	mov	r0, r5
 8005c92:	6a21      	ldr	r1, [r4, #32]
 8005c94:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005c98:	47e0      	blx	ip
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	dc07      	bgt.n	8005cae <__sflush_r+0xf6>
 8005c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8005caa:	81a3      	strh	r3, [r4, #12]
 8005cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cae:	4407      	add	r7, r0
 8005cb0:	1a36      	subs	r6, r6, r0
 8005cb2:	e7e9      	b.n	8005c88 <__sflush_r+0xd0>
 8005cb4:	20400001 	.word	0x20400001

08005cb8 <_fflush_r>:
 8005cb8:	b538      	push	{r3, r4, r5, lr}
 8005cba:	690b      	ldr	r3, [r1, #16]
 8005cbc:	4605      	mov	r5, r0
 8005cbe:	460c      	mov	r4, r1
 8005cc0:	b913      	cbnz	r3, 8005cc8 <_fflush_r+0x10>
 8005cc2:	2500      	movs	r5, #0
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	bd38      	pop	{r3, r4, r5, pc}
 8005cc8:	b118      	cbz	r0, 8005cd2 <_fflush_r+0x1a>
 8005cca:	6a03      	ldr	r3, [r0, #32]
 8005ccc:	b90b      	cbnz	r3, 8005cd2 <_fflush_r+0x1a>
 8005cce:	f7ff fd61 	bl	8005794 <__sinit>
 8005cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d0f3      	beq.n	8005cc2 <_fflush_r+0xa>
 8005cda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005cdc:	07d0      	lsls	r0, r2, #31
 8005cde:	d404      	bmi.n	8005cea <_fflush_r+0x32>
 8005ce0:	0599      	lsls	r1, r3, #22
 8005ce2:	d402      	bmi.n	8005cea <_fflush_r+0x32>
 8005ce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ce6:	f7ff fe48 	bl	800597a <__retarget_lock_acquire_recursive>
 8005cea:	4628      	mov	r0, r5
 8005cec:	4621      	mov	r1, r4
 8005cee:	f7ff ff63 	bl	8005bb8 <__sflush_r>
 8005cf2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cf4:	4605      	mov	r5, r0
 8005cf6:	07da      	lsls	r2, r3, #31
 8005cf8:	d4e4      	bmi.n	8005cc4 <_fflush_r+0xc>
 8005cfa:	89a3      	ldrh	r3, [r4, #12]
 8005cfc:	059b      	lsls	r3, r3, #22
 8005cfe:	d4e1      	bmi.n	8005cc4 <_fflush_r+0xc>
 8005d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d02:	f7ff fe3b 	bl	800597c <__retarget_lock_release_recursive>
 8005d06:	e7dd      	b.n	8005cc4 <_fflush_r+0xc>

08005d08 <fiprintf>:
 8005d08:	b40e      	push	{r1, r2, r3}
 8005d0a:	b503      	push	{r0, r1, lr}
 8005d0c:	4601      	mov	r1, r0
 8005d0e:	ab03      	add	r3, sp, #12
 8005d10:	4805      	ldr	r0, [pc, #20]	@ (8005d28 <fiprintf+0x20>)
 8005d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d16:	6800      	ldr	r0, [r0, #0]
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	f000 f845 	bl	8005da8 <_vfiprintf_r>
 8005d1e:	b002      	add	sp, #8
 8005d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d24:	b003      	add	sp, #12
 8005d26:	4770      	bx	lr
 8005d28:	20000018 	.word	0x20000018

08005d2c <_sbrk_r>:
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	2300      	movs	r3, #0
 8005d30:	4d05      	ldr	r5, [pc, #20]	@ (8005d48 <_sbrk_r+0x1c>)
 8005d32:	4604      	mov	r4, r0
 8005d34:	4608      	mov	r0, r1
 8005d36:	602b      	str	r3, [r5, #0]
 8005d38:	f7fd ff3c 	bl	8003bb4 <_sbrk>
 8005d3c:	1c43      	adds	r3, r0, #1
 8005d3e:	d102      	bne.n	8005d46 <_sbrk_r+0x1a>
 8005d40:	682b      	ldr	r3, [r5, #0]
 8005d42:	b103      	cbz	r3, 8005d46 <_sbrk_r+0x1a>
 8005d44:	6023      	str	r3, [r4, #0]
 8005d46:	bd38      	pop	{r3, r4, r5, pc}
 8005d48:	20000370 	.word	0x20000370

08005d4c <abort>:
 8005d4c:	2006      	movs	r0, #6
 8005d4e:	b508      	push	{r3, lr}
 8005d50:	f000 fb8e 	bl	8006470 <raise>
 8005d54:	2001      	movs	r0, #1
 8005d56:	f7fd feb8 	bl	8003aca <_exit>

08005d5a <__sfputc_r>:
 8005d5a:	6893      	ldr	r3, [r2, #8]
 8005d5c:	b410      	push	{r4}
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	6093      	str	r3, [r2, #8]
 8005d64:	da07      	bge.n	8005d76 <__sfputc_r+0x1c>
 8005d66:	6994      	ldr	r4, [r2, #24]
 8005d68:	42a3      	cmp	r3, r4
 8005d6a:	db01      	blt.n	8005d70 <__sfputc_r+0x16>
 8005d6c:	290a      	cmp	r1, #10
 8005d6e:	d102      	bne.n	8005d76 <__sfputc_r+0x1c>
 8005d70:	bc10      	pop	{r4}
 8005d72:	f000 bac1 	b.w	80062f8 <__swbuf_r>
 8005d76:	6813      	ldr	r3, [r2, #0]
 8005d78:	1c58      	adds	r0, r3, #1
 8005d7a:	6010      	str	r0, [r2, #0]
 8005d7c:	7019      	strb	r1, [r3, #0]
 8005d7e:	4608      	mov	r0, r1
 8005d80:	bc10      	pop	{r4}
 8005d82:	4770      	bx	lr

08005d84 <__sfputs_r>:
 8005d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d86:	4606      	mov	r6, r0
 8005d88:	460f      	mov	r7, r1
 8005d8a:	4614      	mov	r4, r2
 8005d8c:	18d5      	adds	r5, r2, r3
 8005d8e:	42ac      	cmp	r4, r5
 8005d90:	d101      	bne.n	8005d96 <__sfputs_r+0x12>
 8005d92:	2000      	movs	r0, #0
 8005d94:	e007      	b.n	8005da6 <__sfputs_r+0x22>
 8005d96:	463a      	mov	r2, r7
 8005d98:	4630      	mov	r0, r6
 8005d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d9e:	f7ff ffdc 	bl	8005d5a <__sfputc_r>
 8005da2:	1c43      	adds	r3, r0, #1
 8005da4:	d1f3      	bne.n	8005d8e <__sfputs_r+0xa>
 8005da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005da8 <_vfiprintf_r>:
 8005da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dac:	460d      	mov	r5, r1
 8005dae:	4614      	mov	r4, r2
 8005db0:	4698      	mov	r8, r3
 8005db2:	4606      	mov	r6, r0
 8005db4:	b09d      	sub	sp, #116	@ 0x74
 8005db6:	b118      	cbz	r0, 8005dc0 <_vfiprintf_r+0x18>
 8005db8:	6a03      	ldr	r3, [r0, #32]
 8005dba:	b90b      	cbnz	r3, 8005dc0 <_vfiprintf_r+0x18>
 8005dbc:	f7ff fcea 	bl	8005794 <__sinit>
 8005dc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dc2:	07d9      	lsls	r1, r3, #31
 8005dc4:	d405      	bmi.n	8005dd2 <_vfiprintf_r+0x2a>
 8005dc6:	89ab      	ldrh	r3, [r5, #12]
 8005dc8:	059a      	lsls	r2, r3, #22
 8005dca:	d402      	bmi.n	8005dd2 <_vfiprintf_r+0x2a>
 8005dcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dce:	f7ff fdd4 	bl	800597a <__retarget_lock_acquire_recursive>
 8005dd2:	89ab      	ldrh	r3, [r5, #12]
 8005dd4:	071b      	lsls	r3, r3, #28
 8005dd6:	d501      	bpl.n	8005ddc <_vfiprintf_r+0x34>
 8005dd8:	692b      	ldr	r3, [r5, #16]
 8005dda:	b99b      	cbnz	r3, 8005e04 <_vfiprintf_r+0x5c>
 8005ddc:	4629      	mov	r1, r5
 8005dde:	4630      	mov	r0, r6
 8005de0:	f000 fac8 	bl	8006374 <__swsetup_r>
 8005de4:	b170      	cbz	r0, 8005e04 <_vfiprintf_r+0x5c>
 8005de6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005de8:	07dc      	lsls	r4, r3, #31
 8005dea:	d504      	bpl.n	8005df6 <_vfiprintf_r+0x4e>
 8005dec:	f04f 30ff 	mov.w	r0, #4294967295
 8005df0:	b01d      	add	sp, #116	@ 0x74
 8005df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df6:	89ab      	ldrh	r3, [r5, #12]
 8005df8:	0598      	lsls	r0, r3, #22
 8005dfa:	d4f7      	bmi.n	8005dec <_vfiprintf_r+0x44>
 8005dfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dfe:	f7ff fdbd 	bl	800597c <__retarget_lock_release_recursive>
 8005e02:	e7f3      	b.n	8005dec <_vfiprintf_r+0x44>
 8005e04:	2300      	movs	r3, #0
 8005e06:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e08:	2320      	movs	r3, #32
 8005e0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e0e:	2330      	movs	r3, #48	@ 0x30
 8005e10:	f04f 0901 	mov.w	r9, #1
 8005e14:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e18:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005fc4 <_vfiprintf_r+0x21c>
 8005e1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e20:	4623      	mov	r3, r4
 8005e22:	469a      	mov	sl, r3
 8005e24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e28:	b10a      	cbz	r2, 8005e2e <_vfiprintf_r+0x86>
 8005e2a:	2a25      	cmp	r2, #37	@ 0x25
 8005e2c:	d1f9      	bne.n	8005e22 <_vfiprintf_r+0x7a>
 8005e2e:	ebba 0b04 	subs.w	fp, sl, r4
 8005e32:	d00b      	beq.n	8005e4c <_vfiprintf_r+0xa4>
 8005e34:	465b      	mov	r3, fp
 8005e36:	4622      	mov	r2, r4
 8005e38:	4629      	mov	r1, r5
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	f7ff ffa2 	bl	8005d84 <__sfputs_r>
 8005e40:	3001      	adds	r0, #1
 8005e42:	f000 80a7 	beq.w	8005f94 <_vfiprintf_r+0x1ec>
 8005e46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e48:	445a      	add	r2, fp
 8005e4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 809f 	beq.w	8005f94 <_vfiprintf_r+0x1ec>
 8005e56:	2300      	movs	r3, #0
 8005e58:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e60:	f10a 0a01 	add.w	sl, sl, #1
 8005e64:	9304      	str	r3, [sp, #16]
 8005e66:	9307      	str	r3, [sp, #28]
 8005e68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e6e:	4654      	mov	r4, sl
 8005e70:	2205      	movs	r2, #5
 8005e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e76:	4853      	ldr	r0, [pc, #332]	@ (8005fc4 <_vfiprintf_r+0x21c>)
 8005e78:	f000 fb16 	bl	80064a8 <memchr>
 8005e7c:	9a04      	ldr	r2, [sp, #16]
 8005e7e:	b9d8      	cbnz	r0, 8005eb8 <_vfiprintf_r+0x110>
 8005e80:	06d1      	lsls	r1, r2, #27
 8005e82:	bf44      	itt	mi
 8005e84:	2320      	movmi	r3, #32
 8005e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e8a:	0713      	lsls	r3, r2, #28
 8005e8c:	bf44      	itt	mi
 8005e8e:	232b      	movmi	r3, #43	@ 0x2b
 8005e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e94:	f89a 3000 	ldrb.w	r3, [sl]
 8005e98:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e9a:	d015      	beq.n	8005ec8 <_vfiprintf_r+0x120>
 8005e9c:	4654      	mov	r4, sl
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	f04f 0c0a 	mov.w	ip, #10
 8005ea4:	9a07      	ldr	r2, [sp, #28]
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005eac:	3b30      	subs	r3, #48	@ 0x30
 8005eae:	2b09      	cmp	r3, #9
 8005eb0:	d94b      	bls.n	8005f4a <_vfiprintf_r+0x1a2>
 8005eb2:	b1b0      	cbz	r0, 8005ee2 <_vfiprintf_r+0x13a>
 8005eb4:	9207      	str	r2, [sp, #28]
 8005eb6:	e014      	b.n	8005ee2 <_vfiprintf_r+0x13a>
 8005eb8:	eba0 0308 	sub.w	r3, r0, r8
 8005ebc:	fa09 f303 	lsl.w	r3, r9, r3
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	46a2      	mov	sl, r4
 8005ec4:	9304      	str	r3, [sp, #16]
 8005ec6:	e7d2      	b.n	8005e6e <_vfiprintf_r+0xc6>
 8005ec8:	9b03      	ldr	r3, [sp, #12]
 8005eca:	1d19      	adds	r1, r3, #4
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	9103      	str	r1, [sp, #12]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	bfbb      	ittet	lt
 8005ed4:	425b      	neglt	r3, r3
 8005ed6:	f042 0202 	orrlt.w	r2, r2, #2
 8005eda:	9307      	strge	r3, [sp, #28]
 8005edc:	9307      	strlt	r3, [sp, #28]
 8005ede:	bfb8      	it	lt
 8005ee0:	9204      	strlt	r2, [sp, #16]
 8005ee2:	7823      	ldrb	r3, [r4, #0]
 8005ee4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ee6:	d10a      	bne.n	8005efe <_vfiprintf_r+0x156>
 8005ee8:	7863      	ldrb	r3, [r4, #1]
 8005eea:	2b2a      	cmp	r3, #42	@ 0x2a
 8005eec:	d132      	bne.n	8005f54 <_vfiprintf_r+0x1ac>
 8005eee:	9b03      	ldr	r3, [sp, #12]
 8005ef0:	3402      	adds	r4, #2
 8005ef2:	1d1a      	adds	r2, r3, #4
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	9203      	str	r2, [sp, #12]
 8005ef8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005efc:	9305      	str	r3, [sp, #20]
 8005efe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005fc8 <_vfiprintf_r+0x220>
 8005f02:	2203      	movs	r2, #3
 8005f04:	4650      	mov	r0, sl
 8005f06:	7821      	ldrb	r1, [r4, #0]
 8005f08:	f000 face 	bl	80064a8 <memchr>
 8005f0c:	b138      	cbz	r0, 8005f1e <_vfiprintf_r+0x176>
 8005f0e:	2240      	movs	r2, #64	@ 0x40
 8005f10:	9b04      	ldr	r3, [sp, #16]
 8005f12:	eba0 000a 	sub.w	r0, r0, sl
 8005f16:	4082      	lsls	r2, r0
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	3401      	adds	r4, #1
 8005f1c:	9304      	str	r3, [sp, #16]
 8005f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f22:	2206      	movs	r2, #6
 8005f24:	4829      	ldr	r0, [pc, #164]	@ (8005fcc <_vfiprintf_r+0x224>)
 8005f26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f2a:	f000 fabd 	bl	80064a8 <memchr>
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	d03f      	beq.n	8005fb2 <_vfiprintf_r+0x20a>
 8005f32:	4b27      	ldr	r3, [pc, #156]	@ (8005fd0 <_vfiprintf_r+0x228>)
 8005f34:	bb1b      	cbnz	r3, 8005f7e <_vfiprintf_r+0x1d6>
 8005f36:	9b03      	ldr	r3, [sp, #12]
 8005f38:	3307      	adds	r3, #7
 8005f3a:	f023 0307 	bic.w	r3, r3, #7
 8005f3e:	3308      	adds	r3, #8
 8005f40:	9303      	str	r3, [sp, #12]
 8005f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f44:	443b      	add	r3, r7
 8005f46:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f48:	e76a      	b.n	8005e20 <_vfiprintf_r+0x78>
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	2001      	movs	r0, #1
 8005f4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f52:	e7a8      	b.n	8005ea6 <_vfiprintf_r+0xfe>
 8005f54:	2300      	movs	r3, #0
 8005f56:	f04f 0c0a 	mov.w	ip, #10
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	3401      	adds	r4, #1
 8005f5e:	9305      	str	r3, [sp, #20]
 8005f60:	4620      	mov	r0, r4
 8005f62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f66:	3a30      	subs	r2, #48	@ 0x30
 8005f68:	2a09      	cmp	r2, #9
 8005f6a:	d903      	bls.n	8005f74 <_vfiprintf_r+0x1cc>
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d0c6      	beq.n	8005efe <_vfiprintf_r+0x156>
 8005f70:	9105      	str	r1, [sp, #20]
 8005f72:	e7c4      	b.n	8005efe <_vfiprintf_r+0x156>
 8005f74:	4604      	mov	r4, r0
 8005f76:	2301      	movs	r3, #1
 8005f78:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f7c:	e7f0      	b.n	8005f60 <_vfiprintf_r+0x1b8>
 8005f7e:	ab03      	add	r3, sp, #12
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	462a      	mov	r2, r5
 8005f84:	4630      	mov	r0, r6
 8005f86:	4b13      	ldr	r3, [pc, #76]	@ (8005fd4 <_vfiprintf_r+0x22c>)
 8005f88:	a904      	add	r1, sp, #16
 8005f8a:	f3af 8000 	nop.w
 8005f8e:	4607      	mov	r7, r0
 8005f90:	1c78      	adds	r0, r7, #1
 8005f92:	d1d6      	bne.n	8005f42 <_vfiprintf_r+0x19a>
 8005f94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f96:	07d9      	lsls	r1, r3, #31
 8005f98:	d405      	bmi.n	8005fa6 <_vfiprintf_r+0x1fe>
 8005f9a:	89ab      	ldrh	r3, [r5, #12]
 8005f9c:	059a      	lsls	r2, r3, #22
 8005f9e:	d402      	bmi.n	8005fa6 <_vfiprintf_r+0x1fe>
 8005fa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fa2:	f7ff fceb 	bl	800597c <__retarget_lock_release_recursive>
 8005fa6:	89ab      	ldrh	r3, [r5, #12]
 8005fa8:	065b      	lsls	r3, r3, #25
 8005faa:	f53f af1f 	bmi.w	8005dec <_vfiprintf_r+0x44>
 8005fae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fb0:	e71e      	b.n	8005df0 <_vfiprintf_r+0x48>
 8005fb2:	ab03      	add	r3, sp, #12
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	462a      	mov	r2, r5
 8005fb8:	4630      	mov	r0, r6
 8005fba:	4b06      	ldr	r3, [pc, #24]	@ (8005fd4 <_vfiprintf_r+0x22c>)
 8005fbc:	a904      	add	r1, sp, #16
 8005fbe:	f000 f87d 	bl	80060bc <_printf_i>
 8005fc2:	e7e4      	b.n	8005f8e <_vfiprintf_r+0x1e6>
 8005fc4:	080073dd 	.word	0x080073dd
 8005fc8:	080073e3 	.word	0x080073e3
 8005fcc:	080073e7 	.word	0x080073e7
 8005fd0:	00000000 	.word	0x00000000
 8005fd4:	08005d85 	.word	0x08005d85

08005fd8 <_printf_common>:
 8005fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fdc:	4616      	mov	r6, r2
 8005fde:	4698      	mov	r8, r3
 8005fe0:	688a      	ldr	r2, [r1, #8]
 8005fe2:	690b      	ldr	r3, [r1, #16]
 8005fe4:	4607      	mov	r7, r0
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	bfb8      	it	lt
 8005fea:	4613      	movlt	r3, r2
 8005fec:	6033      	str	r3, [r6, #0]
 8005fee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ff2:	460c      	mov	r4, r1
 8005ff4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ff8:	b10a      	cbz	r2, 8005ffe <_printf_common+0x26>
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	6033      	str	r3, [r6, #0]
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	0699      	lsls	r1, r3, #26
 8006002:	bf42      	ittt	mi
 8006004:	6833      	ldrmi	r3, [r6, #0]
 8006006:	3302      	addmi	r3, #2
 8006008:	6033      	strmi	r3, [r6, #0]
 800600a:	6825      	ldr	r5, [r4, #0]
 800600c:	f015 0506 	ands.w	r5, r5, #6
 8006010:	d106      	bne.n	8006020 <_printf_common+0x48>
 8006012:	f104 0a19 	add.w	sl, r4, #25
 8006016:	68e3      	ldr	r3, [r4, #12]
 8006018:	6832      	ldr	r2, [r6, #0]
 800601a:	1a9b      	subs	r3, r3, r2
 800601c:	42ab      	cmp	r3, r5
 800601e:	dc2b      	bgt.n	8006078 <_printf_common+0xa0>
 8006020:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006024:	6822      	ldr	r2, [r4, #0]
 8006026:	3b00      	subs	r3, #0
 8006028:	bf18      	it	ne
 800602a:	2301      	movne	r3, #1
 800602c:	0692      	lsls	r2, r2, #26
 800602e:	d430      	bmi.n	8006092 <_printf_common+0xba>
 8006030:	4641      	mov	r1, r8
 8006032:	4638      	mov	r0, r7
 8006034:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006038:	47c8      	blx	r9
 800603a:	3001      	adds	r0, #1
 800603c:	d023      	beq.n	8006086 <_printf_common+0xae>
 800603e:	6823      	ldr	r3, [r4, #0]
 8006040:	6922      	ldr	r2, [r4, #16]
 8006042:	f003 0306 	and.w	r3, r3, #6
 8006046:	2b04      	cmp	r3, #4
 8006048:	bf14      	ite	ne
 800604a:	2500      	movne	r5, #0
 800604c:	6833      	ldreq	r3, [r6, #0]
 800604e:	f04f 0600 	mov.w	r6, #0
 8006052:	bf08      	it	eq
 8006054:	68e5      	ldreq	r5, [r4, #12]
 8006056:	f104 041a 	add.w	r4, r4, #26
 800605a:	bf08      	it	eq
 800605c:	1aed      	subeq	r5, r5, r3
 800605e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006062:	bf08      	it	eq
 8006064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006068:	4293      	cmp	r3, r2
 800606a:	bfc4      	itt	gt
 800606c:	1a9b      	subgt	r3, r3, r2
 800606e:	18ed      	addgt	r5, r5, r3
 8006070:	42b5      	cmp	r5, r6
 8006072:	d11a      	bne.n	80060aa <_printf_common+0xd2>
 8006074:	2000      	movs	r0, #0
 8006076:	e008      	b.n	800608a <_printf_common+0xb2>
 8006078:	2301      	movs	r3, #1
 800607a:	4652      	mov	r2, sl
 800607c:	4641      	mov	r1, r8
 800607e:	4638      	mov	r0, r7
 8006080:	47c8      	blx	r9
 8006082:	3001      	adds	r0, #1
 8006084:	d103      	bne.n	800608e <_printf_common+0xb6>
 8006086:	f04f 30ff 	mov.w	r0, #4294967295
 800608a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800608e:	3501      	adds	r5, #1
 8006090:	e7c1      	b.n	8006016 <_printf_common+0x3e>
 8006092:	2030      	movs	r0, #48	@ 0x30
 8006094:	18e1      	adds	r1, r4, r3
 8006096:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060a0:	4422      	add	r2, r4
 80060a2:	3302      	adds	r3, #2
 80060a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060a8:	e7c2      	b.n	8006030 <_printf_common+0x58>
 80060aa:	2301      	movs	r3, #1
 80060ac:	4622      	mov	r2, r4
 80060ae:	4641      	mov	r1, r8
 80060b0:	4638      	mov	r0, r7
 80060b2:	47c8      	blx	r9
 80060b4:	3001      	adds	r0, #1
 80060b6:	d0e6      	beq.n	8006086 <_printf_common+0xae>
 80060b8:	3601      	adds	r6, #1
 80060ba:	e7d9      	b.n	8006070 <_printf_common+0x98>

080060bc <_printf_i>:
 80060bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060c0:	7e0f      	ldrb	r7, [r1, #24]
 80060c2:	4691      	mov	r9, r2
 80060c4:	2f78      	cmp	r7, #120	@ 0x78
 80060c6:	4680      	mov	r8, r0
 80060c8:	460c      	mov	r4, r1
 80060ca:	469a      	mov	sl, r3
 80060cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060d2:	d807      	bhi.n	80060e4 <_printf_i+0x28>
 80060d4:	2f62      	cmp	r7, #98	@ 0x62
 80060d6:	d80a      	bhi.n	80060ee <_printf_i+0x32>
 80060d8:	2f00      	cmp	r7, #0
 80060da:	f000 80d1 	beq.w	8006280 <_printf_i+0x1c4>
 80060de:	2f58      	cmp	r7, #88	@ 0x58
 80060e0:	f000 80b8 	beq.w	8006254 <_printf_i+0x198>
 80060e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060ec:	e03a      	b.n	8006164 <_printf_i+0xa8>
 80060ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060f2:	2b15      	cmp	r3, #21
 80060f4:	d8f6      	bhi.n	80060e4 <_printf_i+0x28>
 80060f6:	a101      	add	r1, pc, #4	@ (adr r1, 80060fc <_printf_i+0x40>)
 80060f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060fc:	08006155 	.word	0x08006155
 8006100:	08006169 	.word	0x08006169
 8006104:	080060e5 	.word	0x080060e5
 8006108:	080060e5 	.word	0x080060e5
 800610c:	080060e5 	.word	0x080060e5
 8006110:	080060e5 	.word	0x080060e5
 8006114:	08006169 	.word	0x08006169
 8006118:	080060e5 	.word	0x080060e5
 800611c:	080060e5 	.word	0x080060e5
 8006120:	080060e5 	.word	0x080060e5
 8006124:	080060e5 	.word	0x080060e5
 8006128:	08006267 	.word	0x08006267
 800612c:	08006193 	.word	0x08006193
 8006130:	08006221 	.word	0x08006221
 8006134:	080060e5 	.word	0x080060e5
 8006138:	080060e5 	.word	0x080060e5
 800613c:	08006289 	.word	0x08006289
 8006140:	080060e5 	.word	0x080060e5
 8006144:	08006193 	.word	0x08006193
 8006148:	080060e5 	.word	0x080060e5
 800614c:	080060e5 	.word	0x080060e5
 8006150:	08006229 	.word	0x08006229
 8006154:	6833      	ldr	r3, [r6, #0]
 8006156:	1d1a      	adds	r2, r3, #4
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6032      	str	r2, [r6, #0]
 800615c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006160:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006164:	2301      	movs	r3, #1
 8006166:	e09c      	b.n	80062a2 <_printf_i+0x1e6>
 8006168:	6833      	ldr	r3, [r6, #0]
 800616a:	6820      	ldr	r0, [r4, #0]
 800616c:	1d19      	adds	r1, r3, #4
 800616e:	6031      	str	r1, [r6, #0]
 8006170:	0606      	lsls	r6, r0, #24
 8006172:	d501      	bpl.n	8006178 <_printf_i+0xbc>
 8006174:	681d      	ldr	r5, [r3, #0]
 8006176:	e003      	b.n	8006180 <_printf_i+0xc4>
 8006178:	0645      	lsls	r5, r0, #25
 800617a:	d5fb      	bpl.n	8006174 <_printf_i+0xb8>
 800617c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006180:	2d00      	cmp	r5, #0
 8006182:	da03      	bge.n	800618c <_printf_i+0xd0>
 8006184:	232d      	movs	r3, #45	@ 0x2d
 8006186:	426d      	negs	r5, r5
 8006188:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800618c:	230a      	movs	r3, #10
 800618e:	4858      	ldr	r0, [pc, #352]	@ (80062f0 <_printf_i+0x234>)
 8006190:	e011      	b.n	80061b6 <_printf_i+0xfa>
 8006192:	6821      	ldr	r1, [r4, #0]
 8006194:	6833      	ldr	r3, [r6, #0]
 8006196:	0608      	lsls	r0, r1, #24
 8006198:	f853 5b04 	ldr.w	r5, [r3], #4
 800619c:	d402      	bmi.n	80061a4 <_printf_i+0xe8>
 800619e:	0649      	lsls	r1, r1, #25
 80061a0:	bf48      	it	mi
 80061a2:	b2ad      	uxthmi	r5, r5
 80061a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80061a6:	6033      	str	r3, [r6, #0]
 80061a8:	bf14      	ite	ne
 80061aa:	230a      	movne	r3, #10
 80061ac:	2308      	moveq	r3, #8
 80061ae:	4850      	ldr	r0, [pc, #320]	@ (80062f0 <_printf_i+0x234>)
 80061b0:	2100      	movs	r1, #0
 80061b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061b6:	6866      	ldr	r6, [r4, #4]
 80061b8:	2e00      	cmp	r6, #0
 80061ba:	60a6      	str	r6, [r4, #8]
 80061bc:	db05      	blt.n	80061ca <_printf_i+0x10e>
 80061be:	6821      	ldr	r1, [r4, #0]
 80061c0:	432e      	orrs	r6, r5
 80061c2:	f021 0104 	bic.w	r1, r1, #4
 80061c6:	6021      	str	r1, [r4, #0]
 80061c8:	d04b      	beq.n	8006262 <_printf_i+0x1a6>
 80061ca:	4616      	mov	r6, r2
 80061cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80061d0:	fb03 5711 	mls	r7, r3, r1, r5
 80061d4:	5dc7      	ldrb	r7, [r0, r7]
 80061d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061da:	462f      	mov	r7, r5
 80061dc:	42bb      	cmp	r3, r7
 80061de:	460d      	mov	r5, r1
 80061e0:	d9f4      	bls.n	80061cc <_printf_i+0x110>
 80061e2:	2b08      	cmp	r3, #8
 80061e4:	d10b      	bne.n	80061fe <_printf_i+0x142>
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	07df      	lsls	r7, r3, #31
 80061ea:	d508      	bpl.n	80061fe <_printf_i+0x142>
 80061ec:	6923      	ldr	r3, [r4, #16]
 80061ee:	6861      	ldr	r1, [r4, #4]
 80061f0:	4299      	cmp	r1, r3
 80061f2:	bfde      	ittt	le
 80061f4:	2330      	movle	r3, #48	@ 0x30
 80061f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061fe:	1b92      	subs	r2, r2, r6
 8006200:	6122      	str	r2, [r4, #16]
 8006202:	464b      	mov	r3, r9
 8006204:	4621      	mov	r1, r4
 8006206:	4640      	mov	r0, r8
 8006208:	f8cd a000 	str.w	sl, [sp]
 800620c:	aa03      	add	r2, sp, #12
 800620e:	f7ff fee3 	bl	8005fd8 <_printf_common>
 8006212:	3001      	adds	r0, #1
 8006214:	d14a      	bne.n	80062ac <_printf_i+0x1f0>
 8006216:	f04f 30ff 	mov.w	r0, #4294967295
 800621a:	b004      	add	sp, #16
 800621c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	f043 0320 	orr.w	r3, r3, #32
 8006226:	6023      	str	r3, [r4, #0]
 8006228:	2778      	movs	r7, #120	@ 0x78
 800622a:	4832      	ldr	r0, [pc, #200]	@ (80062f4 <_printf_i+0x238>)
 800622c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	6831      	ldr	r1, [r6, #0]
 8006234:	061f      	lsls	r7, r3, #24
 8006236:	f851 5b04 	ldr.w	r5, [r1], #4
 800623a:	d402      	bmi.n	8006242 <_printf_i+0x186>
 800623c:	065f      	lsls	r7, r3, #25
 800623e:	bf48      	it	mi
 8006240:	b2ad      	uxthmi	r5, r5
 8006242:	6031      	str	r1, [r6, #0]
 8006244:	07d9      	lsls	r1, r3, #31
 8006246:	bf44      	itt	mi
 8006248:	f043 0320 	orrmi.w	r3, r3, #32
 800624c:	6023      	strmi	r3, [r4, #0]
 800624e:	b11d      	cbz	r5, 8006258 <_printf_i+0x19c>
 8006250:	2310      	movs	r3, #16
 8006252:	e7ad      	b.n	80061b0 <_printf_i+0xf4>
 8006254:	4826      	ldr	r0, [pc, #152]	@ (80062f0 <_printf_i+0x234>)
 8006256:	e7e9      	b.n	800622c <_printf_i+0x170>
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	f023 0320 	bic.w	r3, r3, #32
 800625e:	6023      	str	r3, [r4, #0]
 8006260:	e7f6      	b.n	8006250 <_printf_i+0x194>
 8006262:	4616      	mov	r6, r2
 8006264:	e7bd      	b.n	80061e2 <_printf_i+0x126>
 8006266:	6833      	ldr	r3, [r6, #0]
 8006268:	6825      	ldr	r5, [r4, #0]
 800626a:	1d18      	adds	r0, r3, #4
 800626c:	6961      	ldr	r1, [r4, #20]
 800626e:	6030      	str	r0, [r6, #0]
 8006270:	062e      	lsls	r6, r5, #24
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	d501      	bpl.n	800627a <_printf_i+0x1be>
 8006276:	6019      	str	r1, [r3, #0]
 8006278:	e002      	b.n	8006280 <_printf_i+0x1c4>
 800627a:	0668      	lsls	r0, r5, #25
 800627c:	d5fb      	bpl.n	8006276 <_printf_i+0x1ba>
 800627e:	8019      	strh	r1, [r3, #0]
 8006280:	2300      	movs	r3, #0
 8006282:	4616      	mov	r6, r2
 8006284:	6123      	str	r3, [r4, #16]
 8006286:	e7bc      	b.n	8006202 <_printf_i+0x146>
 8006288:	6833      	ldr	r3, [r6, #0]
 800628a:	2100      	movs	r1, #0
 800628c:	1d1a      	adds	r2, r3, #4
 800628e:	6032      	str	r2, [r6, #0]
 8006290:	681e      	ldr	r6, [r3, #0]
 8006292:	6862      	ldr	r2, [r4, #4]
 8006294:	4630      	mov	r0, r6
 8006296:	f000 f907 	bl	80064a8 <memchr>
 800629a:	b108      	cbz	r0, 80062a0 <_printf_i+0x1e4>
 800629c:	1b80      	subs	r0, r0, r6
 800629e:	6060      	str	r0, [r4, #4]
 80062a0:	6863      	ldr	r3, [r4, #4]
 80062a2:	6123      	str	r3, [r4, #16]
 80062a4:	2300      	movs	r3, #0
 80062a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062aa:	e7aa      	b.n	8006202 <_printf_i+0x146>
 80062ac:	4632      	mov	r2, r6
 80062ae:	4649      	mov	r1, r9
 80062b0:	4640      	mov	r0, r8
 80062b2:	6923      	ldr	r3, [r4, #16]
 80062b4:	47d0      	blx	sl
 80062b6:	3001      	adds	r0, #1
 80062b8:	d0ad      	beq.n	8006216 <_printf_i+0x15a>
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	079b      	lsls	r3, r3, #30
 80062be:	d413      	bmi.n	80062e8 <_printf_i+0x22c>
 80062c0:	68e0      	ldr	r0, [r4, #12]
 80062c2:	9b03      	ldr	r3, [sp, #12]
 80062c4:	4298      	cmp	r0, r3
 80062c6:	bfb8      	it	lt
 80062c8:	4618      	movlt	r0, r3
 80062ca:	e7a6      	b.n	800621a <_printf_i+0x15e>
 80062cc:	2301      	movs	r3, #1
 80062ce:	4632      	mov	r2, r6
 80062d0:	4649      	mov	r1, r9
 80062d2:	4640      	mov	r0, r8
 80062d4:	47d0      	blx	sl
 80062d6:	3001      	adds	r0, #1
 80062d8:	d09d      	beq.n	8006216 <_printf_i+0x15a>
 80062da:	3501      	adds	r5, #1
 80062dc:	68e3      	ldr	r3, [r4, #12]
 80062de:	9903      	ldr	r1, [sp, #12]
 80062e0:	1a5b      	subs	r3, r3, r1
 80062e2:	42ab      	cmp	r3, r5
 80062e4:	dcf2      	bgt.n	80062cc <_printf_i+0x210>
 80062e6:	e7eb      	b.n	80062c0 <_printf_i+0x204>
 80062e8:	2500      	movs	r5, #0
 80062ea:	f104 0619 	add.w	r6, r4, #25
 80062ee:	e7f5      	b.n	80062dc <_printf_i+0x220>
 80062f0:	080073ee 	.word	0x080073ee
 80062f4:	080073ff 	.word	0x080073ff

080062f8 <__swbuf_r>:
 80062f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fa:	460e      	mov	r6, r1
 80062fc:	4614      	mov	r4, r2
 80062fe:	4605      	mov	r5, r0
 8006300:	b118      	cbz	r0, 800630a <__swbuf_r+0x12>
 8006302:	6a03      	ldr	r3, [r0, #32]
 8006304:	b90b      	cbnz	r3, 800630a <__swbuf_r+0x12>
 8006306:	f7ff fa45 	bl	8005794 <__sinit>
 800630a:	69a3      	ldr	r3, [r4, #24]
 800630c:	60a3      	str	r3, [r4, #8]
 800630e:	89a3      	ldrh	r3, [r4, #12]
 8006310:	071a      	lsls	r2, r3, #28
 8006312:	d501      	bpl.n	8006318 <__swbuf_r+0x20>
 8006314:	6923      	ldr	r3, [r4, #16]
 8006316:	b943      	cbnz	r3, 800632a <__swbuf_r+0x32>
 8006318:	4621      	mov	r1, r4
 800631a:	4628      	mov	r0, r5
 800631c:	f000 f82a 	bl	8006374 <__swsetup_r>
 8006320:	b118      	cbz	r0, 800632a <__swbuf_r+0x32>
 8006322:	f04f 37ff 	mov.w	r7, #4294967295
 8006326:	4638      	mov	r0, r7
 8006328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	6922      	ldr	r2, [r4, #16]
 800632e:	b2f6      	uxtb	r6, r6
 8006330:	1a98      	subs	r0, r3, r2
 8006332:	6963      	ldr	r3, [r4, #20]
 8006334:	4637      	mov	r7, r6
 8006336:	4283      	cmp	r3, r0
 8006338:	dc05      	bgt.n	8006346 <__swbuf_r+0x4e>
 800633a:	4621      	mov	r1, r4
 800633c:	4628      	mov	r0, r5
 800633e:	f7ff fcbb 	bl	8005cb8 <_fflush_r>
 8006342:	2800      	cmp	r0, #0
 8006344:	d1ed      	bne.n	8006322 <__swbuf_r+0x2a>
 8006346:	68a3      	ldr	r3, [r4, #8]
 8006348:	3b01      	subs	r3, #1
 800634a:	60a3      	str	r3, [r4, #8]
 800634c:	6823      	ldr	r3, [r4, #0]
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	6022      	str	r2, [r4, #0]
 8006352:	701e      	strb	r6, [r3, #0]
 8006354:	6962      	ldr	r2, [r4, #20]
 8006356:	1c43      	adds	r3, r0, #1
 8006358:	429a      	cmp	r2, r3
 800635a:	d004      	beq.n	8006366 <__swbuf_r+0x6e>
 800635c:	89a3      	ldrh	r3, [r4, #12]
 800635e:	07db      	lsls	r3, r3, #31
 8006360:	d5e1      	bpl.n	8006326 <__swbuf_r+0x2e>
 8006362:	2e0a      	cmp	r6, #10
 8006364:	d1df      	bne.n	8006326 <__swbuf_r+0x2e>
 8006366:	4621      	mov	r1, r4
 8006368:	4628      	mov	r0, r5
 800636a:	f7ff fca5 	bl	8005cb8 <_fflush_r>
 800636e:	2800      	cmp	r0, #0
 8006370:	d0d9      	beq.n	8006326 <__swbuf_r+0x2e>
 8006372:	e7d6      	b.n	8006322 <__swbuf_r+0x2a>

08006374 <__swsetup_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	4b29      	ldr	r3, [pc, #164]	@ (800641c <__swsetup_r+0xa8>)
 8006378:	4605      	mov	r5, r0
 800637a:	6818      	ldr	r0, [r3, #0]
 800637c:	460c      	mov	r4, r1
 800637e:	b118      	cbz	r0, 8006388 <__swsetup_r+0x14>
 8006380:	6a03      	ldr	r3, [r0, #32]
 8006382:	b90b      	cbnz	r3, 8006388 <__swsetup_r+0x14>
 8006384:	f7ff fa06 	bl	8005794 <__sinit>
 8006388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800638c:	0719      	lsls	r1, r3, #28
 800638e:	d422      	bmi.n	80063d6 <__swsetup_r+0x62>
 8006390:	06da      	lsls	r2, r3, #27
 8006392:	d407      	bmi.n	80063a4 <__swsetup_r+0x30>
 8006394:	2209      	movs	r2, #9
 8006396:	602a      	str	r2, [r5, #0]
 8006398:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800639c:	f04f 30ff 	mov.w	r0, #4294967295
 80063a0:	81a3      	strh	r3, [r4, #12]
 80063a2:	e033      	b.n	800640c <__swsetup_r+0x98>
 80063a4:	0758      	lsls	r0, r3, #29
 80063a6:	d512      	bpl.n	80063ce <__swsetup_r+0x5a>
 80063a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063aa:	b141      	cbz	r1, 80063be <__swsetup_r+0x4a>
 80063ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80063b0:	4299      	cmp	r1, r3
 80063b2:	d002      	beq.n	80063ba <__swsetup_r+0x46>
 80063b4:	4628      	mov	r0, r5
 80063b6:	f7ff fb01 	bl	80059bc <_free_r>
 80063ba:	2300      	movs	r3, #0
 80063bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80063be:	89a3      	ldrh	r3, [r4, #12]
 80063c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80063c4:	81a3      	strh	r3, [r4, #12]
 80063c6:	2300      	movs	r3, #0
 80063c8:	6063      	str	r3, [r4, #4]
 80063ca:	6923      	ldr	r3, [r4, #16]
 80063cc:	6023      	str	r3, [r4, #0]
 80063ce:	89a3      	ldrh	r3, [r4, #12]
 80063d0:	f043 0308 	orr.w	r3, r3, #8
 80063d4:	81a3      	strh	r3, [r4, #12]
 80063d6:	6923      	ldr	r3, [r4, #16]
 80063d8:	b94b      	cbnz	r3, 80063ee <__swsetup_r+0x7a>
 80063da:	89a3      	ldrh	r3, [r4, #12]
 80063dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80063e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063e4:	d003      	beq.n	80063ee <__swsetup_r+0x7a>
 80063e6:	4621      	mov	r1, r4
 80063e8:	4628      	mov	r0, r5
 80063ea:	f000 f890 	bl	800650e <__smakebuf_r>
 80063ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063f2:	f013 0201 	ands.w	r2, r3, #1
 80063f6:	d00a      	beq.n	800640e <__swsetup_r+0x9a>
 80063f8:	2200      	movs	r2, #0
 80063fa:	60a2      	str	r2, [r4, #8]
 80063fc:	6962      	ldr	r2, [r4, #20]
 80063fe:	4252      	negs	r2, r2
 8006400:	61a2      	str	r2, [r4, #24]
 8006402:	6922      	ldr	r2, [r4, #16]
 8006404:	b942      	cbnz	r2, 8006418 <__swsetup_r+0xa4>
 8006406:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800640a:	d1c5      	bne.n	8006398 <__swsetup_r+0x24>
 800640c:	bd38      	pop	{r3, r4, r5, pc}
 800640e:	0799      	lsls	r1, r3, #30
 8006410:	bf58      	it	pl
 8006412:	6962      	ldrpl	r2, [r4, #20]
 8006414:	60a2      	str	r2, [r4, #8]
 8006416:	e7f4      	b.n	8006402 <__swsetup_r+0x8e>
 8006418:	2000      	movs	r0, #0
 800641a:	e7f7      	b.n	800640c <__swsetup_r+0x98>
 800641c:	20000018 	.word	0x20000018

08006420 <_raise_r>:
 8006420:	291f      	cmp	r1, #31
 8006422:	b538      	push	{r3, r4, r5, lr}
 8006424:	4605      	mov	r5, r0
 8006426:	460c      	mov	r4, r1
 8006428:	d904      	bls.n	8006434 <_raise_r+0x14>
 800642a:	2316      	movs	r3, #22
 800642c:	6003      	str	r3, [r0, #0]
 800642e:	f04f 30ff 	mov.w	r0, #4294967295
 8006432:	bd38      	pop	{r3, r4, r5, pc}
 8006434:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006436:	b112      	cbz	r2, 800643e <_raise_r+0x1e>
 8006438:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800643c:	b94b      	cbnz	r3, 8006452 <_raise_r+0x32>
 800643e:	4628      	mov	r0, r5
 8006440:	f000 f830 	bl	80064a4 <_getpid_r>
 8006444:	4622      	mov	r2, r4
 8006446:	4601      	mov	r1, r0
 8006448:	4628      	mov	r0, r5
 800644a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800644e:	f000 b817 	b.w	8006480 <_kill_r>
 8006452:	2b01      	cmp	r3, #1
 8006454:	d00a      	beq.n	800646c <_raise_r+0x4c>
 8006456:	1c59      	adds	r1, r3, #1
 8006458:	d103      	bne.n	8006462 <_raise_r+0x42>
 800645a:	2316      	movs	r3, #22
 800645c:	6003      	str	r3, [r0, #0]
 800645e:	2001      	movs	r0, #1
 8006460:	e7e7      	b.n	8006432 <_raise_r+0x12>
 8006462:	2100      	movs	r1, #0
 8006464:	4620      	mov	r0, r4
 8006466:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800646a:	4798      	blx	r3
 800646c:	2000      	movs	r0, #0
 800646e:	e7e0      	b.n	8006432 <_raise_r+0x12>

08006470 <raise>:
 8006470:	4b02      	ldr	r3, [pc, #8]	@ (800647c <raise+0xc>)
 8006472:	4601      	mov	r1, r0
 8006474:	6818      	ldr	r0, [r3, #0]
 8006476:	f7ff bfd3 	b.w	8006420 <_raise_r>
 800647a:	bf00      	nop
 800647c:	20000018 	.word	0x20000018

08006480 <_kill_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	2300      	movs	r3, #0
 8006484:	4d06      	ldr	r5, [pc, #24]	@ (80064a0 <_kill_r+0x20>)
 8006486:	4604      	mov	r4, r0
 8006488:	4608      	mov	r0, r1
 800648a:	4611      	mov	r1, r2
 800648c:	602b      	str	r3, [r5, #0]
 800648e:	f7fd fb0c 	bl	8003aaa <_kill>
 8006492:	1c43      	adds	r3, r0, #1
 8006494:	d102      	bne.n	800649c <_kill_r+0x1c>
 8006496:	682b      	ldr	r3, [r5, #0]
 8006498:	b103      	cbz	r3, 800649c <_kill_r+0x1c>
 800649a:	6023      	str	r3, [r4, #0]
 800649c:	bd38      	pop	{r3, r4, r5, pc}
 800649e:	bf00      	nop
 80064a0:	20000370 	.word	0x20000370

080064a4 <_getpid_r>:
 80064a4:	f7fd bafa 	b.w	8003a9c <_getpid>

080064a8 <memchr>:
 80064a8:	4603      	mov	r3, r0
 80064aa:	b510      	push	{r4, lr}
 80064ac:	b2c9      	uxtb	r1, r1
 80064ae:	4402      	add	r2, r0
 80064b0:	4293      	cmp	r3, r2
 80064b2:	4618      	mov	r0, r3
 80064b4:	d101      	bne.n	80064ba <memchr+0x12>
 80064b6:	2000      	movs	r0, #0
 80064b8:	e003      	b.n	80064c2 <memchr+0x1a>
 80064ba:	7804      	ldrb	r4, [r0, #0]
 80064bc:	3301      	adds	r3, #1
 80064be:	428c      	cmp	r4, r1
 80064c0:	d1f6      	bne.n	80064b0 <memchr+0x8>
 80064c2:	bd10      	pop	{r4, pc}

080064c4 <__swhatbuf_r>:
 80064c4:	b570      	push	{r4, r5, r6, lr}
 80064c6:	460c      	mov	r4, r1
 80064c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064cc:	4615      	mov	r5, r2
 80064ce:	2900      	cmp	r1, #0
 80064d0:	461e      	mov	r6, r3
 80064d2:	b096      	sub	sp, #88	@ 0x58
 80064d4:	da0c      	bge.n	80064f0 <__swhatbuf_r+0x2c>
 80064d6:	89a3      	ldrh	r3, [r4, #12]
 80064d8:	2100      	movs	r1, #0
 80064da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80064de:	bf14      	ite	ne
 80064e0:	2340      	movne	r3, #64	@ 0x40
 80064e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80064e6:	2000      	movs	r0, #0
 80064e8:	6031      	str	r1, [r6, #0]
 80064ea:	602b      	str	r3, [r5, #0]
 80064ec:	b016      	add	sp, #88	@ 0x58
 80064ee:	bd70      	pop	{r4, r5, r6, pc}
 80064f0:	466a      	mov	r2, sp
 80064f2:	f000 f849 	bl	8006588 <_fstat_r>
 80064f6:	2800      	cmp	r0, #0
 80064f8:	dbed      	blt.n	80064d6 <__swhatbuf_r+0x12>
 80064fa:	9901      	ldr	r1, [sp, #4]
 80064fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006500:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006504:	4259      	negs	r1, r3
 8006506:	4159      	adcs	r1, r3
 8006508:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800650c:	e7eb      	b.n	80064e6 <__swhatbuf_r+0x22>

0800650e <__smakebuf_r>:
 800650e:	898b      	ldrh	r3, [r1, #12]
 8006510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006512:	079d      	lsls	r5, r3, #30
 8006514:	4606      	mov	r6, r0
 8006516:	460c      	mov	r4, r1
 8006518:	d507      	bpl.n	800652a <__smakebuf_r+0x1c>
 800651a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800651e:	6023      	str	r3, [r4, #0]
 8006520:	6123      	str	r3, [r4, #16]
 8006522:	2301      	movs	r3, #1
 8006524:	6163      	str	r3, [r4, #20]
 8006526:	b003      	add	sp, #12
 8006528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800652a:	466a      	mov	r2, sp
 800652c:	ab01      	add	r3, sp, #4
 800652e:	f7ff ffc9 	bl	80064c4 <__swhatbuf_r>
 8006532:	9f00      	ldr	r7, [sp, #0]
 8006534:	4605      	mov	r5, r0
 8006536:	4639      	mov	r1, r7
 8006538:	4630      	mov	r0, r6
 800653a:	f7ff fab1 	bl	8005aa0 <_malloc_r>
 800653e:	b948      	cbnz	r0, 8006554 <__smakebuf_r+0x46>
 8006540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006544:	059a      	lsls	r2, r3, #22
 8006546:	d4ee      	bmi.n	8006526 <__smakebuf_r+0x18>
 8006548:	f023 0303 	bic.w	r3, r3, #3
 800654c:	f043 0302 	orr.w	r3, r3, #2
 8006550:	81a3      	strh	r3, [r4, #12]
 8006552:	e7e2      	b.n	800651a <__smakebuf_r+0xc>
 8006554:	89a3      	ldrh	r3, [r4, #12]
 8006556:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800655a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800655e:	81a3      	strh	r3, [r4, #12]
 8006560:	9b01      	ldr	r3, [sp, #4]
 8006562:	6020      	str	r0, [r4, #0]
 8006564:	b15b      	cbz	r3, 800657e <__smakebuf_r+0x70>
 8006566:	4630      	mov	r0, r6
 8006568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800656c:	f000 f81e 	bl	80065ac <_isatty_r>
 8006570:	b128      	cbz	r0, 800657e <__smakebuf_r+0x70>
 8006572:	89a3      	ldrh	r3, [r4, #12]
 8006574:	f023 0303 	bic.w	r3, r3, #3
 8006578:	f043 0301 	orr.w	r3, r3, #1
 800657c:	81a3      	strh	r3, [r4, #12]
 800657e:	89a3      	ldrh	r3, [r4, #12]
 8006580:	431d      	orrs	r5, r3
 8006582:	81a5      	strh	r5, [r4, #12]
 8006584:	e7cf      	b.n	8006526 <__smakebuf_r+0x18>
	...

08006588 <_fstat_r>:
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	2300      	movs	r3, #0
 800658c:	4d06      	ldr	r5, [pc, #24]	@ (80065a8 <_fstat_r+0x20>)
 800658e:	4604      	mov	r4, r0
 8006590:	4608      	mov	r0, r1
 8006592:	4611      	mov	r1, r2
 8006594:	602b      	str	r3, [r5, #0]
 8006596:	f7fd fae7 	bl	8003b68 <_fstat>
 800659a:	1c43      	adds	r3, r0, #1
 800659c:	d102      	bne.n	80065a4 <_fstat_r+0x1c>
 800659e:	682b      	ldr	r3, [r5, #0]
 80065a0:	b103      	cbz	r3, 80065a4 <_fstat_r+0x1c>
 80065a2:	6023      	str	r3, [r4, #0]
 80065a4:	bd38      	pop	{r3, r4, r5, pc}
 80065a6:	bf00      	nop
 80065a8:	20000370 	.word	0x20000370

080065ac <_isatty_r>:
 80065ac:	b538      	push	{r3, r4, r5, lr}
 80065ae:	2300      	movs	r3, #0
 80065b0:	4d05      	ldr	r5, [pc, #20]	@ (80065c8 <_isatty_r+0x1c>)
 80065b2:	4604      	mov	r4, r0
 80065b4:	4608      	mov	r0, r1
 80065b6:	602b      	str	r3, [r5, #0]
 80065b8:	f7fd fae5 	bl	8003b86 <_isatty>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_isatty_r+0x1a>
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_isatty_r+0x1a>
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	20000370 	.word	0x20000370

080065cc <sqrtf>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4605      	mov	r5, r0
 80065d0:	f000 f888 	bl	80066e4 <__ieee754_sqrtf>
 80065d4:	4629      	mov	r1, r5
 80065d6:	4604      	mov	r4, r0
 80065d8:	4628      	mov	r0, r5
 80065da:	f7fa fc83 	bl	8000ee4 <__aeabi_fcmpun>
 80065de:	b968      	cbnz	r0, 80065fc <sqrtf+0x30>
 80065e0:	2100      	movs	r1, #0
 80065e2:	4628      	mov	r0, r5
 80065e4:	f7fa fc56 	bl	8000e94 <__aeabi_fcmplt>
 80065e8:	b140      	cbz	r0, 80065fc <sqrtf+0x30>
 80065ea:	f7ff f99b 	bl	8005924 <__errno>
 80065ee:	2321      	movs	r3, #33	@ 0x21
 80065f0:	2100      	movs	r1, #0
 80065f2:	6003      	str	r3, [r0, #0]
 80065f4:	4608      	mov	r0, r1
 80065f6:	f7fa fb63 	bl	8000cc0 <__aeabi_fdiv>
 80065fa:	4604      	mov	r4, r0
 80065fc:	4620      	mov	r0, r4
 80065fe:	bd38      	pop	{r3, r4, r5, pc}

08006600 <cosf>:
 8006600:	b507      	push	{r0, r1, r2, lr}
 8006602:	4a1a      	ldr	r2, [pc, #104]	@ (800666c <cosf+0x6c>)
 8006604:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8006608:	4293      	cmp	r3, r2
 800660a:	4601      	mov	r1, r0
 800660c:	d805      	bhi.n	800661a <cosf+0x1a>
 800660e:	2100      	movs	r1, #0
 8006610:	b003      	add	sp, #12
 8006612:	f85d eb04 	ldr.w	lr, [sp], #4
 8006616:	f000 b8d5 	b.w	80067c4 <__kernel_cosf>
 800661a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800661e:	d304      	bcc.n	800662a <cosf+0x2a>
 8006620:	f7fa f990 	bl	8000944 <__aeabi_fsub>
 8006624:	b003      	add	sp, #12
 8006626:	f85d fb04 	ldr.w	pc, [sp], #4
 800662a:	4669      	mov	r1, sp
 800662c:	f000 f9c0 	bl	80069b0 <__ieee754_rem_pio2f>
 8006630:	f000 0203 	and.w	r2, r0, #3
 8006634:	2a01      	cmp	r2, #1
 8006636:	d007      	beq.n	8006648 <cosf+0x48>
 8006638:	2a02      	cmp	r2, #2
 800663a:	d00c      	beq.n	8006656 <cosf+0x56>
 800663c:	b982      	cbnz	r2, 8006660 <cosf+0x60>
 800663e:	9901      	ldr	r1, [sp, #4]
 8006640:	9800      	ldr	r0, [sp, #0]
 8006642:	f000 f8bf 	bl	80067c4 <__kernel_cosf>
 8006646:	e7ed      	b.n	8006624 <cosf+0x24>
 8006648:	9901      	ldr	r1, [sp, #4]
 800664a:	9800      	ldr	r0, [sp, #0]
 800664c:	f000 f93a 	bl	80068c4 <__kernel_sinf>
 8006650:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8006654:	e7e6      	b.n	8006624 <cosf+0x24>
 8006656:	9901      	ldr	r1, [sp, #4]
 8006658:	9800      	ldr	r0, [sp, #0]
 800665a:	f000 f8b3 	bl	80067c4 <__kernel_cosf>
 800665e:	e7f7      	b.n	8006650 <cosf+0x50>
 8006660:	2201      	movs	r2, #1
 8006662:	9901      	ldr	r1, [sp, #4]
 8006664:	9800      	ldr	r0, [sp, #0]
 8006666:	f000 f92d 	bl	80068c4 <__kernel_sinf>
 800666a:	e7db      	b.n	8006624 <cosf+0x24>
 800666c:	3f490fd8 	.word	0x3f490fd8

08006670 <sinf>:
 8006670:	b507      	push	{r0, r1, r2, lr}
 8006672:	4a1b      	ldr	r2, [pc, #108]	@ (80066e0 <sinf+0x70>)
 8006674:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8006678:	4293      	cmp	r3, r2
 800667a:	4601      	mov	r1, r0
 800667c:	d806      	bhi.n	800668c <sinf+0x1c>
 800667e:	2200      	movs	r2, #0
 8006680:	2100      	movs	r1, #0
 8006682:	b003      	add	sp, #12
 8006684:	f85d eb04 	ldr.w	lr, [sp], #4
 8006688:	f000 b91c 	b.w	80068c4 <__kernel_sinf>
 800668c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006690:	d304      	bcc.n	800669c <sinf+0x2c>
 8006692:	f7fa f957 	bl	8000944 <__aeabi_fsub>
 8006696:	b003      	add	sp, #12
 8006698:	f85d fb04 	ldr.w	pc, [sp], #4
 800669c:	4669      	mov	r1, sp
 800669e:	f000 f987 	bl	80069b0 <__ieee754_rem_pio2f>
 80066a2:	f000 0003 	and.w	r0, r0, #3
 80066a6:	2801      	cmp	r0, #1
 80066a8:	d008      	beq.n	80066bc <sinf+0x4c>
 80066aa:	2802      	cmp	r0, #2
 80066ac:	d00b      	beq.n	80066c6 <sinf+0x56>
 80066ae:	b990      	cbnz	r0, 80066d6 <sinf+0x66>
 80066b0:	2201      	movs	r2, #1
 80066b2:	9901      	ldr	r1, [sp, #4]
 80066b4:	9800      	ldr	r0, [sp, #0]
 80066b6:	f000 f905 	bl	80068c4 <__kernel_sinf>
 80066ba:	e7ec      	b.n	8006696 <sinf+0x26>
 80066bc:	9901      	ldr	r1, [sp, #4]
 80066be:	9800      	ldr	r0, [sp, #0]
 80066c0:	f000 f880 	bl	80067c4 <__kernel_cosf>
 80066c4:	e7e7      	b.n	8006696 <sinf+0x26>
 80066c6:	2201      	movs	r2, #1
 80066c8:	9901      	ldr	r1, [sp, #4]
 80066ca:	9800      	ldr	r0, [sp, #0]
 80066cc:	f000 f8fa 	bl	80068c4 <__kernel_sinf>
 80066d0:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80066d4:	e7df      	b.n	8006696 <sinf+0x26>
 80066d6:	9901      	ldr	r1, [sp, #4]
 80066d8:	9800      	ldr	r0, [sp, #0]
 80066da:	f000 f873 	bl	80067c4 <__kernel_cosf>
 80066de:	e7f7      	b.n	80066d0 <sinf+0x60>
 80066e0:	3f490fd8 	.word	0x3f490fd8

080066e4 <__ieee754_sqrtf>:
 80066e4:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80066e8:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80066ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066f0:	4603      	mov	r3, r0
 80066f2:	4604      	mov	r4, r0
 80066f4:	d30a      	bcc.n	800670c <__ieee754_sqrtf+0x28>
 80066f6:	4601      	mov	r1, r0
 80066f8:	f7fa fa2e 	bl	8000b58 <__aeabi_fmul>
 80066fc:	4601      	mov	r1, r0
 80066fe:	4620      	mov	r0, r4
 8006700:	f7fa f922 	bl	8000948 <__addsf3>
 8006704:	4604      	mov	r4, r0
 8006706:	4620      	mov	r0, r4
 8006708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800670c:	2a00      	cmp	r2, #0
 800670e:	d0fa      	beq.n	8006706 <__ieee754_sqrtf+0x22>
 8006710:	2800      	cmp	r0, #0
 8006712:	da06      	bge.n	8006722 <__ieee754_sqrtf+0x3e>
 8006714:	4601      	mov	r1, r0
 8006716:	f7fa f915 	bl	8000944 <__aeabi_fsub>
 800671a:	4601      	mov	r1, r0
 800671c:	f7fa fad0 	bl	8000cc0 <__aeabi_fdiv>
 8006720:	e7f0      	b.n	8006704 <__ieee754_sqrtf+0x20>
 8006722:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8006726:	d03c      	beq.n	80067a2 <__ieee754_sqrtf+0xbe>
 8006728:	15c2      	asrs	r2, r0, #23
 800672a:	2400      	movs	r4, #0
 800672c:	2019      	movs	r0, #25
 800672e:	4626      	mov	r6, r4
 8006730:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8006734:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006738:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 800673c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006740:	07d2      	lsls	r2, r2, #31
 8006742:	bf58      	it	pl
 8006744:	005b      	lslpl	r3, r3, #1
 8006746:	106d      	asrs	r5, r5, #1
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	1872      	adds	r2, r6, r1
 800674c:	429a      	cmp	r2, r3
 800674e:	bfcf      	iteee	gt
 8006750:	461a      	movgt	r2, r3
 8006752:	1856      	addle	r6, r2, r1
 8006754:	1864      	addle	r4, r4, r1
 8006756:	1a9a      	suble	r2, r3, r2
 8006758:	3801      	subs	r0, #1
 800675a:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800675e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006762:	d1f2      	bne.n	800674a <__ieee754_sqrtf+0x66>
 8006764:	b1ba      	cbz	r2, 8006796 <__ieee754_sqrtf+0xb2>
 8006766:	4e15      	ldr	r6, [pc, #84]	@ (80067bc <__ieee754_sqrtf+0xd8>)
 8006768:	4f15      	ldr	r7, [pc, #84]	@ (80067c0 <__ieee754_sqrtf+0xdc>)
 800676a:	6830      	ldr	r0, [r6, #0]
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	f7fa f8e9 	bl	8000944 <__aeabi_fsub>
 8006772:	f8d6 8000 	ldr.w	r8, [r6]
 8006776:	4601      	mov	r1, r0
 8006778:	4640      	mov	r0, r8
 800677a:	f7fa fb95 	bl	8000ea8 <__aeabi_fcmple>
 800677e:	b150      	cbz	r0, 8006796 <__ieee754_sqrtf+0xb2>
 8006780:	6830      	ldr	r0, [r6, #0]
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	f7fa f8e0 	bl	8000948 <__addsf3>
 8006788:	6836      	ldr	r6, [r6, #0]
 800678a:	4601      	mov	r1, r0
 800678c:	4630      	mov	r0, r6
 800678e:	f7fa fb81 	bl	8000e94 <__aeabi_fcmplt>
 8006792:	b170      	cbz	r0, 80067b2 <__ieee754_sqrtf+0xce>
 8006794:	3402      	adds	r4, #2
 8006796:	1064      	asrs	r4, r4, #1
 8006798:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800679c:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 80067a0:	e7b1      	b.n	8006706 <__ieee754_sqrtf+0x22>
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	0218      	lsls	r0, r3, #8
 80067a6:	460a      	mov	r2, r1
 80067a8:	f101 0101 	add.w	r1, r1, #1
 80067ac:	d5f9      	bpl.n	80067a2 <__ieee754_sqrtf+0xbe>
 80067ae:	4252      	negs	r2, r2
 80067b0:	e7bb      	b.n	800672a <__ieee754_sqrtf+0x46>
 80067b2:	3401      	adds	r4, #1
 80067b4:	f024 0401 	bic.w	r4, r4, #1
 80067b8:	e7ed      	b.n	8006796 <__ieee754_sqrtf+0xb2>
 80067ba:	bf00      	nop
 80067bc:	08007414 	.word	0x08007414
 80067c0:	08007410 	.word	0x08007410

080067c4 <__kernel_cosf>:
 80067c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067c8:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 80067cc:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 80067d0:	4606      	mov	r6, r0
 80067d2:	4688      	mov	r8, r1
 80067d4:	d203      	bcs.n	80067de <__kernel_cosf+0x1a>
 80067d6:	f7fa fb9b 	bl	8000f10 <__aeabi_f2iz>
 80067da:	2800      	cmp	r0, #0
 80067dc:	d05c      	beq.n	8006898 <__kernel_cosf+0xd4>
 80067de:	4631      	mov	r1, r6
 80067e0:	4630      	mov	r0, r6
 80067e2:	f7fa f9b9 	bl	8000b58 <__aeabi_fmul>
 80067e6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80067ea:	4604      	mov	r4, r0
 80067ec:	f7fa f9b4 	bl	8000b58 <__aeabi_fmul>
 80067f0:	492b      	ldr	r1, [pc, #172]	@ (80068a0 <__kernel_cosf+0xdc>)
 80067f2:	4607      	mov	r7, r0
 80067f4:	4620      	mov	r0, r4
 80067f6:	f7fa f9af 	bl	8000b58 <__aeabi_fmul>
 80067fa:	492a      	ldr	r1, [pc, #168]	@ (80068a4 <__kernel_cosf+0xe0>)
 80067fc:	f7fa f8a4 	bl	8000948 <__addsf3>
 8006800:	4621      	mov	r1, r4
 8006802:	f7fa f9a9 	bl	8000b58 <__aeabi_fmul>
 8006806:	4928      	ldr	r1, [pc, #160]	@ (80068a8 <__kernel_cosf+0xe4>)
 8006808:	f7fa f89c 	bl	8000944 <__aeabi_fsub>
 800680c:	4621      	mov	r1, r4
 800680e:	f7fa f9a3 	bl	8000b58 <__aeabi_fmul>
 8006812:	4926      	ldr	r1, [pc, #152]	@ (80068ac <__kernel_cosf+0xe8>)
 8006814:	f7fa f898 	bl	8000948 <__addsf3>
 8006818:	4621      	mov	r1, r4
 800681a:	f7fa f99d 	bl	8000b58 <__aeabi_fmul>
 800681e:	4924      	ldr	r1, [pc, #144]	@ (80068b0 <__kernel_cosf+0xec>)
 8006820:	f7fa f890 	bl	8000944 <__aeabi_fsub>
 8006824:	4621      	mov	r1, r4
 8006826:	f7fa f997 	bl	8000b58 <__aeabi_fmul>
 800682a:	4922      	ldr	r1, [pc, #136]	@ (80068b4 <__kernel_cosf+0xf0>)
 800682c:	f7fa f88c 	bl	8000948 <__addsf3>
 8006830:	4621      	mov	r1, r4
 8006832:	f7fa f991 	bl	8000b58 <__aeabi_fmul>
 8006836:	4621      	mov	r1, r4
 8006838:	f7fa f98e 	bl	8000b58 <__aeabi_fmul>
 800683c:	4641      	mov	r1, r8
 800683e:	4604      	mov	r4, r0
 8006840:	4630      	mov	r0, r6
 8006842:	f7fa f989 	bl	8000b58 <__aeabi_fmul>
 8006846:	4601      	mov	r1, r0
 8006848:	4620      	mov	r0, r4
 800684a:	f7fa f87b 	bl	8000944 <__aeabi_fsub>
 800684e:	4b1a      	ldr	r3, [pc, #104]	@ (80068b8 <__kernel_cosf+0xf4>)
 8006850:	4604      	mov	r4, r0
 8006852:	429d      	cmp	r5, r3
 8006854:	d80a      	bhi.n	800686c <__kernel_cosf+0xa8>
 8006856:	4601      	mov	r1, r0
 8006858:	4638      	mov	r0, r7
 800685a:	f7fa f873 	bl	8000944 <__aeabi_fsub>
 800685e:	4601      	mov	r1, r0
 8006860:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006864:	f7fa f86e 	bl	8000944 <__aeabi_fsub>
 8006868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800686c:	4b13      	ldr	r3, [pc, #76]	@ (80068bc <__kernel_cosf+0xf8>)
 800686e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006872:	429d      	cmp	r5, r3
 8006874:	bf8c      	ite	hi
 8006876:	4d12      	ldrhi	r5, [pc, #72]	@ (80068c0 <__kernel_cosf+0xfc>)
 8006878:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 800687c:	4629      	mov	r1, r5
 800687e:	f7fa f861 	bl	8000944 <__aeabi_fsub>
 8006882:	4629      	mov	r1, r5
 8006884:	4606      	mov	r6, r0
 8006886:	4638      	mov	r0, r7
 8006888:	f7fa f85c 	bl	8000944 <__aeabi_fsub>
 800688c:	4621      	mov	r1, r4
 800688e:	f7fa f859 	bl	8000944 <__aeabi_fsub>
 8006892:	4601      	mov	r1, r0
 8006894:	4630      	mov	r0, r6
 8006896:	e7e5      	b.n	8006864 <__kernel_cosf+0xa0>
 8006898:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800689c:	e7e4      	b.n	8006868 <__kernel_cosf+0xa4>
 800689e:	bf00      	nop
 80068a0:	ad47d74e 	.word	0xad47d74e
 80068a4:	310f74f6 	.word	0x310f74f6
 80068a8:	3493f27c 	.word	0x3493f27c
 80068ac:	37d00d01 	.word	0x37d00d01
 80068b0:	3ab60b61 	.word	0x3ab60b61
 80068b4:	3d2aaaab 	.word	0x3d2aaaab
 80068b8:	3e999999 	.word	0x3e999999
 80068bc:	3f480000 	.word	0x3f480000
 80068c0:	3e900000 	.word	0x3e900000

080068c4 <__kernel_sinf>:
 80068c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068c8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80068cc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80068d0:	4604      	mov	r4, r0
 80068d2:	460f      	mov	r7, r1
 80068d4:	4691      	mov	r9, r2
 80068d6:	d203      	bcs.n	80068e0 <__kernel_sinf+0x1c>
 80068d8:	f7fa fb1a 	bl	8000f10 <__aeabi_f2iz>
 80068dc:	2800      	cmp	r0, #0
 80068de:	d035      	beq.n	800694c <__kernel_sinf+0x88>
 80068e0:	4621      	mov	r1, r4
 80068e2:	4620      	mov	r0, r4
 80068e4:	f7fa f938 	bl	8000b58 <__aeabi_fmul>
 80068e8:	4605      	mov	r5, r0
 80068ea:	4601      	mov	r1, r0
 80068ec:	4620      	mov	r0, r4
 80068ee:	f7fa f933 	bl	8000b58 <__aeabi_fmul>
 80068f2:	4929      	ldr	r1, [pc, #164]	@ (8006998 <__kernel_sinf+0xd4>)
 80068f4:	4606      	mov	r6, r0
 80068f6:	4628      	mov	r0, r5
 80068f8:	f7fa f92e 	bl	8000b58 <__aeabi_fmul>
 80068fc:	4927      	ldr	r1, [pc, #156]	@ (800699c <__kernel_sinf+0xd8>)
 80068fe:	f7fa f821 	bl	8000944 <__aeabi_fsub>
 8006902:	4629      	mov	r1, r5
 8006904:	f7fa f928 	bl	8000b58 <__aeabi_fmul>
 8006908:	4925      	ldr	r1, [pc, #148]	@ (80069a0 <__kernel_sinf+0xdc>)
 800690a:	f7fa f81d 	bl	8000948 <__addsf3>
 800690e:	4629      	mov	r1, r5
 8006910:	f7fa f922 	bl	8000b58 <__aeabi_fmul>
 8006914:	4923      	ldr	r1, [pc, #140]	@ (80069a4 <__kernel_sinf+0xe0>)
 8006916:	f7fa f815 	bl	8000944 <__aeabi_fsub>
 800691a:	4629      	mov	r1, r5
 800691c:	f7fa f91c 	bl	8000b58 <__aeabi_fmul>
 8006920:	4921      	ldr	r1, [pc, #132]	@ (80069a8 <__kernel_sinf+0xe4>)
 8006922:	f7fa f811 	bl	8000948 <__addsf3>
 8006926:	4680      	mov	r8, r0
 8006928:	f1b9 0f00 	cmp.w	r9, #0
 800692c:	d111      	bne.n	8006952 <__kernel_sinf+0x8e>
 800692e:	4601      	mov	r1, r0
 8006930:	4628      	mov	r0, r5
 8006932:	f7fa f911 	bl	8000b58 <__aeabi_fmul>
 8006936:	491d      	ldr	r1, [pc, #116]	@ (80069ac <__kernel_sinf+0xe8>)
 8006938:	f7fa f804 	bl	8000944 <__aeabi_fsub>
 800693c:	4631      	mov	r1, r6
 800693e:	f7fa f90b 	bl	8000b58 <__aeabi_fmul>
 8006942:	4601      	mov	r1, r0
 8006944:	4620      	mov	r0, r4
 8006946:	f7f9 ffff 	bl	8000948 <__addsf3>
 800694a:	4604      	mov	r4, r0
 800694c:	4620      	mov	r0, r4
 800694e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006952:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006956:	4638      	mov	r0, r7
 8006958:	f7fa f8fe 	bl	8000b58 <__aeabi_fmul>
 800695c:	4641      	mov	r1, r8
 800695e:	4681      	mov	r9, r0
 8006960:	4630      	mov	r0, r6
 8006962:	f7fa f8f9 	bl	8000b58 <__aeabi_fmul>
 8006966:	4601      	mov	r1, r0
 8006968:	4648      	mov	r0, r9
 800696a:	f7f9 ffeb 	bl	8000944 <__aeabi_fsub>
 800696e:	4629      	mov	r1, r5
 8006970:	f7fa f8f2 	bl	8000b58 <__aeabi_fmul>
 8006974:	4639      	mov	r1, r7
 8006976:	f7f9 ffe5 	bl	8000944 <__aeabi_fsub>
 800697a:	490c      	ldr	r1, [pc, #48]	@ (80069ac <__kernel_sinf+0xe8>)
 800697c:	4605      	mov	r5, r0
 800697e:	4630      	mov	r0, r6
 8006980:	f7fa f8ea 	bl	8000b58 <__aeabi_fmul>
 8006984:	4601      	mov	r1, r0
 8006986:	4628      	mov	r0, r5
 8006988:	f7f9 ffde 	bl	8000948 <__addsf3>
 800698c:	4601      	mov	r1, r0
 800698e:	4620      	mov	r0, r4
 8006990:	f7f9 ffd8 	bl	8000944 <__aeabi_fsub>
 8006994:	e7d9      	b.n	800694a <__kernel_sinf+0x86>
 8006996:	bf00      	nop
 8006998:	2f2ec9d3 	.word	0x2f2ec9d3
 800699c:	32d72f34 	.word	0x32d72f34
 80069a0:	3638ef1b 	.word	0x3638ef1b
 80069a4:	39500d01 	.word	0x39500d01
 80069a8:	3c088889 	.word	0x3c088889
 80069ac:	3e2aaaab 	.word	0x3e2aaaab

080069b0 <__ieee754_rem_pio2f>:
 80069b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b4:	4aa4      	ldr	r2, [pc, #656]	@ (8006c48 <__ieee754_rem_pio2f+0x298>)
 80069b6:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 80069ba:	4590      	cmp	r8, r2
 80069bc:	460c      	mov	r4, r1
 80069be:	4682      	mov	sl, r0
 80069c0:	b087      	sub	sp, #28
 80069c2:	d804      	bhi.n	80069ce <__ieee754_rem_pio2f+0x1e>
 80069c4:	2300      	movs	r3, #0
 80069c6:	6008      	str	r0, [r1, #0]
 80069c8:	604b      	str	r3, [r1, #4]
 80069ca:	2500      	movs	r5, #0
 80069cc:	e01d      	b.n	8006a0a <__ieee754_rem_pio2f+0x5a>
 80069ce:	4a9f      	ldr	r2, [pc, #636]	@ (8006c4c <__ieee754_rem_pio2f+0x29c>)
 80069d0:	4590      	cmp	r8, r2
 80069d2:	d84f      	bhi.n	8006a74 <__ieee754_rem_pio2f+0xc4>
 80069d4:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 80069d8:	2800      	cmp	r0, #0
 80069da:	499d      	ldr	r1, [pc, #628]	@ (8006c50 <__ieee754_rem_pio2f+0x2a0>)
 80069dc:	4f9d      	ldr	r7, [pc, #628]	@ (8006c54 <__ieee754_rem_pio2f+0x2a4>)
 80069de:	f025 050f 	bic.w	r5, r5, #15
 80069e2:	dd24      	ble.n	8006a2e <__ieee754_rem_pio2f+0x7e>
 80069e4:	f7f9 ffae 	bl	8000944 <__aeabi_fsub>
 80069e8:	42bd      	cmp	r5, r7
 80069ea:	4606      	mov	r6, r0
 80069ec:	d011      	beq.n	8006a12 <__ieee754_rem_pio2f+0x62>
 80069ee:	499a      	ldr	r1, [pc, #616]	@ (8006c58 <__ieee754_rem_pio2f+0x2a8>)
 80069f0:	f7f9 ffa8 	bl	8000944 <__aeabi_fsub>
 80069f4:	4601      	mov	r1, r0
 80069f6:	4605      	mov	r5, r0
 80069f8:	4630      	mov	r0, r6
 80069fa:	f7f9 ffa3 	bl	8000944 <__aeabi_fsub>
 80069fe:	4996      	ldr	r1, [pc, #600]	@ (8006c58 <__ieee754_rem_pio2f+0x2a8>)
 8006a00:	f7f9 ffa0 	bl	8000944 <__aeabi_fsub>
 8006a04:	6025      	str	r5, [r4, #0]
 8006a06:	2501      	movs	r5, #1
 8006a08:	6060      	str	r0, [r4, #4]
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	b007      	add	sp, #28
 8006a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a12:	4992      	ldr	r1, [pc, #584]	@ (8006c5c <__ieee754_rem_pio2f+0x2ac>)
 8006a14:	f7f9 ff96 	bl	8000944 <__aeabi_fsub>
 8006a18:	4991      	ldr	r1, [pc, #580]	@ (8006c60 <__ieee754_rem_pio2f+0x2b0>)
 8006a1a:	4606      	mov	r6, r0
 8006a1c:	f7f9 ff92 	bl	8000944 <__aeabi_fsub>
 8006a20:	4601      	mov	r1, r0
 8006a22:	4605      	mov	r5, r0
 8006a24:	4630      	mov	r0, r6
 8006a26:	f7f9 ff8d 	bl	8000944 <__aeabi_fsub>
 8006a2a:	498d      	ldr	r1, [pc, #564]	@ (8006c60 <__ieee754_rem_pio2f+0x2b0>)
 8006a2c:	e7e8      	b.n	8006a00 <__ieee754_rem_pio2f+0x50>
 8006a2e:	f7f9 ff8b 	bl	8000948 <__addsf3>
 8006a32:	42bd      	cmp	r5, r7
 8006a34:	4606      	mov	r6, r0
 8006a36:	d00f      	beq.n	8006a58 <__ieee754_rem_pio2f+0xa8>
 8006a38:	4987      	ldr	r1, [pc, #540]	@ (8006c58 <__ieee754_rem_pio2f+0x2a8>)
 8006a3a:	f7f9 ff85 	bl	8000948 <__addsf3>
 8006a3e:	4601      	mov	r1, r0
 8006a40:	4605      	mov	r5, r0
 8006a42:	4630      	mov	r0, r6
 8006a44:	f7f9 ff7e 	bl	8000944 <__aeabi_fsub>
 8006a48:	4983      	ldr	r1, [pc, #524]	@ (8006c58 <__ieee754_rem_pio2f+0x2a8>)
 8006a4a:	f7f9 ff7d 	bl	8000948 <__addsf3>
 8006a4e:	6025      	str	r5, [r4, #0]
 8006a50:	6060      	str	r0, [r4, #4]
 8006a52:	f04f 35ff 	mov.w	r5, #4294967295
 8006a56:	e7d8      	b.n	8006a0a <__ieee754_rem_pio2f+0x5a>
 8006a58:	4980      	ldr	r1, [pc, #512]	@ (8006c5c <__ieee754_rem_pio2f+0x2ac>)
 8006a5a:	f7f9 ff75 	bl	8000948 <__addsf3>
 8006a5e:	4980      	ldr	r1, [pc, #512]	@ (8006c60 <__ieee754_rem_pio2f+0x2b0>)
 8006a60:	4606      	mov	r6, r0
 8006a62:	f7f9 ff71 	bl	8000948 <__addsf3>
 8006a66:	4601      	mov	r1, r0
 8006a68:	4605      	mov	r5, r0
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	f7f9 ff6a 	bl	8000944 <__aeabi_fsub>
 8006a70:	497b      	ldr	r1, [pc, #492]	@ (8006c60 <__ieee754_rem_pio2f+0x2b0>)
 8006a72:	e7ea      	b.n	8006a4a <__ieee754_rem_pio2f+0x9a>
 8006a74:	4a7b      	ldr	r2, [pc, #492]	@ (8006c64 <__ieee754_rem_pio2f+0x2b4>)
 8006a76:	4590      	cmp	r8, r2
 8006a78:	f200 8095 	bhi.w	8006ba6 <__ieee754_rem_pio2f+0x1f6>
 8006a7c:	f000 f8fe 	bl	8006c7c <fabsf>
 8006a80:	4979      	ldr	r1, [pc, #484]	@ (8006c68 <__ieee754_rem_pio2f+0x2b8>)
 8006a82:	4606      	mov	r6, r0
 8006a84:	f7fa f868 	bl	8000b58 <__aeabi_fmul>
 8006a88:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006a8c:	f7f9 ff5c 	bl	8000948 <__addsf3>
 8006a90:	f7fa fa3e 	bl	8000f10 <__aeabi_f2iz>
 8006a94:	4605      	mov	r5, r0
 8006a96:	f7fa f80b 	bl	8000ab0 <__aeabi_i2f>
 8006a9a:	496d      	ldr	r1, [pc, #436]	@ (8006c50 <__ieee754_rem_pio2f+0x2a0>)
 8006a9c:	4681      	mov	r9, r0
 8006a9e:	f7fa f85b 	bl	8000b58 <__aeabi_fmul>
 8006aa2:	4601      	mov	r1, r0
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	f7f9 ff4d 	bl	8000944 <__aeabi_fsub>
 8006aaa:	496b      	ldr	r1, [pc, #428]	@ (8006c58 <__ieee754_rem_pio2f+0x2a8>)
 8006aac:	4607      	mov	r7, r0
 8006aae:	4648      	mov	r0, r9
 8006ab0:	f7fa f852 	bl	8000b58 <__aeabi_fmul>
 8006ab4:	2d1f      	cmp	r5, #31
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	dc0e      	bgt.n	8006ad8 <__ieee754_rem_pio2f+0x128>
 8006aba:	4a6c      	ldr	r2, [pc, #432]	@ (8006c6c <__ieee754_rem_pio2f+0x2bc>)
 8006abc:	1e69      	subs	r1, r5, #1
 8006abe:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006ac2:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 8006ac6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d004      	beq.n	8006ad8 <__ieee754_rem_pio2f+0x128>
 8006ace:	4631      	mov	r1, r6
 8006ad0:	4638      	mov	r0, r7
 8006ad2:	f7f9 ff37 	bl	8000944 <__aeabi_fsub>
 8006ad6:	e00b      	b.n	8006af0 <__ieee754_rem_pio2f+0x140>
 8006ad8:	4631      	mov	r1, r6
 8006ada:	4638      	mov	r0, r7
 8006adc:	f7f9 ff32 	bl	8000944 <__aeabi_fsub>
 8006ae0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006ae4:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	ea4f 5be8 	mov.w	fp, r8, asr #23
 8006aee:	dc01      	bgt.n	8006af4 <__ieee754_rem_pio2f+0x144>
 8006af0:	6020      	str	r0, [r4, #0]
 8006af2:	e026      	b.n	8006b42 <__ieee754_rem_pio2f+0x192>
 8006af4:	4959      	ldr	r1, [pc, #356]	@ (8006c5c <__ieee754_rem_pio2f+0x2ac>)
 8006af6:	4648      	mov	r0, r9
 8006af8:	f7fa f82e 	bl	8000b58 <__aeabi_fmul>
 8006afc:	4606      	mov	r6, r0
 8006afe:	4601      	mov	r1, r0
 8006b00:	4638      	mov	r0, r7
 8006b02:	f7f9 ff1f 	bl	8000944 <__aeabi_fsub>
 8006b06:	4601      	mov	r1, r0
 8006b08:	4680      	mov	r8, r0
 8006b0a:	4638      	mov	r0, r7
 8006b0c:	f7f9 ff1a 	bl	8000944 <__aeabi_fsub>
 8006b10:	4631      	mov	r1, r6
 8006b12:	f7f9 ff17 	bl	8000944 <__aeabi_fsub>
 8006b16:	4606      	mov	r6, r0
 8006b18:	4951      	ldr	r1, [pc, #324]	@ (8006c60 <__ieee754_rem_pio2f+0x2b0>)
 8006b1a:	4648      	mov	r0, r9
 8006b1c:	f7fa f81c 	bl	8000b58 <__aeabi_fmul>
 8006b20:	4631      	mov	r1, r6
 8006b22:	f7f9 ff0f 	bl	8000944 <__aeabi_fsub>
 8006b26:	4601      	mov	r1, r0
 8006b28:	4606      	mov	r6, r0
 8006b2a:	4640      	mov	r0, r8
 8006b2c:	f7f9 ff0a 	bl	8000944 <__aeabi_fsub>
 8006b30:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006b34:	ebab 0b03 	sub.w	fp, fp, r3
 8006b38:	f1bb 0f19 	cmp.w	fp, #25
 8006b3c:	dc18      	bgt.n	8006b70 <__ieee754_rem_pio2f+0x1c0>
 8006b3e:	4647      	mov	r7, r8
 8006b40:	6020      	str	r0, [r4, #0]
 8006b42:	f8d4 8000 	ldr.w	r8, [r4]
 8006b46:	4638      	mov	r0, r7
 8006b48:	4641      	mov	r1, r8
 8006b4a:	f7f9 fefb 	bl	8000944 <__aeabi_fsub>
 8006b4e:	4631      	mov	r1, r6
 8006b50:	f7f9 fef8 	bl	8000944 <__aeabi_fsub>
 8006b54:	f1ba 0f00 	cmp.w	sl, #0
 8006b58:	6060      	str	r0, [r4, #4]
 8006b5a:	f6bf af56 	bge.w	8006a0a <__ieee754_rem_pio2f+0x5a>
 8006b5e:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 8006b62:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8006b66:	f8c4 8000 	str.w	r8, [r4]
 8006b6a:	6060      	str	r0, [r4, #4]
 8006b6c:	426d      	negs	r5, r5
 8006b6e:	e74c      	b.n	8006a0a <__ieee754_rem_pio2f+0x5a>
 8006b70:	493f      	ldr	r1, [pc, #252]	@ (8006c70 <__ieee754_rem_pio2f+0x2c0>)
 8006b72:	4648      	mov	r0, r9
 8006b74:	f7f9 fff0 	bl	8000b58 <__aeabi_fmul>
 8006b78:	4606      	mov	r6, r0
 8006b7a:	4601      	mov	r1, r0
 8006b7c:	4640      	mov	r0, r8
 8006b7e:	f7f9 fee1 	bl	8000944 <__aeabi_fsub>
 8006b82:	4601      	mov	r1, r0
 8006b84:	4607      	mov	r7, r0
 8006b86:	4640      	mov	r0, r8
 8006b88:	f7f9 fedc 	bl	8000944 <__aeabi_fsub>
 8006b8c:	4631      	mov	r1, r6
 8006b8e:	f7f9 fed9 	bl	8000944 <__aeabi_fsub>
 8006b92:	4606      	mov	r6, r0
 8006b94:	4937      	ldr	r1, [pc, #220]	@ (8006c74 <__ieee754_rem_pio2f+0x2c4>)
 8006b96:	4648      	mov	r0, r9
 8006b98:	f7f9 ffde 	bl	8000b58 <__aeabi_fmul>
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	f7f9 fed1 	bl	8000944 <__aeabi_fsub>
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	e793      	b.n	8006ace <__ieee754_rem_pio2f+0x11e>
 8006ba6:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8006baa:	d305      	bcc.n	8006bb8 <__ieee754_rem_pio2f+0x208>
 8006bac:	4601      	mov	r1, r0
 8006bae:	f7f9 fec9 	bl	8000944 <__aeabi_fsub>
 8006bb2:	6060      	str	r0, [r4, #4]
 8006bb4:	6020      	str	r0, [r4, #0]
 8006bb6:	e708      	b.n	80069ca <__ieee754_rem_pio2f+0x1a>
 8006bb8:	ea4f 56e8 	mov.w	r6, r8, asr #23
 8006bbc:	3e86      	subs	r6, #134	@ 0x86
 8006bbe:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 8006bc2:	4640      	mov	r0, r8
 8006bc4:	f7fa f9a4 	bl	8000f10 <__aeabi_f2iz>
 8006bc8:	f7f9 ff72 	bl	8000ab0 <__aeabi_i2f>
 8006bcc:	4601      	mov	r1, r0
 8006bce:	9003      	str	r0, [sp, #12]
 8006bd0:	4640      	mov	r0, r8
 8006bd2:	f7f9 feb7 	bl	8000944 <__aeabi_fsub>
 8006bd6:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8006bda:	f7f9 ffbd 	bl	8000b58 <__aeabi_fmul>
 8006bde:	4607      	mov	r7, r0
 8006be0:	f7fa f996 	bl	8000f10 <__aeabi_f2iz>
 8006be4:	f7f9 ff64 	bl	8000ab0 <__aeabi_i2f>
 8006be8:	4601      	mov	r1, r0
 8006bea:	9004      	str	r0, [sp, #16]
 8006bec:	4605      	mov	r5, r0
 8006bee:	4638      	mov	r0, r7
 8006bf0:	f7f9 fea8 	bl	8000944 <__aeabi_fsub>
 8006bf4:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8006bf8:	f7f9 ffae 	bl	8000b58 <__aeabi_fmul>
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	9005      	str	r0, [sp, #20]
 8006c00:	f7fa f93e 	bl	8000e80 <__aeabi_fcmpeq>
 8006c04:	b1f0      	cbz	r0, 8006c44 <__ieee754_rem_pio2f+0x294>
 8006c06:	2100      	movs	r1, #0
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f7fa f939 	bl	8000e80 <__aeabi_fcmpeq>
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	bf14      	ite	ne
 8006c12:	2301      	movne	r3, #1
 8006c14:	2302      	moveq	r3, #2
 8006c16:	4a18      	ldr	r2, [pc, #96]	@ (8006c78 <__ieee754_rem_pio2f+0x2c8>)
 8006c18:	4621      	mov	r1, r4
 8006c1a:	9201      	str	r2, [sp, #4]
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	a803      	add	r0, sp, #12
 8006c20:	9200      	str	r2, [sp, #0]
 8006c22:	4632      	mov	r2, r6
 8006c24:	f000 f87a 	bl	8006d1c <__kernel_rem_pio2f>
 8006c28:	f1ba 0f00 	cmp.w	sl, #0
 8006c2c:	4605      	mov	r5, r0
 8006c2e:	f6bf aeec 	bge.w	8006a0a <__ieee754_rem_pio2f+0x5a>
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	6863      	ldr	r3, [r4, #4]
 8006c3c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006c40:	6063      	str	r3, [r4, #4]
 8006c42:	e793      	b.n	8006b6c <__ieee754_rem_pio2f+0x1bc>
 8006c44:	2303      	movs	r3, #3
 8006c46:	e7e6      	b.n	8006c16 <__ieee754_rem_pio2f+0x266>
 8006c48:	3f490fd8 	.word	0x3f490fd8
 8006c4c:	4016cbe3 	.word	0x4016cbe3
 8006c50:	3fc90f80 	.word	0x3fc90f80
 8006c54:	3fc90fd0 	.word	0x3fc90fd0
 8006c58:	37354443 	.word	0x37354443
 8006c5c:	37354400 	.word	0x37354400
 8006c60:	2e85a308 	.word	0x2e85a308
 8006c64:	43490f80 	.word	0x43490f80
 8006c68:	3f22f984 	.word	0x3f22f984
 8006c6c:	08007418 	.word	0x08007418
 8006c70:	2e85a300 	.word	0x2e85a300
 8006c74:	248d3132 	.word	0x248d3132
 8006c78:	08007498 	.word	0x08007498

08006c7c <fabsf>:
 8006c7c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006c80:	4770      	bx	lr
	...

08006c84 <scalbnf>:
 8006c84:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	460d      	mov	r5, r1
 8006c8e:	4604      	mov	r4, r0
 8006c90:	d02e      	beq.n	8006cf0 <scalbnf+0x6c>
 8006c92:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006c96:	d304      	bcc.n	8006ca2 <scalbnf+0x1e>
 8006c98:	4601      	mov	r1, r0
 8006c9a:	f7f9 fe55 	bl	8000948 <__addsf3>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	e026      	b.n	8006cf0 <scalbnf+0x6c>
 8006ca2:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8006ca6:	d118      	bne.n	8006cda <scalbnf+0x56>
 8006ca8:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8006cac:	f7f9 ff54 	bl	8000b58 <__aeabi_fmul>
 8006cb0:	4a17      	ldr	r2, [pc, #92]	@ (8006d10 <scalbnf+0x8c>)
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	4295      	cmp	r5, r2
 8006cb6:	db0c      	blt.n	8006cd2 <scalbnf+0x4e>
 8006cb8:	4604      	mov	r4, r0
 8006cba:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8006cbe:	3a19      	subs	r2, #25
 8006cc0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006cc4:	428d      	cmp	r5, r1
 8006cc6:	dd0a      	ble.n	8006cde <scalbnf+0x5a>
 8006cc8:	4912      	ldr	r1, [pc, #72]	@ (8006d14 <scalbnf+0x90>)
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f361 001e 	bfi	r0, r1, #0, #31
 8006cd0:	e000      	b.n	8006cd4 <scalbnf+0x50>
 8006cd2:	4911      	ldr	r1, [pc, #68]	@ (8006d18 <scalbnf+0x94>)
 8006cd4:	f7f9 ff40 	bl	8000b58 <__aeabi_fmul>
 8006cd8:	e7e1      	b.n	8006c9e <scalbnf+0x1a>
 8006cda:	0dd2      	lsrs	r2, r2, #23
 8006cdc:	e7f0      	b.n	8006cc0 <scalbnf+0x3c>
 8006cde:	1951      	adds	r1, r2, r5
 8006ce0:	29fe      	cmp	r1, #254	@ 0xfe
 8006ce2:	dcf1      	bgt.n	8006cc8 <scalbnf+0x44>
 8006ce4:	2900      	cmp	r1, #0
 8006ce6:	dd05      	ble.n	8006cf4 <scalbnf+0x70>
 8006ce8:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8006cec:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	bd38      	pop	{r3, r4, r5, pc}
 8006cf4:	f111 0f16 	cmn.w	r1, #22
 8006cf8:	da01      	bge.n	8006cfe <scalbnf+0x7a>
 8006cfa:	4907      	ldr	r1, [pc, #28]	@ (8006d18 <scalbnf+0x94>)
 8006cfc:	e7e5      	b.n	8006cca <scalbnf+0x46>
 8006cfe:	f101 0019 	add.w	r0, r1, #25
 8006d02:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8006d06:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8006d0a:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8006d0e:	e7e1      	b.n	8006cd4 <scalbnf+0x50>
 8006d10:	ffff3cb0 	.word	0xffff3cb0
 8006d14:	7149f2ca 	.word	0x7149f2ca
 8006d18:	0da24260 	.word	0x0da24260

08006d1c <__kernel_rem_pio2f>:
 8006d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d20:	b0db      	sub	sp, #364	@ 0x16c
 8006d22:	9202      	str	r2, [sp, #8]
 8006d24:	9304      	str	r3, [sp, #16]
 8006d26:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8006d28:	4bac      	ldr	r3, [pc, #688]	@ (8006fdc <__kernel_rem_pio2f+0x2c0>)
 8006d2a:	9005      	str	r0, [sp, #20]
 8006d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d30:	9100      	str	r1, [sp, #0]
 8006d32:	9301      	str	r3, [sp, #4]
 8006d34:	9b04      	ldr	r3, [sp, #16]
 8006d36:	3b01      	subs	r3, #1
 8006d38:	9303      	str	r3, [sp, #12]
 8006d3a:	9b02      	ldr	r3, [sp, #8]
 8006d3c:	1d1a      	adds	r2, r3, #4
 8006d3e:	f2c0 8099 	blt.w	8006e74 <__kernel_rem_pio2f+0x158>
 8006d42:	1edc      	subs	r4, r3, #3
 8006d44:	bf48      	it	mi
 8006d46:	1d1c      	addmi	r4, r3, #4
 8006d48:	10e4      	asrs	r4, r4, #3
 8006d4a:	2500      	movs	r5, #0
 8006d4c:	f04f 0b00 	mov.w	fp, #0
 8006d50:	1c67      	adds	r7, r4, #1
 8006d52:	00fb      	lsls	r3, r7, #3
 8006d54:	9306      	str	r3, [sp, #24]
 8006d56:	9b02      	ldr	r3, [sp, #8]
 8006d58:	9a03      	ldr	r2, [sp, #12]
 8006d5a:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8006d5e:	9b01      	ldr	r3, [sp, #4]
 8006d60:	eba4 0802 	sub.w	r8, r4, r2
 8006d64:	eb03 0902 	add.w	r9, r3, r2
 8006d68:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8006d6a:	ae1e      	add	r6, sp, #120	@ 0x78
 8006d6c:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8006d70:	454d      	cmp	r5, r9
 8006d72:	f340 8081 	ble.w	8006e78 <__kernel_rem_pio2f+0x15c>
 8006d76:	9a04      	ldr	r2, [sp, #16]
 8006d78:	ab1e      	add	r3, sp, #120	@ 0x78
 8006d7a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8006d7e:	f04f 0900 	mov.w	r9, #0
 8006d82:	2300      	movs	r3, #0
 8006d84:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8006d88:	9a01      	ldr	r2, [sp, #4]
 8006d8a:	4591      	cmp	r9, r2
 8006d8c:	f340 809a 	ble.w	8006ec4 <__kernel_rem_pio2f+0x1a8>
 8006d90:	4613      	mov	r3, r2
 8006d92:	aa0a      	add	r2, sp, #40	@ 0x28
 8006d94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d98:	9308      	str	r3, [sp, #32]
 8006d9a:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8006d9c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006da0:	9c01      	ldr	r4, [sp, #4]
 8006da2:	9307      	str	r3, [sp, #28]
 8006da4:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8006da8:	4646      	mov	r6, r8
 8006daa:	4625      	mov	r5, r4
 8006dac:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 8006db0:	ab5a      	add	r3, sp, #360	@ 0x168
 8006db2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006db6:	f853 bc50 	ldr.w	fp, [r3, #-80]
 8006dba:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8006dbe:	2d00      	cmp	r5, #0
 8006dc0:	f300 8085 	bgt.w	8006ece <__kernel_rem_pio2f+0x1b2>
 8006dc4:	4639      	mov	r1, r7
 8006dc6:	4658      	mov	r0, fp
 8006dc8:	f7ff ff5c 	bl	8006c84 <scalbnf>
 8006dcc:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8006dd0:	4605      	mov	r5, r0
 8006dd2:	f7f9 fec1 	bl	8000b58 <__aeabi_fmul>
 8006dd6:	f000 fa3f 	bl	8007258 <floorf>
 8006dda:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8006dde:	f7f9 febb 	bl	8000b58 <__aeabi_fmul>
 8006de2:	4601      	mov	r1, r0
 8006de4:	4628      	mov	r0, r5
 8006de6:	f7f9 fdad 	bl	8000944 <__aeabi_fsub>
 8006dea:	4605      	mov	r5, r0
 8006dec:	f7fa f890 	bl	8000f10 <__aeabi_f2iz>
 8006df0:	4606      	mov	r6, r0
 8006df2:	f7f9 fe5d 	bl	8000ab0 <__aeabi_i2f>
 8006df6:	4601      	mov	r1, r0
 8006df8:	4628      	mov	r0, r5
 8006dfa:	f7f9 fda3 	bl	8000944 <__aeabi_fsub>
 8006dfe:	2f00      	cmp	r7, #0
 8006e00:	4681      	mov	r9, r0
 8006e02:	f340 8081 	ble.w	8006f08 <__kernel_rem_pio2f+0x1ec>
 8006e06:	1e62      	subs	r2, r4, #1
 8006e08:	ab0a      	add	r3, sp, #40	@ 0x28
 8006e0a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8006e0e:	f1c7 0108 	rsb	r1, r7, #8
 8006e12:	fa45 f301 	asr.w	r3, r5, r1
 8006e16:	441e      	add	r6, r3
 8006e18:	408b      	lsls	r3, r1
 8006e1a:	1aed      	subs	r5, r5, r3
 8006e1c:	ab0a      	add	r3, sp, #40	@ 0x28
 8006e1e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006e22:	f1c7 0307 	rsb	r3, r7, #7
 8006e26:	411d      	asrs	r5, r3
 8006e28:	2d00      	cmp	r5, #0
 8006e2a:	dd7a      	ble.n	8006f22 <__kernel_rem_pio2f+0x206>
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	4692      	mov	sl, r2
 8006e30:	3601      	adds	r6, #1
 8006e32:	4294      	cmp	r4, r2
 8006e34:	f300 80aa 	bgt.w	8006f8c <__kernel_rem_pio2f+0x270>
 8006e38:	2f00      	cmp	r7, #0
 8006e3a:	dd05      	ble.n	8006e48 <__kernel_rem_pio2f+0x12c>
 8006e3c:	2f01      	cmp	r7, #1
 8006e3e:	f000 80b6 	beq.w	8006fae <__kernel_rem_pio2f+0x292>
 8006e42:	2f02      	cmp	r7, #2
 8006e44:	f000 80bd 	beq.w	8006fc2 <__kernel_rem_pio2f+0x2a6>
 8006e48:	2d02      	cmp	r5, #2
 8006e4a:	d16a      	bne.n	8006f22 <__kernel_rem_pio2f+0x206>
 8006e4c:	4649      	mov	r1, r9
 8006e4e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006e52:	f7f9 fd77 	bl	8000944 <__aeabi_fsub>
 8006e56:	4681      	mov	r9, r0
 8006e58:	f1ba 0f00 	cmp.w	sl, #0
 8006e5c:	d061      	beq.n	8006f22 <__kernel_rem_pio2f+0x206>
 8006e5e:	4639      	mov	r1, r7
 8006e60:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006e64:	f7ff ff0e 	bl	8006c84 <scalbnf>
 8006e68:	4601      	mov	r1, r0
 8006e6a:	4648      	mov	r0, r9
 8006e6c:	f7f9 fd6a 	bl	8000944 <__aeabi_fsub>
 8006e70:	4681      	mov	r9, r0
 8006e72:	e056      	b.n	8006f22 <__kernel_rem_pio2f+0x206>
 8006e74:	2400      	movs	r4, #0
 8006e76:	e768      	b.n	8006d4a <__kernel_rem_pio2f+0x2e>
 8006e78:	eb18 0f05 	cmn.w	r8, r5
 8006e7c:	d407      	bmi.n	8006e8e <__kernel_rem_pio2f+0x172>
 8006e7e:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8006e82:	f7f9 fe15 	bl	8000ab0 <__aeabi_i2f>
 8006e86:	f846 0b04 	str.w	r0, [r6], #4
 8006e8a:	3501      	adds	r5, #1
 8006e8c:	e770      	b.n	8006d70 <__kernel_rem_pio2f+0x54>
 8006e8e:	4658      	mov	r0, fp
 8006e90:	e7f9      	b.n	8006e86 <__kernel_rem_pio2f+0x16a>
 8006e92:	9307      	str	r3, [sp, #28]
 8006e94:	9b05      	ldr	r3, [sp, #20]
 8006e96:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 8006e9a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006e9e:	f7f9 fe5b 	bl	8000b58 <__aeabi_fmul>
 8006ea2:	4601      	mov	r1, r0
 8006ea4:	4630      	mov	r0, r6
 8006ea6:	f7f9 fd4f 	bl	8000948 <__addsf3>
 8006eaa:	4606      	mov	r6, r0
 8006eac:	9b07      	ldr	r3, [sp, #28]
 8006eae:	f108 0801 	add.w	r8, r8, #1
 8006eb2:	9a03      	ldr	r2, [sp, #12]
 8006eb4:	4590      	cmp	r8, r2
 8006eb6:	ddec      	ble.n	8006e92 <__kernel_rem_pio2f+0x176>
 8006eb8:	f84a 6b04 	str.w	r6, [sl], #4
 8006ebc:	f109 0901 	add.w	r9, r9, #1
 8006ec0:	3504      	adds	r5, #4
 8006ec2:	e761      	b.n	8006d88 <__kernel_rem_pio2f+0x6c>
 8006ec4:	46ab      	mov	fp, r5
 8006ec6:	461e      	mov	r6, r3
 8006ec8:	f04f 0800 	mov.w	r8, #0
 8006ecc:	e7f1      	b.n	8006eb2 <__kernel_rem_pio2f+0x196>
 8006ece:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8006ed2:	4658      	mov	r0, fp
 8006ed4:	f7f9 fe40 	bl	8000b58 <__aeabi_fmul>
 8006ed8:	f7fa f81a 	bl	8000f10 <__aeabi_f2iz>
 8006edc:	f7f9 fde8 	bl	8000ab0 <__aeabi_i2f>
 8006ee0:	4649      	mov	r1, r9
 8006ee2:	9009      	str	r0, [sp, #36]	@ 0x24
 8006ee4:	f7f9 fe38 	bl	8000b58 <__aeabi_fmul>
 8006ee8:	4601      	mov	r1, r0
 8006eea:	4658      	mov	r0, fp
 8006eec:	f7f9 fd2a 	bl	8000944 <__aeabi_fsub>
 8006ef0:	f7fa f80e 	bl	8000f10 <__aeabi_f2iz>
 8006ef4:	3d01      	subs	r5, #1
 8006ef6:	f846 0b04 	str.w	r0, [r6], #4
 8006efa:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 8006efe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f00:	f7f9 fd22 	bl	8000948 <__addsf3>
 8006f04:	4683      	mov	fp, r0
 8006f06:	e75a      	b.n	8006dbe <__kernel_rem_pio2f+0xa2>
 8006f08:	d105      	bne.n	8006f16 <__kernel_rem_pio2f+0x1fa>
 8006f0a:	1e63      	subs	r3, r4, #1
 8006f0c:	aa0a      	add	r2, sp, #40	@ 0x28
 8006f0e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8006f12:	11ed      	asrs	r5, r5, #7
 8006f14:	e788      	b.n	8006e28 <__kernel_rem_pio2f+0x10c>
 8006f16:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006f1a:	f7f9 ffcf 	bl	8000ebc <__aeabi_fcmpge>
 8006f1e:	4605      	mov	r5, r0
 8006f20:	bb90      	cbnz	r0, 8006f88 <__kernel_rem_pio2f+0x26c>
 8006f22:	2100      	movs	r1, #0
 8006f24:	4648      	mov	r0, r9
 8006f26:	f7f9 ffab 	bl	8000e80 <__aeabi_fcmpeq>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	f000 8090 	beq.w	8007050 <__kernel_rem_pio2f+0x334>
 8006f30:	2200      	movs	r2, #0
 8006f32:	1e63      	subs	r3, r4, #1
 8006f34:	9901      	ldr	r1, [sp, #4]
 8006f36:	428b      	cmp	r3, r1
 8006f38:	da4a      	bge.n	8006fd0 <__kernel_rem_pio2f+0x2b4>
 8006f3a:	2a00      	cmp	r2, #0
 8006f3c:	d076      	beq.n	800702c <__kernel_rem_pio2f+0x310>
 8006f3e:	3c01      	subs	r4, #1
 8006f40:	ab0a      	add	r3, sp, #40	@ 0x28
 8006f42:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006f46:	3f08      	subs	r7, #8
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d0f8      	beq.n	8006f3e <__kernel_rem_pio2f+0x222>
 8006f4c:	4639      	mov	r1, r7
 8006f4e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006f52:	f7ff fe97 	bl	8006c84 <scalbnf>
 8006f56:	46a2      	mov	sl, r4
 8006f58:	4607      	mov	r7, r0
 8006f5a:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 8006f5e:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 8006f62:	f1ba 0f00 	cmp.w	sl, #0
 8006f66:	f280 80a1 	bge.w	80070ac <__kernel_rem_pio2f+0x390>
 8006f6a:	4627      	mov	r7, r4
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	2f00      	cmp	r7, #0
 8006f70:	f2c0 80cb 	blt.w	800710a <__kernel_rem_pio2f+0x3ee>
 8006f74:	a946      	add	r1, sp, #280	@ 0x118
 8006f76:	4690      	mov	r8, r2
 8006f78:	f04f 0a00 	mov.w	sl, #0
 8006f7c:	4b18      	ldr	r3, [pc, #96]	@ (8006fe0 <__kernel_rem_pio2f+0x2c4>)
 8006f7e:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8006f82:	eba4 0907 	sub.w	r9, r4, r7
 8006f86:	e0b4      	b.n	80070f2 <__kernel_rem_pio2f+0x3d6>
 8006f88:	2502      	movs	r5, #2
 8006f8a:	e74f      	b.n	8006e2c <__kernel_rem_pio2f+0x110>
 8006f8c:	f858 3b04 	ldr.w	r3, [r8], #4
 8006f90:	f1ba 0f00 	cmp.w	sl, #0
 8006f94:	d108      	bne.n	8006fa8 <__kernel_rem_pio2f+0x28c>
 8006f96:	b123      	cbz	r3, 8006fa2 <__kernel_rem_pio2f+0x286>
 8006f98:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8006f9c:	f848 3c04 	str.w	r3, [r8, #-4]
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	469a      	mov	sl, r3
 8006fa4:	3201      	adds	r2, #1
 8006fa6:	e744      	b.n	8006e32 <__kernel_rem_pio2f+0x116>
 8006fa8:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8006fac:	e7f6      	b.n	8006f9c <__kernel_rem_pio2f+0x280>
 8006fae:	1e62      	subs	r2, r4, #1
 8006fb0:	ab0a      	add	r3, sp, #40	@ 0x28
 8006fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fba:	a90a      	add	r1, sp, #40	@ 0x28
 8006fbc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006fc0:	e742      	b.n	8006e48 <__kernel_rem_pio2f+0x12c>
 8006fc2:	1e62      	subs	r2, r4, #1
 8006fc4:	ab0a      	add	r3, sp, #40	@ 0x28
 8006fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fce:	e7f4      	b.n	8006fba <__kernel_rem_pio2f+0x29e>
 8006fd0:	a90a      	add	r1, sp, #40	@ 0x28
 8006fd2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	e7ab      	b.n	8006f34 <__kernel_rem_pio2f+0x218>
 8006fdc:	080077dc 	.word	0x080077dc
 8006fe0:	080077b0 	.word	0x080077b0
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006fea:	2900      	cmp	r1, #0
 8006fec:	d0fa      	beq.n	8006fe4 <__kernel_rem_pio2f+0x2c8>
 8006fee:	9a04      	ldr	r2, [sp, #16]
 8006ff0:	a91e      	add	r1, sp, #120	@ 0x78
 8006ff2:	18a2      	adds	r2, r4, r2
 8006ff4:	1c66      	adds	r6, r4, #1
 8006ff6:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 8006ffa:	441c      	add	r4, r3
 8006ffc:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 8007000:	42b4      	cmp	r4, r6
 8007002:	f6ff aecf 	blt.w	8006da4 <__kernel_rem_pio2f+0x88>
 8007006:	9b07      	ldr	r3, [sp, #28]
 8007008:	46ab      	mov	fp, r5
 800700a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800700e:	f7f9 fd4f 	bl	8000ab0 <__aeabi_i2f>
 8007012:	f04f 0a00 	mov.w	sl, #0
 8007016:	f04f 0800 	mov.w	r8, #0
 800701a:	6028      	str	r0, [r5, #0]
 800701c:	9b03      	ldr	r3, [sp, #12]
 800701e:	459a      	cmp	sl, r3
 8007020:	dd07      	ble.n	8007032 <__kernel_rem_pio2f+0x316>
 8007022:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 8007026:	3504      	adds	r5, #4
 8007028:	3601      	adds	r6, #1
 800702a:	e7e9      	b.n	8007000 <__kernel_rem_pio2f+0x2e4>
 800702c:	2301      	movs	r3, #1
 800702e:	9a08      	ldr	r2, [sp, #32]
 8007030:	e7d9      	b.n	8006fe6 <__kernel_rem_pio2f+0x2ca>
 8007032:	9b05      	ldr	r3, [sp, #20]
 8007034:	f85b 0904 	ldr.w	r0, [fp], #-4
 8007038:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800703c:	f7f9 fd8c 	bl	8000b58 <__aeabi_fmul>
 8007040:	4601      	mov	r1, r0
 8007042:	4640      	mov	r0, r8
 8007044:	f7f9 fc80 	bl	8000948 <__addsf3>
 8007048:	f10a 0a01 	add.w	sl, sl, #1
 800704c:	4680      	mov	r8, r0
 800704e:	e7e5      	b.n	800701c <__kernel_rem_pio2f+0x300>
 8007050:	9b06      	ldr	r3, [sp, #24]
 8007052:	9a02      	ldr	r2, [sp, #8]
 8007054:	4648      	mov	r0, r9
 8007056:	1a99      	subs	r1, r3, r2
 8007058:	f7ff fe14 	bl	8006c84 <scalbnf>
 800705c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8007060:	4680      	mov	r8, r0
 8007062:	f7f9 ff2b 	bl	8000ebc <__aeabi_fcmpge>
 8007066:	b1f8      	cbz	r0, 80070a8 <__kernel_rem_pio2f+0x38c>
 8007068:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800706c:	4640      	mov	r0, r8
 800706e:	f7f9 fd73 	bl	8000b58 <__aeabi_fmul>
 8007072:	f7f9 ff4d 	bl	8000f10 <__aeabi_f2iz>
 8007076:	f7f9 fd1b 	bl	8000ab0 <__aeabi_i2f>
 800707a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800707e:	4681      	mov	r9, r0
 8007080:	f7f9 fd6a 	bl	8000b58 <__aeabi_fmul>
 8007084:	4601      	mov	r1, r0
 8007086:	4640      	mov	r0, r8
 8007088:	f7f9 fc5c 	bl	8000944 <__aeabi_fsub>
 800708c:	f7f9 ff40 	bl	8000f10 <__aeabi_f2iz>
 8007090:	ab0a      	add	r3, sp, #40	@ 0x28
 8007092:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007096:	4648      	mov	r0, r9
 8007098:	3401      	adds	r4, #1
 800709a:	3708      	adds	r7, #8
 800709c:	f7f9 ff38 	bl	8000f10 <__aeabi_f2iz>
 80070a0:	ab0a      	add	r3, sp, #40	@ 0x28
 80070a2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80070a6:	e751      	b.n	8006f4c <__kernel_rem_pio2f+0x230>
 80070a8:	4640      	mov	r0, r8
 80070aa:	e7f7      	b.n	800709c <__kernel_rem_pio2f+0x380>
 80070ac:	ab0a      	add	r3, sp, #40	@ 0x28
 80070ae:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80070b2:	f7f9 fcfd 	bl	8000ab0 <__aeabi_i2f>
 80070b6:	4639      	mov	r1, r7
 80070b8:	f7f9 fd4e 	bl	8000b58 <__aeabi_fmul>
 80070bc:	4649      	mov	r1, r9
 80070be:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 80070c2:	4638      	mov	r0, r7
 80070c4:	f7f9 fd48 	bl	8000b58 <__aeabi_fmul>
 80070c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070cc:	4607      	mov	r7, r0
 80070ce:	e748      	b.n	8006f62 <__kernel_rem_pio2f+0x246>
 80070d0:	f853 0b04 	ldr.w	r0, [r3], #4
 80070d4:	f85b 1b04 	ldr.w	r1, [fp], #4
 80070d8:	9203      	str	r2, [sp, #12]
 80070da:	9302      	str	r3, [sp, #8]
 80070dc:	f7f9 fd3c 	bl	8000b58 <__aeabi_fmul>
 80070e0:	4601      	mov	r1, r0
 80070e2:	4640      	mov	r0, r8
 80070e4:	f7f9 fc30 	bl	8000948 <__addsf3>
 80070e8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80070ec:	4680      	mov	r8, r0
 80070ee:	f10a 0a01 	add.w	sl, sl, #1
 80070f2:	9901      	ldr	r1, [sp, #4]
 80070f4:	458a      	cmp	sl, r1
 80070f6:	dc01      	bgt.n	80070fc <__kernel_rem_pio2f+0x3e0>
 80070f8:	45ca      	cmp	sl, r9
 80070fa:	dde9      	ble.n	80070d0 <__kernel_rem_pio2f+0x3b4>
 80070fc:	ab5a      	add	r3, sp, #360	@ 0x168
 80070fe:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8007102:	f849 8ca0 	str.w	r8, [r9, #-160]
 8007106:	3f01      	subs	r7, #1
 8007108:	e731      	b.n	8006f6e <__kernel_rem_pio2f+0x252>
 800710a:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800710c:	2b02      	cmp	r3, #2
 800710e:	dc07      	bgt.n	8007120 <__kernel_rem_pio2f+0x404>
 8007110:	2b00      	cmp	r3, #0
 8007112:	dc4e      	bgt.n	80071b2 <__kernel_rem_pio2f+0x496>
 8007114:	d02e      	beq.n	8007174 <__kernel_rem_pio2f+0x458>
 8007116:	f006 0007 	and.w	r0, r6, #7
 800711a:	b05b      	add	sp, #364	@ 0x16c
 800711c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007120:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8007122:	2b03      	cmp	r3, #3
 8007124:	d1f7      	bne.n	8007116 <__kernel_rem_pio2f+0x3fa>
 8007126:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 800712a:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800712e:	46b8      	mov	r8, r7
 8007130:	46a2      	mov	sl, r4
 8007132:	f1ba 0f00 	cmp.w	sl, #0
 8007136:	dc49      	bgt.n	80071cc <__kernel_rem_pio2f+0x4b0>
 8007138:	46a1      	mov	r9, r4
 800713a:	f1b9 0f01 	cmp.w	r9, #1
 800713e:	dc60      	bgt.n	8007202 <__kernel_rem_pio2f+0x4e6>
 8007140:	2000      	movs	r0, #0
 8007142:	2c01      	cmp	r4, #1
 8007144:	dc76      	bgt.n	8007234 <__kernel_rem_pio2f+0x518>
 8007146:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8007148:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800714a:	2d00      	cmp	r5, #0
 800714c:	d178      	bne.n	8007240 <__kernel_rem_pio2f+0x524>
 800714e:	9900      	ldr	r1, [sp, #0]
 8007150:	600a      	str	r2, [r1, #0]
 8007152:	460a      	mov	r2, r1
 8007154:	604b      	str	r3, [r1, #4]
 8007156:	6090      	str	r0, [r2, #8]
 8007158:	e7dd      	b.n	8007116 <__kernel_rem_pio2f+0x3fa>
 800715a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800715e:	f7f9 fbf3 	bl	8000948 <__addsf3>
 8007162:	3c01      	subs	r4, #1
 8007164:	2c00      	cmp	r4, #0
 8007166:	daf8      	bge.n	800715a <__kernel_rem_pio2f+0x43e>
 8007168:	b10d      	cbz	r5, 800716e <__kernel_rem_pio2f+0x452>
 800716a:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800716e:	9b00      	ldr	r3, [sp, #0]
 8007170:	6018      	str	r0, [r3, #0]
 8007172:	e7d0      	b.n	8007116 <__kernel_rem_pio2f+0x3fa>
 8007174:	2000      	movs	r0, #0
 8007176:	af32      	add	r7, sp, #200	@ 0xc8
 8007178:	e7f4      	b.n	8007164 <__kernel_rem_pio2f+0x448>
 800717a:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800717e:	f7f9 fbe3 	bl	8000948 <__addsf3>
 8007182:	f108 38ff 	add.w	r8, r8, #4294967295
 8007186:	f1b8 0f00 	cmp.w	r8, #0
 800718a:	daf6      	bge.n	800717a <__kernel_rem_pio2f+0x45e>
 800718c:	b1ad      	cbz	r5, 80071ba <__kernel_rem_pio2f+0x49e>
 800718e:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 8007192:	9a00      	ldr	r2, [sp, #0]
 8007194:	4601      	mov	r1, r0
 8007196:	6013      	str	r3, [r2, #0]
 8007198:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800719a:	f7f9 fbd3 	bl	8000944 <__aeabi_fsub>
 800719e:	f04f 0801 	mov.w	r8, #1
 80071a2:	4544      	cmp	r4, r8
 80071a4:	da0b      	bge.n	80071be <__kernel_rem_pio2f+0x4a2>
 80071a6:	b10d      	cbz	r5, 80071ac <__kernel_rem_pio2f+0x490>
 80071a8:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80071ac:	9b00      	ldr	r3, [sp, #0]
 80071ae:	6058      	str	r0, [r3, #4]
 80071b0:	e7b1      	b.n	8007116 <__kernel_rem_pio2f+0x3fa>
 80071b2:	46a0      	mov	r8, r4
 80071b4:	2000      	movs	r0, #0
 80071b6:	af32      	add	r7, sp, #200	@ 0xc8
 80071b8:	e7e5      	b.n	8007186 <__kernel_rem_pio2f+0x46a>
 80071ba:	4603      	mov	r3, r0
 80071bc:	e7e9      	b.n	8007192 <__kernel_rem_pio2f+0x476>
 80071be:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80071c2:	f7f9 fbc1 	bl	8000948 <__addsf3>
 80071c6:	f108 0801 	add.w	r8, r8, #1
 80071ca:	e7ea      	b.n	80071a2 <__kernel_rem_pio2f+0x486>
 80071cc:	f8d8 3000 	ldr.w	r3, [r8]
 80071d0:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80071d4:	4619      	mov	r1, r3
 80071d6:	4610      	mov	r0, r2
 80071d8:	9302      	str	r3, [sp, #8]
 80071da:	9201      	str	r2, [sp, #4]
 80071dc:	f7f9 fbb4 	bl	8000948 <__addsf3>
 80071e0:	9a01      	ldr	r2, [sp, #4]
 80071e2:	4601      	mov	r1, r0
 80071e4:	4681      	mov	r9, r0
 80071e6:	4610      	mov	r0, r2
 80071e8:	f7f9 fbac 	bl	8000944 <__aeabi_fsub>
 80071ec:	9b02      	ldr	r3, [sp, #8]
 80071ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071f2:	4619      	mov	r1, r3
 80071f4:	f7f9 fba8 	bl	8000948 <__addsf3>
 80071f8:	f848 0904 	str.w	r0, [r8], #-4
 80071fc:	f8c8 9000 	str.w	r9, [r8]
 8007200:	e797      	b.n	8007132 <__kernel_rem_pio2f+0x416>
 8007202:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8007206:	f8d7 a000 	ldr.w	sl, [r7]
 800720a:	4618      	mov	r0, r3
 800720c:	4651      	mov	r1, sl
 800720e:	9301      	str	r3, [sp, #4]
 8007210:	f7f9 fb9a 	bl	8000948 <__addsf3>
 8007214:	9b01      	ldr	r3, [sp, #4]
 8007216:	4601      	mov	r1, r0
 8007218:	4680      	mov	r8, r0
 800721a:	4618      	mov	r0, r3
 800721c:	f7f9 fb92 	bl	8000944 <__aeabi_fsub>
 8007220:	4651      	mov	r1, sl
 8007222:	f7f9 fb91 	bl	8000948 <__addsf3>
 8007226:	f847 0904 	str.w	r0, [r7], #-4
 800722a:	f109 39ff 	add.w	r9, r9, #4294967295
 800722e:	f8c7 8000 	str.w	r8, [r7]
 8007232:	e782      	b.n	800713a <__kernel_rem_pio2f+0x41e>
 8007234:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8007238:	f7f9 fb86 	bl	8000948 <__addsf3>
 800723c:	3c01      	subs	r4, #1
 800723e:	e780      	b.n	8007142 <__kernel_rem_pio2f+0x426>
 8007240:	9900      	ldr	r1, [sp, #0]
 8007242:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8007246:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800724a:	600a      	str	r2, [r1, #0]
 800724c:	604b      	str	r3, [r1, #4]
 800724e:	460a      	mov	r2, r1
 8007250:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8007254:	e77f      	b.n	8007156 <__kernel_rem_pio2f+0x43a>
 8007256:	bf00      	nop

08007258 <floorf>:
 8007258:	b570      	push	{r4, r5, r6, lr}
 800725a:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800725e:	3d7f      	subs	r5, #127	@ 0x7f
 8007260:	2d16      	cmp	r5, #22
 8007262:	4601      	mov	r1, r0
 8007264:	4604      	mov	r4, r0
 8007266:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800726a:	dc26      	bgt.n	80072ba <floorf+0x62>
 800726c:	2d00      	cmp	r5, #0
 800726e:	da0f      	bge.n	8007290 <floorf+0x38>
 8007270:	4917      	ldr	r1, [pc, #92]	@ (80072d0 <floorf+0x78>)
 8007272:	f7f9 fb69 	bl	8000948 <__addsf3>
 8007276:	2100      	movs	r1, #0
 8007278:	f7f9 fe2a 	bl	8000ed0 <__aeabi_fcmpgt>
 800727c:	b130      	cbz	r0, 800728c <floorf+0x34>
 800727e:	2c00      	cmp	r4, #0
 8007280:	da23      	bge.n	80072ca <floorf+0x72>
 8007282:	2e00      	cmp	r6, #0
 8007284:	4c13      	ldr	r4, [pc, #76]	@ (80072d4 <floorf+0x7c>)
 8007286:	bf08      	it	eq
 8007288:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800728c:	4621      	mov	r1, r4
 800728e:	e01a      	b.n	80072c6 <floorf+0x6e>
 8007290:	4e11      	ldr	r6, [pc, #68]	@ (80072d8 <floorf+0x80>)
 8007292:	412e      	asrs	r6, r5
 8007294:	4230      	tst	r0, r6
 8007296:	d016      	beq.n	80072c6 <floorf+0x6e>
 8007298:	490d      	ldr	r1, [pc, #52]	@ (80072d0 <floorf+0x78>)
 800729a:	f7f9 fb55 	bl	8000948 <__addsf3>
 800729e:	2100      	movs	r1, #0
 80072a0:	f7f9 fe16 	bl	8000ed0 <__aeabi_fcmpgt>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d0f1      	beq.n	800728c <floorf+0x34>
 80072a8:	2c00      	cmp	r4, #0
 80072aa:	bfbe      	ittt	lt
 80072ac:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 80072b0:	412b      	asrlt	r3, r5
 80072b2:	18e4      	addlt	r4, r4, r3
 80072b4:	ea24 0406 	bic.w	r4, r4, r6
 80072b8:	e7e8      	b.n	800728c <floorf+0x34>
 80072ba:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 80072be:	d302      	bcc.n	80072c6 <floorf+0x6e>
 80072c0:	f7f9 fb42 	bl	8000948 <__addsf3>
 80072c4:	4601      	mov	r1, r0
 80072c6:	4608      	mov	r0, r1
 80072c8:	bd70      	pop	{r4, r5, r6, pc}
 80072ca:	2400      	movs	r4, #0
 80072cc:	e7de      	b.n	800728c <floorf+0x34>
 80072ce:	bf00      	nop
 80072d0:	7149f2ca 	.word	0x7149f2ca
 80072d4:	bf800000 	.word	0xbf800000
 80072d8:	007fffff 	.word	0x007fffff

080072dc <_init>:
 80072dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072de:	bf00      	nop
 80072e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072e2:	bc08      	pop	{r3}
 80072e4:	469e      	mov	lr, r3
 80072e6:	4770      	bx	lr

080072e8 <_fini>:
 80072e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ea:	bf00      	nop
 80072ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ee:	bc08      	pop	{r3}
 80072f0:	469e      	mov	lr, r3
 80072f2:	4770      	bx	lr
