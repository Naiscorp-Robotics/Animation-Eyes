
LCD_TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002798  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d90  080028a4  080028a4  000038a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003634  08003634  00005030  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003634  08003634  00005030  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003634  08003634  00005030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003634  08003634  00004634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003638  08003638  00004638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  0800363c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000030  0800366c  00005030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  0800366c  000050a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000068e7  00000000  00000000  00005059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001639  00000000  00000000  0000b940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  0000cf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000054e  00000000  00000000  0000d6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e14  00000000  00000000  0000dc06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ad6  00000000  00000000  00024a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081979  00000000  00000000  0002d4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aee69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b8c  00000000  00000000  000aeeac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000b0a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	0800288c 	.word	0x0800288c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	0800288c 	.word	0x0800288c

0800014c <LCD_Paint_DrawPixel>:
#include <stdlib.h>

#define _swap_int16_t(a, b) { int16_t t = a; a = b; b = t; }
#define min(a, b) (((a) < (b)) ? (a) : (b))

void LCD_Paint_DrawPixel(LCD128_HandleTypeDef* lcd, int16_t x, int16_t y, uint16_t color) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	4608      	mov	r0, r1
 8000156:	4611      	mov	r1, r2
 8000158:	461a      	mov	r2, r3
 800015a:	4603      	mov	r3, r0
 800015c:	817b      	strh	r3, [r7, #10]
 800015e:	460b      	mov	r3, r1
 8000160:	813b      	strh	r3, [r7, #8]
 8000162:	4613      	mov	r3, r2
 8000164:	80fb      	strh	r3, [r7, #6]
    LCD128_DrawPixel(lcd, x, y, color);
 8000166:	8979      	ldrh	r1, [r7, #10]
 8000168:	893a      	ldrh	r2, [r7, #8]
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	68f8      	ldr	r0, [r7, #12]
 800016e:	f000 fed8 	bl	8000f22 <LCD128_DrawPixel>
}
 8000172:	bf00      	nop
 8000174:	3710      	adds	r7, #16
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}

0800017a <LCD_Paint_WritePixel>:

void LCD_Paint_FillRect(LCD128_HandleTypeDef* lcd, int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
    LCD128_FillRectangle(lcd, x, y, w, h, color);
}

void LCD_Paint_WritePixel(LCD128_HandleTypeDef* lcd, int16_t x, int16_t y, uint16_t color) {
 800017a:	b580      	push	{r7, lr}
 800017c:	b084      	sub	sp, #16
 800017e:	af00      	add	r7, sp, #0
 8000180:	60f8      	str	r0, [r7, #12]
 8000182:	4608      	mov	r0, r1
 8000184:	4611      	mov	r1, r2
 8000186:	461a      	mov	r2, r3
 8000188:	4603      	mov	r3, r0
 800018a:	817b      	strh	r3, [r7, #10]
 800018c:	460b      	mov	r3, r1
 800018e:	813b      	strh	r3, [r7, #8]
 8000190:	4613      	mov	r3, r2
 8000192:	80fb      	strh	r3, [r7, #6]
    LCD_Paint_DrawPixel(lcd, x, y, color);
 8000194:	88fb      	ldrh	r3, [r7, #6]
 8000196:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800019a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800019e:	68f8      	ldr	r0, [r7, #12]
 80001a0:	f7ff ffd4 	bl	800014c <LCD_Paint_DrawPixel>
}
 80001a4:	bf00      	nop
 80001a6:	3710      	adds	r7, #16
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}

080001ac <LCD_Paint_WriteLine>:

void LCD_Paint_WriteLine(LCD128_HandleTypeDef* lcd, int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b08a      	sub	sp, #40	@ 0x28
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	60f8      	str	r0, [r7, #12]
 80001b4:	4608      	mov	r0, r1
 80001b6:	4611      	mov	r1, r2
 80001b8:	461a      	mov	r2, r3
 80001ba:	4603      	mov	r3, r0
 80001bc:	817b      	strh	r3, [r7, #10]
 80001be:	460b      	mov	r3, r1
 80001c0:	813b      	strh	r3, [r7, #8]
 80001c2:	4613      	mov	r3, r2
 80001c4:	80fb      	strh	r3, [r7, #6]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80001c6:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 80001ca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80001ce:	1ad3      	subs	r3, r2, r3
 80001d0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80001d4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80001d8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80001dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80001e0:	1acb      	subs	r3, r1, r3
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	bfb8      	it	lt
 80001e6:	425b      	neglt	r3, r3
 80001e8:	429a      	cmp	r2, r3
 80001ea:	bfcc      	ite	gt
 80001ec:	2301      	movgt	r3, #1
 80001ee:	2300      	movle	r3, #0
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
    if (steep) {
 80001f4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d00b      	beq.n	8000214 <LCD_Paint_WriteLine+0x68>
        _swap_int16_t(x0, y0);
 80001fc:	897b      	ldrh	r3, [r7, #10]
 80001fe:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000200:	893b      	ldrh	r3, [r7, #8]
 8000202:	817b      	strh	r3, [r7, #10]
 8000204:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000206:	813b      	strh	r3, [r7, #8]
        _swap_int16_t(x1, y1);
 8000208:	88fb      	ldrh	r3, [r7, #6]
 800020a:	843b      	strh	r3, [r7, #32]
 800020c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800020e:	80fb      	strh	r3, [r7, #6]
 8000210:	8c3b      	ldrh	r3, [r7, #32]
 8000212:	863b      	strh	r3, [r7, #48]	@ 0x30
    }
    if (x0 > x1) {
 8000214:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000218:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800021c:	429a      	cmp	r2, r3
 800021e:	dd0b      	ble.n	8000238 <LCD_Paint_WriteLine+0x8c>
        _swap_int16_t(x0, x1);
 8000220:	897b      	ldrh	r3, [r7, #10]
 8000222:	83fb      	strh	r3, [r7, #30]
 8000224:	88fb      	ldrh	r3, [r7, #6]
 8000226:	817b      	strh	r3, [r7, #10]
 8000228:	8bfb      	ldrh	r3, [r7, #30]
 800022a:	80fb      	strh	r3, [r7, #6]
        _swap_int16_t(y0, y1);
 800022c:	893b      	ldrh	r3, [r7, #8]
 800022e:	83bb      	strh	r3, [r7, #28]
 8000230:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000232:	813b      	strh	r3, [r7, #8]
 8000234:	8bbb      	ldrh	r3, [r7, #28]
 8000236:	863b      	strh	r3, [r7, #48]	@ 0x30
    }
    int16_t dx = x1 - x0;
 8000238:	88fa      	ldrh	r2, [r7, #6]
 800023a:	897b      	ldrh	r3, [r7, #10]
 800023c:	1ad3      	subs	r3, r2, r3
 800023e:	b29b      	uxth	r3, r3
 8000240:	837b      	strh	r3, [r7, #26]
    int16_t dy = abs(y1 - y0);
 8000242:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 8000246:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800024a:	1ad3      	subs	r3, r2, r3
 800024c:	2b00      	cmp	r3, #0
 800024e:	bfb8      	it	lt
 8000250:	425b      	neglt	r3, r3
 8000252:	833b      	strh	r3, [r7, #24]
    int16_t err = dx / 2;
 8000254:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000258:	0fda      	lsrs	r2, r3, #31
 800025a:	4413      	add	r3, r2
 800025c:	105b      	asrs	r3, r3, #1
 800025e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    int16_t ystep = (y0 < y1) ? 1 : -1;
 8000260:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000264:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8000268:	429a      	cmp	r2, r3
 800026a:	da01      	bge.n	8000270 <LCD_Paint_WriteLine+0xc4>
 800026c:	2301      	movs	r3, #1
 800026e:	e001      	b.n	8000274 <LCD_Paint_WriteLine+0xc8>
 8000270:	f04f 33ff 	mov.w	r3, #4294967295
 8000274:	82fb      	strh	r3, [r7, #22]
    for (; x0 <= x1; x0++) {
 8000276:	e02d      	b.n	80002d4 <LCD_Paint_WriteLine+0x128>
        if (steep) {
 8000278:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800027c:	2b00      	cmp	r3, #0
 800027e:	d008      	beq.n	8000292 <LCD_Paint_WriteLine+0xe6>
            LCD_Paint_WritePixel(lcd, y0, x0, color);
 8000280:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000282:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000286:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 800028a:	68f8      	ldr	r0, [r7, #12]
 800028c:	f7ff ff75 	bl	800017a <LCD_Paint_WritePixel>
 8000290:	e007      	b.n	80002a2 <LCD_Paint_WriteLine+0xf6>
        } else {
            LCD_Paint_WritePixel(lcd, x0, y0, color);
 8000292:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000294:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000298:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800029c:	68f8      	ldr	r0, [r7, #12]
 800029e:	f7ff ff6c 	bl	800017a <LCD_Paint_WritePixel>
        }
        err -= dy;
 80002a2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80002a4:	8b3b      	ldrh	r3, [r7, #24]
 80002a6:	1ad3      	subs	r3, r2, r3
 80002a8:	b29b      	uxth	r3, r3
 80002aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
        if (err < 0) {
 80002ac:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	da09      	bge.n	80002c8 <LCD_Paint_WriteLine+0x11c>
            y0 += ystep;
 80002b4:	893a      	ldrh	r2, [r7, #8]
 80002b6:	8afb      	ldrh	r3, [r7, #22]
 80002b8:	4413      	add	r3, r2
 80002ba:	b29b      	uxth	r3, r3
 80002bc:	813b      	strh	r3, [r7, #8]
            err += dx;
 80002be:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80002c0:	8b7b      	ldrh	r3, [r7, #26]
 80002c2:	4413      	add	r3, r2
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    for (; x0 <= x1; x0++) {
 80002c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80002cc:	b29b      	uxth	r3, r3
 80002ce:	3301      	adds	r3, #1
 80002d0:	b29b      	uxth	r3, r3
 80002d2:	817b      	strh	r3, [r7, #10]
 80002d4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80002d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80002dc:	429a      	cmp	r2, r3
 80002de:	ddcb      	ble.n	8000278 <LCD_Paint_WriteLine+0xcc>
        }
    }
}
 80002e0:	bf00      	nop
 80002e2:	bf00      	nop
 80002e4:	3728      	adds	r7, #40	@ 0x28
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}

080002ea <LCD_Paint_DrawFastVLine>:

void LCD_Paint_DrawFastVLine(LCD128_HandleTypeDef* lcd, int16_t x, int16_t y, int16_t h, uint16_t color) {
 80002ea:	b590      	push	{r4, r7, lr}
 80002ec:	b087      	sub	sp, #28
 80002ee:	af02      	add	r7, sp, #8
 80002f0:	60f8      	str	r0, [r7, #12]
 80002f2:	4608      	mov	r0, r1
 80002f4:	4611      	mov	r1, r2
 80002f6:	461a      	mov	r2, r3
 80002f8:	4603      	mov	r3, r0
 80002fa:	817b      	strh	r3, [r7, #10]
 80002fc:	460b      	mov	r3, r1
 80002fe:	813b      	strh	r3, [r7, #8]
 8000300:	4613      	mov	r3, r2
 8000302:	80fb      	strh	r3, [r7, #6]
    LCD_Paint_WriteLine(lcd, x, y, x, y + h - 1, color);
 8000304:	893a      	ldrh	r2, [r7, #8]
 8000306:	88fb      	ldrh	r3, [r7, #6]
 8000308:	4413      	add	r3, r2
 800030a:	b29b      	uxth	r3, r3
 800030c:	3b01      	subs	r3, #1
 800030e:	b29b      	uxth	r3, r3
 8000310:	b21b      	sxth	r3, r3
 8000312:	f9b7 400a 	ldrsh.w	r4, [r7, #10]
 8000316:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 800031a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800031e:	8c3a      	ldrh	r2, [r7, #32]
 8000320:	9201      	str	r2, [sp, #4]
 8000322:	9300      	str	r3, [sp, #0]
 8000324:	4623      	mov	r3, r4
 8000326:	4602      	mov	r2, r0
 8000328:	68f8      	ldr	r0, [r7, #12]
 800032a:	f7ff ff3f 	bl	80001ac <LCD_Paint_WriteLine>
}
 800032e:	bf00      	nop
 8000330:	3714      	adds	r7, #20
 8000332:	46bd      	mov	sp, r7
 8000334:	bd90      	pop	{r4, r7, pc}

08000336 <LCD_Paint_DrawFastHLine>:
void LCD_Paint_DrawFastHLine(LCD128_HandleTypeDef* lcd, int16_t x, int16_t y, int16_t w, uint16_t color) {
 8000336:	b580      	push	{r7, lr}
 8000338:	b086      	sub	sp, #24
 800033a:	af02      	add	r7, sp, #8
 800033c:	60f8      	str	r0, [r7, #12]
 800033e:	4608      	mov	r0, r1
 8000340:	4611      	mov	r1, r2
 8000342:	461a      	mov	r2, r3
 8000344:	4603      	mov	r3, r0
 8000346:	817b      	strh	r3, [r7, #10]
 8000348:	460b      	mov	r3, r1
 800034a:	813b      	strh	r3, [r7, #8]
 800034c:	4613      	mov	r3, r2
 800034e:	80fb      	strh	r3, [r7, #6]
    LCD_Paint_WriteLine(lcd, x, y, x + w - 1, y, color);
 8000350:	897a      	ldrh	r2, [r7, #10]
 8000352:	88fb      	ldrh	r3, [r7, #6]
 8000354:	4413      	add	r3, r2
 8000356:	b29b      	uxth	r3, r3
 8000358:	3b01      	subs	r3, #1
 800035a:	b29b      	uxth	r3, r3
 800035c:	b218      	sxth	r0, r3
 800035e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000362:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000366:	8b3b      	ldrh	r3, [r7, #24]
 8000368:	9301      	str	r3, [sp, #4]
 800036a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	4603      	mov	r3, r0
 8000372:	68f8      	ldr	r0, [r7, #12]
 8000374:	f7ff ff1a 	bl	80001ac <LCD_Paint_WriteLine>
}
 8000378:	bf00      	nop
 800037a:	3710      	adds	r7, #16
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <LCD_Paint_DrawLine>:

void LCD_Paint_DrawLine(LCD128_HandleTypeDef* lcd, int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af02      	add	r7, sp, #8
 8000386:	60f8      	str	r0, [r7, #12]
 8000388:	4608      	mov	r0, r1
 800038a:	4611      	mov	r1, r2
 800038c:	461a      	mov	r2, r3
 800038e:	4603      	mov	r3, r0
 8000390:	817b      	strh	r3, [r7, #10]
 8000392:	460b      	mov	r3, r1
 8000394:	813b      	strh	r3, [r7, #8]
 8000396:	4613      	mov	r3, r2
 8000398:	80fb      	strh	r3, [r7, #6]
    if (x0 == x1) {
 800039a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800039e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003a2:	429a      	cmp	r2, r3
 80003a4:	d11d      	bne.n	80003e2 <LCD_Paint_DrawLine+0x62>
        if (y0 > y1) _swap_int16_t(y0, y1);
 80003a6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80003aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	dd05      	ble.n	80003be <LCD_Paint_DrawLine+0x3e>
 80003b2:	893b      	ldrh	r3, [r7, #8]
 80003b4:	82bb      	strh	r3, [r7, #20]
 80003b6:	8c3b      	ldrh	r3, [r7, #32]
 80003b8:	813b      	strh	r3, [r7, #8]
 80003ba:	8abb      	ldrh	r3, [r7, #20]
 80003bc:	843b      	strh	r3, [r7, #32]
        LCD_Paint_DrawFastVLine(lcd, x0, y0, y1 - y0 + 1, color);
 80003be:	8c3a      	ldrh	r2, [r7, #32]
 80003c0:	893b      	ldrh	r3, [r7, #8]
 80003c2:	1ad3      	subs	r3, r2, r3
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	3301      	adds	r3, #1
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	b218      	sxth	r0, r3
 80003cc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80003d0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80003d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80003d6:	9300      	str	r3, [sp, #0]
 80003d8:	4603      	mov	r3, r0
 80003da:	68f8      	ldr	r0, [r7, #12]
 80003dc:	f7ff ff85 	bl	80002ea <LCD_Paint_DrawFastVLine>
        if (x0 > x1) _swap_int16_t(x0, x1);
        LCD_Paint_DrawFastHLine(lcd, x0, y0, x1 - x0 + 1, color);
    } else {
        LCD_Paint_WriteLine(lcd, x0, y0, x1, y1, color);
    }
}
 80003e0:	e032      	b.n	8000448 <LCD_Paint_DrawLine+0xc8>
    } else if (y0 == y1) {
 80003e2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80003e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d11d      	bne.n	800042a <LCD_Paint_DrawLine+0xaa>
        if (x0 > x1) _swap_int16_t(x0, x1);
 80003ee:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80003f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003f6:	429a      	cmp	r2, r3
 80003f8:	dd05      	ble.n	8000406 <LCD_Paint_DrawLine+0x86>
 80003fa:	897b      	ldrh	r3, [r7, #10]
 80003fc:	82fb      	strh	r3, [r7, #22]
 80003fe:	88fb      	ldrh	r3, [r7, #6]
 8000400:	817b      	strh	r3, [r7, #10]
 8000402:	8afb      	ldrh	r3, [r7, #22]
 8000404:	80fb      	strh	r3, [r7, #6]
        LCD_Paint_DrawFastHLine(lcd, x0, y0, x1 - x0 + 1, color);
 8000406:	88fa      	ldrh	r2, [r7, #6]
 8000408:	897b      	ldrh	r3, [r7, #10]
 800040a:	1ad3      	subs	r3, r2, r3
 800040c:	b29b      	uxth	r3, r3
 800040e:	3301      	adds	r3, #1
 8000410:	b29b      	uxth	r3, r3
 8000412:	b218      	sxth	r0, r3
 8000414:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000418:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800041c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	4603      	mov	r3, r0
 8000422:	68f8      	ldr	r0, [r7, #12]
 8000424:	f7ff ff87 	bl	8000336 <LCD_Paint_DrawFastHLine>
}
 8000428:	e00e      	b.n	8000448 <LCD_Paint_DrawLine+0xc8>
        LCD_Paint_WriteLine(lcd, x0, y0, x1, y1, color);
 800042a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800042e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000432:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000436:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000438:	9301      	str	r3, [sp, #4]
 800043a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	4603      	mov	r3, r0
 8000442:	68f8      	ldr	r0, [r7, #12]
 8000444:	f7ff feb2 	bl	80001ac <LCD_Paint_WriteLine>
}
 8000448:	bf00      	nop
 800044a:	3718      	adds	r7, #24
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}

08000450 <LCD_Paint_DrawCircle>:

void LCD_Paint_DrawCircle(LCD128_HandleTypeDef* lcd, int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b088      	sub	sp, #32
 8000454:	af00      	add	r7, sp, #0
 8000456:	60f8      	str	r0, [r7, #12]
 8000458:	4608      	mov	r0, r1
 800045a:	4611      	mov	r1, r2
 800045c:	461a      	mov	r2, r3
 800045e:	4603      	mov	r3, r0
 8000460:	817b      	strh	r3, [r7, #10]
 8000462:	460b      	mov	r3, r1
 8000464:	813b      	strh	r3, [r7, #8]
 8000466:	4613      	mov	r3, r2
 8000468:	80fb      	strh	r3, [r7, #6]
    int16_t f = 1 - r;
 800046a:	88fb      	ldrh	r3, [r7, #6]
 800046c:	f1c3 0301 	rsb	r3, r3, #1
 8000470:	b29b      	uxth	r3, r3
 8000472:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8000474:	2301      	movs	r3, #1
 8000476:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8000478:	88fb      	ldrh	r3, [r7, #6]
 800047a:	461a      	mov	r2, r3
 800047c:	03d2      	lsls	r2, r2, #15
 800047e:	1ad3      	subs	r3, r2, r3
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	b29b      	uxth	r3, r3
 8000484:	837b      	strh	r3, [r7, #26]
    int16_t x = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	833b      	strh	r3, [r7, #24]
    int16_t y = r;
 800048a:	88fb      	ldrh	r3, [r7, #6]
 800048c:	82fb      	strh	r3, [r7, #22]
    LCD_Paint_WritePixel(lcd, x0, y0 + r, color);
 800048e:	893a      	ldrh	r2, [r7, #8]
 8000490:	88fb      	ldrh	r3, [r7, #6]
 8000492:	4413      	add	r3, r2
 8000494:	b29b      	uxth	r3, r3
 8000496:	b21a      	sxth	r2, r3
 8000498:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800049a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800049e:	68f8      	ldr	r0, [r7, #12]
 80004a0:	f7ff fe6b 	bl	800017a <LCD_Paint_WritePixel>
    LCD_Paint_WritePixel(lcd, x0, y0 - r, color);
 80004a4:	893a      	ldrh	r2, [r7, #8]
 80004a6:	88fb      	ldrh	r3, [r7, #6]
 80004a8:	1ad3      	subs	r3, r2, r3
 80004aa:	b29b      	uxth	r3, r3
 80004ac:	b21a      	sxth	r2, r3
 80004ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80004b0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80004b4:	68f8      	ldr	r0, [r7, #12]
 80004b6:	f7ff fe60 	bl	800017a <LCD_Paint_WritePixel>
    LCD_Paint_WritePixel(lcd, x0 + r, y0, color);
 80004ba:	897a      	ldrh	r2, [r7, #10]
 80004bc:	88fb      	ldrh	r3, [r7, #6]
 80004be:	4413      	add	r3, r2
 80004c0:	b29b      	uxth	r3, r3
 80004c2:	b219      	sxth	r1, r3
 80004c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80004c6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004ca:	68f8      	ldr	r0, [r7, #12]
 80004cc:	f7ff fe55 	bl	800017a <LCD_Paint_WritePixel>
    LCD_Paint_WritePixel(lcd, x0 - r, y0, color);
 80004d0:	897a      	ldrh	r2, [r7, #10]
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	1ad3      	subs	r3, r2, r3
 80004d6:	b29b      	uxth	r3, r3
 80004d8:	b219      	sxth	r1, r3
 80004da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80004dc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004e0:	68f8      	ldr	r0, [r7, #12]
 80004e2:	f7ff fe4a 	bl	800017a <LCD_Paint_WritePixel>
    while (x < y) {
 80004e6:	e091      	b.n	800060c <LCD_Paint_DrawCircle+0x1bc>
        if (f >= 0) {
 80004e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	db0e      	blt.n	800050e <LCD_Paint_DrawCircle+0xbe>
            y--;
 80004f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	3b01      	subs	r3, #1
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80004fc:	8b7b      	ldrh	r3, [r7, #26]
 80004fe:	3302      	adds	r3, #2
 8000500:	b29b      	uxth	r3, r3
 8000502:	837b      	strh	r3, [r7, #26]
            f += ddF_y;
 8000504:	8bfa      	ldrh	r2, [r7, #30]
 8000506:	8b7b      	ldrh	r3, [r7, #26]
 8000508:	4413      	add	r3, r2
 800050a:	b29b      	uxth	r3, r3
 800050c:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 800050e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000512:	b29b      	uxth	r3, r3
 8000514:	3301      	adds	r3, #1
 8000516:	b29b      	uxth	r3, r3
 8000518:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 800051a:	8bbb      	ldrh	r3, [r7, #28]
 800051c:	3302      	adds	r3, #2
 800051e:	b29b      	uxth	r3, r3
 8000520:	83bb      	strh	r3, [r7, #28]
        f += ddF_x;
 8000522:	8bfa      	ldrh	r2, [r7, #30]
 8000524:	8bbb      	ldrh	r3, [r7, #28]
 8000526:	4413      	add	r3, r2
 8000528:	b29b      	uxth	r3, r3
 800052a:	83fb      	strh	r3, [r7, #30]
        LCD_Paint_WritePixel(lcd, x0 + x, y0 + y, color);
 800052c:	897a      	ldrh	r2, [r7, #10]
 800052e:	8b3b      	ldrh	r3, [r7, #24]
 8000530:	4413      	add	r3, r2
 8000532:	b29b      	uxth	r3, r3
 8000534:	b219      	sxth	r1, r3
 8000536:	893a      	ldrh	r2, [r7, #8]
 8000538:	8afb      	ldrh	r3, [r7, #22]
 800053a:	4413      	add	r3, r2
 800053c:	b29b      	uxth	r3, r3
 800053e:	b21a      	sxth	r2, r3
 8000540:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000542:	68f8      	ldr	r0, [r7, #12]
 8000544:	f7ff fe19 	bl	800017a <LCD_Paint_WritePixel>
        LCD_Paint_WritePixel(lcd, x0 - x, y0 + y, color);
 8000548:	897a      	ldrh	r2, [r7, #10]
 800054a:	8b3b      	ldrh	r3, [r7, #24]
 800054c:	1ad3      	subs	r3, r2, r3
 800054e:	b29b      	uxth	r3, r3
 8000550:	b219      	sxth	r1, r3
 8000552:	893a      	ldrh	r2, [r7, #8]
 8000554:	8afb      	ldrh	r3, [r7, #22]
 8000556:	4413      	add	r3, r2
 8000558:	b29b      	uxth	r3, r3
 800055a:	b21a      	sxth	r2, r3
 800055c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800055e:	68f8      	ldr	r0, [r7, #12]
 8000560:	f7ff fe0b 	bl	800017a <LCD_Paint_WritePixel>
        LCD_Paint_WritePixel(lcd, x0 + x, y0 - y, color);
 8000564:	897a      	ldrh	r2, [r7, #10]
 8000566:	8b3b      	ldrh	r3, [r7, #24]
 8000568:	4413      	add	r3, r2
 800056a:	b29b      	uxth	r3, r3
 800056c:	b219      	sxth	r1, r3
 800056e:	893a      	ldrh	r2, [r7, #8]
 8000570:	8afb      	ldrh	r3, [r7, #22]
 8000572:	1ad3      	subs	r3, r2, r3
 8000574:	b29b      	uxth	r3, r3
 8000576:	b21a      	sxth	r2, r3
 8000578:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800057a:	68f8      	ldr	r0, [r7, #12]
 800057c:	f7ff fdfd 	bl	800017a <LCD_Paint_WritePixel>
        LCD_Paint_WritePixel(lcd, x0 - x, y0 - y, color);
 8000580:	897a      	ldrh	r2, [r7, #10]
 8000582:	8b3b      	ldrh	r3, [r7, #24]
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	b29b      	uxth	r3, r3
 8000588:	b219      	sxth	r1, r3
 800058a:	893a      	ldrh	r2, [r7, #8]
 800058c:	8afb      	ldrh	r3, [r7, #22]
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	b29b      	uxth	r3, r3
 8000592:	b21a      	sxth	r2, r3
 8000594:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000596:	68f8      	ldr	r0, [r7, #12]
 8000598:	f7ff fdef 	bl	800017a <LCD_Paint_WritePixel>
        LCD_Paint_WritePixel(lcd, x0 + y, y0 + x, color);
 800059c:	897a      	ldrh	r2, [r7, #10]
 800059e:	8afb      	ldrh	r3, [r7, #22]
 80005a0:	4413      	add	r3, r2
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	b219      	sxth	r1, r3
 80005a6:	893a      	ldrh	r2, [r7, #8]
 80005a8:	8b3b      	ldrh	r3, [r7, #24]
 80005aa:	4413      	add	r3, r2
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	b21a      	sxth	r2, r3
 80005b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80005b2:	68f8      	ldr	r0, [r7, #12]
 80005b4:	f7ff fde1 	bl	800017a <LCD_Paint_WritePixel>
        LCD_Paint_WritePixel(lcd, x0 - y, y0 + x, color);
 80005b8:	897a      	ldrh	r2, [r7, #10]
 80005ba:	8afb      	ldrh	r3, [r7, #22]
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	b29b      	uxth	r3, r3
 80005c0:	b219      	sxth	r1, r3
 80005c2:	893a      	ldrh	r2, [r7, #8]
 80005c4:	8b3b      	ldrh	r3, [r7, #24]
 80005c6:	4413      	add	r3, r2
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	b21a      	sxth	r2, r3
 80005cc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80005ce:	68f8      	ldr	r0, [r7, #12]
 80005d0:	f7ff fdd3 	bl	800017a <LCD_Paint_WritePixel>
        LCD_Paint_WritePixel(lcd, x0 + y, y0 - x, color);
 80005d4:	897a      	ldrh	r2, [r7, #10]
 80005d6:	8afb      	ldrh	r3, [r7, #22]
 80005d8:	4413      	add	r3, r2
 80005da:	b29b      	uxth	r3, r3
 80005dc:	b219      	sxth	r1, r3
 80005de:	893a      	ldrh	r2, [r7, #8]
 80005e0:	8b3b      	ldrh	r3, [r7, #24]
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	b21a      	sxth	r2, r3
 80005e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80005ea:	68f8      	ldr	r0, [r7, #12]
 80005ec:	f7ff fdc5 	bl	800017a <LCD_Paint_WritePixel>
        LCD_Paint_WritePixel(lcd, x0 - y, y0 - x, color);
 80005f0:	897a      	ldrh	r2, [r7, #10]
 80005f2:	8afb      	ldrh	r3, [r7, #22]
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	b219      	sxth	r1, r3
 80005fa:	893a      	ldrh	r2, [r7, #8]
 80005fc:	8b3b      	ldrh	r3, [r7, #24]
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	b29b      	uxth	r3, r3
 8000602:	b21a      	sxth	r2, r3
 8000604:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000606:	68f8      	ldr	r0, [r7, #12]
 8000608:	f7ff fdb7 	bl	800017a <LCD_Paint_WritePixel>
    while (x < y) {
 800060c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000610:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000614:	429a      	cmp	r2, r3
 8000616:	f6ff af67 	blt.w	80004e8 <LCD_Paint_DrawCircle+0x98>
    }
}
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	3720      	adds	r7, #32
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <LCD_Paint_DrawRect>:
void LCD_Paint_FillCircle(LCD128_HandleTypeDef* lcd, int16_t x0, int16_t y0, int16_t r, uint16_t color) {
    LCD_Paint_DrawFastVLine(lcd, x0, y0 - r, 2 * r + 1, color);
    LCD_Paint_FillCircleHelper(lcd, x0, y0, r, 3, 0, color);
}

void LCD_Paint_DrawRect(LCD128_HandleTypeDef* lcd, int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af02      	add	r7, sp, #8
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	4608      	mov	r0, r1
 800062e:	4611      	mov	r1, r2
 8000630:	461a      	mov	r2, r3
 8000632:	4603      	mov	r3, r0
 8000634:	817b      	strh	r3, [r7, #10]
 8000636:	460b      	mov	r3, r1
 8000638:	813b      	strh	r3, [r7, #8]
 800063a:	4613      	mov	r3, r2
 800063c:	80fb      	strh	r3, [r7, #6]
    LCD_Paint_DrawFastHLine(lcd, x, y, w, color);
 800063e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000642:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000646:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800064a:	8bbb      	ldrh	r3, [r7, #28]
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	4603      	mov	r3, r0
 8000650:	68f8      	ldr	r0, [r7, #12]
 8000652:	f7ff fe70 	bl	8000336 <LCD_Paint_DrawFastHLine>
    LCD_Paint_DrawFastHLine(lcd, x, y + h - 1, w, color);
 8000656:	893a      	ldrh	r2, [r7, #8]
 8000658:	8b3b      	ldrh	r3, [r7, #24]
 800065a:	4413      	add	r3, r2
 800065c:	b29b      	uxth	r3, r3
 800065e:	3b01      	subs	r3, #1
 8000660:	b29b      	uxth	r3, r3
 8000662:	b21a      	sxth	r2, r3
 8000664:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000668:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800066c:	8bbb      	ldrh	r3, [r7, #28]
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	4603      	mov	r3, r0
 8000672:	68f8      	ldr	r0, [r7, #12]
 8000674:	f7ff fe5f 	bl	8000336 <LCD_Paint_DrawFastHLine>
    LCD_Paint_DrawFastVLine(lcd, x, y, h, color);
 8000678:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800067c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000680:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000684:	8bbb      	ldrh	r3, [r7, #28]
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	4603      	mov	r3, r0
 800068a:	68f8      	ldr	r0, [r7, #12]
 800068c:	f7ff fe2d 	bl	80002ea <LCD_Paint_DrawFastVLine>
    LCD_Paint_DrawFastVLine(lcd, x + w - 1, y, h, color);
 8000690:	897a      	ldrh	r2, [r7, #10]
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	4413      	add	r3, r2
 8000696:	b29b      	uxth	r3, r3
 8000698:	3b01      	subs	r3, #1
 800069a:	b29b      	uxth	r3, r3
 800069c:	b219      	sxth	r1, r3
 800069e:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80006a2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006a6:	8bbb      	ldrh	r3, [r7, #28]
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	4603      	mov	r3, r0
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f7ff fe1c 	bl	80002ea <LCD_Paint_DrawFastVLine>
}
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <LCD128_CS_0>:
#define LCD128_MADCTL  0x36
#define LCD128_COLMOD  0x3A
#define LCD128_INVON   0x21
#define LCD128_INVOFF  0x20

static void LCD128_CS_0(LCD128_HandleTypeDef* lcd) {
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, GPIO_PIN_RESET);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6858      	ldr	r0, [r3, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	891b      	ldrh	r3, [r3, #8]
 80006ca:	2200      	movs	r2, #0
 80006cc:	4619      	mov	r1, r3
 80006ce:	f001 fa39 	bl	8001b44 <HAL_GPIO_WritePin>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <LCD128_CS_1>:
static void LCD128_CS_1(LCD128_HandleTypeDef* lcd) {
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, GPIO_PIN_SET);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6858      	ldr	r0, [r3, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	891b      	ldrh	r3, [r3, #8]
 80006ea:	2201      	movs	r2, #1
 80006ec:	4619      	mov	r1, r3
 80006ee:	f001 fa29 	bl	8001b44 <HAL_GPIO_WritePin>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <LCD128_DC_0>:
static void LCD128_DC_0(LCD128_HandleTypeDef* lcd) {
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->DC_Port, lcd->DC_Pin, GPIO_PIN_RESET);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	68d8      	ldr	r0, [r3, #12]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	8a1b      	ldrh	r3, [r3, #16]
 800070a:	2200      	movs	r2, #0
 800070c:	4619      	mov	r1, r3
 800070e:	f001 fa19 	bl	8001b44 <HAL_GPIO_WritePin>
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <LCD128_DC_1>:
static void LCD128_DC_1(LCD128_HandleTypeDef* lcd) {
 800071a:	b580      	push	{r7, lr}
 800071c:	b082      	sub	sp, #8
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->DC_Port, lcd->DC_Pin, GPIO_PIN_SET);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	68d8      	ldr	r0, [r3, #12]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	8a1b      	ldrh	r3, [r3, #16]
 800072a:	2201      	movs	r2, #1
 800072c:	4619      	mov	r1, r3
 800072e:	f001 fa09 	bl	8001b44 <HAL_GPIO_WritePin>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <LCD128_RST_0>:
static void LCD128_RST_0(LCD128_HandleTypeDef* lcd) {
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->RST_Port, lcd->RST_Pin, GPIO_PIN_RESET);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6958      	ldr	r0, [r3, #20]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	8b1b      	ldrh	r3, [r3, #24]
 800074a:	2200      	movs	r2, #0
 800074c:	4619      	mov	r1, r3
 800074e:	f001 f9f9 	bl	8001b44 <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <LCD128_RST_1>:
static void LCD128_RST_1(LCD128_HandleTypeDef* lcd) {
 800075a:	b580      	push	{r7, lr}
 800075c:	b082      	sub	sp, #8
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->RST_Port, lcd->RST_Pin, GPIO_PIN_SET);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6958      	ldr	r0, [r3, #20]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	8b1b      	ldrh	r3, [r3, #24]
 800076a:	2201      	movs	r2, #1
 800076c:	4619      	mov	r1, r3
 800076e:	f001 f9e9 	bl	8001b44 <HAL_GPIO_WritePin>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <LCD128_SPI_WRITE>:
static void LCD128_SPI_WRITE(LCD128_HandleTypeDef* lcd, uint8_t byte) {
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
 8000782:	460b      	mov	r3, r1
 8000784:	70fb      	strb	r3, [r7, #3]
    HAL_SPI_Transmit(lcd->hspi, &byte, 1, HAL_MAX_DELAY);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6818      	ldr	r0, [r3, #0]
 800078a:	1cf9      	adds	r1, r7, #3
 800078c:	f04f 33ff 	mov.w	r3, #4294967295
 8000790:	2201      	movs	r2, #1
 8000792:	f001 fe51 	bl	8002438 <HAL_SPI_Transmit>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <LCD128_DELAY>:
static void LCD128_DELAY(uint32_t ms) {
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f000 ff40 	bl	800162c <HAL_Delay>
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <LCD128_WriteCommand>:

static void LCD128_WriteCommand(LCD128_HandleTypeDef* lcd, uint8_t cmd) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	70fb      	strb	r3, [r7, #3]
    LCD128_DC_0(lcd);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ff9a 	bl	80006fa <LCD128_DC_0>
    LCD128_CS_0(lcd);
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff ff77 	bl	80006ba <LCD128_CS_0>
    LCD128_SPI_WRITE(lcd, cmd);
 80007cc:	78fb      	ldrb	r3, [r7, #3]
 80007ce:	4619      	mov	r1, r3
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff ffd2 	bl	800077a <LCD128_SPI_WRITE>
    LCD128_CS_1(lcd);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff ff7f 	bl	80006da <LCD128_CS_1>
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <LCD128_WriteData8>:

static void LCD128_WriteData8(LCD128_HandleTypeDef* lcd, uint8_t data) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	70fb      	strb	r3, [r7, #3]
    LCD128_DC_1(lcd);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ff92 	bl	800071a <LCD128_DC_1>
    LCD128_CS_0(lcd);
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff ff5f 	bl	80006ba <LCD128_CS_0>
    LCD128_SPI_WRITE(lcd, data);
 80007fc:	78fb      	ldrb	r3, [r7, #3]
 80007fe:	4619      	mov	r1, r3
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff ffba 	bl	800077a <LCD128_SPI_WRITE>
    LCD128_CS_1(lcd);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ff67 	bl	80006da <LCD128_CS_1>
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <LCD128_WriteData16>:

static void LCD128_WriteData16(LCD128_HandleTypeDef* lcd, uint16_t data) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	807b      	strh	r3, [r7, #2]
    LCD128_DC_1(lcd);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ff7a 	bl	800071a <LCD128_DC_1>
    LCD128_CS_0(lcd);
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff ff47 	bl	80006ba <LCD128_CS_0>
    uint8_t hi = data >> 8, lo = data & 0xFF;
 800082c:	887b      	ldrh	r3, [r7, #2]
 800082e:	0a1b      	lsrs	r3, r3, #8
 8000830:	b29b      	uxth	r3, r3
 8000832:	73fb      	strb	r3, [r7, #15]
 8000834:	887b      	ldrh	r3, [r7, #2]
 8000836:	73bb      	strb	r3, [r7, #14]
    LCD128_SPI_WRITE(lcd, hi);
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	4619      	mov	r1, r3
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff ff9c 	bl	800077a <LCD128_SPI_WRITE>
    LCD128_SPI_WRITE(lcd, lo);
 8000842:	7bbb      	ldrb	r3, [r7, #14]
 8000844:	4619      	mov	r1, r3
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff ff97 	bl	800077a <LCD128_SPI_WRITE>
    LCD128_CS_1(lcd);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ff44 	bl	80006da <LCD128_CS_1>
}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <LCD128_Reset>:
        LCD128_SPI_WRITE(lcd, buff[i]);
    }
    LCD128_CS_1(lcd);
}

static void LCD128_Reset(LCD128_HandleTypeDef* lcd) {
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
    LCD128_RST_1(lcd);
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ff79 	bl	800075a <LCD128_RST_1>
    LCD128_DELAY(100);
 8000868:	2064      	movs	r0, #100	@ 0x64
 800086a:	f7ff ff98 	bl	800079e <LCD128_DELAY>
    LCD128_RST_0(lcd);
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff ff63 	bl	800073a <LCD128_RST_0>
    LCD128_DELAY(100);
 8000874:	2064      	movs	r0, #100	@ 0x64
 8000876:	f7ff ff92 	bl	800079e <LCD128_DELAY>
    LCD128_RST_1(lcd);
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ff6d 	bl	800075a <LCD128_RST_1>
    LCD128_DELAY(100);
 8000880:	2064      	movs	r0, #100	@ 0x64
 8000882:	f7ff ff8c 	bl	800079e <LCD128_DELAY>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <LCD128_SetAddressWindow>:

static void LCD128_SetAddressWindow(LCD128_HandleTypeDef* lcd, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800088e:	b580      	push	{r7, lr}
 8000890:	b084      	sub	sp, #16
 8000892:	af00      	add	r7, sp, #0
 8000894:	60f8      	str	r0, [r7, #12]
 8000896:	4608      	mov	r0, r1
 8000898:	4611      	mov	r1, r2
 800089a:	461a      	mov	r2, r3
 800089c:	4603      	mov	r3, r0
 800089e:	817b      	strh	r3, [r7, #10]
 80008a0:	460b      	mov	r3, r1
 80008a2:	813b      	strh	r3, [r7, #8]
 80008a4:	4613      	mov	r3, r2
 80008a6:	80fb      	strh	r3, [r7, #6]
    LCD128_WriteCommand(lcd, LCD128_CASET);
 80008a8:	212a      	movs	r1, #42	@ 0x2a
 80008aa:	68f8      	ldr	r0, [r7, #12]
 80008ac:	f7ff ff82 	bl	80007b4 <LCD128_WriteCommand>
    LCD128_WriteData8(lcd, x0 >> 8);
 80008b0:	897b      	ldrh	r3, [r7, #10]
 80008b2:	0a1b      	lsrs	r3, r3, #8
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	4619      	mov	r1, r3
 80008ba:	68f8      	ldr	r0, [r7, #12]
 80008bc:	f7ff ff92 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteData8(lcd, x0 & 0xFF);
 80008c0:	897b      	ldrh	r3, [r7, #10]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	4619      	mov	r1, r3
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f7ff ff8c 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteData8(lcd, x1 >> 8);
 80008cc:	88fb      	ldrh	r3, [r7, #6]
 80008ce:	0a1b      	lsrs	r3, r3, #8
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	4619      	mov	r1, r3
 80008d6:	68f8      	ldr	r0, [r7, #12]
 80008d8:	f7ff ff84 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteData8(lcd, x1 & 0xFF);
 80008dc:	88fb      	ldrh	r3, [r7, #6]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4619      	mov	r1, r3
 80008e2:	68f8      	ldr	r0, [r7, #12]
 80008e4:	f7ff ff7e 	bl	80007e4 <LCD128_WriteData8>

    LCD128_WriteCommand(lcd, LCD128_RASET);
 80008e8:	212b      	movs	r1, #43	@ 0x2b
 80008ea:	68f8      	ldr	r0, [r7, #12]
 80008ec:	f7ff ff62 	bl	80007b4 <LCD128_WriteCommand>
    LCD128_WriteData8(lcd, y0 >> 8);
 80008f0:	893b      	ldrh	r3, [r7, #8]
 80008f2:	0a1b      	lsrs	r3, r3, #8
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	4619      	mov	r1, r3
 80008fa:	68f8      	ldr	r0, [r7, #12]
 80008fc:	f7ff ff72 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteData8(lcd, y0 & 0xFF);
 8000900:	893b      	ldrh	r3, [r7, #8]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	4619      	mov	r1, r3
 8000906:	68f8      	ldr	r0, [r7, #12]
 8000908:	f7ff ff6c 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteData8(lcd, y1 >> 8);
 800090c:	8b3b      	ldrh	r3, [r7, #24]
 800090e:	0a1b      	lsrs	r3, r3, #8
 8000910:	b29b      	uxth	r3, r3
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4619      	mov	r1, r3
 8000916:	68f8      	ldr	r0, [r7, #12]
 8000918:	f7ff ff64 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteData8(lcd, y1 & 0xFF);
 800091c:	8b3b      	ldrh	r3, [r7, #24]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	4619      	mov	r1, r3
 8000922:	68f8      	ldr	r0, [r7, #12]
 8000924:	f7ff ff5e 	bl	80007e4 <LCD128_WriteData8>

    LCD128_WriteCommand(lcd, LCD128_RAMWR);
 8000928:	212c      	movs	r1, #44	@ 0x2c
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f7ff ff42 	bl	80007b4 <LCD128_WriteCommand>
}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <LCD128_Init>:

void LCD128_Init(LCD128_HandleTypeDef* lcd) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
    LCD128_Reset(lcd);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff ff8a 	bl	800085a <LCD128_Reset>
    // Chuỗi lệnh khởi tạo GC9A01 (tham khảo LCD_1in28.c)
    LCD128_WriteCommand(lcd, 0xEF);
 8000946:	21ef      	movs	r1, #239	@ 0xef
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff ff33 	bl	80007b4 <LCD128_WriteCommand>
    LCD128_WriteCommand(lcd, 0xEB); LCD128_WriteData8(lcd, 0x14);
 800094e:	21eb      	movs	r1, #235	@ 0xeb
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ff2f 	bl	80007b4 <LCD128_WriteCommand>
 8000956:	2114      	movs	r1, #20
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff ff43 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xFE);
 800095e:	21fe      	movs	r1, #254	@ 0xfe
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff ff27 	bl	80007b4 <LCD128_WriteCommand>
    LCD128_WriteCommand(lcd, 0xEF);
 8000966:	21ef      	movs	r1, #239	@ 0xef
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff ff23 	bl	80007b4 <LCD128_WriteCommand>
    LCD128_WriteCommand(lcd, 0xEB); LCD128_WriteData8(lcd, 0x14);
 800096e:	21eb      	movs	r1, #235	@ 0xeb
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ff1f 	bl	80007b4 <LCD128_WriteCommand>
 8000976:	2114      	movs	r1, #20
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff ff33 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x84); LCD128_WriteData8(lcd, 0x40);
 800097e:	2184      	movs	r1, #132	@ 0x84
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f7ff ff17 	bl	80007b4 <LCD128_WriteCommand>
 8000986:	2140      	movs	r1, #64	@ 0x40
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff ff2b 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x85); LCD128_WriteData8(lcd, 0xFF);
 800098e:	2185      	movs	r1, #133	@ 0x85
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ff0f 	bl	80007b4 <LCD128_WriteCommand>
 8000996:	21ff      	movs	r1, #255	@ 0xff
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ff23 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x86); LCD128_WriteData8(lcd, 0xFF);
 800099e:	2186      	movs	r1, #134	@ 0x86
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ff07 	bl	80007b4 <LCD128_WriteCommand>
 80009a6:	21ff      	movs	r1, #255	@ 0xff
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff ff1b 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x87); LCD128_WriteData8(lcd, 0xFF);
 80009ae:	2187      	movs	r1, #135	@ 0x87
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff feff 	bl	80007b4 <LCD128_WriteCommand>
 80009b6:	21ff      	movs	r1, #255	@ 0xff
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff ff13 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x88); LCD128_WriteData8(lcd, 0x0A);
 80009be:	2188      	movs	r1, #136	@ 0x88
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f7ff fef7 	bl	80007b4 <LCD128_WriteCommand>
 80009c6:	210a      	movs	r1, #10
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ff0b 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x89); LCD128_WriteData8(lcd, 0x21);
 80009ce:	2189      	movs	r1, #137	@ 0x89
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff feef 	bl	80007b4 <LCD128_WriteCommand>
 80009d6:	2121      	movs	r1, #33	@ 0x21
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff ff03 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8A); LCD128_WriteData8(lcd, 0x00);
 80009de:	218a      	movs	r1, #138	@ 0x8a
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff fee7 	bl	80007b4 <LCD128_WriteCommand>
 80009e6:	2100      	movs	r1, #0
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff fefb 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8B); LCD128_WriteData8(lcd, 0x80);
 80009ee:	218b      	movs	r1, #139	@ 0x8b
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff fedf 	bl	80007b4 <LCD128_WriteCommand>
 80009f6:	2180      	movs	r1, #128	@ 0x80
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff fef3 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8C); LCD128_WriteData8(lcd, 0x01);
 80009fe:	218c      	movs	r1, #140	@ 0x8c
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff fed7 	bl	80007b4 <LCD128_WriteCommand>
 8000a06:	2101      	movs	r1, #1
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff feeb 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8D); LCD128_WriteData8(lcd, 0x01);
 8000a0e:	218d      	movs	r1, #141	@ 0x8d
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff fecf 	bl	80007b4 <LCD128_WriteCommand>
 8000a16:	2101      	movs	r1, #1
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff fee3 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8E); LCD128_WriteData8(lcd, 0xFF);
 8000a1e:	218e      	movs	r1, #142	@ 0x8e
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff fec7 	bl	80007b4 <LCD128_WriteCommand>
 8000a26:	21ff      	movs	r1, #255	@ 0xff
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff fedb 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8F); LCD128_WriteData8(lcd, 0xFF);
 8000a2e:	218f      	movs	r1, #143	@ 0x8f
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff febf 	bl	80007b4 <LCD128_WriteCommand>
 8000a36:	21ff      	movs	r1, #255	@ 0xff
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff fed3 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xB6); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x20);
 8000a3e:	21b6      	movs	r1, #182	@ 0xb6
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff feb7 	bl	80007b4 <LCD128_WriteCommand>
 8000a46:	2100      	movs	r1, #0
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff fecb 	bl	80007e4 <LCD128_WriteData8>
 8000a4e:	2120      	movs	r1, #32
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff fec7 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x36); LCD128_WriteData8(lcd, 0x08); // vertical
 8000a56:	2136      	movs	r1, #54	@ 0x36
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff feab 	bl	80007b4 <LCD128_WriteCommand>
 8000a5e:	2108      	movs	r1, #8
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff febf 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x3A); LCD128_WriteData8(lcd, 0x05);
 8000a66:	213a      	movs	r1, #58	@ 0x3a
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff fea3 	bl	80007b4 <LCD128_WriteCommand>
 8000a6e:	2105      	movs	r1, #5
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff feb7 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x90); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08);
 8000a76:	2190      	movs	r1, #144	@ 0x90
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff fe9b 	bl	80007b4 <LCD128_WriteCommand>
 8000a7e:	2108      	movs	r1, #8
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff feaf 	bl	80007e4 <LCD128_WriteData8>
 8000a86:	2108      	movs	r1, #8
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff feab 	bl	80007e4 <LCD128_WriteData8>
 8000a8e:	2108      	movs	r1, #8
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff fea7 	bl	80007e4 <LCD128_WriteData8>
 8000a96:	2108      	movs	r1, #8
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff fea3 	bl	80007e4 <LCD128_WriteData8>
 8000a9e:	2108      	movs	r1, #8
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff fe9f 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xBD); LCD128_WriteData8(lcd, 0x06);
 8000aa6:	21bd      	movs	r1, #189	@ 0xbd
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff fe83 	bl	80007b4 <LCD128_WriteCommand>
 8000aae:	2106      	movs	r1, #6
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff fe97 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xBC); LCD128_WriteData8(lcd, 0x00);
 8000ab6:	21bc      	movs	r1, #188	@ 0xbc
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff fe7b 	bl	80007b4 <LCD128_WriteCommand>
 8000abe:	2100      	movs	r1, #0
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff fe8f 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xFF); LCD128_WriteData8(lcd, 0x60); LCD128_WriteData8(lcd, 0x01); LCD128_WriteData8(lcd, 0x04);
 8000ac6:	21ff      	movs	r1, #255	@ 0xff
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff fe73 	bl	80007b4 <LCD128_WriteCommand>
 8000ace:	2160      	movs	r1, #96	@ 0x60
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff fe87 	bl	80007e4 <LCD128_WriteData8>
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff fe83 	bl	80007e4 <LCD128_WriteData8>
 8000ade:	2104      	movs	r1, #4
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff fe7f 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xC3); LCD128_WriteData8(lcd, 0x13);
 8000ae6:	21c3      	movs	r1, #195	@ 0xc3
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fe63 	bl	80007b4 <LCD128_WriteCommand>
 8000aee:	2113      	movs	r1, #19
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff fe77 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xC4); LCD128_WriteData8(lcd, 0x13);
 8000af6:	21c4      	movs	r1, #196	@ 0xc4
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff fe5b 	bl	80007b4 <LCD128_WriteCommand>
 8000afe:	2113      	movs	r1, #19
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff fe6f 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xC9); LCD128_WriteData8(lcd, 0x22);
 8000b06:	21c9      	movs	r1, #201	@ 0xc9
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff fe53 	bl	80007b4 <LCD128_WriteCommand>
 8000b0e:	2122      	movs	r1, #34	@ 0x22
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff fe67 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xBE); LCD128_WriteData8(lcd, 0x11);
 8000b16:	21be      	movs	r1, #190	@ 0xbe
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff fe4b 	bl	80007b4 <LCD128_WriteCommand>
 8000b1e:	2111      	movs	r1, #17
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff fe5f 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xE1); LCD128_WriteData8(lcd, 0x10); LCD128_WriteData8(lcd, 0x0E);
 8000b26:	21e1      	movs	r1, #225	@ 0xe1
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff fe43 	bl	80007b4 <LCD128_WriteCommand>
 8000b2e:	2110      	movs	r1, #16
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff fe57 	bl	80007e4 <LCD128_WriteData8>
 8000b36:	210e      	movs	r1, #14
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff fe53 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xDF); LCD128_WriteData8(lcd, 0x21); LCD128_WriteData8(lcd, 0x0c); LCD128_WriteData8(lcd, 0x02);
 8000b3e:	21df      	movs	r1, #223	@ 0xdf
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff fe37 	bl	80007b4 <LCD128_WriteCommand>
 8000b46:	2121      	movs	r1, #33	@ 0x21
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff fe4b 	bl	80007e4 <LCD128_WriteData8>
 8000b4e:	210c      	movs	r1, #12
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff fe47 	bl	80007e4 <LCD128_WriteData8>
 8000b56:	2102      	movs	r1, #2
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff fe43 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xF0); LCD128_WriteData8(lcd, 0x45); LCD128_WriteData8(lcd, 0x09); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x26); LCD128_WriteData8(lcd, 0x2A);
 8000b5e:	21f0      	movs	r1, #240	@ 0xf0
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff fe27 	bl	80007b4 <LCD128_WriteCommand>
 8000b66:	2145      	movs	r1, #69	@ 0x45
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff fe3b 	bl	80007e4 <LCD128_WriteData8>
 8000b6e:	2109      	movs	r1, #9
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff fe37 	bl	80007e4 <LCD128_WriteData8>
 8000b76:	2108      	movs	r1, #8
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff fe33 	bl	80007e4 <LCD128_WriteData8>
 8000b7e:	2108      	movs	r1, #8
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff fe2f 	bl	80007e4 <LCD128_WriteData8>
 8000b86:	2126      	movs	r1, #38	@ 0x26
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff fe2b 	bl	80007e4 <LCD128_WriteData8>
 8000b8e:	212a      	movs	r1, #42	@ 0x2a
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff fe27 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xF1); LCD128_WriteData8(lcd, 0x43); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x72); LCD128_WriteData8(lcd, 0x36); LCD128_WriteData8(lcd, 0x37); LCD128_WriteData8(lcd, 0x6F);
 8000b96:	21f1      	movs	r1, #241	@ 0xf1
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff fe0b 	bl	80007b4 <LCD128_WriteCommand>
 8000b9e:	2143      	movs	r1, #67	@ 0x43
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff fe1f 	bl	80007e4 <LCD128_WriteData8>
 8000ba6:	2170      	movs	r1, #112	@ 0x70
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff fe1b 	bl	80007e4 <LCD128_WriteData8>
 8000bae:	2172      	movs	r1, #114	@ 0x72
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff fe17 	bl	80007e4 <LCD128_WriteData8>
 8000bb6:	2136      	movs	r1, #54	@ 0x36
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff fe13 	bl	80007e4 <LCD128_WriteData8>
 8000bbe:	2137      	movs	r1, #55	@ 0x37
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff fe0f 	bl	80007e4 <LCD128_WriteData8>
 8000bc6:	216f      	movs	r1, #111	@ 0x6f
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff fe0b 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xF2); LCD128_WriteData8(lcd, 0x45); LCD128_WriteData8(lcd, 0x09); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x26); LCD128_WriteData8(lcd, 0x2A);
 8000bce:	21f2      	movs	r1, #242	@ 0xf2
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff fdef 	bl	80007b4 <LCD128_WriteCommand>
 8000bd6:	2145      	movs	r1, #69	@ 0x45
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff fe03 	bl	80007e4 <LCD128_WriteData8>
 8000bde:	2109      	movs	r1, #9
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff fdff 	bl	80007e4 <LCD128_WriteData8>
 8000be6:	2108      	movs	r1, #8
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff fdfb 	bl	80007e4 <LCD128_WriteData8>
 8000bee:	2108      	movs	r1, #8
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff fdf7 	bl	80007e4 <LCD128_WriteData8>
 8000bf6:	2126      	movs	r1, #38	@ 0x26
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff fdf3 	bl	80007e4 <LCD128_WriteData8>
 8000bfe:	212a      	movs	r1, #42	@ 0x2a
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff fdef 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xF3); LCD128_WriteData8(lcd, 0x43); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x72); LCD128_WriteData8(lcd, 0x36); LCD128_WriteData8(lcd, 0x37); LCD128_WriteData8(lcd, 0x6F);
 8000c06:	21f3      	movs	r1, #243	@ 0xf3
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff fdd3 	bl	80007b4 <LCD128_WriteCommand>
 8000c0e:	2143      	movs	r1, #67	@ 0x43
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff fde7 	bl	80007e4 <LCD128_WriteData8>
 8000c16:	2170      	movs	r1, #112	@ 0x70
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff fde3 	bl	80007e4 <LCD128_WriteData8>
 8000c1e:	2172      	movs	r1, #114	@ 0x72
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff fddf 	bl	80007e4 <LCD128_WriteData8>
 8000c26:	2136      	movs	r1, #54	@ 0x36
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff fddb 	bl	80007e4 <LCD128_WriteData8>
 8000c2e:	2137      	movs	r1, #55	@ 0x37
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff fdd7 	bl	80007e4 <LCD128_WriteData8>
 8000c36:	216f      	movs	r1, #111	@ 0x6f
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff fdd3 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xED); LCD128_WriteData8(lcd, 0x1B); LCD128_WriteData8(lcd, 0x0B);
 8000c3e:	21ed      	movs	r1, #237	@ 0xed
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff fdb7 	bl	80007b4 <LCD128_WriteCommand>
 8000c46:	211b      	movs	r1, #27
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff fdcb 	bl	80007e4 <LCD128_WriteData8>
 8000c4e:	210b      	movs	r1, #11
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff fdc7 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xAE); LCD128_WriteData8(lcd, 0x77);
 8000c56:	21ae      	movs	r1, #174	@ 0xae
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff fdab 	bl	80007b4 <LCD128_WriteCommand>
 8000c5e:	2177      	movs	r1, #119	@ 0x77
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff fdbf 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xCD); LCD128_WriteData8(lcd, 0x63);
 8000c66:	21cd      	movs	r1, #205	@ 0xcd
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f7ff fda3 	bl	80007b4 <LCD128_WriteCommand>
 8000c6e:	2163      	movs	r1, #99	@ 0x63
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff fdb7 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x70); LCD128_WriteData8(lcd, 0x07); LCD128_WriteData8(lcd, 0x07); LCD128_WriteData8(lcd, 0x04); LCD128_WriteData8(lcd, 0x0E); LCD128_WriteData8(lcd, 0x0F); LCD128_WriteData8(lcd, 0x09); LCD128_WriteData8(lcd, 0x07); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x03);
 8000c76:	2170      	movs	r1, #112	@ 0x70
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff fd9b 	bl	80007b4 <LCD128_WriteCommand>
 8000c7e:	2107      	movs	r1, #7
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fdaf 	bl	80007e4 <LCD128_WriteData8>
 8000c86:	2107      	movs	r1, #7
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff fdab 	bl	80007e4 <LCD128_WriteData8>
 8000c8e:	2104      	movs	r1, #4
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff fda7 	bl	80007e4 <LCD128_WriteData8>
 8000c96:	210e      	movs	r1, #14
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff fda3 	bl	80007e4 <LCD128_WriteData8>
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff fd9f 	bl	80007e4 <LCD128_WriteData8>
 8000ca6:	2109      	movs	r1, #9
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff fd9b 	bl	80007e4 <LCD128_WriteData8>
 8000cae:	2107      	movs	r1, #7
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff fd97 	bl	80007e4 <LCD128_WriteData8>
 8000cb6:	2108      	movs	r1, #8
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff fd93 	bl	80007e4 <LCD128_WriteData8>
 8000cbe:	2103      	movs	r1, #3
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff fd8f 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xE8); LCD128_WriteData8(lcd, 0x34);
 8000cc6:	21e8      	movs	r1, #232	@ 0xe8
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff fd73 	bl	80007b4 <LCD128_WriteCommand>
 8000cce:	2134      	movs	r1, #52	@ 0x34
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff fd87 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x62); LCD128_WriteData8(lcd, 0x18); LCD128_WriteData8(lcd, 0x0D); LCD128_WriteData8(lcd, 0x71); LCD128_WriteData8(lcd, 0xED); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x18); LCD128_WriteData8(lcd, 0x0F); LCD128_WriteData8(lcd, 0x71); LCD128_WriteData8(lcd, 0xEF); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x70);
 8000cd6:	2162      	movs	r1, #98	@ 0x62
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff fd6b 	bl	80007b4 <LCD128_WriteCommand>
 8000cde:	2118      	movs	r1, #24
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff fd7f 	bl	80007e4 <LCD128_WriteData8>
 8000ce6:	210d      	movs	r1, #13
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff fd7b 	bl	80007e4 <LCD128_WriteData8>
 8000cee:	2171      	movs	r1, #113	@ 0x71
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff fd77 	bl	80007e4 <LCD128_WriteData8>
 8000cf6:	21ed      	movs	r1, #237	@ 0xed
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff fd73 	bl	80007e4 <LCD128_WriteData8>
 8000cfe:	2170      	movs	r1, #112	@ 0x70
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff fd6f 	bl	80007e4 <LCD128_WriteData8>
 8000d06:	2170      	movs	r1, #112	@ 0x70
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff fd6b 	bl	80007e4 <LCD128_WriteData8>
 8000d0e:	2118      	movs	r1, #24
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff fd67 	bl	80007e4 <LCD128_WriteData8>
 8000d16:	210f      	movs	r1, #15
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff fd63 	bl	80007e4 <LCD128_WriteData8>
 8000d1e:	2171      	movs	r1, #113	@ 0x71
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff fd5f 	bl	80007e4 <LCD128_WriteData8>
 8000d26:	21ef      	movs	r1, #239	@ 0xef
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff fd5b 	bl	80007e4 <LCD128_WriteData8>
 8000d2e:	2170      	movs	r1, #112	@ 0x70
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff fd57 	bl	80007e4 <LCD128_WriteData8>
 8000d36:	2170      	movs	r1, #112	@ 0x70
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff fd53 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x63); LCD128_WriteData8(lcd, 0x18); LCD128_WriteData8(lcd, 0x11); LCD128_WriteData8(lcd, 0x71); LCD128_WriteData8(lcd, 0xF1); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x18); LCD128_WriteData8(lcd, 0x13); LCD128_WriteData8(lcd, 0x71); LCD128_WriteData8(lcd, 0xF3); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x70);
 8000d3e:	2163      	movs	r1, #99	@ 0x63
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff fd37 	bl	80007b4 <LCD128_WriteCommand>
 8000d46:	2118      	movs	r1, #24
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff fd4b 	bl	80007e4 <LCD128_WriteData8>
 8000d4e:	2111      	movs	r1, #17
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff fd47 	bl	80007e4 <LCD128_WriteData8>
 8000d56:	2171      	movs	r1, #113	@ 0x71
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff fd43 	bl	80007e4 <LCD128_WriteData8>
 8000d5e:	21f1      	movs	r1, #241	@ 0xf1
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff fd3f 	bl	80007e4 <LCD128_WriteData8>
 8000d66:	2170      	movs	r1, #112	@ 0x70
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff fd3b 	bl	80007e4 <LCD128_WriteData8>
 8000d6e:	2170      	movs	r1, #112	@ 0x70
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff fd37 	bl	80007e4 <LCD128_WriteData8>
 8000d76:	2118      	movs	r1, #24
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff fd33 	bl	80007e4 <LCD128_WriteData8>
 8000d7e:	2113      	movs	r1, #19
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff fd2f 	bl	80007e4 <LCD128_WriteData8>
 8000d86:	2171      	movs	r1, #113	@ 0x71
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff fd2b 	bl	80007e4 <LCD128_WriteData8>
 8000d8e:	21f3      	movs	r1, #243	@ 0xf3
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff fd27 	bl	80007e4 <LCD128_WriteData8>
 8000d96:	2170      	movs	r1, #112	@ 0x70
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff fd23 	bl	80007e4 <LCD128_WriteData8>
 8000d9e:	2170      	movs	r1, #112	@ 0x70
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff fd1f 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x64); LCD128_WriteData8(lcd, 0x28); LCD128_WriteData8(lcd, 0x29); LCD128_WriteData8(lcd, 0xF1); LCD128_WriteData8(lcd, 0x01); LCD128_WriteData8(lcd, 0xF1); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x07);
 8000da6:	2164      	movs	r1, #100	@ 0x64
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff fd03 	bl	80007b4 <LCD128_WriteCommand>
 8000dae:	2128      	movs	r1, #40	@ 0x28
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff fd17 	bl	80007e4 <LCD128_WriteData8>
 8000db6:	2129      	movs	r1, #41	@ 0x29
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff fd13 	bl	80007e4 <LCD128_WriteData8>
 8000dbe:	21f1      	movs	r1, #241	@ 0xf1
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff fd0f 	bl	80007e4 <LCD128_WriteData8>
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff fd0b 	bl	80007e4 <LCD128_WriteData8>
 8000dce:	21f1      	movs	r1, #241	@ 0xf1
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff fd07 	bl	80007e4 <LCD128_WriteData8>
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff fd03 	bl	80007e4 <LCD128_WriteData8>
 8000dde:	2107      	movs	r1, #7
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff fcff 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x66); LCD128_WriteData8(lcd, 0x3C); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0xCD); LCD128_WriteData8(lcd, 0x67); LCD128_WriteData8(lcd, 0x45); LCD128_WriteData8(lcd, 0x45); LCD128_WriteData8(lcd, 0x10); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x00);
 8000de6:	2166      	movs	r1, #102	@ 0x66
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff fce3 	bl	80007b4 <LCD128_WriteCommand>
 8000dee:	213c      	movs	r1, #60	@ 0x3c
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff fcf7 	bl	80007e4 <LCD128_WriteData8>
 8000df6:	2100      	movs	r1, #0
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff fcf3 	bl	80007e4 <LCD128_WriteData8>
 8000dfe:	21cd      	movs	r1, #205	@ 0xcd
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff fcef 	bl	80007e4 <LCD128_WriteData8>
 8000e06:	2167      	movs	r1, #103	@ 0x67
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff fceb 	bl	80007e4 <LCD128_WriteData8>
 8000e0e:	2145      	movs	r1, #69	@ 0x45
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff fce7 	bl	80007e4 <LCD128_WriteData8>
 8000e16:	2145      	movs	r1, #69	@ 0x45
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff fce3 	bl	80007e4 <LCD128_WriteData8>
 8000e1e:	2110      	movs	r1, #16
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff fcdf 	bl	80007e4 <LCD128_WriteData8>
 8000e26:	2100      	movs	r1, #0
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff fcdb 	bl	80007e4 <LCD128_WriteData8>
 8000e2e:	2100      	movs	r1, #0
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff fcd7 	bl	80007e4 <LCD128_WriteData8>
 8000e36:	2100      	movs	r1, #0
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff fcd3 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x67); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x3C); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x01); LCD128_WriteData8(lcd, 0x54); LCD128_WriteData8(lcd, 0x10); LCD128_WriteData8(lcd, 0x32); LCD128_WriteData8(lcd, 0x98);
 8000e3e:	2167      	movs	r1, #103	@ 0x67
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff fcb7 	bl	80007b4 <LCD128_WriteCommand>
 8000e46:	2100      	movs	r1, #0
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff fccb 	bl	80007e4 <LCD128_WriteData8>
 8000e4e:	213c      	movs	r1, #60	@ 0x3c
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff fcc7 	bl	80007e4 <LCD128_WriteData8>
 8000e56:	2100      	movs	r1, #0
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff fcc3 	bl	80007e4 <LCD128_WriteData8>
 8000e5e:	2100      	movs	r1, #0
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff fcbf 	bl	80007e4 <LCD128_WriteData8>
 8000e66:	2100      	movs	r1, #0
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff fcbb 	bl	80007e4 <LCD128_WriteData8>
 8000e6e:	2101      	movs	r1, #1
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff fcb7 	bl	80007e4 <LCD128_WriteData8>
 8000e76:	2154      	movs	r1, #84	@ 0x54
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff fcb3 	bl	80007e4 <LCD128_WriteData8>
 8000e7e:	2110      	movs	r1, #16
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff fcaf 	bl	80007e4 <LCD128_WriteData8>
 8000e86:	2132      	movs	r1, #50	@ 0x32
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff fcab 	bl	80007e4 <LCD128_WriteData8>
 8000e8e:	2198      	movs	r1, #152	@ 0x98
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff fca7 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x74); LCD128_WriteData8(lcd, 0x10); LCD128_WriteData8(lcd, 0x85); LCD128_WriteData8(lcd, 0x80); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x4E); LCD128_WriteData8(lcd, 0x00);
 8000e96:	2174      	movs	r1, #116	@ 0x74
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff fc8b 	bl	80007b4 <LCD128_WriteCommand>
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff fc9f 	bl	80007e4 <LCD128_WriteData8>
 8000ea6:	2185      	movs	r1, #133	@ 0x85
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff fc9b 	bl	80007e4 <LCD128_WriteData8>
 8000eae:	2180      	movs	r1, #128	@ 0x80
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff fc97 	bl	80007e4 <LCD128_WriteData8>
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff fc93 	bl	80007e4 <LCD128_WriteData8>
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff fc8f 	bl	80007e4 <LCD128_WriteData8>
 8000ec6:	214e      	movs	r1, #78	@ 0x4e
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff fc8b 	bl	80007e4 <LCD128_WriteData8>
 8000ece:	2100      	movs	r1, #0
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff fc87 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x98); LCD128_WriteData8(lcd, 0x3e); LCD128_WriteData8(lcd, 0x07);
 8000ed6:	2198      	movs	r1, #152	@ 0x98
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff fc6b 	bl	80007b4 <LCD128_WriteCommand>
 8000ede:	213e      	movs	r1, #62	@ 0x3e
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff fc7f 	bl	80007e4 <LCD128_WriteData8>
 8000ee6:	2107      	movs	r1, #7
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff fc7b 	bl	80007e4 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x35);
 8000eee:	2135      	movs	r1, #53	@ 0x35
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff fc5f 	bl	80007b4 <LCD128_WriteCommand>
    LCD128_WriteCommand(lcd, 0x21);
 8000ef6:	2121      	movs	r1, #33	@ 0x21
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff fc5b 	bl	80007b4 <LCD128_WriteCommand>
    LCD128_WriteCommand(lcd, LCD128_SLPOUT);
 8000efe:	2111      	movs	r1, #17
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff fc57 	bl	80007b4 <LCD128_WriteCommand>
    LCD128_DELAY(120);
 8000f06:	2078      	movs	r0, #120	@ 0x78
 8000f08:	f7ff fc49 	bl	800079e <LCD128_DELAY>
    LCD128_WriteCommand(lcd, LCD128_DISPON);
 8000f0c:	2129      	movs	r1, #41	@ 0x29
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fc50 	bl	80007b4 <LCD128_WriteCommand>
    LCD128_DELAY(20);
 8000f14:	2014      	movs	r0, #20
 8000f16:	f7ff fc42 	bl	800079e <LCD128_DELAY>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <LCD128_DrawPixel>:

void LCD128_DrawPixel(LCD128_HandleTypeDef* lcd, uint16_t x, uint16_t y, uint16_t color) {
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af02      	add	r7, sp, #8
 8000f28:	60f8      	str	r0, [r7, #12]
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4603      	mov	r3, r0
 8000f32:	817b      	strh	r3, [r7, #10]
 8000f34:	460b      	mov	r3, r1
 8000f36:	813b      	strh	r3, [r7, #8]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	80fb      	strh	r3, [r7, #6]
    if (x >= LCD128_WIDTH || y >= LCD128_HEIGHT) return;
 8000f3c:	897b      	ldrh	r3, [r7, #10]
 8000f3e:	2bef      	cmp	r3, #239	@ 0xef
 8000f40:	d811      	bhi.n	8000f66 <LCD128_DrawPixel+0x44>
 8000f42:	893b      	ldrh	r3, [r7, #8]
 8000f44:	2bef      	cmp	r3, #239	@ 0xef
 8000f46:	d80e      	bhi.n	8000f66 <LCD128_DrawPixel+0x44>
    LCD128_SetAddressWindow(lcd, x, y, x, y);
 8000f48:	8978      	ldrh	r0, [r7, #10]
 8000f4a:	893a      	ldrh	r2, [r7, #8]
 8000f4c:	8979      	ldrh	r1, [r7, #10]
 8000f4e:	893b      	ldrh	r3, [r7, #8]
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	4603      	mov	r3, r0
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	f7ff fc9a 	bl	800088e <LCD128_SetAddressWindow>
    LCD128_WriteData16(lcd, color);
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f7ff fc58 	bl	8000814 <LCD128_WriteData16>
 8000f64:	e000      	b.n	8000f68 <LCD128_DrawPixel+0x46>
    if (x >= LCD128_WIDTH || y >= LCD128_HEIGHT) return;
 8000f66:	bf00      	nop
}
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <LCD128_WriteChar>:

static void LCD128_WriteChar(LCD128_HandleTypeDef* lcd, uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b08a      	sub	sp, #40	@ 0x28
 8000f72:	af02      	add	r7, sp, #8
 8000f74:	60f8      	str	r0, [r7, #12]
 8000f76:	4608      	mov	r0, r1
 8000f78:	4611      	mov	r1, r2
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	817b      	strh	r3, [r7, #10]
 8000f80:	460b      	mov	r3, r1
 8000f82:	813b      	strh	r3, [r7, #8]
 8000f84:	4613      	mov	r3, r2
 8000f86:	71fb      	strb	r3, [r7, #7]
    uint32_t i, b, j;
    LCD128_SetAddressWindow(lcd, x, y, x + font.width - 1, y + font.height - 1);
 8000f88:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	897b      	ldrh	r3, [r7, #10]
 8000f90:	4413      	add	r3, r2
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	3b01      	subs	r3, #1
 8000f96:	b298      	uxth	r0, r3
 8000f98:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	893b      	ldrh	r3, [r7, #8]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	893a      	ldrh	r2, [r7, #8]
 8000faa:	8979      	ldrh	r1, [r7, #10]
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	4603      	mov	r3, r0
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f7ff fc6c 	bl	800088e <LCD128_SetAddressWindow>
    for (i = 0; i < font.height; i++) {
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
 8000fba:	e02d      	b.n	8001018 <LCD128_WriteChar+0xaa>
        b = font.data[(ch - 32) * font.height + i];
 8000fbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	3b20      	subs	r3, #32
 8000fc2:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8000fc6:	fb01 f303 	mul.w	r3, r1, r3
 8000fca:	4619      	mov	r1, r3
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	440b      	add	r3, r1
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4413      	add	r3, r2
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	617b      	str	r3, [r7, #20]
        for (j = 0; j < font.width; j++) {
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61bb      	str	r3, [r7, #24]
 8000fdc:	e013      	b.n	8001006 <LCD128_WriteChar+0x98>
            uint16_t pixel = ((b << j) & 0x8000) ? color : bgcolor;
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <LCD128_WriteChar+0x84>
 8000fee:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000ff0:	e000      	b.n	8000ff4 <LCD128_WriteChar+0x86>
 8000ff2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000ff4:	827b      	strh	r3, [r7, #18]
            LCD128_WriteData16(lcd, pixel);
 8000ff6:	8a7b      	ldrh	r3, [r7, #18]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f7ff fc0a 	bl	8000814 <LCD128_WriteData16>
        for (j = 0; j < font.width; j++) {
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	3301      	adds	r3, #1
 8001004:	61bb      	str	r3, [r7, #24]
 8001006:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800100a:	461a      	mov	r2, r3
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	4293      	cmp	r3, r2
 8001010:	d3e5      	bcc.n	8000fde <LCD128_WriteChar+0x70>
    for (i = 0; i < font.height; i++) {
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3301      	adds	r3, #1
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800101c:	461a      	mov	r2, r3
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	4293      	cmp	r3, r2
 8001022:	d3cb      	bcc.n	8000fbc <LCD128_WriteChar+0x4e>
        }
    }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3720      	adds	r7, #32
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <LCD128_WriteString>:

void LCD128_WriteString(LCD128_HandleTypeDef* lcd, uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800102e:	b5b0      	push	{r4, r5, r7, lr}
 8001030:	b088      	sub	sp, #32
 8001032:	af04      	add	r7, sp, #16
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	817b      	strh	r3, [r7, #10]
 800103c:	4613      	mov	r3, r2
 800103e:	813b      	strh	r3, [r7, #8]
    while (*str) {
 8001040:	e02f      	b.n	80010a2 <LCD128_WriteString+0x74>
        if (x + font.width > LCD128_WIDTH) {
 8001042:	897b      	ldrh	r3, [r7, #10]
 8001044:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001048:	4413      	add	r3, r2
 800104a:	2bf0      	cmp	r3, #240	@ 0xf0
 800104c:	dd0d      	ble.n	800106a <LCD128_WriteString+0x3c>
            x = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	817b      	strh	r3, [r7, #10]
            y += font.height;
 8001052:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001056:	461a      	mov	r2, r3
 8001058:	893b      	ldrh	r3, [r7, #8]
 800105a:	4413      	add	r3, r2
 800105c:	813b      	strh	r3, [r7, #8]
            if (y + font.height > LCD128_HEIGHT) break;
 800105e:	893b      	ldrh	r3, [r7, #8]
 8001060:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8001064:	4413      	add	r3, r2
 8001066:	2bf0      	cmp	r3, #240	@ 0xf0
 8001068:	dc20      	bgt.n	80010ac <LCD128_WriteString+0x7e>
        }
        LCD128_WriteChar(lcd, x, y, *str, font, color, bgcolor);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	781d      	ldrb	r5, [r3, #0]
 800106e:	893a      	ldrh	r2, [r7, #8]
 8001070:	897c      	ldrh	r4, [r7, #10]
 8001072:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001074:	9303      	str	r3, [sp, #12]
 8001076:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001078:	9302      	str	r3, [sp, #8]
 800107a:	466b      	mov	r3, sp
 800107c:	f107 0120 	add.w	r1, r7, #32
 8001080:	c903      	ldmia	r1, {r0, r1}
 8001082:	e883 0003 	stmia.w	r3, {r0, r1}
 8001086:	462b      	mov	r3, r5
 8001088:	4621      	mov	r1, r4
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f7ff ff6f 	bl	8000f6e <LCD128_WriteChar>
        x += font.width;
 8001090:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001094:	461a      	mov	r2, r3
 8001096:	897b      	ldrh	r3, [r7, #10]
 8001098:	4413      	add	r3, r2
 800109a:	817b      	strh	r3, [r7, #10]
        str++;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3301      	adds	r3, #1
 80010a0:	607b      	str	r3, [r7, #4]
    while (*str) {
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1cb      	bne.n	8001042 <LCD128_WriteString+0x14>
    }
}
 80010aa:	e000      	b.n	80010ae <LCD128_WriteString+0x80>
            if (y + font.height > LCD128_HEIGHT) break;
 80010ac:	bf00      	nop
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bdb0      	pop	{r4, r5, r7, pc}

080010b6 <LCD128_FillRectangle>:

void LCD128_FillRectangle(LCD128_HandleTypeDef* lcd, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b088      	sub	sp, #32
 80010ba:	af02      	add	r7, sp, #8
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	4608      	mov	r0, r1
 80010c0:	4611      	mov	r1, r2
 80010c2:	461a      	mov	r2, r3
 80010c4:	4603      	mov	r3, r0
 80010c6:	817b      	strh	r3, [r7, #10]
 80010c8:	460b      	mov	r3, r1
 80010ca:	813b      	strh	r3, [r7, #8]
 80010cc:	4613      	mov	r3, r2
 80010ce:	80fb      	strh	r3, [r7, #6]
    if ((x >= LCD128_WIDTH) || (y >= LCD128_HEIGHT)) return;
 80010d0:	897b      	ldrh	r3, [r7, #10]
 80010d2:	2bef      	cmp	r3, #239	@ 0xef
 80010d4:	d83b      	bhi.n	800114e <LCD128_FillRectangle+0x98>
 80010d6:	893b      	ldrh	r3, [r7, #8]
 80010d8:	2bef      	cmp	r3, #239	@ 0xef
 80010da:	d838      	bhi.n	800114e <LCD128_FillRectangle+0x98>
    if ((x + w - 1) >= LCD128_WIDTH) w = LCD128_WIDTH - x;
 80010dc:	897a      	ldrh	r2, [r7, #10]
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	4413      	add	r3, r2
 80010e2:	2bf0      	cmp	r3, #240	@ 0xf0
 80010e4:	dd03      	ble.n	80010ee <LCD128_FillRectangle+0x38>
 80010e6:	897b      	ldrh	r3, [r7, #10]
 80010e8:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80010ec:	80fb      	strh	r3, [r7, #6]
    if ((y + h - 1) >= LCD128_HEIGHT) h = LCD128_HEIGHT - y;
 80010ee:	893a      	ldrh	r2, [r7, #8]
 80010f0:	8c3b      	ldrh	r3, [r7, #32]
 80010f2:	4413      	add	r3, r2
 80010f4:	2bf0      	cmp	r3, #240	@ 0xf0
 80010f6:	dd03      	ble.n	8001100 <LCD128_FillRectangle+0x4a>
 80010f8:	893b      	ldrh	r3, [r7, #8]
 80010fa:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80010fe:	843b      	strh	r3, [r7, #32]
    LCD128_SetAddressWindow(lcd, x, y, x + w - 1, y + h - 1);
 8001100:	897a      	ldrh	r2, [r7, #10]
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	4413      	add	r3, r2
 8001106:	b29b      	uxth	r3, r3
 8001108:	3b01      	subs	r3, #1
 800110a:	b298      	uxth	r0, r3
 800110c:	893a      	ldrh	r2, [r7, #8]
 800110e:	8c3b      	ldrh	r3, [r7, #32]
 8001110:	4413      	add	r3, r2
 8001112:	b29b      	uxth	r3, r3
 8001114:	3b01      	subs	r3, #1
 8001116:	b29b      	uxth	r3, r3
 8001118:	893a      	ldrh	r2, [r7, #8]
 800111a:	8979      	ldrh	r1, [r7, #10]
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	4603      	mov	r3, r0
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f7ff fbb4 	bl	800088e <LCD128_SetAddressWindow>
    for (uint32_t i = 0; i < w * h; i++) {
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	e007      	b.n	800113c <LCD128_FillRectangle+0x86>
        LCD128_WriteData16(lcd, color);
 800112c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800112e:	4619      	mov	r1, r3
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f7ff fb6f 	bl	8000814 <LCD128_WriteData16>
    for (uint32_t i = 0; i < w * h; i++) {
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3301      	adds	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	8c3a      	ldrh	r2, [r7, #32]
 8001140:	fb02 f303 	mul.w	r3, r2, r3
 8001144:	461a      	mov	r2, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	4293      	cmp	r3, r2
 800114a:	d3ef      	bcc.n	800112c <LCD128_FillRectangle+0x76>
 800114c:	e000      	b.n	8001150 <LCD128_FillRectangle+0x9a>
    if ((x >= LCD128_WIDTH) || (y >= LCD128_HEIGHT)) return;
 800114e:	bf00      	nop
    }
}
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <LCD128_FillScreen>:

void LCD128_FillScreen(LCD128_HandleTypeDef* lcd, uint16_t color) {
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af02      	add	r7, sp, #8
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	460b      	mov	r3, r1
 8001160:	807b      	strh	r3, [r7, #2]
    LCD128_FillRectangle(lcd, 0, 0, LCD128_WIDTH, LCD128_HEIGHT, color);
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	23f0      	movs	r3, #240	@ 0xf0
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	23f0      	movs	r3, #240	@ 0xf0
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ffa0 	bl	80010b6 <LCD128_FillRectangle>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001186:	f000 f9ef 	bl	8001568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118a:	f000 f84b 	bl	8001224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118e:	f000 f8c5 	bl	800131c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001192:	f000 f88d 	bl	80012b0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // Khởi tạo LCD
  LCD128_Init(&lcd1);
 8001196:	4820      	ldr	r0, [pc, #128]	@ (8001218 <main+0x98>)
 8001198:	f7ff fbce 	bl	8000938 <LCD128_Init>

  // Xóa màn hình (tô đen)
  LCD128_FillScreen(&lcd1, LCD128_BLACK);
 800119c:	2100      	movs	r1, #0
 800119e:	481e      	ldr	r0, [pc, #120]	@ (8001218 <main+0x98>)
 80011a0:	f7ff ffd9 	bl	8001156 <LCD128_FillScreen>

  // Vẽ hình test
  LCD_Paint_DrawRect(&lcd1, 10, 10, 100, 100, LCD128_RED);
 80011a4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	2364      	movs	r3, #100	@ 0x64
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2364      	movs	r3, #100	@ 0x64
 80011b0:	220a      	movs	r2, #10
 80011b2:	210a      	movs	r1, #10
 80011b4:	4818      	ldr	r0, [pc, #96]	@ (8001218 <main+0x98>)
 80011b6:	f7ff fa35 	bl	8000624 <LCD_Paint_DrawRect>
  LCD_Paint_DrawCircle(&lcd1, 120, 120, 50, LCD128_GREEN);
 80011ba:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2332      	movs	r3, #50	@ 0x32
 80011c2:	2278      	movs	r2, #120	@ 0x78
 80011c4:	2178      	movs	r1, #120	@ 0x78
 80011c6:	4814      	ldr	r0, [pc, #80]	@ (8001218 <main+0x98>)
 80011c8:	f7ff f942 	bl	8000450 <LCD_Paint_DrawCircle>
  LCD_Paint_DrawLine(&lcd1, 0, 0, 239, 239, LCD128_BLUE);
 80011cc:	231f      	movs	r3, #31
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	23ef      	movs	r3, #239	@ 0xef
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	23ef      	movs	r3, #239	@ 0xef
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	480f      	ldr	r0, [pc, #60]	@ (8001218 <main+0x98>)
 80011dc:	f7ff f8d0 	bl	8000380 <LCD_Paint_DrawLine>

  // Hiển thị chuỗi ký tự
  LCD128_WriteString(&lcd1, 20, 200, "HELLO GC9A01!", Font_11x18, LCD128_YELLOW, LCD128_BLACK);
 80011e0:	2300      	movs	r3, #0
 80011e2:	9303      	str	r3, [sp, #12]
 80011e4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80011e8:	9302      	str	r3, [sp, #8]
 80011ea:	4a0c      	ldr	r2, [pc, #48]	@ (800121c <main+0x9c>)
 80011ec:	466b      	mov	r3, sp
 80011ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80011f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <main+0xa0>)
 80011f8:	22c8      	movs	r2, #200	@ 0xc8
 80011fa:	2114      	movs	r1, #20
 80011fc:	4806      	ldr	r0, [pc, #24]	@ (8001218 <main+0x98>)
 80011fe:	f7ff ff16 	bl	800102e <LCD128_WriteString>
  // Vẽ thêm một vòng tròn màu tím
  LCD_Paint_DrawCircle(&lcd1, 60, 60, 30, LCD128_MAGENTA);
 8001202:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	231e      	movs	r3, #30
 800120a:	223c      	movs	r2, #60	@ 0x3c
 800120c:	213c      	movs	r1, #60	@ 0x3c
 800120e:	4802      	ldr	r0, [pc, #8]	@ (8001218 <main+0x98>)
 8001210:	f7ff f91e 	bl	8000450 <LCD_Paint_DrawCircle>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <main+0x94>
 8001218:	20000008 	.word	0x20000008
 800121c:	20000000 	.word	0x20000000
 8001220:	080028a4 	.word	0x080028a4

08001224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b090      	sub	sp, #64	@ 0x40
 8001228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122a:	f107 0318 	add.w	r3, r7, #24
 800122e:	2228      	movs	r2, #40	@ 0x28
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f001 fafd 	bl	8002832 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001246:	2301      	movs	r3, #1
 8001248:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800124a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800124e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001254:	2301      	movs	r3, #1
 8001256:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001258:	2302      	movs	r3, #2
 800125a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001260:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001262:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001266:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001268:	f107 0318 	add.w	r3, r7, #24
 800126c:	4618      	mov	r0, r3
 800126e:	f000 fc81 	bl	8001b74 <HAL_RCC_OscConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001278:	f000 f89c 	bl	80013b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127c:	230f      	movs	r3, #15
 800127e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001280:	2302      	movs	r3, #2
 8001282:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800128c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2102      	movs	r1, #2
 8001296:	4618      	mov	r0, r3
 8001298:	f000 feee 	bl	8002078 <HAL_RCC_ClockConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012a2:	f000 f887 	bl	80013b4 <Error_Handler>
  }
}
 80012a6:	bf00      	nop
 80012a8:	3740      	adds	r7, #64	@ 0x40
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012b4:	4b17      	ldr	r3, [pc, #92]	@ (8001314 <MX_SPI1_Init+0x64>)
 80012b6:	4a18      	ldr	r2, [pc, #96]	@ (8001318 <MX_SPI1_Init+0x68>)
 80012b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ba:	4b16      	ldr	r3, [pc, #88]	@ (8001314 <MX_SPI1_Init+0x64>)
 80012bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012c2:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <MX_SPI1_Init+0x64>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012c8:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <MX_SPI1_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ce:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <MX_SPI1_Init+0x64>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <MX_SPI1_Init+0x64>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012da:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <MX_SPI1_Init+0x64>)
 80012dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80012e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <MX_SPI1_Init+0x64>)
 80012e4:	2220      	movs	r2, #32
 80012e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <MX_SPI1_Init+0x64>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <MX_SPI1_Init+0x64>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f4:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <MX_SPI1_Init+0x64>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <MX_SPI1_Init+0x64>)
 80012fc:	220a      	movs	r2, #10
 80012fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001300:	4804      	ldr	r0, [pc, #16]	@ (8001314 <MX_SPI1_Init+0x64>)
 8001302:	f001 f815 	bl	8002330 <HAL_SPI_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800130c:	f000 f852 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	2000004c 	.word	0x2000004c
 8001318:	40013000 	.word	0x40013000

0800131c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	f107 0310 	add.w	r3, r7, #16
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001330:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <MX_GPIO_Init+0x90>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a1d      	ldr	r2, [pc, #116]	@ (80013ac <MX_GPIO_Init+0x90>)
 8001336:	f043 0320 	orr.w	r3, r3, #32
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ac <MX_GPIO_Init+0x90>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0320 	and.w	r3, r3, #32
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001348:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <MX_GPIO_Init+0x90>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a17      	ldr	r2, [pc, #92]	@ (80013ac <MX_GPIO_Init+0x90>)
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <MX_GPIO_Init+0x90>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <MX_GPIO_Init+0x90>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a11      	ldr	r2, [pc, #68]	@ (80013ac <MX_GPIO_Init+0x90>)
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <MX_GPIO_Init+0x90>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	f240 4103 	movw	r1, #1027	@ 0x403
 800137e:	480c      	ldr	r0, [pc, #48]	@ (80013b0 <MX_GPIO_Init+0x94>)
 8001380:	f000 fbe0 	bl	8001b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 8001384:	f240 4303 	movw	r3, #1027	@ 0x403
 8001388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2302      	movs	r3, #2
 8001394:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	4619      	mov	r1, r3
 800139c:	4804      	ldr	r0, [pc, #16]	@ (80013b0 <MX_GPIO_Init+0x94>)
 800139e:	f000 fa4d 	bl	800183c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013a2:	bf00      	nop
 80013a4:	3720      	adds	r7, #32
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40010c00 	.word	0x40010c00

080013b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b8:	b672      	cpsid	i
}
 80013ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <Error_Handler+0x8>

080013c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <HAL_MspInit+0x5c>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	4a14      	ldr	r2, [pc, #80]	@ (800141c <HAL_MspInit+0x5c>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6193      	str	r3, [r2, #24]
 80013d2:	4b12      	ldr	r3, [pc, #72]	@ (800141c <HAL_MspInit+0x5c>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013de:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <HAL_MspInit+0x5c>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	4a0e      	ldr	r2, [pc, #56]	@ (800141c <HAL_MspInit+0x5c>)
 80013e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e8:	61d3      	str	r3, [r2, #28]
 80013ea:	4b0c      	ldr	r3, [pc, #48]	@ (800141c <HAL_MspInit+0x5c>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <HAL_MspInit+0x60>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	4a04      	ldr	r2, [pc, #16]	@ (8001420 <HAL_MspInit+0x60>)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	40021000 	.word	0x40021000
 8001420:	40010000 	.word	0x40010000

08001424 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0310 	add.w	r3, r7, #16
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a1b      	ldr	r2, [pc, #108]	@ (80014ac <HAL_SPI_MspInit+0x88>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d12f      	bne.n	80014a4 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001444:	4b1a      	ldr	r3, [pc, #104]	@ (80014b0 <HAL_SPI_MspInit+0x8c>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	4a19      	ldr	r2, [pc, #100]	@ (80014b0 <HAL_SPI_MspInit+0x8c>)
 800144a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800144e:	6193      	str	r3, [r2, #24]
 8001450:	4b17      	ldr	r3, [pc, #92]	@ (80014b0 <HAL_SPI_MspInit+0x8c>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145c:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <HAL_SPI_MspInit+0x8c>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	4a13      	ldr	r2, [pc, #76]	@ (80014b0 <HAL_SPI_MspInit+0x8c>)
 8001462:	f043 0304 	orr.w	r3, r3, #4
 8001466:	6193      	str	r3, [r2, #24]
 8001468:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <HAL_SPI_MspInit+0x8c>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001474:	23a0      	movs	r3, #160	@ 0xa0
 8001476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	4619      	mov	r1, r3
 8001486:	480b      	ldr	r0, [pc, #44]	@ (80014b4 <HAL_SPI_MspInit+0x90>)
 8001488:	f000 f9d8 	bl	800183c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800148c:	2340      	movs	r3, #64	@ 0x40
 800148e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	4619      	mov	r1, r3
 800149e:	4805      	ldr	r0, [pc, #20]	@ (80014b4 <HAL_SPI_MspInit+0x90>)
 80014a0:	f000 f9cc 	bl	800183c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80014a4:	bf00      	nop
 80014a6:	3720      	adds	r7, #32
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40013000 	.word	0x40013000
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40010800 	.word	0x40010800

080014b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <NMI_Handler+0x4>

080014c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <HardFault_Handler+0x4>

080014c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <MemManage_Handler+0x4>

080014d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <BusFault_Handler+0x4>

080014d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <UsageFault_Handler+0x4>

080014e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001508:	f000 f874 	bl	80015f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}

08001510 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800151c:	f7ff fff8 	bl	8001510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001520:	480b      	ldr	r0, [pc, #44]	@ (8001550 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001522:	490c      	ldr	r1, [pc, #48]	@ (8001554 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001524:	4a0c      	ldr	r2, [pc, #48]	@ (8001558 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a09      	ldr	r2, [pc, #36]	@ (800155c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001538:	4c09      	ldr	r4, [pc, #36]	@ (8001560 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001546:	f001 f97d 	bl	8002844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800154a:	f7ff fe19 	bl	8001180 <main>
  bx lr
 800154e:	4770      	bx	lr
  ldr r0, =_sdata
 8001550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001554:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001558:	0800363c 	.word	0x0800363c
  ldr r2, =_sbss
 800155c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001560:	200000a8 	.word	0x200000a8

08001564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001564:	e7fe      	b.n	8001564 <ADC1_2_IRQHandler>
	...

08001568 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800156c:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <HAL_Init+0x28>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a07      	ldr	r2, [pc, #28]	@ (8001590 <HAL_Init+0x28>)
 8001572:	f043 0310 	orr.w	r3, r3, #16
 8001576:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001578:	2003      	movs	r0, #3
 800157a:	f000 f92b 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157e:	200f      	movs	r0, #15
 8001580:	f000 f808 	bl	8001594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001584:	f7ff ff1c 	bl	80013c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40022000 	.word	0x40022000

08001594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800159c:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <HAL_InitTick+0x54>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <HAL_InitTick+0x58>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f935 	bl	8001822 <HAL_SYSTICK_Config>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e00e      	b.n	80015e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b0f      	cmp	r3, #15
 80015c6:	d80a      	bhi.n	80015de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c8:	2200      	movs	r2, #0
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f000 f90b 	bl	80017ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d4:	4a06      	ldr	r2, [pc, #24]	@ (80015f0 <HAL_InitTick+0x5c>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e000      	b.n	80015e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000024 	.word	0x20000024
 80015ec:	2000002c 	.word	0x2000002c
 80015f0:	20000028 	.word	0x20000028

080015f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f8:	4b05      	ldr	r3, [pc, #20]	@ (8001610 <HAL_IncTick+0x1c>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <HAL_IncTick+0x20>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4413      	add	r3, r2
 8001604:	4a03      	ldr	r2, [pc, #12]	@ (8001614 <HAL_IncTick+0x20>)
 8001606:	6013      	str	r3, [r2, #0]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	2000002c 	.word	0x2000002c
 8001614:	200000a4 	.word	0x200000a4

08001618 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;
 800161c:	4b02      	ldr	r3, [pc, #8]	@ (8001628 <HAL_GetTick+0x10>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	200000a4 	.word	0x200000a4

0800162c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001634:	f7ff fff0 	bl	8001618 <HAL_GetTick>
 8001638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001644:	d005      	beq.n	8001652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001646:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <HAL_Delay+0x44>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001652:	bf00      	nop
 8001654:	f7ff ffe0 	bl	8001618 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	429a      	cmp	r2, r3
 8001662:	d8f7      	bhi.n	8001654 <HAL_Delay+0x28>
  {
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000002c 	.word	0x2000002c

08001674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800169c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	@ (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c0:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <__NVIC_GetPriorityGrouping+0x18>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	f003 0307 	and.w	r3, r3, #7
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	db0a      	blt.n	8001702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	490c      	ldr	r1, [pc, #48]	@ (8001724 <__NVIC_SetPriority+0x4c>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	0112      	lsls	r2, r2, #4
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	440b      	add	r3, r1
 80016fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001700:	e00a      	b.n	8001718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4908      	ldr	r1, [pc, #32]	@ (8001728 <__NVIC_SetPriority+0x50>)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	3b04      	subs	r3, #4
 8001710:	0112      	lsls	r2, r2, #4
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	440b      	add	r3, r1
 8001716:	761a      	strb	r2, [r3, #24]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	@ 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f1c3 0307 	rsb	r3, r3, #7
 8001746:	2b04      	cmp	r3, #4
 8001748:	bf28      	it	cs
 800174a:	2304      	movcs	r3, #4
 800174c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3304      	adds	r3, #4
 8001752:	2b06      	cmp	r3, #6
 8001754:	d902      	bls.n	800175c <NVIC_EncodePriority+0x30>
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3b03      	subs	r3, #3
 800175a:	e000      	b.n	800175e <NVIC_EncodePriority+0x32>
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	f04f 32ff 	mov.w	r2, #4294967295
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43da      	mvns	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	401a      	ands	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001774:	f04f 31ff 	mov.w	r1, #4294967295
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	43d9      	mvns	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	4313      	orrs	r3, r2
         );
}
 8001786:	4618      	mov	r0, r3
 8001788:	3724      	adds	r7, #36	@ 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017a0:	d301      	bcc.n	80017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00f      	b.n	80017c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <SysTick_Config+0x40>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ae:	210f      	movs	r1, #15
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f7ff ff90 	bl	80016d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <SysTick_Config+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <SysTick_Config+0x40>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff49 	bl	8001674 <__NVIC_SetPriorityGrouping>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017fc:	f7ff ff5e 	bl	80016bc <__NVIC_GetPriorityGrouping>
 8001800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff ff90 	bl	800172c <NVIC_EncodePriority>
 800180c:	4602      	mov	r2, r0
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff5f 	bl	80016d8 <__NVIC_SetPriority>
}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ffb0 	bl	8001790 <SysTick_Config>
 8001830:	4603      	mov	r3, r0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800183c:	b480      	push	{r7}
 800183e:	b08b      	sub	sp, #44	@ 0x2c
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184e:	e169      	b.n	8001b24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001850:	2201      	movs	r2, #1
 8001852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	69fa      	ldr	r2, [r7, #28]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	429a      	cmp	r2, r3
 800186a:	f040 8158 	bne.w	8001b1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	4a9a      	ldr	r2, [pc, #616]	@ (8001adc <HAL_GPIO_Init+0x2a0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d05e      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 8001878:	4a98      	ldr	r2, [pc, #608]	@ (8001adc <HAL_GPIO_Init+0x2a0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d875      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 800187e:	4a98      	ldr	r2, [pc, #608]	@ (8001ae0 <HAL_GPIO_Init+0x2a4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d058      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 8001884:	4a96      	ldr	r2, [pc, #600]	@ (8001ae0 <HAL_GPIO_Init+0x2a4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d86f      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 800188a:	4a96      	ldr	r2, [pc, #600]	@ (8001ae4 <HAL_GPIO_Init+0x2a8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d052      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 8001890:	4a94      	ldr	r2, [pc, #592]	@ (8001ae4 <HAL_GPIO_Init+0x2a8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d869      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 8001896:	4a94      	ldr	r2, [pc, #592]	@ (8001ae8 <HAL_GPIO_Init+0x2ac>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d04c      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 800189c:	4a92      	ldr	r2, [pc, #584]	@ (8001ae8 <HAL_GPIO_Init+0x2ac>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d863      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 80018a2:	4a92      	ldr	r2, [pc, #584]	@ (8001aec <HAL_GPIO_Init+0x2b0>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d046      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 80018a8:	4a90      	ldr	r2, [pc, #576]	@ (8001aec <HAL_GPIO_Init+0x2b0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d85d      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 80018ae:	2b12      	cmp	r3, #18
 80018b0:	d82a      	bhi.n	8001908 <HAL_GPIO_Init+0xcc>
 80018b2:	2b12      	cmp	r3, #18
 80018b4:	d859      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 80018b6:	a201      	add	r2, pc, #4	@ (adr r2, 80018bc <HAL_GPIO_Init+0x80>)
 80018b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018bc:	08001937 	.word	0x08001937
 80018c0:	08001911 	.word	0x08001911
 80018c4:	08001923 	.word	0x08001923
 80018c8:	08001965 	.word	0x08001965
 80018cc:	0800196b 	.word	0x0800196b
 80018d0:	0800196b 	.word	0x0800196b
 80018d4:	0800196b 	.word	0x0800196b
 80018d8:	0800196b 	.word	0x0800196b
 80018dc:	0800196b 	.word	0x0800196b
 80018e0:	0800196b 	.word	0x0800196b
 80018e4:	0800196b 	.word	0x0800196b
 80018e8:	0800196b 	.word	0x0800196b
 80018ec:	0800196b 	.word	0x0800196b
 80018f0:	0800196b 	.word	0x0800196b
 80018f4:	0800196b 	.word	0x0800196b
 80018f8:	0800196b 	.word	0x0800196b
 80018fc:	0800196b 	.word	0x0800196b
 8001900:	08001919 	.word	0x08001919
 8001904:	0800192d 	.word	0x0800192d
 8001908:	4a79      	ldr	r2, [pc, #484]	@ (8001af0 <HAL_GPIO_Init+0x2b4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800190e:	e02c      	b.n	800196a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	623b      	str	r3, [r7, #32]
          break;
 8001916:	e029      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	3304      	adds	r3, #4
 800191e:	623b      	str	r3, [r7, #32]
          break;
 8001920:	e024      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	3308      	adds	r3, #8
 8001928:	623b      	str	r3, [r7, #32]
          break;
 800192a:	e01f      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	330c      	adds	r3, #12
 8001932:	623b      	str	r3, [r7, #32]
          break;
 8001934:	e01a      	b.n	800196c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800193e:	2304      	movs	r3, #4
 8001940:	623b      	str	r3, [r7, #32]
          break;
 8001942:	e013      	b.n	800196c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800194c:	2308      	movs	r3, #8
 800194e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	611a      	str	r2, [r3, #16]
          break;
 8001956:	e009      	b.n	800196c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001958:	2308      	movs	r3, #8
 800195a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	615a      	str	r2, [r3, #20]
          break;
 8001962:	e003      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001964:	2300      	movs	r3, #0
 8001966:	623b      	str	r3, [r7, #32]
          break;
 8001968:	e000      	b.n	800196c <HAL_GPIO_Init+0x130>
          break;
 800196a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2bff      	cmp	r3, #255	@ 0xff
 8001970:	d801      	bhi.n	8001976 <HAL_GPIO_Init+0x13a>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	e001      	b.n	800197a <HAL_GPIO_Init+0x13e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3304      	adds	r3, #4
 800197a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2bff      	cmp	r3, #255	@ 0xff
 8001980:	d802      	bhi.n	8001988 <HAL_GPIO_Init+0x14c>
 8001982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	e002      	b.n	800198e <HAL_GPIO_Init+0x152>
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	3b08      	subs	r3, #8
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	210f      	movs	r1, #15
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	401a      	ands	r2, r3
 80019a0:	6a39      	ldr	r1, [r7, #32]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	431a      	orrs	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80b1 	beq.w	8001b1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019bc:	4b4d      	ldr	r3, [pc, #308]	@ (8001af4 <HAL_GPIO_Init+0x2b8>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a4c      	ldr	r2, [pc, #304]	@ (8001af4 <HAL_GPIO_Init+0x2b8>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6193      	str	r3, [r2, #24]
 80019c8:	4b4a      	ldr	r3, [pc, #296]	@ (8001af4 <HAL_GPIO_Init+0x2b8>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019d4:	4a48      	ldr	r2, [pc, #288]	@ (8001af8 <HAL_GPIO_Init+0x2bc>)
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	220f      	movs	r2, #15
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	4013      	ands	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a40      	ldr	r2, [pc, #256]	@ (8001afc <HAL_GPIO_Init+0x2c0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d013      	beq.n	8001a28 <HAL_GPIO_Init+0x1ec>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a3f      	ldr	r2, [pc, #252]	@ (8001b00 <HAL_GPIO_Init+0x2c4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d00d      	beq.n	8001a24 <HAL_GPIO_Init+0x1e8>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b04 <HAL_GPIO_Init+0x2c8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d007      	beq.n	8001a20 <HAL_GPIO_Init+0x1e4>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a3d      	ldr	r2, [pc, #244]	@ (8001b08 <HAL_GPIO_Init+0x2cc>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_GPIO_Init+0x1e0>
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e006      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	e004      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e002      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a2c:	f002 0203 	and.w	r2, r2, #3
 8001a30:	0092      	lsls	r2, r2, #2
 8001a32:	4093      	lsls	r3, r2
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a3a:	492f      	ldr	r1, [pc, #188]	@ (8001af8 <HAL_GPIO_Init+0x2bc>)
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3302      	adds	r3, #2
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a54:	4b2d      	ldr	r3, [pc, #180]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	492c      	ldr	r1, [pc, #176]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	608b      	str	r3, [r1, #8]
 8001a60:	e006      	b.n	8001a70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a62:	4b2a      	ldr	r3, [pc, #168]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	4928      	ldr	r1, [pc, #160]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a7c:	4b23      	ldr	r3, [pc, #140]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	4922      	ldr	r1, [pc, #136]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	60cb      	str	r3, [r1, #12]
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a8a:	4b20      	ldr	r3, [pc, #128]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	491e      	ldr	r1, [pc, #120]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d006      	beq.n	8001ab2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aa4:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	4918      	ldr	r1, [pc, #96]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	604b      	str	r3, [r1, #4]
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ab2:	4b16      	ldr	r3, [pc, #88]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	4914      	ldr	r1, [pc, #80]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d021      	beq.n	8001b10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001acc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	490e      	ldr	r1, [pc, #56]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]
 8001ad8:	e021      	b.n	8001b1e <HAL_GPIO_Init+0x2e2>
 8001ada:	bf00      	nop
 8001adc:	10320000 	.word	0x10320000
 8001ae0:	10310000 	.word	0x10310000
 8001ae4:	10220000 	.word	0x10220000
 8001ae8:	10210000 	.word	0x10210000
 8001aec:	10120000 	.word	0x10120000
 8001af0:	10110000 	.word	0x10110000
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40010000 	.word	0x40010000
 8001afc:	40010800 	.word	0x40010800
 8001b00:	40010c00 	.word	0x40010c00
 8001b04:	40011000 	.word	0x40011000
 8001b08:	40011400 	.word	0x40011400
 8001b0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b10:	4b0b      	ldr	r3, [pc, #44]	@ (8001b40 <HAL_GPIO_Init+0x304>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	4909      	ldr	r1, [pc, #36]	@ (8001b40 <HAL_GPIO_Init+0x304>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	3301      	adds	r3, #1
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f47f ae8e 	bne.w	8001850 <HAL_GPIO_Init+0x14>
  }
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	372c      	adds	r7, #44	@ 0x2c
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	40010400 	.word	0x40010400

08001b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
 8001b50:	4613      	mov	r3, r2
 8001b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b54:	787b      	ldrb	r3, [r7, #1]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b60:	e003      	b.n	8001b6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b62:	887b      	ldrh	r3, [r7, #2]
 8001b64:	041a      	lsls	r2, r3, #16
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	611a      	str	r2, [r3, #16]
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e272      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 8087 	beq.w	8001ca2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b94:	4b92      	ldr	r3, [pc, #584]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d00c      	beq.n	8001bba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ba0:	4b8f      	ldr	r3, [pc, #572]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d112      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x5e>
 8001bac:	4b8c      	ldr	r3, [pc, #560]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bb8:	d10b      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bba:	4b89      	ldr	r3, [pc, #548]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d06c      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x12c>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d168      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e24c      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bda:	d106      	bne.n	8001bea <HAL_RCC_OscConfig+0x76>
 8001bdc:	4b80      	ldr	r3, [pc, #512]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a7f      	ldr	r2, [pc, #508]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	e02e      	b.n	8001c48 <HAL_RCC_OscConfig+0xd4>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x98>
 8001bf2:	4b7b      	ldr	r3, [pc, #492]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a7a      	ldr	r2, [pc, #488]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b78      	ldr	r3, [pc, #480]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a77      	ldr	r2, [pc, #476]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e01d      	b.n	8001c48 <HAL_RCC_OscConfig+0xd4>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0xbc>
 8001c16:	4b72      	ldr	r3, [pc, #456]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a71      	ldr	r2, [pc, #452]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	4b6f      	ldr	r3, [pc, #444]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a6e      	ldr	r2, [pc, #440]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	e00b      	b.n	8001c48 <HAL_RCC_OscConfig+0xd4>
 8001c30:	4b6b      	ldr	r3, [pc, #428]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a6a      	ldr	r2, [pc, #424]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b68      	ldr	r3, [pc, #416]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a67      	ldr	r2, [pc, #412]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d013      	beq.n	8001c78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff fce2 	bl	8001618 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c58:	f7ff fcde 	bl	8001618 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	@ 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e200      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6a:	4b5d      	ldr	r3, [pc, #372]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0xe4>
 8001c76:	e014      	b.n	8001ca2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff fcce 	bl	8001618 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff fcca 	bl	8001618 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	@ 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e1ec      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c92:	4b53      	ldr	r3, [pc, #332]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x10c>
 8001c9e:	e000      	b.n	8001ca2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d063      	beq.n	8001d76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cae:	4b4c      	ldr	r3, [pc, #304]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cba:	4b49      	ldr	r3, [pc, #292]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d11c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x18c>
 8001cc6:	4b46      	ldr	r3, [pc, #280]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d116      	bne.n	8001d00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd2:	4b43      	ldr	r3, [pc, #268]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d005      	beq.n	8001cea <HAL_RCC_OscConfig+0x176>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d001      	beq.n	8001cea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e1c0      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cea:	4b3d      	ldr	r3, [pc, #244]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4939      	ldr	r1, [pc, #228]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfe:	e03a      	b.n	8001d76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d020      	beq.n	8001d4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d08:	4b36      	ldr	r3, [pc, #216]	@ (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7ff fc83 	bl	8001618 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d16:	f7ff fc7f 	bl	8001618 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e1a1      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d28:	4b2d      	ldr	r3, [pc, #180]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d34:	4b2a      	ldr	r3, [pc, #168]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4927      	ldr	r1, [pc, #156]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]
 8001d48:	e015      	b.n	8001d76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d4a:	4b26      	ldr	r3, [pc, #152]	@ (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff fc62 	bl	8001618 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d58:	f7ff fc5e 	bl	8001618 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e180      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d03a      	beq.n	8001df8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d019      	beq.n	8001dbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8a:	4b17      	ldr	r3, [pc, #92]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d90:	f7ff fc42 	bl	8001618 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d98:	f7ff fc3e 	bl	8001618 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e160      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001daa:	4b0d      	ldr	r3, [pc, #52]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001db6:	2001      	movs	r0, #1
 8001db8:	f000 fa9c 	bl	80022f4 <RCC_Delay>
 8001dbc:	e01c      	b.n	8001df8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc4:	f7ff fc28 	bl	8001618 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dca:	e00f      	b.n	8001dec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dcc:	f7ff fc24 	bl	8001618 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d908      	bls.n	8001dec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e146      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	42420000 	.word	0x42420000
 8001de8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dec:	4b92      	ldr	r3, [pc, #584]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1e9      	bne.n	8001dcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80a6 	beq.w	8001f52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0a:	4b8b      	ldr	r3, [pc, #556]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10d      	bne.n	8001e32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	4b88      	ldr	r3, [pc, #544]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4a87      	ldr	r2, [pc, #540]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e20:	61d3      	str	r3, [r2, #28]
 8001e22:	4b85      	ldr	r3, [pc, #532]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e32:	4b82      	ldr	r3, [pc, #520]	@ (800203c <HAL_RCC_OscConfig+0x4c8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d118      	bne.n	8001e70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3e:	4b7f      	ldr	r3, [pc, #508]	@ (800203c <HAL_RCC_OscConfig+0x4c8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a7e      	ldr	r2, [pc, #504]	@ (800203c <HAL_RCC_OscConfig+0x4c8>)
 8001e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff fbe5 	bl	8001618 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e52:	f7ff fbe1 	bl	8001618 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b64      	cmp	r3, #100	@ 0x64
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e103      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	4b75      	ldr	r3, [pc, #468]	@ (800203c <HAL_RCC_OscConfig+0x4c8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d106      	bne.n	8001e86 <HAL_RCC_OscConfig+0x312>
 8001e78:	4b6f      	ldr	r3, [pc, #444]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4a6e      	ldr	r2, [pc, #440]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6213      	str	r3, [r2, #32]
 8001e84:	e02d      	b.n	8001ee2 <HAL_RCC_OscConfig+0x36e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x334>
 8001e8e:	4b6a      	ldr	r3, [pc, #424]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	4a69      	ldr	r2, [pc, #420]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	6213      	str	r3, [r2, #32]
 8001e9a:	4b67      	ldr	r3, [pc, #412]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4a66      	ldr	r2, [pc, #408]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	f023 0304 	bic.w	r3, r3, #4
 8001ea4:	6213      	str	r3, [r2, #32]
 8001ea6:	e01c      	b.n	8001ee2 <HAL_RCC_OscConfig+0x36e>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d10c      	bne.n	8001eca <HAL_RCC_OscConfig+0x356>
 8001eb0:	4b61      	ldr	r3, [pc, #388]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4a60      	ldr	r2, [pc, #384]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	f043 0304 	orr.w	r3, r3, #4
 8001eba:	6213      	str	r3, [r2, #32]
 8001ebc:	4b5e      	ldr	r3, [pc, #376]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4a5d      	ldr	r2, [pc, #372]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6213      	str	r3, [r2, #32]
 8001ec8:	e00b      	b.n	8001ee2 <HAL_RCC_OscConfig+0x36e>
 8001eca:	4b5b      	ldr	r3, [pc, #364]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	4a5a      	ldr	r2, [pc, #360]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
 8001ed4:	6213      	str	r3, [r2, #32]
 8001ed6:	4b58      	ldr	r3, [pc, #352]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	4a57      	ldr	r2, [pc, #348]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	f023 0304 	bic.w	r3, r3, #4
 8001ee0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d015      	beq.n	8001f16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eea:	f7ff fb95 	bl	8001618 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef0:	e00a      	b.n	8001f08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef2:	f7ff fb91 	bl	8001618 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e0b1      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f08:	4b4b      	ldr	r3, [pc, #300]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0ee      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x37e>
 8001f14:	e014      	b.n	8001f40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f16:	f7ff fb7f 	bl	8001618 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1c:	e00a      	b.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7ff fb7b 	bl	8001618 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e09b      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f34:	4b40      	ldr	r3, [pc, #256]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1ee      	bne.n	8001f1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d105      	bne.n	8001f52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f46:	4b3c      	ldr	r3, [pc, #240]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	4a3b      	ldr	r2, [pc, #236]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8087 	beq.w	800206a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f5c:	4b36      	ldr	r3, [pc, #216]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d061      	beq.n	800202c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d146      	bne.n	8001ffe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f70:	4b33      	ldr	r3, [pc, #204]	@ (8002040 <HAL_RCC_OscConfig+0x4cc>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7ff fb4f 	bl	8001618 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7ff fb4b 	bl	8001618 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e06d      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f90:	4b29      	ldr	r3, [pc, #164]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f0      	bne.n	8001f7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fa4:	d108      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fa6:	4b24      	ldr	r3, [pc, #144]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	4921      	ldr	r1, [pc, #132]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a19      	ldr	r1, [r3, #32]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	491b      	ldr	r1, [pc, #108]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002040 <HAL_RCC_OscConfig+0x4cc>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7ff fb1f 	bl	8001618 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fde:	f7ff fb1b 	bl	8001618 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e03d      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff0:	4b11      	ldr	r3, [pc, #68]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x46a>
 8001ffc:	e035      	b.n	800206a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffe:	4b10      	ldr	r3, [pc, #64]	@ (8002040 <HAL_RCC_OscConfig+0x4cc>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7ff fb08 	bl	8001618 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200c:	f7ff fb04 	bl	8001618 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e026      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800201e:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x498>
 800202a:	e01e      	b.n	800206a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d107      	bne.n	8002044 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e019      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
 8002038:	40021000 	.word	0x40021000
 800203c:	40007000 	.word	0x40007000
 8002040:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002044:	4b0b      	ldr	r3, [pc, #44]	@ (8002074 <HAL_RCC_OscConfig+0x500>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	429a      	cmp	r2, r3
 8002056:	d106      	bne.n	8002066 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000

08002078 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0d0      	b.n	800222e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800208c:	4b6a      	ldr	r3, [pc, #424]	@ (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d910      	bls.n	80020bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b67      	ldr	r3, [pc, #412]	@ (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 0207 	bic.w	r2, r3, #7
 80020a2:	4965      	ldr	r1, [pc, #404]	@ (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b63      	ldr	r3, [pc, #396]	@ (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0b8      	b.n	800222e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d020      	beq.n	800210a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d4:	4b59      	ldr	r3, [pc, #356]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4a58      	ldr	r2, [pc, #352]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020ec:	4b53      	ldr	r3, [pc, #332]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4a52      	ldr	r2, [pc, #328]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80020f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b50      	ldr	r3, [pc, #320]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	494d      	ldr	r1, [pc, #308]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d040      	beq.n	8002198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d107      	bne.n	800212e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	4b47      	ldr	r3, [pc, #284]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d115      	bne.n	8002156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e07f      	b.n	800222e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d107      	bne.n	8002146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002136:	4b41      	ldr	r3, [pc, #260]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e073      	b.n	800222e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002146:	4b3d      	ldr	r3, [pc, #244]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e06b      	b.n	800222e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002156:	4b39      	ldr	r3, [pc, #228]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f023 0203 	bic.w	r2, r3, #3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	4936      	ldr	r1, [pc, #216]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	4313      	orrs	r3, r2
 8002166:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002168:	f7ff fa56 	bl	8001618 <HAL_GetTick>
 800216c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216e:	e00a      	b.n	8002186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002170:	f7ff fa52 	bl	8001618 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e053      	b.n	800222e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002186:	4b2d      	ldr	r3, [pc, #180]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 020c 	and.w	r2, r3, #12
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	429a      	cmp	r2, r3
 8002196:	d1eb      	bne.n	8002170 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002198:	4b27      	ldr	r3, [pc, #156]	@ (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d210      	bcs.n	80021c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a6:	4b24      	ldr	r3, [pc, #144]	@ (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 0207 	bic.w	r2, r3, #7
 80021ae:	4922      	ldr	r1, [pc, #136]	@ (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b20      	ldr	r3, [pc, #128]	@ (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e032      	b.n	800222e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d4:	4b19      	ldr	r3, [pc, #100]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4916      	ldr	r1, [pc, #88]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d009      	beq.n	8002206 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021f2:	4b12      	ldr	r3, [pc, #72]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	490e      	ldr	r1, [pc, #56]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002206:	f000 f821 	bl	800224c <HAL_RCC_GetSysClockFreq>
 800220a:	4602      	mov	r2, r0
 800220c:	4b0b      	ldr	r3, [pc, #44]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	490a      	ldr	r1, [pc, #40]	@ (8002240 <HAL_RCC_ClockConfig+0x1c8>)
 8002218:	5ccb      	ldrb	r3, [r1, r3]
 800221a:	fa22 f303 	lsr.w	r3, r2, r3
 800221e:	4a09      	ldr	r2, [pc, #36]	@ (8002244 <HAL_RCC_ClockConfig+0x1cc>)
 8002220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002222:	4b09      	ldr	r3, [pc, #36]	@ (8002248 <HAL_RCC_ClockConfig+0x1d0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff f9b4 	bl	8001594 <HAL_InitTick>

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40022000 	.word	0x40022000
 800223c:	40021000 	.word	0x40021000
 8002240:	08003610 	.word	0x08003610
 8002244:	20000024 	.word	0x20000024
 8002248:	20000028 	.word	0x20000028

0800224c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002266:	4b1e      	ldr	r3, [pc, #120]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b04      	cmp	r3, #4
 8002274:	d002      	beq.n	800227c <HAL_RCC_GetSysClockFreq+0x30>
 8002276:	2b08      	cmp	r3, #8
 8002278:	d003      	beq.n	8002282 <HAL_RCC_GetSysClockFreq+0x36>
 800227a:	e027      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800227c:	4b19      	ldr	r3, [pc, #100]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800227e:	613b      	str	r3, [r7, #16]
      break;
 8002280:	e027      	b.n	80022d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	0c9b      	lsrs	r3, r3, #18
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	4a17      	ldr	r2, [pc, #92]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800228c:	5cd3      	ldrb	r3, [r2, r3]
 800228e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d010      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800229a:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	0c5b      	lsrs	r3, r3, #17
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	4a11      	ldr	r2, [pc, #68]	@ (80022ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80022a6:	5cd3      	ldrb	r3, [r2, r3]
 80022a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a0d      	ldr	r2, [pc, #52]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ae:	fb03 f202 	mul.w	r2, r3, r2
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	e004      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a0c      	ldr	r2, [pc, #48]	@ (80022f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022c0:	fb02 f303 	mul.w	r3, r2, r3
 80022c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	613b      	str	r3, [r7, #16]
      break;
 80022ca:	e002      	b.n	80022d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022cc:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ce:	613b      	str	r3, [r7, #16]
      break;
 80022d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022d2:	693b      	ldr	r3, [r7, #16]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	371c      	adds	r7, #28
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
 80022e4:	007a1200 	.word	0x007a1200
 80022e8:	08003620 	.word	0x08003620
 80022ec:	08003630 	.word	0x08003630
 80022f0:	003d0900 	.word	0x003d0900

080022f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002328 <RCC_Delay+0x34>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0a      	ldr	r2, [pc, #40]	@ (800232c <RCC_Delay+0x38>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	0a5b      	lsrs	r3, r3, #9
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002310:	bf00      	nop
  }
  while (Delay --);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1e5a      	subs	r2, r3, #1
 8002316:	60fa      	str	r2, [r7, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f9      	bne.n	8002310 <RCC_Delay+0x1c>
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr
 8002328:	20000024 	.word	0x20000024
 800232c:	10624dd3 	.word	0x10624dd3

08002330 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e076      	b.n	8002430 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002346:	2b00      	cmp	r3, #0
 8002348:	d108      	bne.n	800235c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002352:	d009      	beq.n	8002368 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
 800235a:	e005      	b.n	8002368 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff f84e 	bl	8001424 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800239e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ec:	ea42 0103 	orr.w	r1, r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	0c1a      	lsrs	r2, r3, #16
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f002 0204 	and.w	r2, r2, #4
 800240e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	69da      	ldr	r2, [r3, #28]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800241e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	4613      	mov	r3, r2
 8002446:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002448:	f7ff f8e6 	bl	8001618 <HAL_GetTick>
 800244c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b01      	cmp	r3, #1
 800245c:	d001      	beq.n	8002462 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800245e:	2302      	movs	r3, #2
 8002460:	e12a      	b.n	80026b8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <HAL_SPI_Transmit+0x36>
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e122      	b.n	80026b8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_SPI_Transmit+0x48>
 800247c:	2302      	movs	r3, #2
 800247e:	e11b      	b.n	80026b8 <HAL_SPI_Transmit+0x280>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2203      	movs	r2, #3
 800248c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	88fa      	ldrh	r2, [r7, #6]
 80024a0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	88fa      	ldrh	r2, [r7, #6]
 80024a6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024ce:	d10f      	bne.n	80024f0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024fa:	2b40      	cmp	r3, #64	@ 0x40
 80024fc:	d007      	beq.n	800250e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800250c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002516:	d152      	bne.n	80025be <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <HAL_SPI_Transmit+0xee>
 8002520:	8b7b      	ldrh	r3, [r7, #26]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d145      	bne.n	80025b2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	881a      	ldrh	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	1c9a      	adds	r2, r3, #2
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002540:	b29b      	uxth	r3, r3
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800254a:	e032      	b.n	80025b2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b02      	cmp	r3, #2
 8002558:	d112      	bne.n	8002580 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	881a      	ldrh	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	1c9a      	adds	r2, r3, #2
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800257e:	e018      	b.n	80025b2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002580:	f7ff f84a 	bl	8001618 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d803      	bhi.n	8002598 <HAL_SPI_Transmit+0x160>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002596:	d102      	bne.n	800259e <HAL_SPI_Transmit+0x166>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d109      	bne.n	80025b2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e082      	b.n	80026b8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1c7      	bne.n	800254c <HAL_SPI_Transmit+0x114>
 80025bc:	e053      	b.n	8002666 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <HAL_SPI_Transmit+0x194>
 80025c6:	8b7b      	ldrh	r3, [r7, #26]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d147      	bne.n	800265c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	330c      	adds	r3, #12
 80025d6:	7812      	ldrb	r2, [r2, #0]
 80025d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80025f2:	e033      	b.n	800265c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d113      	bne.n	800262a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	330c      	adds	r3, #12
 800260c:	7812      	ldrb	r2, [r2, #0]
 800260e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800261e:	b29b      	uxth	r3, r3
 8002620:	3b01      	subs	r3, #1
 8002622:	b29a      	uxth	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002628:	e018      	b.n	800265c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800262a:	f7fe fff5 	bl	8001618 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d803      	bhi.n	8002642 <HAL_SPI_Transmit+0x20a>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002640:	d102      	bne.n	8002648 <HAL_SPI_Transmit+0x210>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d109      	bne.n	800265c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e02d      	b.n	80026b8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1c6      	bne.n	80025f4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002666:	69fa      	ldr	r2, [r7, #28]
 8002668:	6839      	ldr	r1, [r7, #0]
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 f8b0 	bl	80027d0 <SPI_EndRxTxTransaction>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2220      	movs	r2, #32
 800267a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10a      	bne.n	800269a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80026b6:	2300      	movs	r3, #0
  }
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3720      	adds	r7, #32
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	4613      	mov	r3, r2
 80026ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026d0:	f7fe ffa2 	bl	8001618 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	4413      	add	r3, r2
 80026de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026e0:	f7fe ff9a 	bl	8001618 <HAL_GetTick>
 80026e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026e6:	4b39      	ldr	r3, [pc, #228]	@ (80027cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	015b      	lsls	r3, r3, #5
 80026ec:	0d1b      	lsrs	r3, r3, #20
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	fb02 f303 	mul.w	r3, r2, r3
 80026f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026f6:	e054      	b.n	80027a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fe:	d050      	beq.n	80027a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002700:	f7fe ff8a 	bl	8001618 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	429a      	cmp	r2, r3
 800270e:	d902      	bls.n	8002716 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d13d      	bne.n	8002792 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002724:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800272e:	d111      	bne.n	8002754 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002738:	d004      	beq.n	8002744 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002742:	d107      	bne.n	8002754 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002752:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800275c:	d10f      	bne.n	800277e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800277c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e017      	b.n	80027c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3b01      	subs	r3, #1
 80027a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4013      	ands	r3, r2
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	bf0c      	ite	eq
 80027b2:	2301      	moveq	r3, #1
 80027b4:	2300      	movne	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d19b      	bne.n	80026f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3720      	adds	r7, #32
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000024 	.word	0x20000024

080027d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2201      	movs	r2, #1
 80027e4:	2102      	movs	r1, #2
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f7ff ff6a 	bl	80026c0 <SPI_WaitFlagStateUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f6:	f043 0220 	orr.w	r2, r3, #32
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e013      	b.n	800282a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2200      	movs	r2, #0
 800280a:	2180      	movs	r1, #128	@ 0x80
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f7ff ff57 	bl	80026c0 <SPI_WaitFlagStateUntilTimeout>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281c:	f043 0220 	orr.w	r2, r3, #32
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e000      	b.n	800282a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <memset>:
 8002832:	4603      	mov	r3, r0
 8002834:	4402      	add	r2, r0
 8002836:	4293      	cmp	r3, r2
 8002838:	d100      	bne.n	800283c <memset+0xa>
 800283a:	4770      	bx	lr
 800283c:	f803 1b01 	strb.w	r1, [r3], #1
 8002840:	e7f9      	b.n	8002836 <memset+0x4>
	...

08002844 <__libc_init_array>:
 8002844:	b570      	push	{r4, r5, r6, lr}
 8002846:	2600      	movs	r6, #0
 8002848:	4d0c      	ldr	r5, [pc, #48]	@ (800287c <__libc_init_array+0x38>)
 800284a:	4c0d      	ldr	r4, [pc, #52]	@ (8002880 <__libc_init_array+0x3c>)
 800284c:	1b64      	subs	r4, r4, r5
 800284e:	10a4      	asrs	r4, r4, #2
 8002850:	42a6      	cmp	r6, r4
 8002852:	d109      	bne.n	8002868 <__libc_init_array+0x24>
 8002854:	f000 f81a 	bl	800288c <_init>
 8002858:	2600      	movs	r6, #0
 800285a:	4d0a      	ldr	r5, [pc, #40]	@ (8002884 <__libc_init_array+0x40>)
 800285c:	4c0a      	ldr	r4, [pc, #40]	@ (8002888 <__libc_init_array+0x44>)
 800285e:	1b64      	subs	r4, r4, r5
 8002860:	10a4      	asrs	r4, r4, #2
 8002862:	42a6      	cmp	r6, r4
 8002864:	d105      	bne.n	8002872 <__libc_init_array+0x2e>
 8002866:	bd70      	pop	{r4, r5, r6, pc}
 8002868:	f855 3b04 	ldr.w	r3, [r5], #4
 800286c:	4798      	blx	r3
 800286e:	3601      	adds	r6, #1
 8002870:	e7ee      	b.n	8002850 <__libc_init_array+0xc>
 8002872:	f855 3b04 	ldr.w	r3, [r5], #4
 8002876:	4798      	blx	r3
 8002878:	3601      	adds	r6, #1
 800287a:	e7f2      	b.n	8002862 <__libc_init_array+0x1e>
 800287c:	08003634 	.word	0x08003634
 8002880:	08003634 	.word	0x08003634
 8002884:	08003634 	.word	0x08003634
 8002888:	08003638 	.word	0x08003638

0800288c <_init>:
 800288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288e:	bf00      	nop
 8002890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002892:	bc08      	pop	{r3}
 8002894:	469e      	mov	lr, r3
 8002896:	4770      	bx	lr

08002898 <_fini>:
 8002898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289a:	bf00      	nop
 800289c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289e:	bc08      	pop	{r3}
 80028a0:	469e      	mov	lr, r3
 80028a2:	4770      	bx	lr
