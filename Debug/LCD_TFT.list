
LCD_TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f64  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08007070  08007070  00008070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007564  08007564  00009068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007564  08007564  00009068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007564  08007564  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007564  08007564  00008564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007568  08007568  00008568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800756c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037a0  20000068  080075d4  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003808  080075d4  00009808  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008386  00000000  00000000  00009091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c3d  00000000  00000000  00011417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  00013058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000067f  00000000  00000000  00013910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018247  00000000  00000000  00013f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000addb  00000000  00000000  0002c1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084e93  00000000  00000000  00036fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbe44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003050  00000000  00000000  000bbe88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000beed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08007058 	.word	0x08007058

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08007058 	.word	0x08007058

0800014c <__aeabi_dmul>:
 800014c:	b570      	push	{r4, r5, r6, lr}
 800014e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000152:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000156:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015a:	bf1d      	ittte	ne
 800015c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000160:	ea94 0f0c 	teqne	r4, ip
 8000164:	ea95 0f0c 	teqne	r5, ip
 8000168:	f000 f8de 	bleq	8000328 <__aeabi_dmul+0x1dc>
 800016c:	442c      	add	r4, r5
 800016e:	ea81 0603 	eor.w	r6, r1, r3
 8000172:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000176:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800017e:	bf18      	it	ne
 8000180:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000184:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000188:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800018c:	d038      	beq.n	8000200 <__aeabi_dmul+0xb4>
 800018e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000192:	f04f 0500 	mov.w	r5, #0
 8000196:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800019e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a2:	f04f 0600 	mov.w	r6, #0
 80001a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001aa:	f09c 0f00 	teq	ip, #0
 80001ae:	bf18      	it	ne
 80001b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001b8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001bc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c0:	d204      	bcs.n	80001cc <__aeabi_dmul+0x80>
 80001c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001c6:	416d      	adcs	r5, r5
 80001c8:	eb46 0606 	adc.w	r6, r6, r6
 80001cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e4:	bf88      	it	hi
 80001e6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ea:	d81e      	bhi.n	800022a <__aeabi_dmul+0xde>
 80001ec:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f0:	bf08      	it	eq
 80001f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001f6:	f150 0000 	adcs.w	r0, r0, #0
 80001fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80001fe:	bd70      	pop	{r4, r5, r6, pc}
 8000200:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000204:	ea46 0101 	orr.w	r1, r6, r1
 8000208:	ea40 0002 	orr.w	r0, r0, r2
 800020c:	ea81 0103 	eor.w	r1, r1, r3
 8000210:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000214:	bfc2      	ittt	gt
 8000216:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800021e:	bd70      	popgt	{r4, r5, r6, pc}
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000224:	f04f 0e00 	mov.w	lr, #0
 8000228:	3c01      	subs	r4, #1
 800022a:	f300 80ab 	bgt.w	8000384 <__aeabi_dmul+0x238>
 800022e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000232:	bfde      	ittt	le
 8000234:	2000      	movle	r0, #0
 8000236:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023a:	bd70      	pople	{r4, r5, r6, pc}
 800023c:	f1c4 0400 	rsb	r4, r4, #0
 8000240:	3c20      	subs	r4, #32
 8000242:	da35      	bge.n	80002b0 <__aeabi_dmul+0x164>
 8000244:	340c      	adds	r4, #12
 8000246:	dc1b      	bgt.n	8000280 <__aeabi_dmul+0x134>
 8000248:	f104 0414 	add.w	r4, r4, #20
 800024c:	f1c4 0520 	rsb	r5, r4, #32
 8000250:	fa00 f305 	lsl.w	r3, r0, r5
 8000254:	fa20 f004 	lsr.w	r0, r0, r4
 8000258:	fa01 f205 	lsl.w	r2, r1, r5
 800025c:	ea40 0002 	orr.w	r0, r0, r2
 8000260:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000264:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000268:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800026c:	fa21 f604 	lsr.w	r6, r1, r4
 8000270:	eb42 0106 	adc.w	r1, r2, r6
 8000274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000278:	bf08      	it	eq
 800027a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	f1c4 040c 	rsb	r4, r4, #12
 8000284:	f1c4 0520 	rsb	r5, r4, #32
 8000288:	fa00 f304 	lsl.w	r3, r0, r4
 800028c:	fa20 f005 	lsr.w	r0, r0, r5
 8000290:	fa01 f204 	lsl.w	r2, r1, r4
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800029c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a0:	f141 0100 	adc.w	r1, r1, #0
 80002a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002a8:	bf08      	it	eq
 80002aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f1c4 0520 	rsb	r5, r4, #32
 80002b4:	fa00 f205 	lsl.w	r2, r0, r5
 80002b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002bc:	fa20 f304 	lsr.w	r3, r0, r4
 80002c0:	fa01 f205 	lsl.w	r2, r1, r5
 80002c4:	ea43 0302 	orr.w	r3, r3, r2
 80002c8:	fa21 f004 	lsr.w	r0, r1, r4
 80002cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d0:	fa21 f204 	lsr.w	r2, r1, r4
 80002d4:	ea20 0002 	bic.w	r0, r0, r2
 80002d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e0:	bf08      	it	eq
 80002e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002e6:	bd70      	pop	{r4, r5, r6, pc}
 80002e8:	f094 0f00 	teq	r4, #0
 80002ec:	d10f      	bne.n	800030e <__aeabi_dmul+0x1c2>
 80002ee:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f2:	0040      	lsls	r0, r0, #1
 80002f4:	eb41 0101 	adc.w	r1, r1, r1
 80002f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80002fc:	bf08      	it	eq
 80002fe:	3c01      	subeq	r4, #1
 8000300:	d0f7      	beq.n	80002f2 <__aeabi_dmul+0x1a6>
 8000302:	ea41 0106 	orr.w	r1, r1, r6
 8000306:	f095 0f00 	teq	r5, #0
 800030a:	bf18      	it	ne
 800030c:	4770      	bxne	lr
 800030e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000312:	0052      	lsls	r2, r2, #1
 8000314:	eb43 0303 	adc.w	r3, r3, r3
 8000318:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800031c:	bf08      	it	eq
 800031e:	3d01      	subeq	r5, #1
 8000320:	d0f7      	beq.n	8000312 <__aeabi_dmul+0x1c6>
 8000322:	ea43 0306 	orr.w	r3, r3, r6
 8000326:	4770      	bx	lr
 8000328:	ea94 0f0c 	teq	r4, ip
 800032c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000330:	bf18      	it	ne
 8000332:	ea95 0f0c 	teqne	r5, ip
 8000336:	d00c      	beq.n	8000352 <__aeabi_dmul+0x206>
 8000338:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800033c:	bf18      	it	ne
 800033e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000342:	d1d1      	bne.n	80002e8 <__aeabi_dmul+0x19c>
 8000344:	ea81 0103 	eor.w	r1, r1, r3
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	f04f 0000 	mov.w	r0, #0
 8000350:	bd70      	pop	{r4, r5, r6, pc}
 8000352:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000356:	bf06      	itte	eq
 8000358:	4610      	moveq	r0, r2
 800035a:	4619      	moveq	r1, r3
 800035c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000360:	d019      	beq.n	8000396 <__aeabi_dmul+0x24a>
 8000362:	ea94 0f0c 	teq	r4, ip
 8000366:	d102      	bne.n	800036e <__aeabi_dmul+0x222>
 8000368:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800036c:	d113      	bne.n	8000396 <__aeabi_dmul+0x24a>
 800036e:	ea95 0f0c 	teq	r5, ip
 8000372:	d105      	bne.n	8000380 <__aeabi_dmul+0x234>
 8000374:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000378:	bf1c      	itt	ne
 800037a:	4610      	movne	r0, r2
 800037c:	4619      	movne	r1, r3
 800037e:	d10a      	bne.n	8000396 <__aeabi_dmul+0x24a>
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000388:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800038c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000390:	f04f 0000 	mov.w	r0, #0
 8000394:	bd70      	pop	{r4, r5, r6, pc}
 8000396:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800039e:	bd70      	pop	{r4, r5, r6, pc}

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_d2iz>:
 8000718:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800071c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000720:	d215      	bcs.n	800074e <__aeabi_d2iz+0x36>
 8000722:	d511      	bpl.n	8000748 <__aeabi_d2iz+0x30>
 8000724:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000728:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800072c:	d912      	bls.n	8000754 <__aeabi_d2iz+0x3c>
 800072e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000732:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000736:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	bf18      	it	ne
 8000744:	4240      	negne	r0, r0
 8000746:	4770      	bx	lr
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	4770      	bx	lr
 800074e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000752:	d105      	bne.n	8000760 <__aeabi_d2iz+0x48>
 8000754:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000758:	bf08      	it	eq
 800075a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800075e:	4770      	bx	lr
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop

08000768 <__aeabi_frsub>:
 8000768:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800076c:	e002      	b.n	8000774 <__addsf3>
 800076e:	bf00      	nop

08000770 <__aeabi_fsub>:
 8000770:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000774 <__addsf3>:
 8000774:	0042      	lsls	r2, r0, #1
 8000776:	bf1f      	itttt	ne
 8000778:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800077c:	ea92 0f03 	teqne	r2, r3
 8000780:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000784:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000788:	d06a      	beq.n	8000860 <__addsf3+0xec>
 800078a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800078e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000792:	bfc1      	itttt	gt
 8000794:	18d2      	addgt	r2, r2, r3
 8000796:	4041      	eorgt	r1, r0
 8000798:	4048      	eorgt	r0, r1
 800079a:	4041      	eorgt	r1, r0
 800079c:	bfb8      	it	lt
 800079e:	425b      	neglt	r3, r3
 80007a0:	2b19      	cmp	r3, #25
 80007a2:	bf88      	it	hi
 80007a4:	4770      	bxhi	lr
 80007a6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80007aa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007ae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80007b2:	bf18      	it	ne
 80007b4:	4240      	negne	r0, r0
 80007b6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007ba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80007be:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80007c2:	bf18      	it	ne
 80007c4:	4249      	negne	r1, r1
 80007c6:	ea92 0f03 	teq	r2, r3
 80007ca:	d03f      	beq.n	800084c <__addsf3+0xd8>
 80007cc:	f1a2 0201 	sub.w	r2, r2, #1
 80007d0:	fa41 fc03 	asr.w	ip, r1, r3
 80007d4:	eb10 000c 	adds.w	r0, r0, ip
 80007d8:	f1c3 0320 	rsb	r3, r3, #32
 80007dc:	fa01 f103 	lsl.w	r1, r1, r3
 80007e0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007e4:	d502      	bpl.n	80007ec <__addsf3+0x78>
 80007e6:	4249      	negs	r1, r1
 80007e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007ec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007f0:	d313      	bcc.n	800081a <__addsf3+0xa6>
 80007f2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007f6:	d306      	bcc.n	8000806 <__addsf3+0x92>
 80007f8:	0840      	lsrs	r0, r0, #1
 80007fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80007fe:	f102 0201 	add.w	r2, r2, #1
 8000802:	2afe      	cmp	r2, #254	@ 0xfe
 8000804:	d251      	bcs.n	80008aa <__addsf3+0x136>
 8000806:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800080a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800080e:	bf08      	it	eq
 8000810:	f020 0001 	biceq.w	r0, r0, #1
 8000814:	ea40 0003 	orr.w	r0, r0, r3
 8000818:	4770      	bx	lr
 800081a:	0049      	lsls	r1, r1, #1
 800081c:	eb40 0000 	adc.w	r0, r0, r0
 8000820:	3a01      	subs	r2, #1
 8000822:	bf28      	it	cs
 8000824:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000828:	d2ed      	bcs.n	8000806 <__addsf3+0x92>
 800082a:	fab0 fc80 	clz	ip, r0
 800082e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000832:	ebb2 020c 	subs.w	r2, r2, ip
 8000836:	fa00 f00c 	lsl.w	r0, r0, ip
 800083a:	bfaa      	itet	ge
 800083c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000840:	4252      	neglt	r2, r2
 8000842:	4318      	orrge	r0, r3
 8000844:	bfbc      	itt	lt
 8000846:	40d0      	lsrlt	r0, r2
 8000848:	4318      	orrlt	r0, r3
 800084a:	4770      	bx	lr
 800084c:	f092 0f00 	teq	r2, #0
 8000850:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000854:	bf06      	itte	eq
 8000856:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800085a:	3201      	addeq	r2, #1
 800085c:	3b01      	subne	r3, #1
 800085e:	e7b5      	b.n	80007cc <__addsf3+0x58>
 8000860:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000864:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000868:	bf18      	it	ne
 800086a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800086e:	d021      	beq.n	80008b4 <__addsf3+0x140>
 8000870:	ea92 0f03 	teq	r2, r3
 8000874:	d004      	beq.n	8000880 <__addsf3+0x10c>
 8000876:	f092 0f00 	teq	r2, #0
 800087a:	bf08      	it	eq
 800087c:	4608      	moveq	r0, r1
 800087e:	4770      	bx	lr
 8000880:	ea90 0f01 	teq	r0, r1
 8000884:	bf1c      	itt	ne
 8000886:	2000      	movne	r0, #0
 8000888:	4770      	bxne	lr
 800088a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800088e:	d104      	bne.n	800089a <__addsf3+0x126>
 8000890:	0040      	lsls	r0, r0, #1
 8000892:	bf28      	it	cs
 8000894:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000898:	4770      	bx	lr
 800089a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800089e:	bf3c      	itt	cc
 80008a0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80008a4:	4770      	bxcc	lr
 80008a6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80008aa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80008ae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008b2:	4770      	bx	lr
 80008b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008b8:	bf16      	itet	ne
 80008ba:	4608      	movne	r0, r1
 80008bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008c0:	4601      	movne	r1, r0
 80008c2:	0242      	lsls	r2, r0, #9
 80008c4:	bf06      	itte	eq
 80008c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008ca:	ea90 0f01 	teqeq	r0, r1
 80008ce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80008d2:	4770      	bx	lr

080008d4 <__aeabi_ui2f>:
 80008d4:	f04f 0300 	mov.w	r3, #0
 80008d8:	e004      	b.n	80008e4 <__aeabi_i2f+0x8>
 80008da:	bf00      	nop

080008dc <__aeabi_i2f>:
 80008dc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008e0:	bf48      	it	mi
 80008e2:	4240      	negmi	r0, r0
 80008e4:	ea5f 0c00 	movs.w	ip, r0
 80008e8:	bf08      	it	eq
 80008ea:	4770      	bxeq	lr
 80008ec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008f0:	4601      	mov	r1, r0
 80008f2:	f04f 0000 	mov.w	r0, #0
 80008f6:	e01c      	b.n	8000932 <__aeabi_l2f+0x2a>

080008f8 <__aeabi_ul2f>:
 80008f8:	ea50 0201 	orrs.w	r2, r0, r1
 80008fc:	bf08      	it	eq
 80008fe:	4770      	bxeq	lr
 8000900:	f04f 0300 	mov.w	r3, #0
 8000904:	e00a      	b.n	800091c <__aeabi_l2f+0x14>
 8000906:	bf00      	nop

08000908 <__aeabi_l2f>:
 8000908:	ea50 0201 	orrs.w	r2, r0, r1
 800090c:	bf08      	it	eq
 800090e:	4770      	bxeq	lr
 8000910:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000914:	d502      	bpl.n	800091c <__aeabi_l2f+0x14>
 8000916:	4240      	negs	r0, r0
 8000918:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800091c:	ea5f 0c01 	movs.w	ip, r1
 8000920:	bf02      	ittt	eq
 8000922:	4684      	moveq	ip, r0
 8000924:	4601      	moveq	r1, r0
 8000926:	2000      	moveq	r0, #0
 8000928:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800092c:	bf08      	it	eq
 800092e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000932:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000936:	fabc f28c 	clz	r2, ip
 800093a:	3a08      	subs	r2, #8
 800093c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000940:	db10      	blt.n	8000964 <__aeabi_l2f+0x5c>
 8000942:	fa01 fc02 	lsl.w	ip, r1, r2
 8000946:	4463      	add	r3, ip
 8000948:	fa00 fc02 	lsl.w	ip, r0, r2
 800094c:	f1c2 0220 	rsb	r2, r2, #32
 8000950:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000954:	fa20 f202 	lsr.w	r2, r0, r2
 8000958:	eb43 0002 	adc.w	r0, r3, r2
 800095c:	bf08      	it	eq
 800095e:	f020 0001 	biceq.w	r0, r0, #1
 8000962:	4770      	bx	lr
 8000964:	f102 0220 	add.w	r2, r2, #32
 8000968:	fa01 fc02 	lsl.w	ip, r1, r2
 800096c:	f1c2 0220 	rsb	r2, r2, #32
 8000970:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000974:	fa21 f202 	lsr.w	r2, r1, r2
 8000978:	eb43 0002 	adc.w	r0, r3, r2
 800097c:	bf08      	it	eq
 800097e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000982:	4770      	bx	lr

08000984 <__aeabi_fmul>:
 8000984:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000988:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800098c:	bf1e      	ittt	ne
 800098e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000992:	ea92 0f0c 	teqne	r2, ip
 8000996:	ea93 0f0c 	teqne	r3, ip
 800099a:	d06f      	beq.n	8000a7c <__aeabi_fmul+0xf8>
 800099c:	441a      	add	r2, r3
 800099e:	ea80 0c01 	eor.w	ip, r0, r1
 80009a2:	0240      	lsls	r0, r0, #9
 80009a4:	bf18      	it	ne
 80009a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009aa:	d01e      	beq.n	80009ea <__aeabi_fmul+0x66>
 80009ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80009b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009b8:	fba0 3101 	umull	r3, r1, r0, r1
 80009bc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80009c0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80009c4:	bf3e      	ittt	cc
 80009c6:	0049      	lslcc	r1, r1, #1
 80009c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009cc:	005b      	lslcc	r3, r3, #1
 80009ce:	ea40 0001 	orr.w	r0, r0, r1
 80009d2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80009d6:	2afd      	cmp	r2, #253	@ 0xfd
 80009d8:	d81d      	bhi.n	8000a16 <__aeabi_fmul+0x92>
 80009da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80009de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e2:	bf08      	it	eq
 80009e4:	f020 0001 	biceq.w	r0, r0, #1
 80009e8:	4770      	bx	lr
 80009ea:	f090 0f00 	teq	r0, #0
 80009ee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80009f2:	bf08      	it	eq
 80009f4:	0249      	lsleq	r1, r1, #9
 80009f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80009fe:	3a7f      	subs	r2, #127	@ 0x7f
 8000a00:	bfc2      	ittt	gt
 8000a02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a0a:	4770      	bxgt	lr
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a10:	f04f 0300 	mov.w	r3, #0
 8000a14:	3a01      	subs	r2, #1
 8000a16:	dc5d      	bgt.n	8000ad4 <__aeabi_fmul+0x150>
 8000a18:	f112 0f19 	cmn.w	r2, #25
 8000a1c:	bfdc      	itt	le
 8000a1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000a22:	4770      	bxle	lr
 8000a24:	f1c2 0200 	rsb	r2, r2, #0
 8000a28:	0041      	lsls	r1, r0, #1
 8000a2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000a2e:	f1c2 0220 	rsb	r2, r2, #32
 8000a32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a3a:	f140 0000 	adc.w	r0, r0, #0
 8000a3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a42:	bf08      	it	eq
 8000a44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a48:	4770      	bx	lr
 8000a4a:	f092 0f00 	teq	r2, #0
 8000a4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a52:	bf02      	ittt	eq
 8000a54:	0040      	lsleq	r0, r0, #1
 8000a56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a5a:	3a01      	subeq	r2, #1
 8000a5c:	d0f9      	beq.n	8000a52 <__aeabi_fmul+0xce>
 8000a5e:	ea40 000c 	orr.w	r0, r0, ip
 8000a62:	f093 0f00 	teq	r3, #0
 8000a66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a6a:	bf02      	ittt	eq
 8000a6c:	0049      	lsleq	r1, r1, #1
 8000a6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a72:	3b01      	subeq	r3, #1
 8000a74:	d0f9      	beq.n	8000a6a <__aeabi_fmul+0xe6>
 8000a76:	ea41 010c 	orr.w	r1, r1, ip
 8000a7a:	e78f      	b.n	800099c <__aeabi_fmul+0x18>
 8000a7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a80:	ea92 0f0c 	teq	r2, ip
 8000a84:	bf18      	it	ne
 8000a86:	ea93 0f0c 	teqne	r3, ip
 8000a8a:	d00a      	beq.n	8000aa2 <__aeabi_fmul+0x11e>
 8000a8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a90:	bf18      	it	ne
 8000a92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a96:	d1d8      	bne.n	8000a4a <__aeabi_fmul+0xc6>
 8000a98:	ea80 0001 	eor.w	r0, r0, r1
 8000a9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000aa0:	4770      	bx	lr
 8000aa2:	f090 0f00 	teq	r0, #0
 8000aa6:	bf17      	itett	ne
 8000aa8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000aac:	4608      	moveq	r0, r1
 8000aae:	f091 0f00 	teqne	r1, #0
 8000ab2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ab6:	d014      	beq.n	8000ae2 <__aeabi_fmul+0x15e>
 8000ab8:	ea92 0f0c 	teq	r2, ip
 8000abc:	d101      	bne.n	8000ac2 <__aeabi_fmul+0x13e>
 8000abe:	0242      	lsls	r2, r0, #9
 8000ac0:	d10f      	bne.n	8000ae2 <__aeabi_fmul+0x15e>
 8000ac2:	ea93 0f0c 	teq	r3, ip
 8000ac6:	d103      	bne.n	8000ad0 <__aeabi_fmul+0x14c>
 8000ac8:	024b      	lsls	r3, r1, #9
 8000aca:	bf18      	it	ne
 8000acc:	4608      	movne	r0, r1
 8000ace:	d108      	bne.n	8000ae2 <__aeabi_fmul+0x15e>
 8000ad0:	ea80 0001 	eor.w	r0, r0, r1
 8000ad4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bx	lr

08000aec <__aeabi_fdiv>:
 8000aec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000af0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000af4:	bf1e      	ittt	ne
 8000af6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000afa:	ea92 0f0c 	teqne	r2, ip
 8000afe:	ea93 0f0c 	teqne	r3, ip
 8000b02:	d069      	beq.n	8000bd8 <__aeabi_fdiv+0xec>
 8000b04:	eba2 0203 	sub.w	r2, r2, r3
 8000b08:	ea80 0c01 	eor.w	ip, r0, r1
 8000b0c:	0249      	lsls	r1, r1, #9
 8000b0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b12:	d037      	beq.n	8000b84 <__aeabi_fdiv+0x98>
 8000b14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b24:	428b      	cmp	r3, r1
 8000b26:	bf38      	it	cc
 8000b28:	005b      	lslcc	r3, r3, #1
 8000b2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000b2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000b32:	428b      	cmp	r3, r1
 8000b34:	bf24      	itt	cs
 8000b36:	1a5b      	subcs	r3, r3, r1
 8000b38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b40:	bf24      	itt	cs
 8000b42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b4e:	bf24      	itt	cs
 8000b50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b5c:	bf24      	itt	cs
 8000b5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b66:	011b      	lsls	r3, r3, #4
 8000b68:	bf18      	it	ne
 8000b6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b6e:	d1e0      	bne.n	8000b32 <__aeabi_fdiv+0x46>
 8000b70:	2afd      	cmp	r2, #253	@ 0xfd
 8000b72:	f63f af50 	bhi.w	8000a16 <__aeabi_fmul+0x92>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b8c:	327f      	adds	r2, #127	@ 0x7f
 8000b8e:	bfc2      	ittt	gt
 8000b90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b98:	4770      	bxgt	lr
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f04f 0300 	mov.w	r3, #0
 8000ba2:	3a01      	subs	r2, #1
 8000ba4:	e737      	b.n	8000a16 <__aeabi_fmul+0x92>
 8000ba6:	f092 0f00 	teq	r2, #0
 8000baa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000bae:	bf02      	ittt	eq
 8000bb0:	0040      	lsleq	r0, r0, #1
 8000bb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000bb6:	3a01      	subeq	r2, #1
 8000bb8:	d0f9      	beq.n	8000bae <__aeabi_fdiv+0xc2>
 8000bba:	ea40 000c 	orr.w	r0, r0, ip
 8000bbe:	f093 0f00 	teq	r3, #0
 8000bc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc6:	bf02      	ittt	eq
 8000bc8:	0049      	lsleq	r1, r1, #1
 8000bca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000bce:	3b01      	subeq	r3, #1
 8000bd0:	d0f9      	beq.n	8000bc6 <__aeabi_fdiv+0xda>
 8000bd2:	ea41 010c 	orr.w	r1, r1, ip
 8000bd6:	e795      	b.n	8000b04 <__aeabi_fdiv+0x18>
 8000bd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bdc:	ea92 0f0c 	teq	r2, ip
 8000be0:	d108      	bne.n	8000bf4 <__aeabi_fdiv+0x108>
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	f47f af7d 	bne.w	8000ae2 <__aeabi_fmul+0x15e>
 8000be8:	ea93 0f0c 	teq	r3, ip
 8000bec:	f47f af70 	bne.w	8000ad0 <__aeabi_fmul+0x14c>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	e776      	b.n	8000ae2 <__aeabi_fmul+0x15e>
 8000bf4:	ea93 0f0c 	teq	r3, ip
 8000bf8:	d104      	bne.n	8000c04 <__aeabi_fdiv+0x118>
 8000bfa:	024b      	lsls	r3, r1, #9
 8000bfc:	f43f af4c 	beq.w	8000a98 <__aeabi_fmul+0x114>
 8000c00:	4608      	mov	r0, r1
 8000c02:	e76e      	b.n	8000ae2 <__aeabi_fmul+0x15e>
 8000c04:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c08:	bf18      	it	ne
 8000c0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c0e:	d1ca      	bne.n	8000ba6 <__aeabi_fdiv+0xba>
 8000c10:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000c14:	f47f af5c 	bne.w	8000ad0 <__aeabi_fmul+0x14c>
 8000c18:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000c1c:	f47f af3c 	bne.w	8000a98 <__aeabi_fmul+0x114>
 8000c20:	e75f      	b.n	8000ae2 <__aeabi_fmul+0x15e>
 8000c22:	bf00      	nop

08000c24 <__gesf2>:
 8000c24:	f04f 3cff 	mov.w	ip, #4294967295
 8000c28:	e006      	b.n	8000c38 <__cmpsf2+0x4>
 8000c2a:	bf00      	nop

08000c2c <__lesf2>:
 8000c2c:	f04f 0c01 	mov.w	ip, #1
 8000c30:	e002      	b.n	8000c38 <__cmpsf2+0x4>
 8000c32:	bf00      	nop

08000c34 <__cmpsf2>:
 8000c34:	f04f 0c01 	mov.w	ip, #1
 8000c38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c3c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c48:	bf18      	it	ne
 8000c4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4e:	d011      	beq.n	8000c74 <__cmpsf2+0x40>
 8000c50:	b001      	add	sp, #4
 8000c52:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c56:	bf18      	it	ne
 8000c58:	ea90 0f01 	teqne	r0, r1
 8000c5c:	bf58      	it	pl
 8000c5e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c62:	bf88      	it	hi
 8000c64:	17c8      	asrhi	r0, r1, #31
 8000c66:	bf38      	it	cc
 8000c68:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c6c:	bf18      	it	ne
 8000c6e:	f040 0001 	orrne.w	r0, r0, #1
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c78:	d102      	bne.n	8000c80 <__cmpsf2+0x4c>
 8000c7a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c7e:	d105      	bne.n	8000c8c <__cmpsf2+0x58>
 8000c80:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c84:	d1e4      	bne.n	8000c50 <__cmpsf2+0x1c>
 8000c86:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c8a:	d0e1      	beq.n	8000c50 <__cmpsf2+0x1c>
 8000c8c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <__aeabi_cfrcmple>:
 8000c94:	4684      	mov	ip, r0
 8000c96:	4608      	mov	r0, r1
 8000c98:	4661      	mov	r1, ip
 8000c9a:	e7ff      	b.n	8000c9c <__aeabi_cfcmpeq>

08000c9c <__aeabi_cfcmpeq>:
 8000c9c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c9e:	f7ff ffc9 	bl	8000c34 <__cmpsf2>
 8000ca2:	2800      	cmp	r0, #0
 8000ca4:	bf48      	it	mi
 8000ca6:	f110 0f00 	cmnmi.w	r0, #0
 8000caa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cac <__aeabi_fcmpeq>:
 8000cac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cb0:	f7ff fff4 	bl	8000c9c <__aeabi_cfcmpeq>
 8000cb4:	bf0c      	ite	eq
 8000cb6:	2001      	moveq	r0, #1
 8000cb8:	2000      	movne	r0, #0
 8000cba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_fcmplt>:
 8000cc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cc4:	f7ff ffea 	bl	8000c9c <__aeabi_cfcmpeq>
 8000cc8:	bf34      	ite	cc
 8000cca:	2001      	movcc	r0, #1
 8000ccc:	2000      	movcs	r0, #0
 8000cce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_fcmple>:
 8000cd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cd8:	f7ff ffe0 	bl	8000c9c <__aeabi_cfcmpeq>
 8000cdc:	bf94      	ite	ls
 8000cde:	2001      	movls	r0, #1
 8000ce0:	2000      	movhi	r0, #0
 8000ce2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_fcmpge>:
 8000ce8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cec:	f7ff ffd2 	bl	8000c94 <__aeabi_cfrcmple>
 8000cf0:	bf94      	ite	ls
 8000cf2:	2001      	movls	r0, #1
 8000cf4:	2000      	movhi	r0, #0
 8000cf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cfa:	bf00      	nop

08000cfc <__aeabi_fcmpgt>:
 8000cfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d00:	f7ff ffc8 	bl	8000c94 <__aeabi_cfrcmple>
 8000d04:	bf34      	ite	cc
 8000d06:	2001      	movcc	r0, #1
 8000d08:	2000      	movcs	r0, #0
 8000d0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d0e:	bf00      	nop

08000d10 <__aeabi_fcmpun>:
 8000d10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d1c:	d102      	bne.n	8000d24 <__aeabi_fcmpun+0x14>
 8000d1e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d22:	d108      	bne.n	8000d36 <__aeabi_fcmpun+0x26>
 8000d24:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d28:	d102      	bne.n	8000d30 <__aeabi_fcmpun+0x20>
 8000d2a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d2e:	d102      	bne.n	8000d36 <__aeabi_fcmpun+0x26>
 8000d30:	f04f 0000 	mov.w	r0, #0
 8000d34:	4770      	bx	lr
 8000d36:	f04f 0001 	mov.w	r0, #1
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_f2iz>:
 8000d3c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d40:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d44:	d30f      	bcc.n	8000d66 <__aeabi_f2iz+0x2a>
 8000d46:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d4a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d4e:	d90d      	bls.n	8000d6c <__aeabi_f2iz+0x30>
 8000d50:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d58:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d5c:	fa23 f002 	lsr.w	r0, r3, r2
 8000d60:	bf18      	it	ne
 8000d62:	4240      	negne	r0, r0
 8000d64:	4770      	bx	lr
 8000d66:	f04f 0000 	mov.w	r0, #0
 8000d6a:	4770      	bx	lr
 8000d6c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d70:	d101      	bne.n	8000d76 <__aeabi_f2iz+0x3a>
 8000d72:	0242      	lsls	r2, r0, #9
 8000d74:	d105      	bne.n	8000d82 <__aeabi_f2iz+0x46>
 8000d76:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000d7a:	bf08      	it	eq
 8000d7c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000d80:	4770      	bx	lr
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_f2uiz>:
 8000d88:	0042      	lsls	r2, r0, #1
 8000d8a:	d20e      	bcs.n	8000daa <__aeabi_f2uiz+0x22>
 8000d8c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d90:	d30b      	bcc.n	8000daa <__aeabi_f2uiz+0x22>
 8000d92:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d96:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d9a:	d409      	bmi.n	8000db0 <__aeabi_f2uiz+0x28>
 8000d9c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000da0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000da4:	fa23 f002 	lsr.w	r0, r3, r2
 8000da8:	4770      	bx	lr
 8000daa:	f04f 0000 	mov.w	r0, #0
 8000dae:	4770      	bx	lr
 8000db0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000db4:	d101      	bne.n	8000dba <__aeabi_f2uiz+0x32>
 8000db6:	0242      	lsls	r2, r0, #9
 8000db8:	d102      	bne.n	8000dc0 <__aeabi_f2uiz+0x38>
 8000dba:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbe:	4770      	bx	lr
 8000dc0:	f04f 0000 	mov.w	r0, #0
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <LCD_Paint_DrawPixel>:
#include <stdlib.h>
#include <math.h>
#define _swap_int16_t(a, b) { int16_t t = a; a = b; b = t; }
#define min(a, b) (((a) < (b)) ? (a) : (b))

void LCD_Paint_DrawPixel(LCD128_HandleTypeDef* lcd, int16_t x, int16_t y, uint16_t color) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	817b      	strh	r3, [r7, #10]
 8000dda:	460b      	mov	r3, r1
 8000ddc:	813b      	strh	r3, [r7, #8]
 8000dde:	4613      	mov	r3, r2
 8000de0:	80fb      	strh	r3, [r7, #6]
    LCD128_DrawPixel(lcd, x, y, color);
 8000de2:	8979      	ldrh	r1, [r7, #10]
 8000de4:	893a      	ldrh	r2, [r7, #8]
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	68f8      	ldr	r0, [r7, #12]
 8000dea:	f000 feb7 	bl	8001b5c <LCD128_DrawPixel>
}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <LCD_Paint_WritePixel>:

void LCD_Paint_FillRect(LCD128_HandleTypeDef* lcd, int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
    LCD128_FillRectangle(lcd, x, y, w, h, color);
}

void LCD_Paint_WritePixel(LCD128_HandleTypeDef* lcd, int16_t x, int16_t y, uint16_t color) {
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b084      	sub	sp, #16
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	60f8      	str	r0, [r7, #12]
 8000dfe:	4608      	mov	r0, r1
 8000e00:	4611      	mov	r1, r2
 8000e02:	461a      	mov	r2, r3
 8000e04:	4603      	mov	r3, r0
 8000e06:	817b      	strh	r3, [r7, #10]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	813b      	strh	r3, [r7, #8]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	80fb      	strh	r3, [r7, #6]
    LCD_Paint_DrawPixel(lcd, x, y, color);
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000e16:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f7ff ffd4 	bl	8000dc8 <LCD_Paint_DrawPixel>
}
 8000e20:	bf00      	nop
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <LCD_Paint_WriteLine>:

void LCD_Paint_WriteLine(LCD128_HandleTypeDef* lcd, int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	@ 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	4608      	mov	r0, r1
 8000e32:	4611      	mov	r1, r2
 8000e34:	461a      	mov	r2, r3
 8000e36:	4603      	mov	r3, r0
 8000e38:	817b      	strh	r3, [r7, #10]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	813b      	strh	r3, [r7, #8]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	80fb      	strh	r3, [r7, #6]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000e42:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 8000e46:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e50:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e54:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000e58:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e5c:	1acb      	subs	r3, r1, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	bfb8      	it	lt
 8000e62:	425b      	neglt	r3, r3
 8000e64:	429a      	cmp	r2, r3
 8000e66:	bfcc      	ite	gt
 8000e68:	2301      	movgt	r3, #1
 8000e6a:	2300      	movle	r3, #0
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	84bb      	strh	r3, [r7, #36]	@ 0x24
    if (steep) {
 8000e70:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00b      	beq.n	8000e90 <LCD_Paint_WriteLine+0x68>
        _swap_int16_t(x0, y0);
 8000e78:	897b      	ldrh	r3, [r7, #10]
 8000e7a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000e7c:	893b      	ldrh	r3, [r7, #8]
 8000e7e:	817b      	strh	r3, [r7, #10]
 8000e80:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000e82:	813b      	strh	r3, [r7, #8]
        _swap_int16_t(x1, y1);
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	843b      	strh	r3, [r7, #32]
 8000e88:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000e8a:	80fb      	strh	r3, [r7, #6]
 8000e8c:	8c3b      	ldrh	r3, [r7, #32]
 8000e8e:	863b      	strh	r3, [r7, #48]	@ 0x30
    }
    if (x0 > x1) {
 8000e90:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000e94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dd0b      	ble.n	8000eb4 <LCD_Paint_WriteLine+0x8c>
        _swap_int16_t(x0, x1);
 8000e9c:	897b      	ldrh	r3, [r7, #10]
 8000e9e:	83fb      	strh	r3, [r7, #30]
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	817b      	strh	r3, [r7, #10]
 8000ea4:	8bfb      	ldrh	r3, [r7, #30]
 8000ea6:	80fb      	strh	r3, [r7, #6]
        _swap_int16_t(y0, y1);
 8000ea8:	893b      	ldrh	r3, [r7, #8]
 8000eaa:	83bb      	strh	r3, [r7, #28]
 8000eac:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000eae:	813b      	strh	r3, [r7, #8]
 8000eb0:	8bbb      	ldrh	r3, [r7, #28]
 8000eb2:	863b      	strh	r3, [r7, #48]	@ 0x30
    }
    int16_t dx = x1 - x0;
 8000eb4:	88fa      	ldrh	r2, [r7, #6]
 8000eb6:	897b      	ldrh	r3, [r7, #10]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	837b      	strh	r3, [r7, #26]
    int16_t dy = abs(y1 - y0);
 8000ebe:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 8000ec2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	bfb8      	it	lt
 8000ecc:	425b      	neglt	r3, r3
 8000ece:	833b      	strh	r3, [r7, #24]
    int16_t err = dx / 2;
 8000ed0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000ed4:	0fda      	lsrs	r2, r3, #31
 8000ed6:	4413      	add	r3, r2
 8000ed8:	105b      	asrs	r3, r3, #1
 8000eda:	84fb      	strh	r3, [r7, #38]	@ 0x26
    int16_t ystep = (y0 < y1) ? 1 : -1;
 8000edc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000ee0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	da01      	bge.n	8000eec <LCD_Paint_WriteLine+0xc4>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e001      	b.n	8000ef0 <LCD_Paint_WriteLine+0xc8>
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef0:	82fb      	strh	r3, [r7, #22]
    for (; x0 <= x1; x0++) {
 8000ef2:	e02d      	b.n	8000f50 <LCD_Paint_WriteLine+0x128>
        if (steep) {
 8000ef4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d008      	beq.n	8000f0e <LCD_Paint_WriteLine+0xe6>
            LCD_Paint_WritePixel(lcd, y0, x0, color);
 8000efc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000efe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f02:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8000f06:	68f8      	ldr	r0, [r7, #12]
 8000f08:	f7ff ff75 	bl	8000df6 <LCD_Paint_WritePixel>
 8000f0c:	e007      	b.n	8000f1e <LCD_Paint_WriteLine+0xf6>
        } else {
            LCD_Paint_WritePixel(lcd, x0, y0, color);
 8000f0e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000f10:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000f14:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f7ff ff6c 	bl	8000df6 <LCD_Paint_WritePixel>
        }
        err -= dy;
 8000f1e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000f20:	8b3b      	ldrh	r3, [r7, #24]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	84fb      	strh	r3, [r7, #38]	@ 0x26
        if (err < 0) {
 8000f28:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	da09      	bge.n	8000f44 <LCD_Paint_WriteLine+0x11c>
            y0 += ystep;
 8000f30:	893a      	ldrh	r2, [r7, #8]
 8000f32:	8afb      	ldrh	r3, [r7, #22]
 8000f34:	4413      	add	r3, r2
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	813b      	strh	r3, [r7, #8]
            err += dx;
 8000f3a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000f3c:	8b7b      	ldrh	r3, [r7, #26]
 8000f3e:	4413      	add	r3, r2
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	84fb      	strh	r3, [r7, #38]	@ 0x26
    for (; x0 <= x1; x0++) {
 8000f44:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	817b      	strh	r3, [r7, #10]
 8000f50:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	ddcb      	ble.n	8000ef4 <LCD_Paint_WriteLine+0xcc>
        }
    }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	@ 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <LCD_Paint_DrawFastVLine>:

void LCD_Paint_DrawFastVLine(LCD128_HandleTypeDef* lcd, int16_t x, int16_t y, int16_t h, uint16_t color) {
 8000f66:	b590      	push	{r4, r7, lr}
 8000f68:	b087      	sub	sp, #28
 8000f6a:	af02      	add	r7, sp, #8
 8000f6c:	60f8      	str	r0, [r7, #12]
 8000f6e:	4608      	mov	r0, r1
 8000f70:	4611      	mov	r1, r2
 8000f72:	461a      	mov	r2, r3
 8000f74:	4603      	mov	r3, r0
 8000f76:	817b      	strh	r3, [r7, #10]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	813b      	strh	r3, [r7, #8]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	80fb      	strh	r3, [r7, #6]
    LCD_Paint_WriteLine(lcd, x, y, x, y + h - 1, color);
 8000f80:	893a      	ldrh	r2, [r7, #8]
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	4413      	add	r3, r2
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	f9b7 400a 	ldrsh.w	r4, [r7, #10]
 8000f92:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8000f96:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000f9a:	8c3a      	ldrh	r2, [r7, #32]
 8000f9c:	9201      	str	r2, [sp, #4]
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	4623      	mov	r3, r4
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f7ff ff3f 	bl	8000e28 <LCD_Paint_WriteLine>
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd90      	pop	{r4, r7, pc}

08000fb2 <LCD_Paint_FillCircleHelper>:
            LCD_Paint_WritePixel(lcd, x0 - x, y0 - y, color);
        }
    }
}

void LCD_Paint_FillCircleHelper(LCD128_HandleTypeDef* lcd, int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color) {
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b08a      	sub	sp, #40	@ 0x28
 8000fb6:	af02      	add	r7, sp, #8
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	4608      	mov	r0, r1
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	817b      	strh	r3, [r7, #10]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	813b      	strh	r3, [r7, #8]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	80fb      	strh	r3, [r7, #6]
    int16_t f = 1 - r;
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	f1c3 0301 	rsb	r3, r3, #1
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	03d2      	lsls	r2, r2, #15
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	837b      	strh	r3, [r7, #26]
    int16_t x = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	833b      	strh	r3, [r7, #24]
    int16_t y = r;
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	82fb      	strh	r3, [r7, #22]
    int16_t px = x;
 8000ff0:	8b3b      	ldrh	r3, [r7, #24]
 8000ff2:	82bb      	strh	r3, [r7, #20]
    int16_t py = y;
 8000ff4:	8afb      	ldrh	r3, [r7, #22]
 8000ff6:	827b      	strh	r3, [r7, #18]
    delta++;
 8000ff8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	3301      	adds	r3, #1
 8001000:	b29b      	uxth	r3, r3
 8001002:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    while (x < y) {
 8001004:	e0a9      	b.n	800115a <LCD_Paint_FillCircleHelper+0x1a8>
        if (f >= 0) {
 8001006:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800100a:	2b00      	cmp	r3, #0
 800100c:	db0e      	blt.n	800102c <LCD_Paint_FillCircleHelper+0x7a>
            y--;
 800100e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001012:	b29b      	uxth	r3, r3
 8001014:	3b01      	subs	r3, #1
 8001016:	b29b      	uxth	r3, r3
 8001018:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 800101a:	8b7b      	ldrh	r3, [r7, #26]
 800101c:	3302      	adds	r3, #2
 800101e:	b29b      	uxth	r3, r3
 8001020:	837b      	strh	r3, [r7, #26]
            f += ddF_y;
 8001022:	8bfa      	ldrh	r2, [r7, #30]
 8001024:	8b7b      	ldrh	r3, [r7, #26]
 8001026:	4413      	add	r3, r2
 8001028:	b29b      	uxth	r3, r3
 800102a:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 800102c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001030:	b29b      	uxth	r3, r3
 8001032:	3301      	adds	r3, #1
 8001034:	b29b      	uxth	r3, r3
 8001036:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001038:	8bbb      	ldrh	r3, [r7, #28]
 800103a:	3302      	adds	r3, #2
 800103c:	b29b      	uxth	r3, r3
 800103e:	83bb      	strh	r3, [r7, #28]
        f += ddF_x;
 8001040:	8bfa      	ldrh	r2, [r7, #30]
 8001042:	8bbb      	ldrh	r3, [r7, #28]
 8001044:	4413      	add	r3, r2
 8001046:	b29b      	uxth	r3, r3
 8001048:	83fb      	strh	r3, [r7, #30]
        if (x < (y + 1)) {
 800104a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800104e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001052:	429a      	cmp	r2, r3
 8001054:	db3b      	blt.n	80010ce <LCD_Paint_FillCircleHelper+0x11c>
            if (corners & 1) LCD_Paint_DrawFastVLine(lcd, x0 + x, y0 - y, 2 * y + delta, color);
 8001056:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	d017      	beq.n	8001092 <LCD_Paint_FillCircleHelper+0xe0>
 8001062:	897a      	ldrh	r2, [r7, #10]
 8001064:	8b3b      	ldrh	r3, [r7, #24]
 8001066:	4413      	add	r3, r2
 8001068:	b29b      	uxth	r3, r3
 800106a:	b219      	sxth	r1, r3
 800106c:	893a      	ldrh	r2, [r7, #8]
 800106e:	8afb      	ldrh	r3, [r7, #22]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	b29b      	uxth	r3, r3
 8001074:	b218      	sxth	r0, r3
 8001076:	8afb      	ldrh	r3, [r7, #22]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	b29a      	uxth	r2, r3
 800107c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800107e:	4413      	add	r3, r2
 8001080:	b29b      	uxth	r3, r3
 8001082:	b21a      	sxth	r2, r3
 8001084:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	4613      	mov	r3, r2
 800108a:	4602      	mov	r2, r0
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f7ff ff6a 	bl	8000f66 <LCD_Paint_DrawFastVLine>
            if (corners & 2) LCD_Paint_DrawFastVLine(lcd, x0 - x, y0 - y, 2 * y + delta, color);
 8001092:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d017      	beq.n	80010ce <LCD_Paint_FillCircleHelper+0x11c>
 800109e:	897a      	ldrh	r2, [r7, #10]
 80010a0:	8b3b      	ldrh	r3, [r7, #24]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	b219      	sxth	r1, r3
 80010a8:	893a      	ldrh	r2, [r7, #8]
 80010aa:	8afb      	ldrh	r3, [r7, #22]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	b218      	sxth	r0, r3
 80010b2:	8afb      	ldrh	r3, [r7, #22]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80010ba:	4413      	add	r3, r2
 80010bc:	b29b      	uxth	r3, r3
 80010be:	b21a      	sxth	r2, r3
 80010c0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	4613      	mov	r3, r2
 80010c6:	4602      	mov	r2, r0
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f7ff ff4c 	bl	8000f66 <LCD_Paint_DrawFastVLine>
        }
        if (y != py) {
 80010ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80010d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d03d      	beq.n	8001156 <LCD_Paint_FillCircleHelper+0x1a4>
            if (corners & 1) LCD_Paint_DrawFastVLine(lcd, x0 + py, y0 - px, 2 * px + delta, color);
 80010da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d017      	beq.n	8001116 <LCD_Paint_FillCircleHelper+0x164>
 80010e6:	897a      	ldrh	r2, [r7, #10]
 80010e8:	8a7b      	ldrh	r3, [r7, #18]
 80010ea:	4413      	add	r3, r2
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	b219      	sxth	r1, r3
 80010f0:	893a      	ldrh	r2, [r7, #8]
 80010f2:	8abb      	ldrh	r3, [r7, #20]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	b218      	sxth	r0, r3
 80010fa:	8abb      	ldrh	r3, [r7, #20]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	b29a      	uxth	r2, r3
 8001100:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001102:	4413      	add	r3, r2
 8001104:	b29b      	uxth	r3, r3
 8001106:	b21a      	sxth	r2, r3
 8001108:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	4613      	mov	r3, r2
 800110e:	4602      	mov	r2, r0
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f7ff ff28 	bl	8000f66 <LCD_Paint_DrawFastVLine>
            if (corners & 2) LCD_Paint_DrawFastVLine(lcd, x0 - py, y0 - px, 2 * px + delta, color);
 8001116:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d017      	beq.n	8001152 <LCD_Paint_FillCircleHelper+0x1a0>
 8001122:	897a      	ldrh	r2, [r7, #10]
 8001124:	8a7b      	ldrh	r3, [r7, #18]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	b29b      	uxth	r3, r3
 800112a:	b219      	sxth	r1, r3
 800112c:	893a      	ldrh	r2, [r7, #8]
 800112e:	8abb      	ldrh	r3, [r7, #20]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	b29b      	uxth	r3, r3
 8001134:	b218      	sxth	r0, r3
 8001136:	8abb      	ldrh	r3, [r7, #20]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	b29a      	uxth	r2, r3
 800113c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800113e:	4413      	add	r3, r2
 8001140:	b29b      	uxth	r3, r3
 8001142:	b21a      	sxth	r2, r3
 8001144:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	4613      	mov	r3, r2
 800114a:	4602      	mov	r2, r0
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f7ff ff0a 	bl	8000f66 <LCD_Paint_DrawFastVLine>
            py = y;
 8001152:	8afb      	ldrh	r3, [r7, #22]
 8001154:	827b      	strh	r3, [r7, #18]
        }
        px = x;
 8001156:	8b3b      	ldrh	r3, [r7, #24]
 8001158:	82bb      	strh	r3, [r7, #20]
    while (x < y) {
 800115a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800115e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001162:	429a      	cmp	r2, r3
 8001164:	f6ff af4f 	blt.w	8001006 <LCD_Paint_FillCircleHelper+0x54>
    }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3720      	adds	r7, #32
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <LCD_Paint_FillCircle>:

void LCD_Paint_FillCircle(LCD128_HandleTypeDef* lcd, int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8001172:	b580      	push	{r7, lr}
 8001174:	b088      	sub	sp, #32
 8001176:	af04      	add	r7, sp, #16
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	4608      	mov	r0, r1
 800117c:	4611      	mov	r1, r2
 800117e:	461a      	mov	r2, r3
 8001180:	4603      	mov	r3, r0
 8001182:	817b      	strh	r3, [r7, #10]
 8001184:	460b      	mov	r3, r1
 8001186:	813b      	strh	r3, [r7, #8]
 8001188:	4613      	mov	r3, r2
 800118a:	80fb      	strh	r3, [r7, #6]
    LCD_Paint_DrawFastVLine(lcd, x0, y0 - r, 2 * r + 1, color);
 800118c:	893a      	ldrh	r2, [r7, #8]
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	b29b      	uxth	r3, r3
 8001194:	b21a      	sxth	r2, r3
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	b29b      	uxth	r3, r3
 800119c:	3301      	adds	r3, #1
 800119e:	b29b      	uxth	r3, r3
 80011a0:	b218      	sxth	r0, r3
 80011a2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80011a6:	8b3b      	ldrh	r3, [r7, #24]
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	4603      	mov	r3, r0
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f7ff feda 	bl	8000f66 <LCD_Paint_DrawFastVLine>
    LCD_Paint_FillCircleHelper(lcd, x0, y0, r, 3, 0, color);
 80011b2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80011b6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80011ba:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80011be:	8b3b      	ldrh	r3, [r7, #24]
 80011c0:	9302      	str	r3, [sp, #8]
 80011c2:	2300      	movs	r3, #0
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	2303      	movs	r3, #3
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	4603      	mov	r3, r0
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f7ff fef0 	bl	8000fb2 <LCD_Paint_FillCircleHelper>
}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <LCD_Paint_DrawDashedEllipse>:
        if (a > b) _swap_int16_t(a, b);
        LCD_Paint_DrawFastHLine(lcd, a, y, b - a + 1, color);
    }
}

void LCD_Paint_DrawDashedEllipse(LCD128_HandleTypeDef* lcd, int16_t x0, int16_t y0, int16_t rx, int16_t ry, int dashStep, int dashLength, int dotRadius, uint16_t color) {
 80011dc:	b5b0      	push	{r4, r5, r7, lr}
 80011de:	b08c      	sub	sp, #48	@ 0x30
 80011e0:	af02      	add	r7, sp, #8
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	4608      	mov	r0, r1
 80011e6:	4611      	mov	r1, r2
 80011e8:	461a      	mov	r2, r3
 80011ea:	4603      	mov	r3, r0
 80011ec:	817b      	strh	r3, [r7, #10]
 80011ee:	460b      	mov	r3, r1
 80011f0:	813b      	strh	r3, [r7, #8]
 80011f2:	4613      	mov	r3, r2
 80011f4:	80fb      	strh	r3, [r7, #6]
    for (int angle = 0; angle < 360; angle += dashStep) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80011fa:	e06a      	b.n	80012d2 <LCD_Paint_DrawDashedEllipse+0xf6>
        for (int i = 0; i < dashLength; i++) {
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
 8001200:	e05f      	b.n	80012c2 <LCD_Paint_DrawDashedEllipse+0xe6>
            float theta = (angle + i) * 3.14159f / 180.0f;
 8001202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	4413      	add	r3, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fb67 	bl	80008dc <__aeabi_i2f>
 800120e:	4603      	mov	r3, r0
 8001210:	4934      	ldr	r1, [pc, #208]	@ (80012e4 <LCD_Paint_DrawDashedEllipse+0x108>)
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fbb6 	bl	8000984 <__aeabi_fmul>
 8001218:	4603      	mov	r3, r0
 800121a:	4933      	ldr	r1, [pc, #204]	@ (80012e8 <LCD_Paint_DrawDashedEllipse+0x10c>)
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fc65 	bl	8000aec <__aeabi_fdiv>
 8001222:	4603      	mov	r3, r0
 8001224:	61fb      	str	r3, [r7, #28]
            int x = x0 + rx * cosf(theta);
 8001226:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fb56 	bl	80008dc <__aeabi_i2f>
 8001230:	4604      	mov	r4, r0
 8001232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fb50 	bl	80008dc <__aeabi_i2f>
 800123c:	4605      	mov	r5, r0
 800123e:	69f8      	ldr	r0, [r7, #28]
 8001240:	f005 f89c 	bl	800637c <cosf>
 8001244:	4603      	mov	r3, r0
 8001246:	4619      	mov	r1, r3
 8001248:	4628      	mov	r0, r5
 800124a:	f7ff fb9b 	bl	8000984 <__aeabi_fmul>
 800124e:	4603      	mov	r3, r0
 8001250:	4619      	mov	r1, r3
 8001252:	4620      	mov	r0, r4
 8001254:	f7ff fa8e 	bl	8000774 <__addsf3>
 8001258:	4603      	mov	r3, r0
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fd6e 	bl	8000d3c <__aeabi_f2iz>
 8001260:	4603      	mov	r3, r0
 8001262:	61bb      	str	r3, [r7, #24]
            int y = y0 + ry * sinf(theta);
 8001264:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fb37 	bl	80008dc <__aeabi_i2f>
 800126e:	4604      	mov	r4, r0
 8001270:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fb31 	bl	80008dc <__aeabi_i2f>
 800127a:	4605      	mov	r5, r0
 800127c:	69f8      	ldr	r0, [r7, #28]
 800127e:	f005 f8b5 	bl	80063ec <sinf>
 8001282:	4603      	mov	r3, r0
 8001284:	4619      	mov	r1, r3
 8001286:	4628      	mov	r0, r5
 8001288:	f7ff fb7c 	bl	8000984 <__aeabi_fmul>
 800128c:	4603      	mov	r3, r0
 800128e:	4619      	mov	r1, r3
 8001290:	4620      	mov	r0, r4
 8001292:	f7ff fa6f 	bl	8000774 <__addsf3>
 8001296:	4603      	mov	r3, r0
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fd4f 	bl	8000d3c <__aeabi_f2iz>
 800129e:	4603      	mov	r3, r0
 80012a0:	617b      	str	r3, [r7, #20]
            LCD_Paint_FillCircle(lcd, x, y, dotRadius, color);
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	b219      	sxth	r1, r3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	b21a      	sxth	r2, r3
 80012aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012ac:	b218      	sxth	r0, r3
 80012ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	4603      	mov	r3, r0
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f7ff ff5b 	bl	8001172 <LCD_Paint_FillCircle>
        for (int i = 0; i < dashLength; i++) {
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	3301      	adds	r3, #1
 80012c0:	623b      	str	r3, [r7, #32]
 80012c2:	6a3a      	ldr	r2, [r7, #32]
 80012c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012c6:	429a      	cmp	r2, r3
 80012c8:	db9b      	blt.n	8001202 <LCD_Paint_DrawDashedEllipse+0x26>
    for (int angle = 0; angle < 360; angle += dashStep) {
 80012ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012ce:	4413      	add	r3, r2
 80012d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80012d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d4:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80012d8:	db90      	blt.n	80011fc <LCD_Paint_DrawDashedEllipse+0x20>
//            LCD_Paint_FillCircle(lcd, x + 3, y + 3, dotRadius, color);
        }
    }
} 
 80012da:	bf00      	nop
 80012dc:	bf00      	nop
 80012de:	3728      	adds	r7, #40	@ 0x28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bdb0      	pop	{r4, r5, r7, pc}
 80012e4:	40490fd0 	.word	0x40490fd0
 80012e8:	43340000 	.word	0x43340000

080012ec <LCD128_CS_0>:
#define LCD128_MADCTL  0x36
#define LCD128_COLMOD  0x3A
#define LCD128_INVON   0x21
#define LCD128_INVOFF  0x20

static void LCD128_CS_0(LCD128_HandleTypeDef* lcd) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, GPIO_PIN_RESET);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6858      	ldr	r0, [r3, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	891b      	ldrh	r3, [r3, #8]
 80012fc:	2200      	movs	r2, #0
 80012fe:	4619      	mov	r1, r3
 8001300:	f003 f87e 	bl	8004400 <HAL_GPIO_WritePin>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <LCD128_CS_1>:
static void LCD128_CS_1(LCD128_HandleTypeDef* lcd) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, GPIO_PIN_SET);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6858      	ldr	r0, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	891b      	ldrh	r3, [r3, #8]
 800131c:	2201      	movs	r2, #1
 800131e:	4619      	mov	r1, r3
 8001320:	f003 f86e 	bl	8004400 <HAL_GPIO_WritePin>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <LCD128_DC_0>:
static void LCD128_DC_0(LCD128_HandleTypeDef* lcd) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->DC_Port, lcd->DC_Pin, GPIO_PIN_RESET);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68d8      	ldr	r0, [r3, #12]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	8a1b      	ldrh	r3, [r3, #16]
 800133c:	2200      	movs	r2, #0
 800133e:	4619      	mov	r1, r3
 8001340:	f003 f85e 	bl	8004400 <HAL_GPIO_WritePin>
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <LCD128_DC_1>:
static void LCD128_DC_1(LCD128_HandleTypeDef* lcd) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->DC_Port, lcd->DC_Pin, GPIO_PIN_SET);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68d8      	ldr	r0, [r3, #12]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	8a1b      	ldrh	r3, [r3, #16]
 800135c:	2201      	movs	r2, #1
 800135e:	4619      	mov	r1, r3
 8001360:	f003 f84e 	bl	8004400 <HAL_GPIO_WritePin>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <LCD128_RST_0>:
static void LCD128_RST_0(LCD128_HandleTypeDef* lcd) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->RST_Port, lcd->RST_Pin, GPIO_PIN_RESET);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6958      	ldr	r0, [r3, #20]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	8b1b      	ldrh	r3, [r3, #24]
 800137c:	2200      	movs	r2, #0
 800137e:	4619      	mov	r1, r3
 8001380:	f003 f83e 	bl	8004400 <HAL_GPIO_WritePin>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <LCD128_RST_1>:
static void LCD128_RST_1(LCD128_HandleTypeDef* lcd) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->RST_Port, lcd->RST_Pin, GPIO_PIN_SET);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6958      	ldr	r0, [r3, #20]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	8b1b      	ldrh	r3, [r3, #24]
 800139c:	2201      	movs	r2, #1
 800139e:	4619      	mov	r1, r3
 80013a0:	f003 f82e 	bl	8004400 <HAL_GPIO_WritePin>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <LCD128_SPI_WRITE>:
static void LCD128_SPI_WRITE(LCD128_HandleTypeDef* lcd, uint8_t byte) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
    HAL_SPI_Transmit(lcd->hspi, &byte, 1, HAL_MAX_DELAY);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6818      	ldr	r0, [r3, #0]
 80013bc:	1cf9      	adds	r1, r7, #3
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	2201      	movs	r2, #1
 80013c4:	f003 fc96 	bl	8004cf4 <HAL_SPI_Transmit>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <LCD128_DELAY>:
static void LCD128_DELAY(uint32_t ms) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f002 fb6d 	bl	8003ab8 <HAL_Delay>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <LCD128_WriteCommand>:

static void LCD128_WriteCommand(LCD128_HandleTypeDef* lcd, uint8_t cmd) {
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	460b      	mov	r3, r1
 80013f0:	70fb      	strb	r3, [r7, #3]
    LCD128_DC_0(lcd);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ff9a 	bl	800132c <LCD128_DC_0>
    LCD128_CS_0(lcd);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff77 	bl	80012ec <LCD128_CS_0>
    LCD128_SPI_WRITE(lcd, cmd);
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	4619      	mov	r1, r3
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ffd2 	bl	80013ac <LCD128_SPI_WRITE>
    LCD128_CS_1(lcd);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff7f 	bl	800130c <LCD128_CS_1>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <LCD128_WriteData8>:

static void LCD128_WriteData8(LCD128_HandleTypeDef* lcd, uint8_t data) {
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	460b      	mov	r3, r1
 8001420:	70fb      	strb	r3, [r7, #3]
    LCD128_DC_1(lcd);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ff92 	bl	800134c <LCD128_DC_1>
    LCD128_CS_0(lcd);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff5f 	bl	80012ec <LCD128_CS_0>
    LCD128_SPI_WRITE(lcd, data);
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	4619      	mov	r1, r3
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffba 	bl	80013ac <LCD128_SPI_WRITE>
    LCD128_CS_1(lcd);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ff67 	bl	800130c <LCD128_CS_1>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <LCD128_WriteData16>:

static void LCD128_WriteData16(LCD128_HandleTypeDef* lcd, uint16_t data) {
 8001446:	b580      	push	{r7, lr}
 8001448:	b084      	sub	sp, #16
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	460b      	mov	r3, r1
 8001450:	807b      	strh	r3, [r7, #2]
    LCD128_DC_1(lcd);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ff7a 	bl	800134c <LCD128_DC_1>
    LCD128_CS_0(lcd);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff47 	bl	80012ec <LCD128_CS_0>
    uint8_t hi = data >> 8, lo = data & 0xFF;
 800145e:	887b      	ldrh	r3, [r7, #2]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	b29b      	uxth	r3, r3
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	887b      	ldrh	r3, [r7, #2]
 8001468:	73bb      	strb	r3, [r7, #14]
    LCD128_SPI_WRITE(lcd, hi);
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	4619      	mov	r1, r3
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ff9c 	bl	80013ac <LCD128_SPI_WRITE>
    LCD128_SPI_WRITE(lcd, lo);
 8001474:	7bbb      	ldrb	r3, [r7, #14]
 8001476:	4619      	mov	r1, r3
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff97 	bl	80013ac <LCD128_SPI_WRITE>
    LCD128_CS_1(lcd);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ff44 	bl	800130c <LCD128_CS_1>
}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <LCD128_Reset>:
        LCD128_SPI_WRITE(lcd, buff[i]);
    }
    LCD128_CS_1(lcd);
}

static void LCD128_Reset(LCD128_HandleTypeDef* lcd) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
    LCD128_RST_1(lcd);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff79 	bl	800138c <LCD128_RST_1>
    LCD128_DELAY(100);
 800149a:	2064      	movs	r0, #100	@ 0x64
 800149c:	f7ff ff98 	bl	80013d0 <LCD128_DELAY>
    LCD128_RST_0(lcd);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ff63 	bl	800136c <LCD128_RST_0>
    LCD128_DELAY(100);
 80014a6:	2064      	movs	r0, #100	@ 0x64
 80014a8:	f7ff ff92 	bl	80013d0 <LCD128_DELAY>
    LCD128_RST_1(lcd);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff6d 	bl	800138c <LCD128_RST_1>
    LCD128_DELAY(100);
 80014b2:	2064      	movs	r0, #100	@ 0x64
 80014b4:	f7ff ff8c 	bl	80013d0 <LCD128_DELAY>
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <LCD128_SetAddressWindow>:

void LCD128_SetAddressWindow(LCD128_HandleTypeDef* lcd, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	4608      	mov	r0, r1
 80014ca:	4611      	mov	r1, r2
 80014cc:	461a      	mov	r2, r3
 80014ce:	4603      	mov	r3, r0
 80014d0:	817b      	strh	r3, [r7, #10]
 80014d2:	460b      	mov	r3, r1
 80014d4:	813b      	strh	r3, [r7, #8]
 80014d6:	4613      	mov	r3, r2
 80014d8:	80fb      	strh	r3, [r7, #6]
    LCD128_WriteCommand(lcd, LCD128_CASET);
 80014da:	212a      	movs	r1, #42	@ 0x2a
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f7ff ff82 	bl	80013e6 <LCD128_WriteCommand>
    LCD128_WriteData8(lcd, x0 >> 8);
 80014e2:	897b      	ldrh	r3, [r7, #10]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	4619      	mov	r1, r3
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f7ff ff92 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteData8(lcd, x0 & 0xFF);
 80014f2:	897b      	ldrh	r3, [r7, #10]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	4619      	mov	r1, r3
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f7ff ff8c 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteData8(lcd, x1 >> 8);
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	b29b      	uxth	r3, r3
 8001504:	b2db      	uxtb	r3, r3
 8001506:	4619      	mov	r1, r3
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f7ff ff84 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteData8(lcd, x1 & 0xFF);
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	4619      	mov	r1, r3
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f7ff ff7e 	bl	8001416 <LCD128_WriteData8>

    LCD128_WriteCommand(lcd, LCD128_RASET);
 800151a:	212b      	movs	r1, #43	@ 0x2b
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f7ff ff62 	bl	80013e6 <LCD128_WriteCommand>
    LCD128_WriteData8(lcd, y0 >> 8);
 8001522:	893b      	ldrh	r3, [r7, #8]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	b29b      	uxth	r3, r3
 8001528:	b2db      	uxtb	r3, r3
 800152a:	4619      	mov	r1, r3
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f7ff ff72 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteData8(lcd, y0 & 0xFF);
 8001532:	893b      	ldrh	r3, [r7, #8]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4619      	mov	r1, r3
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f7ff ff6c 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteData8(lcd, y1 >> 8);
 800153e:	8b3b      	ldrh	r3, [r7, #24]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	b29b      	uxth	r3, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4619      	mov	r1, r3
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f7ff ff64 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteData8(lcd, y1 & 0xFF);
 800154e:	8b3b      	ldrh	r3, [r7, #24]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4619      	mov	r1, r3
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f7ff ff5e 	bl	8001416 <LCD128_WriteData8>

    LCD128_WriteCommand(lcd, LCD128_RAMWR);
 800155a:	212c      	movs	r1, #44	@ 0x2c
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f7ff ff42 	bl	80013e6 <LCD128_WriteCommand>
}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <LCD128_Init>:

void LCD128_Init(LCD128_HandleTypeDef* lcd) {
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
    LCD128_Reset(lcd);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ff8a 	bl	800148c <LCD128_Reset>
    // Chuỗi lệnh khởi tạo GC9A01 (tham khảo LCD_1in28.c)
    LCD128_WriteCommand(lcd, 0xEF);
 8001578:	21ef      	movs	r1, #239	@ 0xef
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ff33 	bl	80013e6 <LCD128_WriteCommand>
    LCD128_WriteCommand(lcd, 0xEB); LCD128_WriteData8(lcd, 0x14);
 8001580:	21eb      	movs	r1, #235	@ 0xeb
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ff2f 	bl	80013e6 <LCD128_WriteCommand>
 8001588:	2114      	movs	r1, #20
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ff43 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xFE);
 8001590:	21fe      	movs	r1, #254	@ 0xfe
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ff27 	bl	80013e6 <LCD128_WriteCommand>
    LCD128_WriteCommand(lcd, 0xEF);
 8001598:	21ef      	movs	r1, #239	@ 0xef
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff ff23 	bl	80013e6 <LCD128_WriteCommand>
    LCD128_WriteCommand(lcd, 0xEB); LCD128_WriteData8(lcd, 0x14);
 80015a0:	21eb      	movs	r1, #235	@ 0xeb
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ff1f 	bl	80013e6 <LCD128_WriteCommand>
 80015a8:	2114      	movs	r1, #20
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ff33 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x84); LCD128_WriteData8(lcd, 0x40);
 80015b0:	2184      	movs	r1, #132	@ 0x84
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ff17 	bl	80013e6 <LCD128_WriteCommand>
 80015b8:	2140      	movs	r1, #64	@ 0x40
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ff2b 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x85); LCD128_WriteData8(lcd, 0xFF);
 80015c0:	2185      	movs	r1, #133	@ 0x85
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ff0f 	bl	80013e6 <LCD128_WriteCommand>
 80015c8:	21ff      	movs	r1, #255	@ 0xff
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ff23 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x86); LCD128_WriteData8(lcd, 0xFF);
 80015d0:	2186      	movs	r1, #134	@ 0x86
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ff07 	bl	80013e6 <LCD128_WriteCommand>
 80015d8:	21ff      	movs	r1, #255	@ 0xff
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ff1b 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x87); LCD128_WriteData8(lcd, 0xFF);
 80015e0:	2187      	movs	r1, #135	@ 0x87
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff feff 	bl	80013e6 <LCD128_WriteCommand>
 80015e8:	21ff      	movs	r1, #255	@ 0xff
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff ff13 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x88); LCD128_WriteData8(lcd, 0x0A);
 80015f0:	2188      	movs	r1, #136	@ 0x88
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff fef7 	bl	80013e6 <LCD128_WriteCommand>
 80015f8:	210a      	movs	r1, #10
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ff0b 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x89); LCD128_WriteData8(lcd, 0x21);
 8001600:	2189      	movs	r1, #137	@ 0x89
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff feef 	bl	80013e6 <LCD128_WriteCommand>
 8001608:	2121      	movs	r1, #33	@ 0x21
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ff03 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8A); LCD128_WriteData8(lcd, 0x00);
 8001610:	218a      	movs	r1, #138	@ 0x8a
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fee7 	bl	80013e6 <LCD128_WriteCommand>
 8001618:	2100      	movs	r1, #0
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff fefb 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8B); LCD128_WriteData8(lcd, 0x80);
 8001620:	218b      	movs	r1, #139	@ 0x8b
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fedf 	bl	80013e6 <LCD128_WriteCommand>
 8001628:	2180      	movs	r1, #128	@ 0x80
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff fef3 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8C); LCD128_WriteData8(lcd, 0x01);
 8001630:	218c      	movs	r1, #140	@ 0x8c
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff fed7 	bl	80013e6 <LCD128_WriteCommand>
 8001638:	2101      	movs	r1, #1
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff feeb 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8D); LCD128_WriteData8(lcd, 0x01);
 8001640:	218d      	movs	r1, #141	@ 0x8d
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fecf 	bl	80013e6 <LCD128_WriteCommand>
 8001648:	2101      	movs	r1, #1
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fee3 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8E); LCD128_WriteData8(lcd, 0xFF);
 8001650:	218e      	movs	r1, #142	@ 0x8e
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff fec7 	bl	80013e6 <LCD128_WriteCommand>
 8001658:	21ff      	movs	r1, #255	@ 0xff
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff fedb 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8F); LCD128_WriteData8(lcd, 0xFF);
 8001660:	218f      	movs	r1, #143	@ 0x8f
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff febf 	bl	80013e6 <LCD128_WriteCommand>
 8001668:	21ff      	movs	r1, #255	@ 0xff
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fed3 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xB6); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x20);
 8001670:	21b6      	movs	r1, #182	@ 0xb6
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff feb7 	bl	80013e6 <LCD128_WriteCommand>
 8001678:	2100      	movs	r1, #0
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff fecb 	bl	8001416 <LCD128_WriteData8>
 8001680:	2120      	movs	r1, #32
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fec7 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x36); LCD128_WriteData8(lcd, 0x08); // vertical
 8001688:	2136      	movs	r1, #54	@ 0x36
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff feab 	bl	80013e6 <LCD128_WriteCommand>
 8001690:	2108      	movs	r1, #8
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff febf 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x3A); LCD128_WriteData8(lcd, 0x05);
 8001698:	213a      	movs	r1, #58	@ 0x3a
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff fea3 	bl	80013e6 <LCD128_WriteCommand>
 80016a0:	2105      	movs	r1, #5
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff feb7 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x90); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08);
 80016a8:	2190      	movs	r1, #144	@ 0x90
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fe9b 	bl	80013e6 <LCD128_WriteCommand>
 80016b0:	2108      	movs	r1, #8
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff feaf 	bl	8001416 <LCD128_WriteData8>
 80016b8:	2108      	movs	r1, #8
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff feab 	bl	8001416 <LCD128_WriteData8>
 80016c0:	2108      	movs	r1, #8
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff fea7 	bl	8001416 <LCD128_WriteData8>
 80016c8:	2108      	movs	r1, #8
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff fea3 	bl	8001416 <LCD128_WriteData8>
 80016d0:	2108      	movs	r1, #8
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff fe9f 	bl	8001416 <LCD128_WriteData8>
 80016d8:	2108      	movs	r1, #8
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fe9b 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xBD); LCD128_WriteData8(lcd, 0x06);
 80016e0:	21bd      	movs	r1, #189	@ 0xbd
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fe7f 	bl	80013e6 <LCD128_WriteCommand>
 80016e8:	2106      	movs	r1, #6
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff fe93 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xBC); LCD128_WriteData8(lcd, 0x00);
 80016f0:	21bc      	movs	r1, #188	@ 0xbc
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff fe77 	bl	80013e6 <LCD128_WriteCommand>
 80016f8:	2100      	movs	r1, #0
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fe8b 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xFF); LCD128_WriteData8(lcd, 0x60); LCD128_WriteData8(lcd, 0x01); LCD128_WriteData8(lcd, 0x04);
 8001700:	21ff      	movs	r1, #255	@ 0xff
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff fe6f 	bl	80013e6 <LCD128_WriteCommand>
 8001708:	2160      	movs	r1, #96	@ 0x60
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff fe83 	bl	8001416 <LCD128_WriteData8>
 8001710:	2101      	movs	r1, #1
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff fe7f 	bl	8001416 <LCD128_WriteData8>
 8001718:	2104      	movs	r1, #4
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff fe7b 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xC3); LCD128_WriteData8(lcd, 0x13);
 8001720:	21c3      	movs	r1, #195	@ 0xc3
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fe5f 	bl	80013e6 <LCD128_WriteCommand>
 8001728:	2113      	movs	r1, #19
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff fe73 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xC4); LCD128_WriteData8(lcd, 0x13);
 8001730:	21c4      	movs	r1, #196	@ 0xc4
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff fe57 	bl	80013e6 <LCD128_WriteCommand>
 8001738:	2113      	movs	r1, #19
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff fe6b 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xC9); LCD128_WriteData8(lcd, 0x22);
 8001740:	21c9      	movs	r1, #201	@ 0xc9
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fe4f 	bl	80013e6 <LCD128_WriteCommand>
 8001748:	2122      	movs	r1, #34	@ 0x22
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff fe63 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xBE); LCD128_WriteData8(lcd, 0x11);
 8001750:	21be      	movs	r1, #190	@ 0xbe
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fe47 	bl	80013e6 <LCD128_WriteCommand>
 8001758:	2111      	movs	r1, #17
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff fe5b 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xE1); LCD128_WriteData8(lcd, 0x10); LCD128_WriteData8(lcd, 0x0E);
 8001760:	21e1      	movs	r1, #225	@ 0xe1
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff fe3f 	bl	80013e6 <LCD128_WriteCommand>
 8001768:	2110      	movs	r1, #16
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fe53 	bl	8001416 <LCD128_WriteData8>
 8001770:	210e      	movs	r1, #14
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fe4f 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xDF); LCD128_WriteData8(lcd, 0x21); LCD128_WriteData8(lcd, 0x0c); LCD128_WriteData8(lcd, 0x02);
 8001778:	21df      	movs	r1, #223	@ 0xdf
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff fe33 	bl	80013e6 <LCD128_WriteCommand>
 8001780:	2121      	movs	r1, #33	@ 0x21
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff fe47 	bl	8001416 <LCD128_WriteData8>
 8001788:	210c      	movs	r1, #12
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff fe43 	bl	8001416 <LCD128_WriteData8>
 8001790:	2102      	movs	r1, #2
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff fe3f 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xF0); LCD128_WriteData8(lcd, 0x45); LCD128_WriteData8(lcd, 0x09); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x26); LCD128_WriteData8(lcd, 0x2A);
 8001798:	21f0      	movs	r1, #240	@ 0xf0
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff fe23 	bl	80013e6 <LCD128_WriteCommand>
 80017a0:	2145      	movs	r1, #69	@ 0x45
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff fe37 	bl	8001416 <LCD128_WriteData8>
 80017a8:	2109      	movs	r1, #9
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff fe33 	bl	8001416 <LCD128_WriteData8>
 80017b0:	2108      	movs	r1, #8
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff fe2f 	bl	8001416 <LCD128_WriteData8>
 80017b8:	2108      	movs	r1, #8
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff fe2b 	bl	8001416 <LCD128_WriteData8>
 80017c0:	2126      	movs	r1, #38	@ 0x26
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff fe27 	bl	8001416 <LCD128_WriteData8>
 80017c8:	212a      	movs	r1, #42	@ 0x2a
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff fe23 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xF1); LCD128_WriteData8(lcd, 0x43); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x72); LCD128_WriteData8(lcd, 0x36); LCD128_WriteData8(lcd, 0x37); LCD128_WriteData8(lcd, 0x6F);
 80017d0:	21f1      	movs	r1, #241	@ 0xf1
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fe07 	bl	80013e6 <LCD128_WriteCommand>
 80017d8:	2143      	movs	r1, #67	@ 0x43
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff fe1b 	bl	8001416 <LCD128_WriteData8>
 80017e0:	2170      	movs	r1, #112	@ 0x70
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff fe17 	bl	8001416 <LCD128_WriteData8>
 80017e8:	2172      	movs	r1, #114	@ 0x72
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff fe13 	bl	8001416 <LCD128_WriteData8>
 80017f0:	2136      	movs	r1, #54	@ 0x36
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff fe0f 	bl	8001416 <LCD128_WriteData8>
 80017f8:	2137      	movs	r1, #55	@ 0x37
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff fe0b 	bl	8001416 <LCD128_WriteData8>
 8001800:	216f      	movs	r1, #111	@ 0x6f
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff fe07 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xF2); LCD128_WriteData8(lcd, 0x45); LCD128_WriteData8(lcd, 0x09); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x26); LCD128_WriteData8(lcd, 0x2A);
 8001808:	21f2      	movs	r1, #242	@ 0xf2
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff fdeb 	bl	80013e6 <LCD128_WriteCommand>
 8001810:	2145      	movs	r1, #69	@ 0x45
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff fdff 	bl	8001416 <LCD128_WriteData8>
 8001818:	2109      	movs	r1, #9
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff fdfb 	bl	8001416 <LCD128_WriteData8>
 8001820:	2108      	movs	r1, #8
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff fdf7 	bl	8001416 <LCD128_WriteData8>
 8001828:	2108      	movs	r1, #8
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fdf3 	bl	8001416 <LCD128_WriteData8>
 8001830:	2126      	movs	r1, #38	@ 0x26
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fdef 	bl	8001416 <LCD128_WriteData8>
 8001838:	212a      	movs	r1, #42	@ 0x2a
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff fdeb 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xF3); LCD128_WriteData8(lcd, 0x43); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x72); LCD128_WriteData8(lcd, 0x36); LCD128_WriteData8(lcd, 0x37); LCD128_WriteData8(lcd, 0x6F);
 8001840:	21f3      	movs	r1, #243	@ 0xf3
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff fdcf 	bl	80013e6 <LCD128_WriteCommand>
 8001848:	2143      	movs	r1, #67	@ 0x43
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff fde3 	bl	8001416 <LCD128_WriteData8>
 8001850:	2170      	movs	r1, #112	@ 0x70
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff fddf 	bl	8001416 <LCD128_WriteData8>
 8001858:	2172      	movs	r1, #114	@ 0x72
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff fddb 	bl	8001416 <LCD128_WriteData8>
 8001860:	2136      	movs	r1, #54	@ 0x36
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff fdd7 	bl	8001416 <LCD128_WriteData8>
 8001868:	2137      	movs	r1, #55	@ 0x37
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff fdd3 	bl	8001416 <LCD128_WriteData8>
 8001870:	216f      	movs	r1, #111	@ 0x6f
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fdcf 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xED); LCD128_WriteData8(lcd, 0x1B); LCD128_WriteData8(lcd, 0x0B);
 8001878:	21ed      	movs	r1, #237	@ 0xed
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff fdb3 	bl	80013e6 <LCD128_WriteCommand>
 8001880:	211b      	movs	r1, #27
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fdc7 	bl	8001416 <LCD128_WriteData8>
 8001888:	210b      	movs	r1, #11
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff fdc3 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xAE); LCD128_WriteData8(lcd, 0x77);
 8001890:	21ae      	movs	r1, #174	@ 0xae
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff fda7 	bl	80013e6 <LCD128_WriteCommand>
 8001898:	2177      	movs	r1, #119	@ 0x77
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff fdbb 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xCD); LCD128_WriteData8(lcd, 0x63);
 80018a0:	21cd      	movs	r1, #205	@ 0xcd
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff fd9f 	bl	80013e6 <LCD128_WriteCommand>
 80018a8:	2163      	movs	r1, #99	@ 0x63
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff fdb3 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x70); LCD128_WriteData8(lcd, 0x07); LCD128_WriteData8(lcd, 0x07); LCD128_WriteData8(lcd, 0x04); LCD128_WriteData8(lcd, 0x0E); LCD128_WriteData8(lcd, 0x0F); LCD128_WriteData8(lcd, 0x09); LCD128_WriteData8(lcd, 0x07); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x03);
 80018b0:	2170      	movs	r1, #112	@ 0x70
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fd97 	bl	80013e6 <LCD128_WriteCommand>
 80018b8:	2107      	movs	r1, #7
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff fdab 	bl	8001416 <LCD128_WriteData8>
 80018c0:	2107      	movs	r1, #7
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fda7 	bl	8001416 <LCD128_WriteData8>
 80018c8:	2104      	movs	r1, #4
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff fda3 	bl	8001416 <LCD128_WriteData8>
 80018d0:	210e      	movs	r1, #14
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff fd9f 	bl	8001416 <LCD128_WriteData8>
 80018d8:	210f      	movs	r1, #15
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fd9b 	bl	8001416 <LCD128_WriteData8>
 80018e0:	2109      	movs	r1, #9
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff fd97 	bl	8001416 <LCD128_WriteData8>
 80018e8:	2107      	movs	r1, #7
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff fd93 	bl	8001416 <LCD128_WriteData8>
 80018f0:	2108      	movs	r1, #8
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff fd8f 	bl	8001416 <LCD128_WriteData8>
 80018f8:	2103      	movs	r1, #3
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff fd8b 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xE8); LCD128_WriteData8(lcd, 0x34);
 8001900:	21e8      	movs	r1, #232	@ 0xe8
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff fd6f 	bl	80013e6 <LCD128_WriteCommand>
 8001908:	2134      	movs	r1, #52	@ 0x34
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff fd83 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x62); LCD128_WriteData8(lcd, 0x18); LCD128_WriteData8(lcd, 0x0D); LCD128_WriteData8(lcd, 0x71); LCD128_WriteData8(lcd, 0xED); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x18); LCD128_WriteData8(lcd, 0x0F); LCD128_WriteData8(lcd, 0x71); LCD128_WriteData8(lcd, 0xEF); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x70);
 8001910:	2162      	movs	r1, #98	@ 0x62
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fd67 	bl	80013e6 <LCD128_WriteCommand>
 8001918:	2118      	movs	r1, #24
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff fd7b 	bl	8001416 <LCD128_WriteData8>
 8001920:	210d      	movs	r1, #13
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff fd77 	bl	8001416 <LCD128_WriteData8>
 8001928:	2171      	movs	r1, #113	@ 0x71
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff fd73 	bl	8001416 <LCD128_WriteData8>
 8001930:	21ed      	movs	r1, #237	@ 0xed
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff fd6f 	bl	8001416 <LCD128_WriteData8>
 8001938:	2170      	movs	r1, #112	@ 0x70
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff fd6b 	bl	8001416 <LCD128_WriteData8>
 8001940:	2170      	movs	r1, #112	@ 0x70
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff fd67 	bl	8001416 <LCD128_WriteData8>
 8001948:	2118      	movs	r1, #24
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff fd63 	bl	8001416 <LCD128_WriteData8>
 8001950:	210f      	movs	r1, #15
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fd5f 	bl	8001416 <LCD128_WriteData8>
 8001958:	2171      	movs	r1, #113	@ 0x71
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff fd5b 	bl	8001416 <LCD128_WriteData8>
 8001960:	21ef      	movs	r1, #239	@ 0xef
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff fd57 	bl	8001416 <LCD128_WriteData8>
 8001968:	2170      	movs	r1, #112	@ 0x70
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff fd53 	bl	8001416 <LCD128_WriteData8>
 8001970:	2170      	movs	r1, #112	@ 0x70
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff fd4f 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x63); LCD128_WriteData8(lcd, 0x18); LCD128_WriteData8(lcd, 0x11); LCD128_WriteData8(lcd, 0x71); LCD128_WriteData8(lcd, 0xF1); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x18); LCD128_WriteData8(lcd, 0x13); LCD128_WriteData8(lcd, 0x71); LCD128_WriteData8(lcd, 0xF3); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x70);
 8001978:	2163      	movs	r1, #99	@ 0x63
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff fd33 	bl	80013e6 <LCD128_WriteCommand>
 8001980:	2118      	movs	r1, #24
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff fd47 	bl	8001416 <LCD128_WriteData8>
 8001988:	2111      	movs	r1, #17
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff fd43 	bl	8001416 <LCD128_WriteData8>
 8001990:	2171      	movs	r1, #113	@ 0x71
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff fd3f 	bl	8001416 <LCD128_WriteData8>
 8001998:	21f1      	movs	r1, #241	@ 0xf1
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff fd3b 	bl	8001416 <LCD128_WriteData8>
 80019a0:	2170      	movs	r1, #112	@ 0x70
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff fd37 	bl	8001416 <LCD128_WriteData8>
 80019a8:	2170      	movs	r1, #112	@ 0x70
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff fd33 	bl	8001416 <LCD128_WriteData8>
 80019b0:	2118      	movs	r1, #24
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff fd2f 	bl	8001416 <LCD128_WriteData8>
 80019b8:	2113      	movs	r1, #19
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff fd2b 	bl	8001416 <LCD128_WriteData8>
 80019c0:	2171      	movs	r1, #113	@ 0x71
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff fd27 	bl	8001416 <LCD128_WriteData8>
 80019c8:	21f3      	movs	r1, #243	@ 0xf3
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff fd23 	bl	8001416 <LCD128_WriteData8>
 80019d0:	2170      	movs	r1, #112	@ 0x70
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff fd1f 	bl	8001416 <LCD128_WriteData8>
 80019d8:	2170      	movs	r1, #112	@ 0x70
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff fd1b 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x64); LCD128_WriteData8(lcd, 0x28); LCD128_WriteData8(lcd, 0x29); LCD128_WriteData8(lcd, 0xF1); LCD128_WriteData8(lcd, 0x01); LCD128_WriteData8(lcd, 0xF1); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x07);
 80019e0:	2164      	movs	r1, #100	@ 0x64
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff fcff 	bl	80013e6 <LCD128_WriteCommand>
 80019e8:	2128      	movs	r1, #40	@ 0x28
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff fd13 	bl	8001416 <LCD128_WriteData8>
 80019f0:	2129      	movs	r1, #41	@ 0x29
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff fd0f 	bl	8001416 <LCD128_WriteData8>
 80019f8:	21f1      	movs	r1, #241	@ 0xf1
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff fd0b 	bl	8001416 <LCD128_WriteData8>
 8001a00:	2101      	movs	r1, #1
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff fd07 	bl	8001416 <LCD128_WriteData8>
 8001a08:	21f1      	movs	r1, #241	@ 0xf1
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff fd03 	bl	8001416 <LCD128_WriteData8>
 8001a10:	2100      	movs	r1, #0
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fcff 	bl	8001416 <LCD128_WriteData8>
 8001a18:	2107      	movs	r1, #7
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff fcfb 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x66); LCD128_WriteData8(lcd, 0x3C); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0xCD); LCD128_WriteData8(lcd, 0x67); LCD128_WriteData8(lcd, 0x45); LCD128_WriteData8(lcd, 0x45); LCD128_WriteData8(lcd, 0x10); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x00);
 8001a20:	2166      	movs	r1, #102	@ 0x66
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff fcdf 	bl	80013e6 <LCD128_WriteCommand>
 8001a28:	213c      	movs	r1, #60	@ 0x3c
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff fcf3 	bl	8001416 <LCD128_WriteData8>
 8001a30:	2100      	movs	r1, #0
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff fcef 	bl	8001416 <LCD128_WriteData8>
 8001a38:	21cd      	movs	r1, #205	@ 0xcd
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff fceb 	bl	8001416 <LCD128_WriteData8>
 8001a40:	2167      	movs	r1, #103	@ 0x67
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fce7 	bl	8001416 <LCD128_WriteData8>
 8001a48:	2145      	movs	r1, #69	@ 0x45
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff fce3 	bl	8001416 <LCD128_WriteData8>
 8001a50:	2145      	movs	r1, #69	@ 0x45
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff fcdf 	bl	8001416 <LCD128_WriteData8>
 8001a58:	2110      	movs	r1, #16
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff fcdb 	bl	8001416 <LCD128_WriteData8>
 8001a60:	2100      	movs	r1, #0
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff fcd7 	bl	8001416 <LCD128_WriteData8>
 8001a68:	2100      	movs	r1, #0
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fcd3 	bl	8001416 <LCD128_WriteData8>
 8001a70:	2100      	movs	r1, #0
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff fccf 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x67); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x3C); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x01); LCD128_WriteData8(lcd, 0x54); LCD128_WriteData8(lcd, 0x10); LCD128_WriteData8(lcd, 0x32); LCD128_WriteData8(lcd, 0x98);
 8001a78:	2167      	movs	r1, #103	@ 0x67
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff fcb3 	bl	80013e6 <LCD128_WriteCommand>
 8001a80:	2100      	movs	r1, #0
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fcc7 	bl	8001416 <LCD128_WriteData8>
 8001a88:	213c      	movs	r1, #60	@ 0x3c
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff fcc3 	bl	8001416 <LCD128_WriteData8>
 8001a90:	2100      	movs	r1, #0
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff fcbf 	bl	8001416 <LCD128_WriteData8>
 8001a98:	2100      	movs	r1, #0
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff fcbb 	bl	8001416 <LCD128_WriteData8>
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff fcb7 	bl	8001416 <LCD128_WriteData8>
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff fcb3 	bl	8001416 <LCD128_WriteData8>
 8001ab0:	2154      	movs	r1, #84	@ 0x54
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fcaf 	bl	8001416 <LCD128_WriteData8>
 8001ab8:	2110      	movs	r1, #16
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff fcab 	bl	8001416 <LCD128_WriteData8>
 8001ac0:	2132      	movs	r1, #50	@ 0x32
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff fca7 	bl	8001416 <LCD128_WriteData8>
 8001ac8:	2198      	movs	r1, #152	@ 0x98
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff fca3 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x74); LCD128_WriteData8(lcd, 0x10); LCD128_WriteData8(lcd, 0x85); LCD128_WriteData8(lcd, 0x80); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x4E); LCD128_WriteData8(lcd, 0x00);
 8001ad0:	2174      	movs	r1, #116	@ 0x74
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff fc87 	bl	80013e6 <LCD128_WriteCommand>
 8001ad8:	2110      	movs	r1, #16
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fc9b 	bl	8001416 <LCD128_WriteData8>
 8001ae0:	2185      	movs	r1, #133	@ 0x85
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff fc97 	bl	8001416 <LCD128_WriteData8>
 8001ae8:	2180      	movs	r1, #128	@ 0x80
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff fc93 	bl	8001416 <LCD128_WriteData8>
 8001af0:	2100      	movs	r1, #0
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff fc8f 	bl	8001416 <LCD128_WriteData8>
 8001af8:	2100      	movs	r1, #0
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff fc8b 	bl	8001416 <LCD128_WriteData8>
 8001b00:	214e      	movs	r1, #78	@ 0x4e
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fc87 	bl	8001416 <LCD128_WriteData8>
 8001b08:	2100      	movs	r1, #0
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff fc83 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x98); LCD128_WriteData8(lcd, 0x3e); LCD128_WriteData8(lcd, 0x07);
 8001b10:	2198      	movs	r1, #152	@ 0x98
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fc67 	bl	80013e6 <LCD128_WriteCommand>
 8001b18:	213e      	movs	r1, #62	@ 0x3e
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff fc7b 	bl	8001416 <LCD128_WriteData8>
 8001b20:	2107      	movs	r1, #7
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff fc77 	bl	8001416 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x35);
 8001b28:	2135      	movs	r1, #53	@ 0x35
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff fc5b 	bl	80013e6 <LCD128_WriteCommand>
    LCD128_WriteCommand(lcd, 0x21);
 8001b30:	2121      	movs	r1, #33	@ 0x21
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff fc57 	bl	80013e6 <LCD128_WriteCommand>
    LCD128_WriteCommand(lcd, LCD128_SLPOUT);
 8001b38:	2111      	movs	r1, #17
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff fc53 	bl	80013e6 <LCD128_WriteCommand>
    LCD128_DELAY(120);
 8001b40:	2078      	movs	r0, #120	@ 0x78
 8001b42:	f7ff fc45 	bl	80013d0 <LCD128_DELAY>
    LCD128_WriteCommand(lcd, LCD128_DISPON);
 8001b46:	2129      	movs	r1, #41	@ 0x29
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff fc4c 	bl	80013e6 <LCD128_WriteCommand>
    LCD128_DELAY(20);
 8001b4e:	2014      	movs	r0, #20
 8001b50:	f7ff fc3e 	bl	80013d0 <LCD128_DELAY>
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <LCD128_DrawPixel>:

void LCD128_DrawPixel(LCD128_HandleTypeDef* lcd, uint16_t x, uint16_t y, uint16_t color) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af02      	add	r7, sp, #8
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	4608      	mov	r0, r1
 8001b66:	4611      	mov	r1, r2
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	817b      	strh	r3, [r7, #10]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	813b      	strh	r3, [r7, #8]
 8001b72:	4613      	mov	r3, r2
 8001b74:	80fb      	strh	r3, [r7, #6]
    if (x >= LCD128_WIDTH || y >= LCD128_HEIGHT) return;
 8001b76:	897b      	ldrh	r3, [r7, #10]
 8001b78:	2bef      	cmp	r3, #239	@ 0xef
 8001b7a:	d811      	bhi.n	8001ba0 <LCD128_DrawPixel+0x44>
 8001b7c:	893b      	ldrh	r3, [r7, #8]
 8001b7e:	2bef      	cmp	r3, #239	@ 0xef
 8001b80:	d80e      	bhi.n	8001ba0 <LCD128_DrawPixel+0x44>
    LCD128_SetAddressWindow(lcd, x, y, x, y);
 8001b82:	8978      	ldrh	r0, [r7, #10]
 8001b84:	893a      	ldrh	r2, [r7, #8]
 8001b86:	8979      	ldrh	r1, [r7, #10]
 8001b88:	893b      	ldrh	r3, [r7, #8]
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f7ff fc96 	bl	80014c0 <LCD128_SetAddressWindow>
    LCD128_WriteData16(lcd, color);
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	4619      	mov	r1, r3
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f7ff fc54 	bl	8001446 <LCD128_WriteData16>
 8001b9e:	e000      	b.n	8001ba2 <LCD128_DrawPixel+0x46>
    if (x >= LCD128_WIDTH || y >= LCD128_HEIGHT) return;
 8001ba0:	bf00      	nop
}
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <LCD128_FillRectangle>:
        x += font.width;
        str++;
    }
}

void LCD128_FillRectangle(LCD128_HandleTypeDef* lcd, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	4608      	mov	r0, r1
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	817b      	strh	r3, [r7, #10]
 8001bba:	460b      	mov	r3, r1
 8001bbc:	813b      	strh	r3, [r7, #8]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	80fb      	strh	r3, [r7, #6]
    if ((x >= LCD128_WIDTH) || (y >= LCD128_HEIGHT)) return;
 8001bc2:	897b      	ldrh	r3, [r7, #10]
 8001bc4:	2bef      	cmp	r3, #239	@ 0xef
 8001bc6:	d83b      	bhi.n	8001c40 <LCD128_FillRectangle+0x98>
 8001bc8:	893b      	ldrh	r3, [r7, #8]
 8001bca:	2bef      	cmp	r3, #239	@ 0xef
 8001bcc:	d838      	bhi.n	8001c40 <LCD128_FillRectangle+0x98>
    if ((x + w - 1) >= LCD128_WIDTH) w = LCD128_WIDTH - x;
 8001bce:	897a      	ldrh	r2, [r7, #10]
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	2bf0      	cmp	r3, #240	@ 0xf0
 8001bd6:	dd03      	ble.n	8001be0 <LCD128_FillRectangle+0x38>
 8001bd8:	897b      	ldrh	r3, [r7, #10]
 8001bda:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001bde:	80fb      	strh	r3, [r7, #6]
    if ((y + h - 1) >= LCD128_HEIGHT) h = LCD128_HEIGHT - y;
 8001be0:	893a      	ldrh	r2, [r7, #8]
 8001be2:	8c3b      	ldrh	r3, [r7, #32]
 8001be4:	4413      	add	r3, r2
 8001be6:	2bf0      	cmp	r3, #240	@ 0xf0
 8001be8:	dd03      	ble.n	8001bf2 <LCD128_FillRectangle+0x4a>
 8001bea:	893b      	ldrh	r3, [r7, #8]
 8001bec:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001bf0:	843b      	strh	r3, [r7, #32]
    LCD128_SetAddressWindow(lcd, x, y, x + w - 1, y + h - 1);
 8001bf2:	897a      	ldrh	r2, [r7, #10]
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b298      	uxth	r0, r3
 8001bfe:	893a      	ldrh	r2, [r7, #8]
 8001c00:	8c3b      	ldrh	r3, [r7, #32]
 8001c02:	4413      	add	r3, r2
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	893a      	ldrh	r2, [r7, #8]
 8001c0c:	8979      	ldrh	r1, [r7, #10]
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	4603      	mov	r3, r0
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f7ff fc54 	bl	80014c0 <LCD128_SetAddressWindow>
    for (uint32_t i = 0; i < w * h; i++) {
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	e007      	b.n	8001c2e <LCD128_FillRectangle+0x86>
        LCD128_WriteData16(lcd, color);
 8001c1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c20:	4619      	mov	r1, r3
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f7ff fc0f 	bl	8001446 <LCD128_WriteData16>
    for (uint32_t i = 0; i < w * h; i++) {
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	8c3a      	ldrh	r2, [r7, #32]
 8001c32:	fb02 f303 	mul.w	r3, r2, r3
 8001c36:	461a      	mov	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d3ef      	bcc.n	8001c1e <LCD128_FillRectangle+0x76>
 8001c3e:	e000      	b.n	8001c42 <LCD128_FillRectangle+0x9a>
    if ((x >= LCD128_WIDTH) || (y >= LCD128_HEIGHT)) return;
 8001c40:	bf00      	nop
    }
}
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <LCD128_FillScreen>:

void LCD128_FillScreen(LCD128_HandleTypeDef* lcd, uint16_t color) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	807b      	strh	r3, [r7, #2]
    LCD128_FillRectangle(lcd, 0, 0, LCD128_WIDTH, LCD128_HEIGHT, color);
 8001c54:	887b      	ldrh	r3, [r7, #2]
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	23f0      	movs	r3, #240	@ 0xf0
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	23f0      	movs	r3, #240	@ 0xf0
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ffa0 	bl	8001ba8 <LCD128_FillRectangle>
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <LCD128_DrawImage_DMA>:
}

// Biến trạng thái DMA (nên đặt volatile nếu dùng trong ngắt)
volatile uint8_t lcd128_dma_busy = 0;

void LCD128_DrawImage_DMA(LCD128_HandleTypeDef* lcd, uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af02      	add	r7, sp, #8
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	4608      	mov	r0, r1
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4603      	mov	r3, r0
 8001c80:	817b      	strh	r3, [r7, #10]
 8001c82:	460b      	mov	r3, r1
 8001c84:	813b      	strh	r3, [r7, #8]
 8001c86:	4613      	mov	r3, r2
 8001c88:	80fb      	strh	r3, [r7, #6]
    if ((x >= LCD128_WIDTH) || (y >= LCD128_HEIGHT)) return;
 8001c8a:	897b      	ldrh	r3, [r7, #10]
 8001c8c:	2bef      	cmp	r3, #239	@ 0xef
 8001c8e:	d836      	bhi.n	8001cfe <LCD128_DrawImage_DMA+0x8e>
 8001c90:	893b      	ldrh	r3, [r7, #8]
 8001c92:	2bef      	cmp	r3, #239	@ 0xef
 8001c94:	d833      	bhi.n	8001cfe <LCD128_DrawImage_DMA+0x8e>
    if ((x + w - 1) >= LCD128_WIDTH) return;
 8001c96:	897a      	ldrh	r2, [r7, #10]
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	2bf0      	cmp	r3, #240	@ 0xf0
 8001c9e:	dc30      	bgt.n	8001d02 <LCD128_DrawImage_DMA+0x92>
    if ((y + h - 1) >= LCD128_HEIGHT) return;
 8001ca0:	893a      	ldrh	r2, [r7, #8]
 8001ca2:	8b3b      	ldrh	r3, [r7, #24]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	2bf0      	cmp	r3, #240	@ 0xf0
 8001ca8:	dc2d      	bgt.n	8001d06 <LCD128_DrawImage_DMA+0x96>
    LCD128_SetAddressWindow(lcd, x, y, x + w - 1, y + h - 1);
 8001caa:	897a      	ldrh	r2, [r7, #10]
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	4413      	add	r3, r2
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	b298      	uxth	r0, r3
 8001cb6:	893a      	ldrh	r2, [r7, #8]
 8001cb8:	8b3b      	ldrh	r3, [r7, #24]
 8001cba:	4413      	add	r3, r2
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	893a      	ldrh	r2, [r7, #8]
 8001cc4:	8979      	ldrh	r1, [r7, #10]
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	4603      	mov	r3, r0
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f7ff fbf8 	bl	80014c0 <LCD128_SetAddressWindow>
    LCD128_DC_1(lcd);
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f7ff fb3b 	bl	800134c <LCD128_DC_1>
    LCD128_CS_0(lcd);
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f7ff fb08 	bl	80012ec <LCD128_CS_0>
    lcd128_dma_busy = 1;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <LCD128_DrawImage_DMA+0xa0>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
    // Truyền buffer qua DMA, mỗi pixel 2 byte
    HAL_SPI_Transmit_DMA(lcd->hspi, (uint8_t*)data, w * h * 2);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	8b3a      	ldrh	r2, [r7, #24]
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	69f9      	ldr	r1, [r7, #28]
 8001cf8:	f003 f940 	bl	8004f7c <HAL_SPI_Transmit_DMA>
 8001cfc:	e004      	b.n	8001d08 <LCD128_DrawImage_DMA+0x98>
    if ((x >= LCD128_WIDTH) || (y >= LCD128_HEIGHT)) return;
 8001cfe:	bf00      	nop
 8001d00:	e002      	b.n	8001d08 <LCD128_DrawImage_DMA+0x98>
    if ((x + w - 1) >= LCD128_WIDTH) return;
 8001d02:	bf00      	nop
 8001d04:	e000      	b.n	8001d08 <LCD128_DrawImage_DMA+0x98>
    if ((y + h - 1) >= LCD128_HEIGHT) return;
 8001d06:	bf00      	nop
    // Không đóng CS ở đây, sẽ đóng trong callback khi DMA xong
}
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000084 	.word	0x20000084

08001d14 <blend_color_fast>:
void draw_realistic_eye(int cx, int cy, int r, int pupil_r, int pupil_offset_x, int pupil_offset_y,uint16_t bgcolor); 
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi);
void Animation_Loop(void);
// === Blend nhanh giữa 2 màu RGB565 ===
// t từ 0 đến 255 (0 = màu 1, 255 = màu 2)
uint16_t blend_color_fast(uint16_t c1, uint16_t c2, uint8_t t) {
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	80fb      	strh	r3, [r7, #6]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	80bb      	strh	r3, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	70fb      	strb	r3, [r7, #3]
    uint8_t r1 = (c1 >> 11) & 0x1F, g1 = (c1 >> 5) & 0x3F, b1 = c1 & 0x1F;
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	0adb      	lsrs	r3, r3, #11
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	f003 031f 	and.w	r3, r3, #31
 8001d32:	75fb      	strb	r3, [r7, #23]
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d40:	75bb      	strb	r3, [r7, #22]
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	757b      	strb	r3, [r7, #21]
    uint8_t r2 = (c2 >> 11) & 0x1F, g2 = (c2 >> 5) & 0x3F, b2 = c2 & 0x1F;
 8001d4c:	88bb      	ldrh	r3, [r7, #4]
 8001d4e:	0adb      	lsrs	r3, r3, #11
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	753b      	strb	r3, [r7, #20]
 8001d5a:	88bb      	ldrh	r3, [r7, #4]
 8001d5c:	095b      	lsrs	r3, r3, #5
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d66:	74fb      	strb	r3, [r7, #19]
 8001d68:	88bb      	ldrh	r3, [r7, #4]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	74bb      	strb	r3, [r7, #18]

    uint8_t r = ((r1 * (255 - t)) + (r2 * t)) >> 8;
 8001d72:	7dfb      	ldrb	r3, [r7, #23]
 8001d74:	78fa      	ldrb	r2, [r7, #3]
 8001d76:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8001d7a:	fb03 f202 	mul.w	r2, r3, r2
 8001d7e:	7d3b      	ldrb	r3, [r7, #20]
 8001d80:	78f9      	ldrb	r1, [r7, #3]
 8001d82:	fb01 f303 	mul.w	r3, r1, r3
 8001d86:	4413      	add	r3, r2
 8001d88:	121b      	asrs	r3, r3, #8
 8001d8a:	747b      	strb	r3, [r7, #17]
    uint8_t g = ((g1 * (255 - t)) + (g2 * t)) >> 8;
 8001d8c:	7dbb      	ldrb	r3, [r7, #22]
 8001d8e:	78fa      	ldrb	r2, [r7, #3]
 8001d90:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8001d94:	fb03 f202 	mul.w	r2, r3, r2
 8001d98:	7cfb      	ldrb	r3, [r7, #19]
 8001d9a:	78f9      	ldrb	r1, [r7, #3]
 8001d9c:	fb01 f303 	mul.w	r3, r1, r3
 8001da0:	4413      	add	r3, r2
 8001da2:	121b      	asrs	r3, r3, #8
 8001da4:	743b      	strb	r3, [r7, #16]
    uint8_t b = ((b1 * (255 - t)) + (b2 * t)) >> 8;
 8001da6:	7d7b      	ldrb	r3, [r7, #21]
 8001da8:	78fa      	ldrb	r2, [r7, #3]
 8001daa:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8001dae:	fb03 f202 	mul.w	r2, r3, r2
 8001db2:	7cbb      	ldrb	r3, [r7, #18]
 8001db4:	78f9      	ldrb	r1, [r7, #3]
 8001db6:	fb01 f303 	mul.w	r3, r1, r3
 8001dba:	4413      	add	r3, r2
 8001dbc:	121b      	asrs	r3, r3, #8
 8001dbe:	73fb      	strb	r3, [r7, #15]

    return (r << 11) | (g << 5) | b;
 8001dc0:	7c7b      	ldrb	r3, [r7, #17]
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	02db      	lsls	r3, r3, #11
 8001dc6:	b21a      	sxth	r2, r3
 8001dc8:	7c3b      	ldrb	r3, [r7, #16]
 8001dca:	b21b      	sxth	r3, r3
 8001dcc:	015b      	lsls	r3, r3, #5
 8001dce:	b21b      	sxth	r3, r3
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	b21a      	sxth	r2, r3
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	b21b      	sxth	r3, r3
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	b21b      	sxth	r3, r3
 8001ddc:	b29b      	uxth	r3, r3
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	371c      	adds	r7, #28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dee:	f001 fe01 	bl	80039f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001df2:	f001 fa85 	bl	8003300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001df6:	f001 fb5b 	bl	80034b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dfa:	f001 fb33 	bl	8003464 <MX_DMA_Init>
  MX_SPI1_Init();
 8001dfe:	f001 fac5 	bl	800338c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001e02:	f001 faf9 	bl	80033f8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  lcd1.hspi = &hspi1;
 8001e06:	4b72      	ldr	r3, [pc, #456]	@ (8001fd0 <main+0x1e8>)
 8001e08:	4a72      	ldr	r2, [pc, #456]	@ (8001fd4 <main+0x1ec>)
 8001e0a:	601a      	str	r2, [r3, #0]
  lcd1.CS_Port = GPIOB; lcd1.CS_Pin = GPIO_PIN_10;
 8001e0c:	4b70      	ldr	r3, [pc, #448]	@ (8001fd0 <main+0x1e8>)
 8001e0e:	4a72      	ldr	r2, [pc, #456]	@ (8001fd8 <main+0x1f0>)
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	4b6f      	ldr	r3, [pc, #444]	@ (8001fd0 <main+0x1e8>)
 8001e14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e18:	811a      	strh	r2, [r3, #8]
  lcd1.DC_Port = GPIOB; lcd1.DC_Pin = GPIO_PIN_1;
 8001e1a:	4b6d      	ldr	r3, [pc, #436]	@ (8001fd0 <main+0x1e8>)
 8001e1c:	4a6e      	ldr	r2, [pc, #440]	@ (8001fd8 <main+0x1f0>)
 8001e1e:	60da      	str	r2, [r3, #12]
 8001e20:	4b6b      	ldr	r3, [pc, #428]	@ (8001fd0 <main+0x1e8>)
 8001e22:	2202      	movs	r2, #2
 8001e24:	821a      	strh	r2, [r3, #16]
  lcd1.RST_Port = GPIOB; lcd1.RST_Pin = GPIO_PIN_0;
 8001e26:	4b6a      	ldr	r3, [pc, #424]	@ (8001fd0 <main+0x1e8>)
 8001e28:	4a6b      	ldr	r2, [pc, #428]	@ (8001fd8 <main+0x1f0>)
 8001e2a:	615a      	str	r2, [r3, #20]
 8001e2c:	4b68      	ldr	r3, [pc, #416]	@ (8001fd0 <main+0x1e8>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	831a      	strh	r2, [r3, #24]


  lcd2.hspi = &hspi2;
 8001e32:	4b6a      	ldr	r3, [pc, #424]	@ (8001fdc <main+0x1f4>)
 8001e34:	4a6a      	ldr	r2, [pc, #424]	@ (8001fe0 <main+0x1f8>)
 8001e36:	601a      	str	r2, [r3, #0]
  lcd2.CS_Port = GPIOA; lcd2.CS_Pin = GPIO_PIN_10;
 8001e38:	4b68      	ldr	r3, [pc, #416]	@ (8001fdc <main+0x1f4>)
 8001e3a:	4a6a      	ldr	r2, [pc, #424]	@ (8001fe4 <main+0x1fc>)
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	4b67      	ldr	r3, [pc, #412]	@ (8001fdc <main+0x1f4>)
 8001e40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e44:	811a      	strh	r2, [r3, #8]
  lcd2.DC_Port = GPIOA; lcd2.DC_Pin = GPIO_PIN_9;
 8001e46:	4b65      	ldr	r3, [pc, #404]	@ (8001fdc <main+0x1f4>)
 8001e48:	4a66      	ldr	r2, [pc, #408]	@ (8001fe4 <main+0x1fc>)
 8001e4a:	60da      	str	r2, [r3, #12]
 8001e4c:	4b63      	ldr	r3, [pc, #396]	@ (8001fdc <main+0x1f4>)
 8001e4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e52:	821a      	strh	r2, [r3, #16]
  lcd2.RST_Port = GPIOA; lcd2.RST_Pin = GPIO_PIN_8;
 8001e54:	4b61      	ldr	r3, [pc, #388]	@ (8001fdc <main+0x1f4>)
 8001e56:	4a63      	ldr	r2, [pc, #396]	@ (8001fe4 <main+0x1fc>)
 8001e58:	615a      	str	r2, [r3, #20]
 8001e5a:	4b60      	ldr	r3, [pc, #384]	@ (8001fdc <main+0x1f4>)
 8001e5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e60:	831a      	strh	r2, [r3, #24]

  LCD128_Init(&lcd1);
 8001e62:	485b      	ldr	r0, [pc, #364]	@ (8001fd0 <main+0x1e8>)
 8001e64:	f7ff fb81 	bl	800156a <LCD128_Init>
  LCD128_Init(&lcd2);
 8001e68:	485c      	ldr	r0, [pc, #368]	@ (8001fdc <main+0x1f4>)
 8001e6a:	f7ff fb7e 	bl	800156a <LCD128_Init>

  LCD128_FillScreen(&lcd1, LCD128_WHITE);
 8001e6e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001e72:	4857      	ldr	r0, [pc, #348]	@ (8001fd0 <main+0x1e8>)
 8001e74:	f7ff fee8 	bl	8001c48 <LCD128_FillScreen>
  LCD128_FillScreen(&lcd2, LCD128_WHITE);
 8001e78:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001e7c:	4857      	ldr	r0, [pc, #348]	@ (8001fdc <main+0x1f4>)
 8001e7e:	f7ff fee3 	bl	8001c48 <LCD128_FillScreen>

  LCD_Paint_DrawDashedEllipse(&lcd1, 120, 120, 105, 105, 10, 7, 2, LCD128_BLACK);
 8001e82:	2300      	movs	r3, #0
 8001e84:	9304      	str	r3, [sp, #16]
 8001e86:	2302      	movs	r3, #2
 8001e88:	9303      	str	r3, [sp, #12]
 8001e8a:	2307      	movs	r3, #7
 8001e8c:	9302      	str	r3, [sp, #8]
 8001e8e:	230a      	movs	r3, #10
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	2369      	movs	r3, #105	@ 0x69
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	2369      	movs	r3, #105	@ 0x69
 8001e98:	2278      	movs	r2, #120	@ 0x78
 8001e9a:	2178      	movs	r1, #120	@ 0x78
 8001e9c:	484c      	ldr	r0, [pc, #304]	@ (8001fd0 <main+0x1e8>)
 8001e9e:	f7ff f99d 	bl	80011dc <LCD_Paint_DrawDashedEllipse>
  LCD_Paint_DrawDashedEllipse(&lcd1, 120, 120, 112, 112, 10, 7, 2, LCD128_BLACK);
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	9304      	str	r3, [sp, #16]
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	9303      	str	r3, [sp, #12]
 8001eaa:	2307      	movs	r3, #7
 8001eac:	9302      	str	r3, [sp, #8]
 8001eae:	230a      	movs	r3, #10
 8001eb0:	9301      	str	r3, [sp, #4]
 8001eb2:	2370      	movs	r3, #112	@ 0x70
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2370      	movs	r3, #112	@ 0x70
 8001eb8:	2278      	movs	r2, #120	@ 0x78
 8001eba:	2178      	movs	r1, #120	@ 0x78
 8001ebc:	4844      	ldr	r0, [pc, #272]	@ (8001fd0 <main+0x1e8>)
 8001ebe:	f7ff f98d 	bl	80011dc <LCD_Paint_DrawDashedEllipse>
  LCD_Paint_DrawDashedEllipse(&lcd1, 120, 120, 118, 118, 10, 7, 2, LCD128_BLACK);
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	9304      	str	r3, [sp, #16]
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	9303      	str	r3, [sp, #12]
 8001eca:	2307      	movs	r3, #7
 8001ecc:	9302      	str	r3, [sp, #8]
 8001ece:	230a      	movs	r3, #10
 8001ed0:	9301      	str	r3, [sp, #4]
 8001ed2:	2376      	movs	r3, #118	@ 0x76
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	2376      	movs	r3, #118	@ 0x76
 8001ed8:	2278      	movs	r2, #120	@ 0x78
 8001eda:	2178      	movs	r1, #120	@ 0x78
 8001edc:	483c      	ldr	r0, [pc, #240]	@ (8001fd0 <main+0x1e8>)
 8001ede:	f7ff f97d 	bl	80011dc <LCD_Paint_DrawDashedEllipse>
//  LCD_Paint_DrawDashedEllipse(&lcd2, 120, 120, 83, 108, 6, 2, 2, LCD128_BLACK);
//  LCD_Paint_DrawDashedEllipse(&lcd2, 120, 120, 90, 115, 7, 2, 2, LCD128_BLACK);
//  LCD_Paint_DrawDashedEllipse(&lcd2, 120, 120, 95, 120, 8, 2, 2, LCD128_BLACK);
LCD_Paint_DrawDashedEllipse(&lcd2, 120, 120, 105, 105, 10, 7, 2, LCD128_BLACK);
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	9304      	str	r3, [sp, #16]
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	9303      	str	r3, [sp, #12]
 8001eea:	2307      	movs	r3, #7
 8001eec:	9302      	str	r3, [sp, #8]
 8001eee:	230a      	movs	r3, #10
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	2369      	movs	r3, #105	@ 0x69
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2369      	movs	r3, #105	@ 0x69
 8001ef8:	2278      	movs	r2, #120	@ 0x78
 8001efa:	2178      	movs	r1, #120	@ 0x78
 8001efc:	4837      	ldr	r0, [pc, #220]	@ (8001fdc <main+0x1f4>)
 8001efe:	f7ff f96d 	bl	80011dc <LCD_Paint_DrawDashedEllipse>
LCD_Paint_DrawDashedEllipse(&lcd2, 120, 120, 112, 112, 10, 7, 2, LCD128_BLACK);
 8001f02:	2300      	movs	r3, #0
 8001f04:	9304      	str	r3, [sp, #16]
 8001f06:	2302      	movs	r3, #2
 8001f08:	9303      	str	r3, [sp, #12]
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	9302      	str	r3, [sp, #8]
 8001f0e:	230a      	movs	r3, #10
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	2370      	movs	r3, #112	@ 0x70
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	2370      	movs	r3, #112	@ 0x70
 8001f18:	2278      	movs	r2, #120	@ 0x78
 8001f1a:	2178      	movs	r1, #120	@ 0x78
 8001f1c:	482f      	ldr	r0, [pc, #188]	@ (8001fdc <main+0x1f4>)
 8001f1e:	f7ff f95d 	bl	80011dc <LCD_Paint_DrawDashedEllipse>
LCD_Paint_DrawDashedEllipse(&lcd2, 120, 120, 118, 118, 10, 7, 2, LCD128_BLACK);
 8001f22:	2300      	movs	r3, #0
 8001f24:	9304      	str	r3, [sp, #16]
 8001f26:	2302      	movs	r3, #2
 8001f28:	9303      	str	r3, [sp, #12]
 8001f2a:	2307      	movs	r3, #7
 8001f2c:	9302      	str	r3, [sp, #8]
 8001f2e:	230a      	movs	r3, #10
 8001f30:	9301      	str	r3, [sp, #4]
 8001f32:	2376      	movs	r3, #118	@ 0x76
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	2376      	movs	r3, #118	@ 0x76
 8001f38:	2278      	movs	r2, #120	@ 0x78
 8001f3a:	2178      	movs	r1, #120	@ 0x78
 8001f3c:	4827      	ldr	r0, [pc, #156]	@ (8001fdc <main+0x1f4>)
 8001f3e:	f7ff f94d 	bl	80011dc <LCD_Paint_DrawDashedEllipse>
//  LCD128_FillRectangle(&lcd1, 10, 10, 40, 40, LCD128_COLOR565(0, 0, 255)); // Ô màu đỏ
//  LCD128_FillRectangle(&lcd1, 60, 10, 40, 40, LCD128_COLOR565(0, 255, 0)); // Ô màu xanh lá
//  LCD128_FillRectangle(&lcd1, 110, 10, 40, 40, LCD128_COLOR565(255, 0, 0)); // Ô màu xanh dương


  centerX = 120; centerY = 120;
 8001f42:	4b29      	ldr	r3, [pc, #164]	@ (8001fe8 <main+0x200>)
 8001f44:	2278      	movs	r2, #120	@ 0x78
 8001f46:	701a      	strb	r2, [r3, #0]
 8001f48:	4b28      	ldr	r3, [pc, #160]	@ (8001fec <main+0x204>)
 8001f4a:	2278      	movs	r2, #120	@ 0x78
 8001f4c:	701a      	strb	r2, [r3, #0]
  rx_in  = 80; ry_in  = 80;
 8001f4e:	4b28      	ldr	r3, [pc, #160]	@ (8001ff0 <main+0x208>)
 8001f50:	2250      	movs	r2, #80	@ 0x50
 8001f52:	701a      	strb	r2, [r3, #0]
 8001f54:	4b27      	ldr	r3, [pc, #156]	@ (8001ff4 <main+0x20c>)
 8001f56:	2250      	movs	r2, #80	@ 0x50
 8001f58:	701a      	strb	r2, [r3, #0]
  pupilRadius = 35;
 8001f5a:	4b27      	ldr	r3, [pc, #156]	@ (8001ff8 <main+0x210>)
 8001f5c:	2223      	movs	r2, #35	@ 0x23
 8001f5e:	701a      	strb	r2, [r3, #0]
  eyeRadius = pupilRadius / 2;
 8001f60:	4b25      	ldr	r3, [pc, #148]	@ (8001ff8 <main+0x210>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	085b      	lsrs	r3, r3, #1
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	4b24      	ldr	r3, [pc, #144]	@ (8001ffc <main+0x214>)
 8001f6a:	701a      	strb	r2, [r3, #0]
  pupilX = centerX; pupilY = centerY; 
 8001f6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe8 <main+0x200>)
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	4b23      	ldr	r3, [pc, #140]	@ (8002000 <main+0x218>)
 8001f72:	701a      	strb	r2, [r3, #0]
 8001f74:	4b1d      	ldr	r3, [pc, #116]	@ (8001fec <main+0x204>)
 8001f76:	781a      	ldrb	r2, [r3, #0]
 8001f78:	4b22      	ldr	r3, [pc, #136]	@ (8002004 <main+0x21c>)
 8001f7a:	701a      	strb	r2, [r3, #0]
  lerp_startX = lerp_startY = lerp_targetX = lerp_targetY = 0;
 8001f7c:	4b22      	ldr	r3, [pc, #136]	@ (8002008 <main+0x220>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	4b21      	ldr	r3, [pc, #132]	@ (8002008 <main+0x220>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a21      	ldr	r2, [pc, #132]	@ (800200c <main+0x224>)
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b20      	ldr	r3, [pc, #128]	@ (800200c <main+0x224>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a20      	ldr	r2, [pc, #128]	@ (8002010 <main+0x228>)
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b1f      	ldr	r3, [pc, #124]	@ (8002010 <main+0x228>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a1f      	ldr	r2, [pc, #124]	@ (8002014 <main+0x22c>)
 8001f98:	6013      	str	r3, [r2, #0]
  lerp_t = 1.0f;
 8001f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002018 <main+0x230>)
 8001f9c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001fa0:	601a      	str	r2, [r3, #0]
  lerp_steps = 15;
 8001fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800201c <main+0x234>)
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	601a      	str	r2, [r3, #0]
  random_count = 0;
 8001fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8002020 <main+0x238>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
  state_sequence_len = sizeof(state_sequence) / sizeof(state_sequence[0]);
 8001fae:	4b1d      	ldr	r3, [pc, #116]	@ (8002024 <main+0x23c>)
 8001fb0:	221a      	movs	r2, #26
 8001fb2:	701a      	strb	r2, [r3, #0]
  state_index = 0;
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8002028 <main+0x240>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	701a      	strb	r2, [r3, #0]
  state = state_sequence[state_index];
 8001fba:	4b1b      	ldr	r3, [pc, #108]	@ (8002028 <main+0x240>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800202c <main+0x244>)
 8001fc2:	5c9a      	ldrb	r2, [r3, r2]
 8001fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002030 <main+0x248>)
 8001fc6:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      Animation_Loop();
 8001fc8:	f000 f834 	bl	8002034 <Animation_Loop>
 8001fcc:	e7fc      	b.n	8001fc8 <main+0x1e0>
 8001fce:	bf00      	nop
 8001fd0:	200001c0 	.word	0x200001c0
 8001fd4:	20000088 	.word	0x20000088
 8001fd8:	40010c00 	.word	0x40010c00
 8001fdc:	200001dc 	.word	0x200001dc
 8001fe0:	200000e0 	.word	0x200000e0
 8001fe4:	40010800 	.word	0x40010800
 8001fe8:	200001f8 	.word	0x200001f8
 8001fec:	200001f9 	.word	0x200001f9
 8001ff0:	200001fa 	.word	0x200001fa
 8001ff4:	200001fb 	.word	0x200001fb
 8001ff8:	200001fc 	.word	0x200001fc
 8001ffc:	200001fd 	.word	0x200001fd
 8002000:	200001fe 	.word	0x200001fe
 8002004:	200001ff 	.word	0x200001ff
 8002008:	20000210 	.word	0x20000210
 800200c:	2000020c 	.word	0x2000020c
 8002010:	20000208 	.word	0x20000208
 8002014:	20000204 	.word	0x20000204
 8002018:	20000214 	.word	0x20000214
 800201c:	20000218 	.word	0x20000218
 8002020:	2000021e 	.word	0x2000021e
 8002024:	2000021d 	.word	0x2000021d
 8002028:	2000021c 	.word	0x2000021c
 800202c:	08007070 	.word	0x08007070
 8002030:	20000200 	.word	0x20000200

08002034 <Animation_Loop>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void Animation_Loop(void){
 8002034:	b5b0      	push	{r4, r5, r7, lr}
 8002036:	b090      	sub	sp, #64	@ 0x40
 8002038:	af06      	add	r7, sp, #24

      // Tính offset pupil theo hướng di chuyển, giới hạn trong mắt trắng
      int pupil_offset_x = centerX - pupilX;  
 800203a:	4b9d      	ldr	r3, [pc, #628]	@ (80022b0 <Animation_Loop+0x27c>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	4b9c      	ldr	r3, [pc, #624]	@ (80022b4 <Animation_Loop+0x280>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
      int pupil_offset_y = centerY - pupilY;
 8002048:	4b9b      	ldr	r3, [pc, #620]	@ (80022b8 <Animation_Loop+0x284>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	4b9b      	ldr	r3, [pc, #620]	@ (80022bc <Animation_Loop+0x288>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	623b      	str	r3, [r7, #32]

      float max_offset = eyeRadius - pupilRadius;
 8002056:	4b9a      	ldr	r3, [pc, #616]	@ (80022c0 <Animation_Loop+0x28c>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	4b99      	ldr	r3, [pc, #612]	@ (80022c4 <Animation_Loop+0x290>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fc3a 	bl	80008dc <__aeabi_i2f>
 8002068:	4603      	mov	r3, r0
 800206a:	61fb      	str	r3, [r7, #28]
      float dist = sqrtf(pupil_offset_x * pupil_offset_x + pupil_offset_y * pupil_offset_y);
 800206c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206e:	fb03 f203 	mul.w	r2, r3, r3
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	fb03 f303 	mul.w	r3, r3, r3
 8002078:	4413      	add	r3, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fc2e 	bl	80008dc <__aeabi_i2f>
 8002080:	4603      	mov	r3, r0
 8002082:	4618      	mov	r0, r3
 8002084:	f004 f960 	bl	8006348 <sqrtf>
 8002088:	61b8      	str	r0, [r7, #24]
      if (dist > max_offset && dist > 0) {
 800208a:	69f9      	ldr	r1, [r7, #28]
 800208c:	69b8      	ldr	r0, [r7, #24]
 800208e:	f7fe fe35 	bl	8000cfc <__aeabi_fcmpgt>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d02d      	beq.n	80020f4 <Animation_Loop+0xc0>
 8002098:	f04f 0100 	mov.w	r1, #0
 800209c:	69b8      	ldr	r0, [r7, #24]
 800209e:	f7fe fe2d 	bl	8000cfc <__aeabi_fcmpgt>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d025      	beq.n	80020f4 <Animation_Loop+0xc0>
          pupil_offset_x = (int)(pupil_offset_x * max_offset / dist);
 80020a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020aa:	f7fe fc17 	bl	80008dc <__aeabi_i2f>
 80020ae:	4603      	mov	r3, r0
 80020b0:	69f9      	ldr	r1, [r7, #28]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fc66 	bl	8000984 <__aeabi_fmul>
 80020b8:	4603      	mov	r3, r0
 80020ba:	69b9      	ldr	r1, [r7, #24]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fd15 	bl	8000aec <__aeabi_fdiv>
 80020c2:	4603      	mov	r3, r0
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fe39 	bl	8000d3c <__aeabi_f2iz>
 80020ca:	4603      	mov	r3, r0
 80020cc:	627b      	str	r3, [r7, #36]	@ 0x24
          pupil_offset_y = (int)(pupil_offset_y * max_offset / dist);
 80020ce:	6a38      	ldr	r0, [r7, #32]
 80020d0:	f7fe fc04 	bl	80008dc <__aeabi_i2f>
 80020d4:	4603      	mov	r3, r0
 80020d6:	69f9      	ldr	r1, [r7, #28]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe fc53 	bl	8000984 <__aeabi_fmul>
 80020de:	4603      	mov	r3, r0
 80020e0:	69b9      	ldr	r1, [r7, #24]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fd02 	bl	8000aec <__aeabi_fdiv>
 80020e8:	4603      	mov	r3, r0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fe26 	bl	8000d3c <__aeabi_f2iz>
 80020f0:	4603      	mov	r3, r0
 80020f2:	623b      	str	r3, [r7, #32]
      }

      // draw_eye_with_pupil_to_buffer(BUF_W/2, BUF_H/2, pupilRadius, eyeRadius, pupil_offset_x, pupil_offset_y, LCD128_WHITE, LCD128_BLACK, LCD128_WHITE);
      draw_eye_with_pupil_to_buffer(BUF_W/2, BUF_H/2, pupilRadius, eyeRadius, pupil_offset_x, pupil_offset_y, LCD128_BLACK, EYE_BLUE_1, LCD128_WHITE, LCD128_BLACK);
 80020f4:	4b73      	ldr	r3, [pc, #460]	@ (80022c4 <Animation_Loop+0x290>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b71      	ldr	r3, [pc, #452]	@ (80022c0 <Animation_Loop+0x28c>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	4619      	mov	r1, r3
 8002100:	2300      	movs	r3, #0
 8002102:	9305      	str	r3, [sp, #20]
 8002104:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002108:	9304      	str	r3, [sp, #16]
 800210a:	f64f 030c 	movw	r3, #63500	@ 0xf80c
 800210e:	9303      	str	r3, [sp, #12]
 8002110:	2300      	movs	r3, #0
 8002112:	9302      	str	r3, [sp, #8]
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	460b      	mov	r3, r1
 800211e:	2129      	movs	r1, #41	@ 0x29
 8002120:	2029      	movs	r0, #41	@ 0x29
 8002122:	f000 ff1b 	bl	8002f5c <draw_eye_with_pupil_to_buffer>
    //   draw_realistic_eye(BUF_W/2, BUF_H/2, pupilRadius, eyeRadius, pupil_offset_x, pupil_offset_y,LCD128_WHITE); 

	    LCD128_DrawImage_DMA(&lcd1, pupilX - BUF_W/2, pupilY - BUF_H/2, BUF_W, BUF_H, (uint16_t*)framebuf);
 8002126:	4b63      	ldr	r3, [pc, #396]	@ (80022b4 <Animation_Loop+0x280>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	3b29      	subs	r3, #41	@ 0x29
 800212c:	b299      	uxth	r1, r3
 800212e:	4b63      	ldr	r3, [pc, #396]	@ (80022bc <Animation_Loop+0x288>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	3b29      	subs	r3, #41	@ 0x29
 8002134:	b29a      	uxth	r2, r3
 8002136:	4b64      	ldr	r3, [pc, #400]	@ (80022c8 <Animation_Loop+0x294>)
 8002138:	9301      	str	r3, [sp, #4]
 800213a:	2352      	movs	r3, #82	@ 0x52
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2352      	movs	r3, #82	@ 0x52
 8002140:	4862      	ldr	r0, [pc, #392]	@ (80022cc <Animation_Loop+0x298>)
 8002142:	f7ff fd95 	bl	8001c70 <LCD128_DrawImage_DMA>
	    LCD128_DrawImage_DMA(&lcd2, pupilX - BUF_W/2, pupilY - BUF_H/2, BUF_W, BUF_H, (uint16_t*)framebuf);
 8002146:	4b5b      	ldr	r3, [pc, #364]	@ (80022b4 <Animation_Loop+0x280>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	3b29      	subs	r3, #41	@ 0x29
 800214c:	b299      	uxth	r1, r3
 800214e:	4b5b      	ldr	r3, [pc, #364]	@ (80022bc <Animation_Loop+0x288>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	3b29      	subs	r3, #41	@ 0x29
 8002154:	b29a      	uxth	r2, r3
 8002156:	4b5c      	ldr	r3, [pc, #368]	@ (80022c8 <Animation_Loop+0x294>)
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	2352      	movs	r3, #82	@ 0x52
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	2352      	movs	r3, #82	@ 0x52
 8002160:	485b      	ldr	r0, [pc, #364]	@ (80022d0 <Animation_Loop+0x29c>)
 8002162:	f7ff fd85 	bl	8001c70 <LCD128_DrawImage_DMA>
	    while (lcd128_dma_busy);
 8002166:	bf00      	nop
 8002168:	4b5a      	ldr	r3, [pc, #360]	@ (80022d4 <Animation_Loop+0x2a0>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1fa      	bne.n	8002168 <Animation_Loop+0x134>

      // --- PAUSE LOGIC ---
      static int pause_counter = 0;
      static int is_pausing = 0;
      int is_random_state = (state == STATE_RANDOM_MOVE || state == STATE_RANDOM_MOVE1 || state == STATE_RANDOM_TO_CENTER);
 8002172:	4b59      	ldr	r3, [pc, #356]	@ (80022d8 <Animation_Loop+0x2a4>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b10      	cmp	r3, #16
 8002178:	d007      	beq.n	800218a <Animation_Loop+0x156>
 800217a:	4b57      	ldr	r3, [pc, #348]	@ (80022d8 <Animation_Loop+0x2a4>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b11      	cmp	r3, #17
 8002180:	d003      	beq.n	800218a <Animation_Loop+0x156>
 8002182:	4b55      	ldr	r3, [pc, #340]	@ (80022d8 <Animation_Loop+0x2a4>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b12      	cmp	r3, #18
 8002188:	d101      	bne.n	800218e <Animation_Loop+0x15a>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <Animation_Loop+0x15c>
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
      if (lerp_t >= 1.0f) {
 8002192:	4b52      	ldr	r3, [pc, #328]	@ (80022dc <Animation_Loop+0x2a8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fda4 	bl	8000ce8 <__aeabi_fcmpge>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d01a      	beq.n	80021dc <Animation_Loop+0x1a8>
          if (!is_random_state) { // Chỉ pause nếu KHÔNG phải random
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d117      	bne.n	80021dc <Animation_Loop+0x1a8>
              if (!is_pausing) {
 80021ac:	4b4c      	ldr	r3, [pc, #304]	@ (80022e0 <Animation_Loop+0x2ac>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d105      	bne.n	80021c0 <Animation_Loop+0x18c>
                  pause_counter = 0;
 80021b4:	4b4b      	ldr	r3, [pc, #300]	@ (80022e4 <Animation_Loop+0x2b0>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
                  is_pausing = 1;
 80021ba:	4b49      	ldr	r3, [pc, #292]	@ (80022e0 <Animation_Loop+0x2ac>)
 80021bc:	2201      	movs	r2, #1
 80021be:	601a      	str	r2, [r3, #0]
              }
              if (pause_counter < 10) { // 40 frame ~ 0.7s
 80021c0:	4b48      	ldr	r3, [pc, #288]	@ (80022e4 <Animation_Loop+0x2b0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b09      	cmp	r3, #9
 80021c6:	dc06      	bgt.n	80021d6 <Animation_Loop+0x1a2>
                  pause_counter++;
 80021c8:	4b46      	ldr	r3, [pc, #280]	@ (80022e4 <Animation_Loop+0x2b0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	3301      	adds	r3, #1
 80021ce:	4a45      	ldr	r2, [pc, #276]	@ (80022e4 <Animation_Loop+0x2b0>)
 80021d0:	6013      	str	r3, [r2, #0]
                  return;
 80021d2:	f000 be9e 	b.w	8002f12 <Animation_Loop+0xede>
              }
              is_pausing = 0;
 80021d6:	4b42      	ldr	r3, [pc, #264]	@ (80022e0 <Animation_Loop+0x2ac>)
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
          }
          // Sau khi pause (hoặc nếu là random), cho phép chuyển trạng thái mới
      }

      if (lerp_t < 1.0f) {
 80021dc:	4b3f      	ldr	r3, [pc, #252]	@ (80022dc <Animation_Loop+0x2a8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe fd6b 	bl	8000cc0 <__aeabi_fcmplt>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8085 	beq.w	80022fc <Animation_Loop+0x2c8>
          lerp_t += 1.5f / lerp_steps;
 80021f2:	4b3d      	ldr	r3, [pc, #244]	@ (80022e8 <Animation_Loop+0x2b4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe fb70 	bl	80008dc <__aeabi_i2f>
 80021fc:	4603      	mov	r3, r0
 80021fe:	4619      	mov	r1, r3
 8002200:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8002204:	f7fe fc72 	bl	8000aec <__aeabi_fdiv>
 8002208:	4603      	mov	r3, r0
 800220a:	461a      	mov	r2, r3
 800220c:	4b33      	ldr	r3, [pc, #204]	@ (80022dc <Animation_Loop+0x2a8>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4619      	mov	r1, r3
 8002212:	4610      	mov	r0, r2
 8002214:	f7fe faae 	bl	8000774 <__addsf3>
 8002218:	4603      	mov	r3, r0
 800221a:	461a      	mov	r2, r3
 800221c:	4b2f      	ldr	r3, [pc, #188]	@ (80022dc <Animation_Loop+0x2a8>)
 800221e:	601a      	str	r2, [r3, #0]
          if (lerp_t > 1.0f) lerp_t = 1.0f;
 8002220:	4b2e      	ldr	r3, [pc, #184]	@ (80022dc <Animation_Loop+0x2a8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe fd67 	bl	8000cfc <__aeabi_fcmpgt>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <Animation_Loop+0x208>
 8002234:	4b29      	ldr	r3, [pc, #164]	@ (80022dc <Animation_Loop+0x2a8>)
 8002236:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800223a:	601a      	str	r2, [r3, #0]
          pupilX = lerp_startX + (int)((lerp_targetX - lerp_startX) * lerp_t);
 800223c:	4b2b      	ldr	r3, [pc, #172]	@ (80022ec <Animation_Loop+0x2b8>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b2b      	ldr	r3, [pc, #172]	@ (80022f0 <Animation_Loop+0x2bc>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fb48 	bl	80008dc <__aeabi_i2f>
 800224c:	4602      	mov	r2, r0
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <Animation_Loop+0x2a8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4619      	mov	r1, r3
 8002254:	4610      	mov	r0, r2
 8002256:	f7fe fb95 	bl	8000984 <__aeabi_fmul>
 800225a:	4603      	mov	r3, r0
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe fd6d 	bl	8000d3c <__aeabi_f2iz>
 8002262:	4603      	mov	r3, r0
 8002264:	b2da      	uxtb	r2, r3
 8002266:	4b22      	ldr	r3, [pc, #136]	@ (80022f0 <Animation_Loop+0x2bc>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	4413      	add	r3, r2
 800226e:	b2da      	uxtb	r2, r3
 8002270:	4b10      	ldr	r3, [pc, #64]	@ (80022b4 <Animation_Loop+0x280>)
 8002272:	701a      	strb	r2, [r3, #0]
          pupilY = lerp_startY + (int)((lerp_targetY - lerp_startY) * lerp_t);
 8002274:	4b1f      	ldr	r3, [pc, #124]	@ (80022f4 <Animation_Loop+0x2c0>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b1f      	ldr	r3, [pc, #124]	@ (80022f8 <Animation_Loop+0x2c4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe fb2c 	bl	80008dc <__aeabi_i2f>
 8002284:	4602      	mov	r2, r0
 8002286:	4b15      	ldr	r3, [pc, #84]	@ (80022dc <Animation_Loop+0x2a8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4619      	mov	r1, r3
 800228c:	4610      	mov	r0, r2
 800228e:	f7fe fb79 	bl	8000984 <__aeabi_fmul>
 8002292:	4603      	mov	r3, r0
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe fd51 	bl	8000d3c <__aeabi_f2iz>
 800229a:	4603      	mov	r3, r0
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4b16      	ldr	r3, [pc, #88]	@ (80022f8 <Animation_Loop+0x2c4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	4b04      	ldr	r3, [pc, #16]	@ (80022bc <Animation_Loop+0x288>)
 80022aa:	701a      	strb	r2, [r3, #0]
 80022ac:	f000 be31 	b.w	8002f12 <Animation_Loop+0xede>
 80022b0:	200001f8 	.word	0x200001f8
 80022b4:	200001fe 	.word	0x200001fe
 80022b8:	200001f9 	.word	0x200001f9
 80022bc:	200001ff 	.word	0x200001ff
 80022c0:	200001fd 	.word	0x200001fd
 80022c4:	200001fc 	.word	0x200001fc
 80022c8:	20000220 	.word	0x20000220
 80022cc:	200001c0 	.word	0x200001c0
 80022d0:	200001dc 	.word	0x200001dc
 80022d4:	20000084 	.word	0x20000084
 80022d8:	20000200 	.word	0x20000200
 80022dc:	20000214 	.word	0x20000214
 80022e0:	200036a8 	.word	0x200036a8
 80022e4:	200036ac 	.word	0x200036ac
 80022e8:	20000218 	.word	0x20000218
 80022ec:	2000020c 	.word	0x2000020c
 80022f0:	20000204 	.word	0x20000204
 80022f4:	20000210 	.word	0x20000210
 80022f8:	20000208 	.word	0x20000208
      } else if (!is_pausing) {
 80022fc:	4bac      	ldr	r3, [pc, #688]	@ (80025b0 <Animation_Loop+0x57c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	f040 8606 	bne.w	8002f12 <Animation_Loop+0xede>
          switch (state) {
 8002306:	4bab      	ldr	r3, [pc, #684]	@ (80025b4 <Animation_Loop+0x580>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b13      	cmp	r3, #19
 800230c:	f200 8601 	bhi.w	8002f12 <Animation_Loop+0xede>
 8002310:	a201      	add	r2, pc, #4	@ (adr r2, 8002318 <Animation_Loop+0x2e4>)
 8002312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002316:	bf00      	nop
 8002318:	080024e3 	.word	0x080024e3
 800231c:	08002551 	.word	0x08002551
 8002320:	080025fd 	.word	0x080025fd
 8002324:	0800266b 	.word	0x0800266b
 8002328:	080026cb 	.word	0x080026cb
 800232c:	08002737 	.word	0x08002737
 8002330:	08002795 	.word	0x08002795
 8002334:	08002841 	.word	0x08002841
 8002338:	0800289f 	.word	0x0800289f
 800233c:	08002969 	.word	0x08002969
 8002340:	080029c7 	.word	0x080029c7
 8002344:	08002ad5 	.word	0x08002ad5
 8002348:	08002b33 	.word	0x08002b33
 800234c:	08002bfd 	.word	0x08002bfd
 8002350:	08002c5b 	.word	0x08002c5b
 8002354:	08002d69 	.word	0x08002d69
 8002358:	08002dc7 	.word	0x08002dc7
 800235c:	08002369 	.word	0x08002369
 8002360:	08002eb5 	.word	0x08002eb5
 8002364:	08002f13 	.word	0x08002f13
                case STATE_RANDOM_MOVE1: {
                      int rangeX = rx_in - pupilRadius * 0.5;
 8002368:	4b93      	ldr	r3, [pc, #588]	@ (80025b8 <Animation_Loop+0x584>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe f969 	bl	8000644 <__aeabi_i2d>
 8002372:	4604      	mov	r4, r0
 8002374:	460d      	mov	r5, r1
 8002376:	4b91      	ldr	r3, [pc, #580]	@ (80025bc <Animation_Loop+0x588>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe f962 	bl	8000644 <__aeabi_i2d>
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	4b8e      	ldr	r3, [pc, #568]	@ (80025c0 <Animation_Loop+0x58c>)
 8002386:	f7fd fee1 	bl	800014c <__aeabi_dmul>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4620      	mov	r0, r4
 8002390:	4629      	mov	r1, r5
 8002392:	f7fe f809 	bl	80003a8 <__aeabi_dsub>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4610      	mov	r0, r2
 800239c:	4619      	mov	r1, r3
 800239e:	f7fe f9bb 	bl	8000718 <__aeabi_d2iz>
 80023a2:	4603      	mov	r3, r0
 80023a4:	613b      	str	r3, [r7, #16]
                      int rangeY = ry_in - pupilRadius * 0.5;
 80023a6:	4b87      	ldr	r3, [pc, #540]	@ (80025c4 <Animation_Loop+0x590>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe f94a 	bl	8000644 <__aeabi_i2d>
 80023b0:	4604      	mov	r4, r0
 80023b2:	460d      	mov	r5, r1
 80023b4:	4b81      	ldr	r3, [pc, #516]	@ (80025bc <Animation_Loop+0x588>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe f943 	bl	8000644 <__aeabi_i2d>
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	4b7f      	ldr	r3, [pc, #508]	@ (80025c0 <Animation_Loop+0x58c>)
 80023c4:	f7fd fec2 	bl	800014c <__aeabi_dmul>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4620      	mov	r0, r4
 80023ce:	4629      	mov	r1, r5
 80023d0:	f7fd ffea 	bl	80003a8 <__aeabi_dsub>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	f7fe f99c 	bl	8000718 <__aeabi_d2iz>
 80023e0:	4603      	mov	r3, r0
 80023e2:	60fb      	str	r3, [r7, #12]
                  
                      if (random_count < RANDOM_REPEAT) {
 80023e4:	4b78      	ldr	r3, [pc, #480]	@ (80025c8 <Animation_Loop+0x594>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	2314      	movs	r3, #20
 80023ec:	429a      	cmp	r2, r3
 80023ee:	da45      	bge.n	800247c <Animation_Loop+0x448>
                          lerp_startX = pupilX;
 80023f0:	4b76      	ldr	r3, [pc, #472]	@ (80025cc <Animation_Loop+0x598>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b76      	ldr	r3, [pc, #472]	@ (80025d0 <Animation_Loop+0x59c>)
 80023f8:	601a      	str	r2, [r3, #0]
                          lerp_startY = pupilY;
 80023fa:	4b76      	ldr	r3, [pc, #472]	@ (80025d4 <Animation_Loop+0x5a0>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	4b75      	ldr	r3, [pc, #468]	@ (80025d8 <Animation_Loop+0x5a4>)
 8002402:	601a      	str	r2, [r3, #0]
                  
                          // Tạo offset đối xứng quanh tâm
                          int offsetX = (rand() % rangeX) - rangeX / 2;
 8002404:	f002 ffba 	bl	800537c <rand>
 8002408:	4603      	mov	r3, r0
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	fb93 f2f2 	sdiv	r2, r3, r2
 8002410:	6939      	ldr	r1, [r7, #16]
 8002412:	fb01 f202 	mul.w	r2, r1, r2
 8002416:	1a9a      	subs	r2, r3, r2
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	0fd9      	lsrs	r1, r3, #31
 800241c:	440b      	add	r3, r1
 800241e:	105b      	asrs	r3, r3, #1
 8002420:	425b      	negs	r3, r3
 8002422:	4413      	add	r3, r2
 8002424:	60bb      	str	r3, [r7, #8]
                          int offsetY = (rand() % rangeY) - rangeY / 2;
 8002426:	f002 ffa9 	bl	800537c <rand>
 800242a:	4603      	mov	r3, r0
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	fb93 f2f2 	sdiv	r2, r3, r2
 8002432:	68f9      	ldr	r1, [r7, #12]
 8002434:	fb01 f202 	mul.w	r2, r1, r2
 8002438:	1a9a      	subs	r2, r3, r2
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	0fd9      	lsrs	r1, r3, #31
 800243e:	440b      	add	r3, r1
 8002440:	105b      	asrs	r3, r3, #1
 8002442:	425b      	negs	r3, r3
 8002444:	4413      	add	r3, r2
 8002446:	607b      	str	r3, [r7, #4]
                  
                          lerp_targetX = centerX + offsetX;
 8002448:	4b64      	ldr	r3, [pc, #400]	@ (80025dc <Animation_Loop+0x5a8>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	4413      	add	r3, r2
 8002452:	4a63      	ldr	r2, [pc, #396]	@ (80025e0 <Animation_Loop+0x5ac>)
 8002454:	6013      	str	r3, [r2, #0]
                          lerp_targetY = centerY + offsetY;
 8002456:	4b63      	ldr	r3, [pc, #396]	@ (80025e4 <Animation_Loop+0x5b0>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4413      	add	r3, r2
 8002460:	4a61      	ldr	r2, [pc, #388]	@ (80025e8 <Animation_Loop+0x5b4>)
 8002462:	6013      	str	r3, [r2, #0]
                          lerp_t = 0.0f;
 8002464:	4b61      	ldr	r3, [pc, #388]	@ (80025ec <Animation_Loop+0x5b8>)
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
                          random_count++;
 800246c:	4b56      	ldr	r3, [pc, #344]	@ (80025c8 <Animation_Loop+0x594>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	3301      	adds	r3, #1
 8002472:	b2da      	uxtb	r2, r3
 8002474:	4b54      	ldr	r3, [pc, #336]	@ (80025c8 <Animation_Loop+0x594>)
 8002476:	701a      	strb	r2, [r3, #0]
                          lerp_t = 0.0f;
                          state_index++;
                          if (state_index >= state_sequence_len) state_index = 0;
                          state = state_sequence[state_index];
                      }
                      break;
 8002478:	f000 bd4b 	b.w	8002f12 <Animation_Loop+0xede>
                          random_count = 0;
 800247c:	4b52      	ldr	r3, [pc, #328]	@ (80025c8 <Animation_Loop+0x594>)
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
                          lerp_startX = pupilX;
 8002482:	4b52      	ldr	r3, [pc, #328]	@ (80025cc <Animation_Loop+0x598>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	4b51      	ldr	r3, [pc, #324]	@ (80025d0 <Animation_Loop+0x59c>)
 800248a:	601a      	str	r2, [r3, #0]
                          lerp_startY = pupilY;
 800248c:	4b51      	ldr	r3, [pc, #324]	@ (80025d4 <Animation_Loop+0x5a0>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	4b51      	ldr	r3, [pc, #324]	@ (80025d8 <Animation_Loop+0x5a4>)
 8002494:	601a      	str	r2, [r3, #0]
                          lerp_targetX = centerX;
 8002496:	4b51      	ldr	r3, [pc, #324]	@ (80025dc <Animation_Loop+0x5a8>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	4b50      	ldr	r3, [pc, #320]	@ (80025e0 <Animation_Loop+0x5ac>)
 800249e:	601a      	str	r2, [r3, #0]
                          lerp_targetY = centerY;
 80024a0:	4b50      	ldr	r3, [pc, #320]	@ (80025e4 <Animation_Loop+0x5b0>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b50      	ldr	r3, [pc, #320]	@ (80025e8 <Animation_Loop+0x5b4>)
 80024a8:	601a      	str	r2, [r3, #0]
                          lerp_t = 0.0f;
 80024aa:	4b50      	ldr	r3, [pc, #320]	@ (80025ec <Animation_Loop+0x5b8>)
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
                          state_index++;
 80024b2:	4b4f      	ldr	r3, [pc, #316]	@ (80025f0 <Animation_Loop+0x5bc>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	3301      	adds	r3, #1
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b4d      	ldr	r3, [pc, #308]	@ (80025f0 <Animation_Loop+0x5bc>)
 80024bc:	701a      	strb	r2, [r3, #0]
                          if (state_index >= state_sequence_len) state_index = 0;
 80024be:	4b4c      	ldr	r3, [pc, #304]	@ (80025f0 <Animation_Loop+0x5bc>)
 80024c0:	781a      	ldrb	r2, [r3, #0]
 80024c2:	4b4c      	ldr	r3, [pc, #304]	@ (80025f4 <Animation_Loop+0x5c0>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d302      	bcc.n	80024d0 <Animation_Loop+0x49c>
 80024ca:	4b49      	ldr	r3, [pc, #292]	@ (80025f0 <Animation_Loop+0x5bc>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
                          state = state_sequence[state_index];
 80024d0:	4b47      	ldr	r3, [pc, #284]	@ (80025f0 <Animation_Loop+0x5bc>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b48      	ldr	r3, [pc, #288]	@ (80025f8 <Animation_Loop+0x5c4>)
 80024d8:	5c9a      	ldrb	r2, [r3, r2]
 80024da:	4b36      	ldr	r3, [pc, #216]	@ (80025b4 <Animation_Loop+0x580>)
 80024dc:	701a      	strb	r2, [r3, #0]
                      break;
 80024de:	f000 bd18 	b.w	8002f12 <Animation_Loop+0xede>
                  }
              case STATE_UP_FROM_CENTER:
                  lerp_startX = pupilX; lerp_startY = pupilY;
 80024e2:	4b3a      	ldr	r3, [pc, #232]	@ (80025cc <Animation_Loop+0x598>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b39      	ldr	r3, [pc, #228]	@ (80025d0 <Animation_Loop+0x59c>)
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	4b39      	ldr	r3, [pc, #228]	@ (80025d4 <Animation_Loop+0x5a0>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b39      	ldr	r3, [pc, #228]	@ (80025d8 <Animation_Loop+0x5a4>)
 80024f4:	601a      	str	r2, [r3, #0]
                  lerp_targetX = centerX;
 80024f6:	4b39      	ldr	r3, [pc, #228]	@ (80025dc <Animation_Loop+0x5a8>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b38      	ldr	r3, [pc, #224]	@ (80025e0 <Animation_Loop+0x5ac>)
 80024fe:	601a      	str	r2, [r3, #0]
                  lerp_targetY = centerY - (ry_in - pupilRadius);
 8002500:	4b38      	ldr	r3, [pc, #224]	@ (80025e4 <Animation_Loop+0x5b0>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	4b2f      	ldr	r3, [pc, #188]	@ (80025c4 <Animation_Loop+0x590>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	4619      	mov	r1, r3
 800250c:	4b2b      	ldr	r3, [pc, #172]	@ (80025bc <Animation_Loop+0x588>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	1acb      	subs	r3, r1, r3
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	4a34      	ldr	r2, [pc, #208]	@ (80025e8 <Animation_Loop+0x5b4>)
 8002516:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 8002518:	4b34      	ldr	r3, [pc, #208]	@ (80025ec <Animation_Loop+0x5b8>)
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
                  state_index++;
 8002520:	4b33      	ldr	r3, [pc, #204]	@ (80025f0 <Animation_Loop+0x5bc>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	b2da      	uxtb	r2, r3
 8002528:	4b31      	ldr	r3, [pc, #196]	@ (80025f0 <Animation_Loop+0x5bc>)
 800252a:	701a      	strb	r2, [r3, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 800252c:	4b30      	ldr	r3, [pc, #192]	@ (80025f0 <Animation_Loop+0x5bc>)
 800252e:	781a      	ldrb	r2, [r3, #0]
 8002530:	4b30      	ldr	r3, [pc, #192]	@ (80025f4 <Animation_Loop+0x5c0>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	429a      	cmp	r2, r3
 8002536:	d302      	bcc.n	800253e <Animation_Loop+0x50a>
 8002538:	4b2d      	ldr	r3, [pc, #180]	@ (80025f0 <Animation_Loop+0x5bc>)
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
                  state = state_sequence[state_index];
 800253e:	4b2c      	ldr	r3, [pc, #176]	@ (80025f0 <Animation_Loop+0x5bc>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	4b2c      	ldr	r3, [pc, #176]	@ (80025f8 <Animation_Loop+0x5c4>)
 8002546:	5c9a      	ldrb	r2, [r3, r2]
 8002548:	4b1a      	ldr	r3, [pc, #104]	@ (80025b4 <Animation_Loop+0x580>)
 800254a:	701a      	strb	r2, [r3, #0]
                  break;
 800254c:	f000 bce1 	b.w	8002f12 <Animation_Loop+0xede>
              case STATE_DOWN_TO_CENTER:
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8002550:	4b1e      	ldr	r3, [pc, #120]	@ (80025cc <Animation_Loop+0x598>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	4b1e      	ldr	r3, [pc, #120]	@ (80025d0 <Animation_Loop+0x59c>)
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	4b1e      	ldr	r3, [pc, #120]	@ (80025d4 <Animation_Loop+0x5a0>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	461a      	mov	r2, r3
 8002560:	4b1d      	ldr	r3, [pc, #116]	@ (80025d8 <Animation_Loop+0x5a4>)
 8002562:	601a      	str	r2, [r3, #0]
                  lerp_targetX = centerX;
 8002564:	4b1d      	ldr	r3, [pc, #116]	@ (80025dc <Animation_Loop+0x5a8>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	4b1d      	ldr	r3, [pc, #116]	@ (80025e0 <Animation_Loop+0x5ac>)
 800256c:	601a      	str	r2, [r3, #0]
                  lerp_targetY = centerY;
 800256e:	4b1d      	ldr	r3, [pc, #116]	@ (80025e4 <Animation_Loop+0x5b0>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	4b1c      	ldr	r3, [pc, #112]	@ (80025e8 <Animation_Loop+0x5b4>)
 8002576:	601a      	str	r2, [r3, #0]
                  lerp_t = 0.0f;
 8002578:	4b1c      	ldr	r3, [pc, #112]	@ (80025ec <Animation_Loop+0x5b8>)
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
                  state_index++;
 8002580:	4b1b      	ldr	r3, [pc, #108]	@ (80025f0 <Animation_Loop+0x5bc>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	3301      	adds	r3, #1
 8002586:	b2da      	uxtb	r2, r3
 8002588:	4b19      	ldr	r3, [pc, #100]	@ (80025f0 <Animation_Loop+0x5bc>)
 800258a:	701a      	strb	r2, [r3, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 800258c:	4b18      	ldr	r3, [pc, #96]	@ (80025f0 <Animation_Loop+0x5bc>)
 800258e:	781a      	ldrb	r2, [r3, #0]
 8002590:	4b18      	ldr	r3, [pc, #96]	@ (80025f4 <Animation_Loop+0x5c0>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d302      	bcc.n	800259e <Animation_Loop+0x56a>
 8002598:	4b15      	ldr	r3, [pc, #84]	@ (80025f0 <Animation_Loop+0x5bc>)
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
                  state = state_sequence[state_index];
 800259e:	4b14      	ldr	r3, [pc, #80]	@ (80025f0 <Animation_Loop+0x5bc>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	4b14      	ldr	r3, [pc, #80]	@ (80025f8 <Animation_Loop+0x5c4>)
 80025a6:	5c9a      	ldrb	r2, [r3, r2]
 80025a8:	4b02      	ldr	r3, [pc, #8]	@ (80025b4 <Animation_Loop+0x580>)
 80025aa:	701a      	strb	r2, [r3, #0]
                  break;
 80025ac:	f000 bcb1 	b.w	8002f12 <Animation_Loop+0xede>
 80025b0:	200036a8 	.word	0x200036a8
 80025b4:	20000200 	.word	0x20000200
 80025b8:	200001fa 	.word	0x200001fa
 80025bc:	200001fc 	.word	0x200001fc
 80025c0:	3fe00000 	.word	0x3fe00000
 80025c4:	200001fb 	.word	0x200001fb
 80025c8:	2000021e 	.word	0x2000021e
 80025cc:	200001fe 	.word	0x200001fe
 80025d0:	20000204 	.word	0x20000204
 80025d4:	200001ff 	.word	0x200001ff
 80025d8:	20000208 	.word	0x20000208
 80025dc:	200001f8 	.word	0x200001f8
 80025e0:	2000020c 	.word	0x2000020c
 80025e4:	200001f9 	.word	0x200001f9
 80025e8:	20000210 	.word	0x20000210
 80025ec:	20000214 	.word	0x20000214
 80025f0:	2000021c 	.word	0x2000021c
 80025f4:	2000021d 	.word	0x2000021d
 80025f8:	08007070 	.word	0x08007070
              case STATE_LEFT_FROM_CENTER:
                  lerp_startX = pupilX; lerp_startY = pupilY;
 80025fc:	4b80      	ldr	r3, [pc, #512]	@ (8002800 <Animation_Loop+0x7cc>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	4b80      	ldr	r3, [pc, #512]	@ (8002804 <Animation_Loop+0x7d0>)
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	4b80      	ldr	r3, [pc, #512]	@ (8002808 <Animation_Loop+0x7d4>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	4b7f      	ldr	r3, [pc, #508]	@ (800280c <Animation_Loop+0x7d8>)
 800260e:	601a      	str	r2, [r3, #0]
                  lerp_targetX = centerX - (rx_in - pupilRadius);
 8002610:	4b7f      	ldr	r3, [pc, #508]	@ (8002810 <Animation_Loop+0x7dc>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	4b7f      	ldr	r3, [pc, #508]	@ (8002814 <Animation_Loop+0x7e0>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	4619      	mov	r1, r3
 800261c:	4b7e      	ldr	r3, [pc, #504]	@ (8002818 <Animation_Loop+0x7e4>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	1acb      	subs	r3, r1, r3
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	4a7d      	ldr	r2, [pc, #500]	@ (800281c <Animation_Loop+0x7e8>)
 8002626:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY;
 8002628:	4b7d      	ldr	r3, [pc, #500]	@ (8002820 <Animation_Loop+0x7ec>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	4b7d      	ldr	r3, [pc, #500]	@ (8002824 <Animation_Loop+0x7f0>)
 8002630:	601a      	str	r2, [r3, #0]
                  lerp_t = 0.0f;
 8002632:	4b7d      	ldr	r3, [pc, #500]	@ (8002828 <Animation_Loop+0x7f4>)
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
                  state_index++;
 800263a:	4b7c      	ldr	r3, [pc, #496]	@ (800282c <Animation_Loop+0x7f8>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	3301      	adds	r3, #1
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4b7a      	ldr	r3, [pc, #488]	@ (800282c <Animation_Loop+0x7f8>)
 8002644:	701a      	strb	r2, [r3, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8002646:	4b79      	ldr	r3, [pc, #484]	@ (800282c <Animation_Loop+0x7f8>)
 8002648:	781a      	ldrb	r2, [r3, #0]
 800264a:	4b79      	ldr	r3, [pc, #484]	@ (8002830 <Animation_Loop+0x7fc>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d302      	bcc.n	8002658 <Animation_Loop+0x624>
 8002652:	4b76      	ldr	r3, [pc, #472]	@ (800282c <Animation_Loop+0x7f8>)
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
                  state = state_sequence[state_index];
 8002658:	4b74      	ldr	r3, [pc, #464]	@ (800282c <Animation_Loop+0x7f8>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	4b75      	ldr	r3, [pc, #468]	@ (8002834 <Animation_Loop+0x800>)
 8002660:	5c9a      	ldrb	r2, [r3, r2]
 8002662:	4b75      	ldr	r3, [pc, #468]	@ (8002838 <Animation_Loop+0x804>)
 8002664:	701a      	strb	r2, [r3, #0]
                  break;
 8002666:	f000 bc54 	b.w	8002f12 <Animation_Loop+0xede>
              case STATE_RIGHT_TO_CENTER:
                  lerp_startX = pupilX; lerp_startY = pupilY;
 800266a:	4b65      	ldr	r3, [pc, #404]	@ (8002800 <Animation_Loop+0x7cc>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	4b64      	ldr	r3, [pc, #400]	@ (8002804 <Animation_Loop+0x7d0>)
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	4b64      	ldr	r3, [pc, #400]	@ (8002808 <Animation_Loop+0x7d4>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	4b64      	ldr	r3, [pc, #400]	@ (800280c <Animation_Loop+0x7d8>)
 800267c:	601a      	str	r2, [r3, #0]
                  lerp_targetX = centerX;
 800267e:	4b64      	ldr	r3, [pc, #400]	@ (8002810 <Animation_Loop+0x7dc>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	4b65      	ldr	r3, [pc, #404]	@ (800281c <Animation_Loop+0x7e8>)
 8002686:	601a      	str	r2, [r3, #0]
                  lerp_targetY = centerY;
 8002688:	4b65      	ldr	r3, [pc, #404]	@ (8002820 <Animation_Loop+0x7ec>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	4b65      	ldr	r3, [pc, #404]	@ (8002824 <Animation_Loop+0x7f0>)
 8002690:	601a      	str	r2, [r3, #0]
                  lerp_t = 0.0f;
 8002692:	4b65      	ldr	r3, [pc, #404]	@ (8002828 <Animation_Loop+0x7f4>)
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
                  state_index++;
 800269a:	4b64      	ldr	r3, [pc, #400]	@ (800282c <Animation_Loop+0x7f8>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	3301      	adds	r3, #1
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4b62      	ldr	r3, [pc, #392]	@ (800282c <Animation_Loop+0x7f8>)
 80026a4:	701a      	strb	r2, [r3, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 80026a6:	4b61      	ldr	r3, [pc, #388]	@ (800282c <Animation_Loop+0x7f8>)
 80026a8:	781a      	ldrb	r2, [r3, #0]
 80026aa:	4b61      	ldr	r3, [pc, #388]	@ (8002830 <Animation_Loop+0x7fc>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d302      	bcc.n	80026b8 <Animation_Loop+0x684>
 80026b2:	4b5e      	ldr	r3, [pc, #376]	@ (800282c <Animation_Loop+0x7f8>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
                  state = state_sequence[state_index];
 80026b8:	4b5c      	ldr	r3, [pc, #368]	@ (800282c <Animation_Loop+0x7f8>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	4b5d      	ldr	r3, [pc, #372]	@ (8002834 <Animation_Loop+0x800>)
 80026c0:	5c9a      	ldrb	r2, [r3, r2]
 80026c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002838 <Animation_Loop+0x804>)
 80026c4:	701a      	strb	r2, [r3, #0]
                  break;
 80026c6:	f000 bc24 	b.w	8002f12 <Animation_Loop+0xede>
              case STATE_DOWN_FROM_CENTER:
                  lerp_startX = pupilX; lerp_startY = pupilY;
 80026ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002800 <Animation_Loop+0x7cc>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	4b4c      	ldr	r3, [pc, #304]	@ (8002804 <Animation_Loop+0x7d0>)
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002808 <Animation_Loop+0x7d4>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	4b4c      	ldr	r3, [pc, #304]	@ (800280c <Animation_Loop+0x7d8>)
 80026dc:	601a      	str	r2, [r3, #0]
                  lerp_targetX = centerX;
 80026de:	4b4c      	ldr	r3, [pc, #304]	@ (8002810 <Animation_Loop+0x7dc>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	4b4d      	ldr	r3, [pc, #308]	@ (800281c <Animation_Loop+0x7e8>)
 80026e6:	601a      	str	r2, [r3, #0]
                  lerp_targetY = centerY + (ry_in - pupilRadius);
 80026e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002820 <Animation_Loop+0x7ec>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	4b53      	ldr	r3, [pc, #332]	@ (800283c <Animation_Loop+0x808>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	4619      	mov	r1, r3
 80026f4:	4b48      	ldr	r3, [pc, #288]	@ (8002818 <Animation_Loop+0x7e4>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	1acb      	subs	r3, r1, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	4a49      	ldr	r2, [pc, #292]	@ (8002824 <Animation_Loop+0x7f0>)
 80026fe:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 8002700:	4b49      	ldr	r3, [pc, #292]	@ (8002828 <Animation_Loop+0x7f4>)
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
                  state_index++;
 8002708:	4b48      	ldr	r3, [pc, #288]	@ (800282c <Animation_Loop+0x7f8>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	3301      	adds	r3, #1
 800270e:	b2da      	uxtb	r2, r3
 8002710:	4b46      	ldr	r3, [pc, #280]	@ (800282c <Animation_Loop+0x7f8>)
 8002712:	701a      	strb	r2, [r3, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8002714:	4b45      	ldr	r3, [pc, #276]	@ (800282c <Animation_Loop+0x7f8>)
 8002716:	781a      	ldrb	r2, [r3, #0]
 8002718:	4b45      	ldr	r3, [pc, #276]	@ (8002830 <Animation_Loop+0x7fc>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d302      	bcc.n	8002726 <Animation_Loop+0x6f2>
 8002720:	4b42      	ldr	r3, [pc, #264]	@ (800282c <Animation_Loop+0x7f8>)
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
                  state = state_sequence[state_index];
 8002726:	4b41      	ldr	r3, [pc, #260]	@ (800282c <Animation_Loop+0x7f8>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	4b41      	ldr	r3, [pc, #260]	@ (8002834 <Animation_Loop+0x800>)
 800272e:	5c9a      	ldrb	r2, [r3, r2]
 8002730:	4b41      	ldr	r3, [pc, #260]	@ (8002838 <Animation_Loop+0x804>)
 8002732:	701a      	strb	r2, [r3, #0]
                  break;
 8002734:	e3ed      	b.n	8002f12 <Animation_Loop+0xede>
              case STATE_UP_TO_CENTER:
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8002736:	4b32      	ldr	r3, [pc, #200]	@ (8002800 <Animation_Loop+0x7cc>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	4b31      	ldr	r3, [pc, #196]	@ (8002804 <Animation_Loop+0x7d0>)
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	4b31      	ldr	r3, [pc, #196]	@ (8002808 <Animation_Loop+0x7d4>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	4b31      	ldr	r3, [pc, #196]	@ (800280c <Animation_Loop+0x7d8>)
 8002748:	601a      	str	r2, [r3, #0]
                  lerp_targetX = centerX;
 800274a:	4b31      	ldr	r3, [pc, #196]	@ (8002810 <Animation_Loop+0x7dc>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	4b32      	ldr	r3, [pc, #200]	@ (800281c <Animation_Loop+0x7e8>)
 8002752:	601a      	str	r2, [r3, #0]
                  lerp_targetY = centerY;
 8002754:	4b32      	ldr	r3, [pc, #200]	@ (8002820 <Animation_Loop+0x7ec>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	461a      	mov	r2, r3
 800275a:	4b32      	ldr	r3, [pc, #200]	@ (8002824 <Animation_Loop+0x7f0>)
 800275c:	601a      	str	r2, [r3, #0]
                  lerp_t = 0.0f;
 800275e:	4b32      	ldr	r3, [pc, #200]	@ (8002828 <Animation_Loop+0x7f4>)
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
                  state_index++;
 8002766:	4b31      	ldr	r3, [pc, #196]	@ (800282c <Animation_Loop+0x7f8>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	3301      	adds	r3, #1
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4b2f      	ldr	r3, [pc, #188]	@ (800282c <Animation_Loop+0x7f8>)
 8002770:	701a      	strb	r2, [r3, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8002772:	4b2e      	ldr	r3, [pc, #184]	@ (800282c <Animation_Loop+0x7f8>)
 8002774:	781a      	ldrb	r2, [r3, #0]
 8002776:	4b2e      	ldr	r3, [pc, #184]	@ (8002830 <Animation_Loop+0x7fc>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d302      	bcc.n	8002784 <Animation_Loop+0x750>
 800277e:	4b2b      	ldr	r3, [pc, #172]	@ (800282c <Animation_Loop+0x7f8>)
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
                  state = state_sequence[state_index];
 8002784:	4b29      	ldr	r3, [pc, #164]	@ (800282c <Animation_Loop+0x7f8>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	4b2a      	ldr	r3, [pc, #168]	@ (8002834 <Animation_Loop+0x800>)
 800278c:	5c9a      	ldrb	r2, [r3, r2]
 800278e:	4b2a      	ldr	r3, [pc, #168]	@ (8002838 <Animation_Loop+0x804>)
 8002790:	701a      	strb	r2, [r3, #0]
                  break;
 8002792:	e3be      	b.n	8002f12 <Animation_Loop+0xede>
              case STATE_RIGHT_FROM_CENTER:
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8002794:	4b1a      	ldr	r3, [pc, #104]	@ (8002800 <Animation_Loop+0x7cc>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	4b1a      	ldr	r3, [pc, #104]	@ (8002804 <Animation_Loop+0x7d0>)
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	4b1a      	ldr	r3, [pc, #104]	@ (8002808 <Animation_Loop+0x7d4>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	4b19      	ldr	r3, [pc, #100]	@ (800280c <Animation_Loop+0x7d8>)
 80027a6:	601a      	str	r2, [r3, #0]
                  lerp_targetX = centerX + (rx_in - pupilRadius);
 80027a8:	4b19      	ldr	r3, [pc, #100]	@ (8002810 <Animation_Loop+0x7dc>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	4b19      	ldr	r3, [pc, #100]	@ (8002814 <Animation_Loop+0x7e0>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	4619      	mov	r1, r3
 80027b4:	4b18      	ldr	r3, [pc, #96]	@ (8002818 <Animation_Loop+0x7e4>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	1acb      	subs	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	4a17      	ldr	r2, [pc, #92]	@ (800281c <Animation_Loop+0x7e8>)
 80027be:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY;
 80027c0:	4b17      	ldr	r3, [pc, #92]	@ (8002820 <Animation_Loop+0x7ec>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b17      	ldr	r3, [pc, #92]	@ (8002824 <Animation_Loop+0x7f0>)
 80027c8:	601a      	str	r2, [r3, #0]
                  lerp_t = 0.0f;
 80027ca:	4b17      	ldr	r3, [pc, #92]	@ (8002828 <Animation_Loop+0x7f4>)
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
                  state_index++;
 80027d2:	4b16      	ldr	r3, [pc, #88]	@ (800282c <Animation_Loop+0x7f8>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	3301      	adds	r3, #1
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	4b14      	ldr	r3, [pc, #80]	@ (800282c <Animation_Loop+0x7f8>)
 80027dc:	701a      	strb	r2, [r3, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 80027de:	4b13      	ldr	r3, [pc, #76]	@ (800282c <Animation_Loop+0x7f8>)
 80027e0:	781a      	ldrb	r2, [r3, #0]
 80027e2:	4b13      	ldr	r3, [pc, #76]	@ (8002830 <Animation_Loop+0x7fc>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d302      	bcc.n	80027f0 <Animation_Loop+0x7bc>
 80027ea:	4b10      	ldr	r3, [pc, #64]	@ (800282c <Animation_Loop+0x7f8>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
                  state = state_sequence[state_index];
 80027f0:	4b0e      	ldr	r3, [pc, #56]	@ (800282c <Animation_Loop+0x7f8>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	461a      	mov	r2, r3
 80027f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002834 <Animation_Loop+0x800>)
 80027f8:	5c9a      	ldrb	r2, [r3, r2]
 80027fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002838 <Animation_Loop+0x804>)
 80027fc:	701a      	strb	r2, [r3, #0]
                  break;
 80027fe:	e388      	b.n	8002f12 <Animation_Loop+0xede>
 8002800:	200001fe 	.word	0x200001fe
 8002804:	20000204 	.word	0x20000204
 8002808:	200001ff 	.word	0x200001ff
 800280c:	20000208 	.word	0x20000208
 8002810:	200001f8 	.word	0x200001f8
 8002814:	200001fa 	.word	0x200001fa
 8002818:	200001fc 	.word	0x200001fc
 800281c:	2000020c 	.word	0x2000020c
 8002820:	200001f9 	.word	0x200001f9
 8002824:	20000210 	.word	0x20000210
 8002828:	20000214 	.word	0x20000214
 800282c:	2000021c 	.word	0x2000021c
 8002830:	2000021d 	.word	0x2000021d
 8002834:	08007070 	.word	0x08007070
 8002838:	20000200 	.word	0x20000200
 800283c:	200001fb 	.word	0x200001fb
              case STATE_LEFT_TO_CENTER:
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8002840:	4b93      	ldr	r3, [pc, #588]	@ (8002a90 <Animation_Loop+0xa5c>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	461a      	mov	r2, r3
 8002846:	4b93      	ldr	r3, [pc, #588]	@ (8002a94 <Animation_Loop+0xa60>)
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	4b93      	ldr	r3, [pc, #588]	@ (8002a98 <Animation_Loop+0xa64>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	4b92      	ldr	r3, [pc, #584]	@ (8002a9c <Animation_Loop+0xa68>)
 8002852:	601a      	str	r2, [r3, #0]
                  lerp_targetX = centerX;
 8002854:	4b92      	ldr	r3, [pc, #584]	@ (8002aa0 <Animation_Loop+0xa6c>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	4b92      	ldr	r3, [pc, #584]	@ (8002aa4 <Animation_Loop+0xa70>)
 800285c:	601a      	str	r2, [r3, #0]
                  lerp_targetY = centerY;
 800285e:	4b92      	ldr	r3, [pc, #584]	@ (8002aa8 <Animation_Loop+0xa74>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	4b91      	ldr	r3, [pc, #580]	@ (8002aac <Animation_Loop+0xa78>)
 8002866:	601a      	str	r2, [r3, #0]
                  lerp_t = 0.0f;
 8002868:	4b91      	ldr	r3, [pc, #580]	@ (8002ab0 <Animation_Loop+0xa7c>)
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
                  state_index++;
 8002870:	4b90      	ldr	r3, [pc, #576]	@ (8002ab4 <Animation_Loop+0xa80>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	3301      	adds	r3, #1
 8002876:	b2da      	uxtb	r2, r3
 8002878:	4b8e      	ldr	r3, [pc, #568]	@ (8002ab4 <Animation_Loop+0xa80>)
 800287a:	701a      	strb	r2, [r3, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 800287c:	4b8d      	ldr	r3, [pc, #564]	@ (8002ab4 <Animation_Loop+0xa80>)
 800287e:	781a      	ldrb	r2, [r3, #0]
 8002880:	4b8d      	ldr	r3, [pc, #564]	@ (8002ab8 <Animation_Loop+0xa84>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d302      	bcc.n	800288e <Animation_Loop+0x85a>
 8002888:	4b8a      	ldr	r3, [pc, #552]	@ (8002ab4 <Animation_Loop+0xa80>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
                  state = state_sequence[state_index];
 800288e:	4b89      	ldr	r3, [pc, #548]	@ (8002ab4 <Animation_Loop+0xa80>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	4b89      	ldr	r3, [pc, #548]	@ (8002abc <Animation_Loop+0xa88>)
 8002896:	5c9a      	ldrb	r2, [r3, r2]
 8002898:	4b89      	ldr	r3, [pc, #548]	@ (8002ac0 <Animation_Loop+0xa8c>)
 800289a:	701a      	strb	r2, [r3, #0]
                  break;
 800289c:	e339      	b.n	8002f12 <Animation_Loop+0xede>
              case STATE_UPLEFT_FROM_CENTER:
                  lerp_startX = pupilX; lerp_startY = pupilY;
 800289e:	4b7c      	ldr	r3, [pc, #496]	@ (8002a90 <Animation_Loop+0xa5c>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	4b7b      	ldr	r3, [pc, #492]	@ (8002a94 <Animation_Loop+0xa60>)
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002a98 <Animation_Loop+0xa64>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b7b      	ldr	r3, [pc, #492]	@ (8002a9c <Animation_Loop+0xa68>)
 80028b0:	601a      	str	r2, [r3, #0]
                  lerp_targetX = centerX - (rx_in - pupilRadius) * 0.7f;
 80028b2:	4b7b      	ldr	r3, [pc, #492]	@ (8002aa0 <Animation_Loop+0xa6c>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe f810 	bl	80008dc <__aeabi_i2f>
 80028bc:	4604      	mov	r4, r0
 80028be:	4b81      	ldr	r3, [pc, #516]	@ (8002ac4 <Animation_Loop+0xa90>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	4b80      	ldr	r3, [pc, #512]	@ (8002ac8 <Animation_Loop+0xa94>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fe f806 	bl	80008dc <__aeabi_i2f>
 80028d0:	4603      	mov	r3, r0
 80028d2:	497e      	ldr	r1, [pc, #504]	@ (8002acc <Animation_Loop+0xa98>)
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe f855 	bl	8000984 <__aeabi_fmul>
 80028da:	4603      	mov	r3, r0
 80028dc:	4619      	mov	r1, r3
 80028de:	4620      	mov	r0, r4
 80028e0:	f7fd ff46 	bl	8000770 <__aeabi_fsub>
 80028e4:	4603      	mov	r3, r0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe fa28 	bl	8000d3c <__aeabi_f2iz>
 80028ec:	4603      	mov	r3, r0
 80028ee:	4a6d      	ldr	r2, [pc, #436]	@ (8002aa4 <Animation_Loop+0xa70>)
 80028f0:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY - (ry_in - pupilRadius) * 0.7f;
 80028f2:	4b6d      	ldr	r3, [pc, #436]	@ (8002aa8 <Animation_Loop+0xa74>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fd fff0 	bl	80008dc <__aeabi_i2f>
 80028fc:	4604      	mov	r4, r0
 80028fe:	4b74      	ldr	r3, [pc, #464]	@ (8002ad0 <Animation_Loop+0xa9c>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	4b70      	ldr	r3, [pc, #448]	@ (8002ac8 <Animation_Loop+0xa94>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	4618      	mov	r0, r3
 800290c:	f7fd ffe6 	bl	80008dc <__aeabi_i2f>
 8002910:	4603      	mov	r3, r0
 8002912:	496e      	ldr	r1, [pc, #440]	@ (8002acc <Animation_Loop+0xa98>)
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe f835 	bl	8000984 <__aeabi_fmul>
 800291a:	4603      	mov	r3, r0
 800291c:	4619      	mov	r1, r3
 800291e:	4620      	mov	r0, r4
 8002920:	f7fd ff26 	bl	8000770 <__aeabi_fsub>
 8002924:	4603      	mov	r3, r0
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fa08 	bl	8000d3c <__aeabi_f2iz>
 800292c:	4603      	mov	r3, r0
 800292e:	4a5f      	ldr	r2, [pc, #380]	@ (8002aac <Animation_Loop+0xa78>)
 8002930:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 8002932:	4b5f      	ldr	r3, [pc, #380]	@ (8002ab0 <Animation_Loop+0xa7c>)
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
                  state_index++;
 800293a:	4b5e      	ldr	r3, [pc, #376]	@ (8002ab4 <Animation_Loop+0xa80>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	3301      	adds	r3, #1
 8002940:	b2da      	uxtb	r2, r3
 8002942:	4b5c      	ldr	r3, [pc, #368]	@ (8002ab4 <Animation_Loop+0xa80>)
 8002944:	701a      	strb	r2, [r3, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8002946:	4b5b      	ldr	r3, [pc, #364]	@ (8002ab4 <Animation_Loop+0xa80>)
 8002948:	781a      	ldrb	r2, [r3, #0]
 800294a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ab8 <Animation_Loop+0xa84>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d302      	bcc.n	8002958 <Animation_Loop+0x924>
 8002952:	4b58      	ldr	r3, [pc, #352]	@ (8002ab4 <Animation_Loop+0xa80>)
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]
                  state = state_sequence[state_index];
 8002958:	4b56      	ldr	r3, [pc, #344]	@ (8002ab4 <Animation_Loop+0xa80>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	4b57      	ldr	r3, [pc, #348]	@ (8002abc <Animation_Loop+0xa88>)
 8002960:	5c9a      	ldrb	r2, [r3, r2]
 8002962:	4b57      	ldr	r3, [pc, #348]	@ (8002ac0 <Animation_Loop+0xa8c>)
 8002964:	701a      	strb	r2, [r3, #0]
                  break;
 8002966:	e2d4      	b.n	8002f12 <Animation_Loop+0xede>
              case STATE_DOWNRIGHT_TO_CENTER:
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8002968:	4b49      	ldr	r3, [pc, #292]	@ (8002a90 <Animation_Loop+0xa5c>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	4b49      	ldr	r3, [pc, #292]	@ (8002a94 <Animation_Loop+0xa60>)
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	4b49      	ldr	r3, [pc, #292]	@ (8002a98 <Animation_Loop+0xa64>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	4b48      	ldr	r3, [pc, #288]	@ (8002a9c <Animation_Loop+0xa68>)
 800297a:	601a      	str	r2, [r3, #0]
                  lerp_targetX = centerX;
 800297c:	4b48      	ldr	r3, [pc, #288]	@ (8002aa0 <Animation_Loop+0xa6c>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	4b48      	ldr	r3, [pc, #288]	@ (8002aa4 <Animation_Loop+0xa70>)
 8002984:	601a      	str	r2, [r3, #0]
                  lerp_targetY = centerY;
 8002986:	4b48      	ldr	r3, [pc, #288]	@ (8002aa8 <Animation_Loop+0xa74>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	4b47      	ldr	r3, [pc, #284]	@ (8002aac <Animation_Loop+0xa78>)
 800298e:	601a      	str	r2, [r3, #0]
                  lerp_t = 0.0f;
 8002990:	4b47      	ldr	r3, [pc, #284]	@ (8002ab0 <Animation_Loop+0xa7c>)
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
                  state_index++;
 8002998:	4b46      	ldr	r3, [pc, #280]	@ (8002ab4 <Animation_Loop+0xa80>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	3301      	adds	r3, #1
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	4b44      	ldr	r3, [pc, #272]	@ (8002ab4 <Animation_Loop+0xa80>)
 80029a2:	701a      	strb	r2, [r3, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 80029a4:	4b43      	ldr	r3, [pc, #268]	@ (8002ab4 <Animation_Loop+0xa80>)
 80029a6:	781a      	ldrb	r2, [r3, #0]
 80029a8:	4b43      	ldr	r3, [pc, #268]	@ (8002ab8 <Animation_Loop+0xa84>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d302      	bcc.n	80029b6 <Animation_Loop+0x982>
 80029b0:	4b40      	ldr	r3, [pc, #256]	@ (8002ab4 <Animation_Loop+0xa80>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]
                  state = state_sequence[state_index];
 80029b6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ab4 <Animation_Loop+0xa80>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	4b3f      	ldr	r3, [pc, #252]	@ (8002abc <Animation_Loop+0xa88>)
 80029be:	5c9a      	ldrb	r2, [r3, r2]
 80029c0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ac0 <Animation_Loop+0xa8c>)
 80029c2:	701a      	strb	r2, [r3, #0]
                  break;
 80029c4:	e2a5      	b.n	8002f12 <Animation_Loop+0xede>
              case STATE_UPRIGHT_FROM_CENTER:
                  lerp_startX = pupilX; lerp_startY = pupilY;
 80029c6:	4b32      	ldr	r3, [pc, #200]	@ (8002a90 <Animation_Loop+0xa5c>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	4b31      	ldr	r3, [pc, #196]	@ (8002a94 <Animation_Loop+0xa60>)
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	4b31      	ldr	r3, [pc, #196]	@ (8002a98 <Animation_Loop+0xa64>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	4b31      	ldr	r3, [pc, #196]	@ (8002a9c <Animation_Loop+0xa68>)
 80029d8:	601a      	str	r2, [r3, #0]
                  lerp_targetX = centerX + (rx_in - pupilRadius) * 0.7f;
 80029da:	4b31      	ldr	r3, [pc, #196]	@ (8002aa0 <Animation_Loop+0xa6c>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fd ff7c 	bl	80008dc <__aeabi_i2f>
 80029e4:	4604      	mov	r4, r0
 80029e6:	4b37      	ldr	r3, [pc, #220]	@ (8002ac4 <Animation_Loop+0xa90>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	4b36      	ldr	r3, [pc, #216]	@ (8002ac8 <Animation_Loop+0xa94>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fd ff72 	bl	80008dc <__aeabi_i2f>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4934      	ldr	r1, [pc, #208]	@ (8002acc <Animation_Loop+0xa98>)
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fd ffc1 	bl	8000984 <__aeabi_fmul>
 8002a02:	4603      	mov	r3, r0
 8002a04:	4619      	mov	r1, r3
 8002a06:	4620      	mov	r0, r4
 8002a08:	f7fd feb4 	bl	8000774 <__addsf3>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe f994 	bl	8000d3c <__aeabi_f2iz>
 8002a14:	4603      	mov	r3, r0
 8002a16:	4a23      	ldr	r2, [pc, #140]	@ (8002aa4 <Animation_Loop+0xa70>)
 8002a18:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY - (ry_in - pupilRadius) * 0.7f;
 8002a1a:	4b23      	ldr	r3, [pc, #140]	@ (8002aa8 <Animation_Loop+0xa74>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fd ff5c 	bl	80008dc <__aeabi_i2f>
 8002a24:	4604      	mov	r4, r0
 8002a26:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad0 <Animation_Loop+0xa9c>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b26      	ldr	r3, [pc, #152]	@ (8002ac8 <Animation_Loop+0xa94>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fd ff52 	bl	80008dc <__aeabi_i2f>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	4924      	ldr	r1, [pc, #144]	@ (8002acc <Animation_Loop+0xa98>)
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fd ffa1 	bl	8000984 <__aeabi_fmul>
 8002a42:	4603      	mov	r3, r0
 8002a44:	4619      	mov	r1, r3
 8002a46:	4620      	mov	r0, r4
 8002a48:	f7fd fe92 	bl	8000770 <__aeabi_fsub>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe f974 	bl	8000d3c <__aeabi_f2iz>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4a15      	ldr	r2, [pc, #84]	@ (8002aac <Animation_Loop+0xa78>)
 8002a58:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 8002a5a:	4b15      	ldr	r3, [pc, #84]	@ (8002ab0 <Animation_Loop+0xa7c>)
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
                  state_index++;
 8002a62:	4b14      	ldr	r3, [pc, #80]	@ (8002ab4 <Animation_Loop+0xa80>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	3301      	adds	r3, #1
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	4b12      	ldr	r3, [pc, #72]	@ (8002ab4 <Animation_Loop+0xa80>)
 8002a6c:	701a      	strb	r2, [r3, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8002a6e:	4b11      	ldr	r3, [pc, #68]	@ (8002ab4 <Animation_Loop+0xa80>)
 8002a70:	781a      	ldrb	r2, [r3, #0]
 8002a72:	4b11      	ldr	r3, [pc, #68]	@ (8002ab8 <Animation_Loop+0xa84>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d302      	bcc.n	8002a80 <Animation_Loop+0xa4c>
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab4 <Animation_Loop+0xa80>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
                  state = state_sequence[state_index];
 8002a80:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab4 <Animation_Loop+0xa80>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b0d      	ldr	r3, [pc, #52]	@ (8002abc <Animation_Loop+0xa88>)
 8002a88:	5c9a      	ldrb	r2, [r3, r2]
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac0 <Animation_Loop+0xa8c>)
 8002a8c:	701a      	strb	r2, [r3, #0]
                  break;
 8002a8e:	e240      	b.n	8002f12 <Animation_Loop+0xede>
 8002a90:	200001fe 	.word	0x200001fe
 8002a94:	20000204 	.word	0x20000204
 8002a98:	200001ff 	.word	0x200001ff
 8002a9c:	20000208 	.word	0x20000208
 8002aa0:	200001f8 	.word	0x200001f8
 8002aa4:	2000020c 	.word	0x2000020c
 8002aa8:	200001f9 	.word	0x200001f9
 8002aac:	20000210 	.word	0x20000210
 8002ab0:	20000214 	.word	0x20000214
 8002ab4:	2000021c 	.word	0x2000021c
 8002ab8:	2000021d 	.word	0x2000021d
 8002abc:	08007070 	.word	0x08007070
 8002ac0:	20000200 	.word	0x20000200
 8002ac4:	200001fa 	.word	0x200001fa
 8002ac8:	200001fc 	.word	0x200001fc
 8002acc:	3f333333 	.word	0x3f333333
 8002ad0:	200001fb 	.word	0x200001fb
              case STATE_DOWNLEFT_TO_CENTER:
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8002ad4:	4b93      	ldr	r3, [pc, #588]	@ (8002d24 <Animation_Loop+0xcf0>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4b93      	ldr	r3, [pc, #588]	@ (8002d28 <Animation_Loop+0xcf4>)
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	4b93      	ldr	r3, [pc, #588]	@ (8002d2c <Animation_Loop+0xcf8>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4b92      	ldr	r3, [pc, #584]	@ (8002d30 <Animation_Loop+0xcfc>)
 8002ae6:	601a      	str	r2, [r3, #0]
                  lerp_targetX = centerX;
 8002ae8:	4b92      	ldr	r3, [pc, #584]	@ (8002d34 <Animation_Loop+0xd00>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b92      	ldr	r3, [pc, #584]	@ (8002d38 <Animation_Loop+0xd04>)
 8002af0:	601a      	str	r2, [r3, #0]
                  lerp_targetY = centerY;
 8002af2:	4b92      	ldr	r3, [pc, #584]	@ (8002d3c <Animation_Loop+0xd08>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	4b91      	ldr	r3, [pc, #580]	@ (8002d40 <Animation_Loop+0xd0c>)
 8002afa:	601a      	str	r2, [r3, #0]
                  lerp_t = 0.0f;
 8002afc:	4b91      	ldr	r3, [pc, #580]	@ (8002d44 <Animation_Loop+0xd10>)
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
                  state_index++;
 8002b04:	4b90      	ldr	r3, [pc, #576]	@ (8002d48 <Animation_Loop+0xd14>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	4b8e      	ldr	r3, [pc, #568]	@ (8002d48 <Animation_Loop+0xd14>)
 8002b0e:	701a      	strb	r2, [r3, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8002b10:	4b8d      	ldr	r3, [pc, #564]	@ (8002d48 <Animation_Loop+0xd14>)
 8002b12:	781a      	ldrb	r2, [r3, #0]
 8002b14:	4b8d      	ldr	r3, [pc, #564]	@ (8002d4c <Animation_Loop+0xd18>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d302      	bcc.n	8002b22 <Animation_Loop+0xaee>
 8002b1c:	4b8a      	ldr	r3, [pc, #552]	@ (8002d48 <Animation_Loop+0xd14>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
                  state = state_sequence[state_index];
 8002b22:	4b89      	ldr	r3, [pc, #548]	@ (8002d48 <Animation_Loop+0xd14>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	4b89      	ldr	r3, [pc, #548]	@ (8002d50 <Animation_Loop+0xd1c>)
 8002b2a:	5c9a      	ldrb	r2, [r3, r2]
 8002b2c:	4b89      	ldr	r3, [pc, #548]	@ (8002d54 <Animation_Loop+0xd20>)
 8002b2e:	701a      	strb	r2, [r3, #0]
                  break;
 8002b30:	e1ef      	b.n	8002f12 <Animation_Loop+0xede>
              case STATE_DOWNLEFT_FROM_CENTER:
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8002b32:	4b7c      	ldr	r3, [pc, #496]	@ (8002d24 <Animation_Loop+0xcf0>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	4b7b      	ldr	r3, [pc, #492]	@ (8002d28 <Animation_Loop+0xcf4>)
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	4b7b      	ldr	r3, [pc, #492]	@ (8002d2c <Animation_Loop+0xcf8>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b7b      	ldr	r3, [pc, #492]	@ (8002d30 <Animation_Loop+0xcfc>)
 8002b44:	601a      	str	r2, [r3, #0]
                  lerp_targetX = centerX - (rx_in - pupilRadius) * 0.7f;
 8002b46:	4b7b      	ldr	r3, [pc, #492]	@ (8002d34 <Animation_Loop+0xd00>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fd fec6 	bl	80008dc <__aeabi_i2f>
 8002b50:	4604      	mov	r4, r0
 8002b52:	4b81      	ldr	r3, [pc, #516]	@ (8002d58 <Animation_Loop+0xd24>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	4b80      	ldr	r3, [pc, #512]	@ (8002d5c <Animation_Loop+0xd28>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fd febc 	bl	80008dc <__aeabi_i2f>
 8002b64:	4603      	mov	r3, r0
 8002b66:	497e      	ldr	r1, [pc, #504]	@ (8002d60 <Animation_Loop+0xd2c>)
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd ff0b 	bl	8000984 <__aeabi_fmul>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4619      	mov	r1, r3
 8002b72:	4620      	mov	r0, r4
 8002b74:	f7fd fdfc 	bl	8000770 <__aeabi_fsub>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fe f8de 	bl	8000d3c <__aeabi_f2iz>
 8002b80:	4603      	mov	r3, r0
 8002b82:	4a6d      	ldr	r2, [pc, #436]	@ (8002d38 <Animation_Loop+0xd04>)
 8002b84:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY + (ry_in - pupilRadius) * 0.7f;
 8002b86:	4b6d      	ldr	r3, [pc, #436]	@ (8002d3c <Animation_Loop+0xd08>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fd fea6 	bl	80008dc <__aeabi_i2f>
 8002b90:	4604      	mov	r4, r0
 8002b92:	4b74      	ldr	r3, [pc, #464]	@ (8002d64 <Animation_Loop+0xd30>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	4b70      	ldr	r3, [pc, #448]	@ (8002d5c <Animation_Loop+0xd28>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fd fe9c 	bl	80008dc <__aeabi_i2f>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	496e      	ldr	r1, [pc, #440]	@ (8002d60 <Animation_Loop+0xd2c>)
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fd feeb 	bl	8000984 <__aeabi_fmul>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	f7fd fdde 	bl	8000774 <__addsf3>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe f8be 	bl	8000d3c <__aeabi_f2iz>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	4a5f      	ldr	r2, [pc, #380]	@ (8002d40 <Animation_Loop+0xd0c>)
 8002bc4:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 8002bc6:	4b5f      	ldr	r3, [pc, #380]	@ (8002d44 <Animation_Loop+0xd10>)
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
                  state_index++;
 8002bce:	4b5e      	ldr	r3, [pc, #376]	@ (8002d48 <Animation_Loop+0xd14>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	4b5c      	ldr	r3, [pc, #368]	@ (8002d48 <Animation_Loop+0xd14>)
 8002bd8:	701a      	strb	r2, [r3, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8002bda:	4b5b      	ldr	r3, [pc, #364]	@ (8002d48 <Animation_Loop+0xd14>)
 8002bdc:	781a      	ldrb	r2, [r3, #0]
 8002bde:	4b5b      	ldr	r3, [pc, #364]	@ (8002d4c <Animation_Loop+0xd18>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d302      	bcc.n	8002bec <Animation_Loop+0xbb8>
 8002be6:	4b58      	ldr	r3, [pc, #352]	@ (8002d48 <Animation_Loop+0xd14>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
                  state = state_sequence[state_index];
 8002bec:	4b56      	ldr	r3, [pc, #344]	@ (8002d48 <Animation_Loop+0xd14>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4b57      	ldr	r3, [pc, #348]	@ (8002d50 <Animation_Loop+0xd1c>)
 8002bf4:	5c9a      	ldrb	r2, [r3, r2]
 8002bf6:	4b57      	ldr	r3, [pc, #348]	@ (8002d54 <Animation_Loop+0xd20>)
 8002bf8:	701a      	strb	r2, [r3, #0]
                  break;
 8002bfa:	e18a      	b.n	8002f12 <Animation_Loop+0xede>
              case STATE_UPRIGHT_TO_CENTER:
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8002bfc:	4b49      	ldr	r3, [pc, #292]	@ (8002d24 <Animation_Loop+0xcf0>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b49      	ldr	r3, [pc, #292]	@ (8002d28 <Animation_Loop+0xcf4>)
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	4b49      	ldr	r3, [pc, #292]	@ (8002d2c <Animation_Loop+0xcf8>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4b48      	ldr	r3, [pc, #288]	@ (8002d30 <Animation_Loop+0xcfc>)
 8002c0e:	601a      	str	r2, [r3, #0]
                  lerp_targetX = centerX;
 8002c10:	4b48      	ldr	r3, [pc, #288]	@ (8002d34 <Animation_Loop+0xd00>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	4b48      	ldr	r3, [pc, #288]	@ (8002d38 <Animation_Loop+0xd04>)
 8002c18:	601a      	str	r2, [r3, #0]
                  lerp_targetY = centerY;
 8002c1a:	4b48      	ldr	r3, [pc, #288]	@ (8002d3c <Animation_Loop+0xd08>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	4b47      	ldr	r3, [pc, #284]	@ (8002d40 <Animation_Loop+0xd0c>)
 8002c22:	601a      	str	r2, [r3, #0]
                  lerp_t = 0.0f;
 8002c24:	4b47      	ldr	r3, [pc, #284]	@ (8002d44 <Animation_Loop+0xd10>)
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
                  state_index++;
 8002c2c:	4b46      	ldr	r3, [pc, #280]	@ (8002d48 <Animation_Loop+0xd14>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	3301      	adds	r3, #1
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	4b44      	ldr	r3, [pc, #272]	@ (8002d48 <Animation_Loop+0xd14>)
 8002c36:	701a      	strb	r2, [r3, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8002c38:	4b43      	ldr	r3, [pc, #268]	@ (8002d48 <Animation_Loop+0xd14>)
 8002c3a:	781a      	ldrb	r2, [r3, #0]
 8002c3c:	4b43      	ldr	r3, [pc, #268]	@ (8002d4c <Animation_Loop+0xd18>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d302      	bcc.n	8002c4a <Animation_Loop+0xc16>
 8002c44:	4b40      	ldr	r3, [pc, #256]	@ (8002d48 <Animation_Loop+0xd14>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	701a      	strb	r2, [r3, #0]
                  state = state_sequence[state_index];
 8002c4a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d48 <Animation_Loop+0xd14>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4b3f      	ldr	r3, [pc, #252]	@ (8002d50 <Animation_Loop+0xd1c>)
 8002c52:	5c9a      	ldrb	r2, [r3, r2]
 8002c54:	4b3f      	ldr	r3, [pc, #252]	@ (8002d54 <Animation_Loop+0xd20>)
 8002c56:	701a      	strb	r2, [r3, #0]
                  break;
 8002c58:	e15b      	b.n	8002f12 <Animation_Loop+0xede>
              case STATE_DOWNRIGHT_FROM_CENTER:
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8002c5a:	4b32      	ldr	r3, [pc, #200]	@ (8002d24 <Animation_Loop+0xcf0>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	4b31      	ldr	r3, [pc, #196]	@ (8002d28 <Animation_Loop+0xcf4>)
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	4b31      	ldr	r3, [pc, #196]	@ (8002d2c <Animation_Loop+0xcf8>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4b31      	ldr	r3, [pc, #196]	@ (8002d30 <Animation_Loop+0xcfc>)
 8002c6c:	601a      	str	r2, [r3, #0]
                  lerp_targetX = centerX + (rx_in - pupilRadius) * 0.7f;
 8002c6e:	4b31      	ldr	r3, [pc, #196]	@ (8002d34 <Animation_Loop+0xd00>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fd fe32 	bl	80008dc <__aeabi_i2f>
 8002c78:	4604      	mov	r4, r0
 8002c7a:	4b37      	ldr	r3, [pc, #220]	@ (8002d58 <Animation_Loop+0xd24>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4b36      	ldr	r3, [pc, #216]	@ (8002d5c <Animation_Loop+0xd28>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fe28 	bl	80008dc <__aeabi_i2f>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	4934      	ldr	r1, [pc, #208]	@ (8002d60 <Animation_Loop+0xd2c>)
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fd fe77 	bl	8000984 <__aeabi_fmul>
 8002c96:	4603      	mov	r3, r0
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f7fd fd6a 	bl	8000774 <__addsf3>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe f84a 	bl	8000d3c <__aeabi_f2iz>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4a23      	ldr	r2, [pc, #140]	@ (8002d38 <Animation_Loop+0xd04>)
 8002cac:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY + (ry_in - pupilRadius) * 0.7f;
 8002cae:	4b23      	ldr	r3, [pc, #140]	@ (8002d3c <Animation_Loop+0xd08>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fe12 	bl	80008dc <__aeabi_i2f>
 8002cb8:	4604      	mov	r4, r0
 8002cba:	4b2a      	ldr	r3, [pc, #168]	@ (8002d64 <Animation_Loop+0xd30>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4b26      	ldr	r3, [pc, #152]	@ (8002d5c <Animation_Loop+0xd28>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fd fe08 	bl	80008dc <__aeabi_i2f>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	4924      	ldr	r1, [pc, #144]	@ (8002d60 <Animation_Loop+0xd2c>)
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fe57 	bl	8000984 <__aeabi_fmul>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f7fd fd4a 	bl	8000774 <__addsf3>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe f82a 	bl	8000d3c <__aeabi_f2iz>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4a15      	ldr	r2, [pc, #84]	@ (8002d40 <Animation_Loop+0xd0c>)
 8002cec:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 8002cee:	4b15      	ldr	r3, [pc, #84]	@ (8002d44 <Animation_Loop+0xd10>)
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
                  state_index++;
 8002cf6:	4b14      	ldr	r3, [pc, #80]	@ (8002d48 <Animation_Loop+0xd14>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	4b12      	ldr	r3, [pc, #72]	@ (8002d48 <Animation_Loop+0xd14>)
 8002d00:	701a      	strb	r2, [r3, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8002d02:	4b11      	ldr	r3, [pc, #68]	@ (8002d48 <Animation_Loop+0xd14>)
 8002d04:	781a      	ldrb	r2, [r3, #0]
 8002d06:	4b11      	ldr	r3, [pc, #68]	@ (8002d4c <Animation_Loop+0xd18>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d302      	bcc.n	8002d14 <Animation_Loop+0xce0>
 8002d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d48 <Animation_Loop+0xd14>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
                  state = state_sequence[state_index];
 8002d14:	4b0c      	ldr	r3, [pc, #48]	@ (8002d48 <Animation_Loop+0xd14>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d50 <Animation_Loop+0xd1c>)
 8002d1c:	5c9a      	ldrb	r2, [r3, r2]
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d54 <Animation_Loop+0xd20>)
 8002d20:	701a      	strb	r2, [r3, #0]
                  break;
 8002d22:	e0f6      	b.n	8002f12 <Animation_Loop+0xede>
 8002d24:	200001fe 	.word	0x200001fe
 8002d28:	20000204 	.word	0x20000204
 8002d2c:	200001ff 	.word	0x200001ff
 8002d30:	20000208 	.word	0x20000208
 8002d34:	200001f8 	.word	0x200001f8
 8002d38:	2000020c 	.word	0x2000020c
 8002d3c:	200001f9 	.word	0x200001f9
 8002d40:	20000210 	.word	0x20000210
 8002d44:	20000214 	.word	0x20000214
 8002d48:	2000021c 	.word	0x2000021c
 8002d4c:	2000021d 	.word	0x2000021d
 8002d50:	08007070 	.word	0x08007070
 8002d54:	20000200 	.word	0x20000200
 8002d58:	200001fa 	.word	0x200001fa
 8002d5c:	200001fc 	.word	0x200001fc
 8002d60:	3f333333 	.word	0x3f333333
 8002d64:	200001fb 	.word	0x200001fb
              case STATE_UPLEFT_TO_CENTER:
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8002d68:	4b6b      	ldr	r3, [pc, #428]	@ (8002f18 <Animation_Loop+0xee4>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4b6b      	ldr	r3, [pc, #428]	@ (8002f1c <Animation_Loop+0xee8>)
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	4b6b      	ldr	r3, [pc, #428]	@ (8002f20 <Animation_Loop+0xeec>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	4b6a      	ldr	r3, [pc, #424]	@ (8002f24 <Animation_Loop+0xef0>)
 8002d7a:	601a      	str	r2, [r3, #0]
                  lerp_targetX = centerX;
 8002d7c:	4b6a      	ldr	r3, [pc, #424]	@ (8002f28 <Animation_Loop+0xef4>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	4b6a      	ldr	r3, [pc, #424]	@ (8002f2c <Animation_Loop+0xef8>)
 8002d84:	601a      	str	r2, [r3, #0]
                  lerp_targetY = centerY;
 8002d86:	4b6a      	ldr	r3, [pc, #424]	@ (8002f30 <Animation_Loop+0xefc>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4b69      	ldr	r3, [pc, #420]	@ (8002f34 <Animation_Loop+0xf00>)
 8002d8e:	601a      	str	r2, [r3, #0]
                  lerp_t = 0.0f;
 8002d90:	4b69      	ldr	r3, [pc, #420]	@ (8002f38 <Animation_Loop+0xf04>)
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
                  state_index++;
 8002d98:	4b68      	ldr	r3, [pc, #416]	@ (8002f3c <Animation_Loop+0xf08>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	4b66      	ldr	r3, [pc, #408]	@ (8002f3c <Animation_Loop+0xf08>)
 8002da2:	701a      	strb	r2, [r3, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8002da4:	4b65      	ldr	r3, [pc, #404]	@ (8002f3c <Animation_Loop+0xf08>)
 8002da6:	781a      	ldrb	r2, [r3, #0]
 8002da8:	4b65      	ldr	r3, [pc, #404]	@ (8002f40 <Animation_Loop+0xf0c>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d302      	bcc.n	8002db6 <Animation_Loop+0xd82>
 8002db0:	4b62      	ldr	r3, [pc, #392]	@ (8002f3c <Animation_Loop+0xf08>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
                  state = state_sequence[state_index];
 8002db6:	4b61      	ldr	r3, [pc, #388]	@ (8002f3c <Animation_Loop+0xf08>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	4b61      	ldr	r3, [pc, #388]	@ (8002f44 <Animation_Loop+0xf10>)
 8002dbe:	5c9a      	ldrb	r2, [r3, r2]
 8002dc0:	4b61      	ldr	r3, [pc, #388]	@ (8002f48 <Animation_Loop+0xf14>)
 8002dc2:	701a      	strb	r2, [r3, #0]
                  break;
 8002dc4:	e0a5      	b.n	8002f12 <Animation_Loop+0xede>
              // Random move
              case STATE_RANDOM_MOVE:
                  if (random_count < RANDOM_REPEAT) {
 8002dc6:	4b61      	ldr	r3, [pc, #388]	@ (8002f4c <Animation_Loop+0xf18>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	2314      	movs	r3, #20
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	da3e      	bge.n	8002e50 <Animation_Loop+0xe1c>
                      lerp_startX = pupilX; lerp_startY = pupilY;
 8002dd2:	4b51      	ldr	r3, [pc, #324]	@ (8002f18 <Animation_Loop+0xee4>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	4b50      	ldr	r3, [pc, #320]	@ (8002f1c <Animation_Loop+0xee8>)
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	4b50      	ldr	r3, [pc, #320]	@ (8002f20 <Animation_Loop+0xeec>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	4b50      	ldr	r3, [pc, #320]	@ (8002f24 <Animation_Loop+0xef0>)
 8002de4:	601a      	str	r2, [r3, #0]
                      lerp_targetX = centerX + (rand() % (rx_in - pupilRadius * 2));
 8002de6:	4b50      	ldr	r3, [pc, #320]	@ (8002f28 <Animation_Loop+0xef4>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	461c      	mov	r4, r3
 8002dec:	f002 fac6 	bl	800537c <rand>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b57      	ldr	r3, [pc, #348]	@ (8002f50 <Animation_Loop+0xf1c>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	4619      	mov	r1, r3
 8002df8:	4b56      	ldr	r3, [pc, #344]	@ (8002f54 <Animation_Loop+0xf20>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	1acb      	subs	r3, r1, r3
 8002e00:	fb92 f1f3 	sdiv	r1, r2, r3
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	4423      	add	r3, r4
 8002e0c:	4a47      	ldr	r2, [pc, #284]	@ (8002f2c <Animation_Loop+0xef8>)
 8002e0e:	6013      	str	r3, [r2, #0]
                      lerp_targetY = centerY + (rand() % (ry_in - pupilRadius * 2));
 8002e10:	4b47      	ldr	r3, [pc, #284]	@ (8002f30 <Animation_Loop+0xefc>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	461c      	mov	r4, r3
 8002e16:	f002 fab1 	bl	800537c <rand>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	4b4e      	ldr	r3, [pc, #312]	@ (8002f58 <Animation_Loop+0xf24>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	4619      	mov	r1, r3
 8002e22:	4b4c      	ldr	r3, [pc, #304]	@ (8002f54 <Animation_Loop+0xf20>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	1acb      	subs	r3, r1, r3
 8002e2a:	fb92 f1f3 	sdiv	r1, r2, r3
 8002e2e:	fb01 f303 	mul.w	r3, r1, r3
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	4423      	add	r3, r4
 8002e36:	4a3f      	ldr	r2, [pc, #252]	@ (8002f34 <Animation_Loop+0xf00>)
 8002e38:	6013      	str	r3, [r2, #0]
                      lerp_t = 0.0f;
 8002e3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002f38 <Animation_Loop+0xf04>)
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
                      random_count++;
 8002e42:	4b42      	ldr	r3, [pc, #264]	@ (8002f4c <Animation_Loop+0xf18>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	3301      	adds	r3, #1
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	4b40      	ldr	r3, [pc, #256]	@ (8002f4c <Animation_Loop+0xf18>)
 8002e4c:	701a      	strb	r2, [r3, #0]
                      lerp_t = 0.0f;
                      state_index++;
                      if (state_index >= state_sequence_len) state_index = 0;
                      state = state_sequence[state_index];
                  }
                  break;           
 8002e4e:	e060      	b.n	8002f12 <Animation_Loop+0xede>
                      random_count = 0;
 8002e50:	4b3e      	ldr	r3, [pc, #248]	@ (8002f4c <Animation_Loop+0xf18>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
                      lerp_startX = pupilX; lerp_startY = pupilY;
 8002e56:	4b30      	ldr	r3, [pc, #192]	@ (8002f18 <Animation_Loop+0xee4>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	4b2f      	ldr	r3, [pc, #188]	@ (8002f1c <Animation_Loop+0xee8>)
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	4b2f      	ldr	r3, [pc, #188]	@ (8002f20 <Animation_Loop+0xeec>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	4b2f      	ldr	r3, [pc, #188]	@ (8002f24 <Animation_Loop+0xef0>)
 8002e68:	601a      	str	r2, [r3, #0]
                      lerp_targetX = centerX;
 8002e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8002f28 <Animation_Loop+0xef4>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	4b2e      	ldr	r3, [pc, #184]	@ (8002f2c <Animation_Loop+0xef8>)
 8002e72:	601a      	str	r2, [r3, #0]
                      lerp_targetY = centerY;
 8002e74:	4b2e      	ldr	r3, [pc, #184]	@ (8002f30 <Animation_Loop+0xefc>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b2e      	ldr	r3, [pc, #184]	@ (8002f34 <Animation_Loop+0xf00>)
 8002e7c:	601a      	str	r2, [r3, #0]
                      lerp_t = 0.0f;
 8002e7e:	4b2e      	ldr	r3, [pc, #184]	@ (8002f38 <Animation_Loop+0xf04>)
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
                      state_index++;
 8002e86:	4b2d      	ldr	r3, [pc, #180]	@ (8002f3c <Animation_Loop+0xf08>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4b2b      	ldr	r3, [pc, #172]	@ (8002f3c <Animation_Loop+0xf08>)
 8002e90:	701a      	strb	r2, [r3, #0]
                      if (state_index >= state_sequence_len) state_index = 0;
 8002e92:	4b2a      	ldr	r3, [pc, #168]	@ (8002f3c <Animation_Loop+0xf08>)
 8002e94:	781a      	ldrb	r2, [r3, #0]
 8002e96:	4b2a      	ldr	r3, [pc, #168]	@ (8002f40 <Animation_Loop+0xf0c>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d302      	bcc.n	8002ea4 <Animation_Loop+0xe70>
 8002e9e:	4b27      	ldr	r3, [pc, #156]	@ (8002f3c <Animation_Loop+0xf08>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
                      state = state_sequence[state_index];
 8002ea4:	4b25      	ldr	r3, [pc, #148]	@ (8002f3c <Animation_Loop+0xf08>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4b26      	ldr	r3, [pc, #152]	@ (8002f44 <Animation_Loop+0xf10>)
 8002eac:	5c9a      	ldrb	r2, [r3, r2]
 8002eae:	4b26      	ldr	r3, [pc, #152]	@ (8002f48 <Animation_Loop+0xf14>)
 8002eb0:	701a      	strb	r2, [r3, #0]
                  break;           
 8002eb2:	e02e      	b.n	8002f12 <Animation_Loop+0xede>
              case STATE_RANDOM_TO_CENTER:
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8002eb4:	4b18      	ldr	r3, [pc, #96]	@ (8002f18 <Animation_Loop+0xee4>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4b18      	ldr	r3, [pc, #96]	@ (8002f1c <Animation_Loop+0xee8>)
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	4b18      	ldr	r3, [pc, #96]	@ (8002f20 <Animation_Loop+0xeec>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	4b17      	ldr	r3, [pc, #92]	@ (8002f24 <Animation_Loop+0xef0>)
 8002ec6:	601a      	str	r2, [r3, #0]
                  lerp_targetX = centerX;
 8002ec8:	4b17      	ldr	r3, [pc, #92]	@ (8002f28 <Animation_Loop+0xef4>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4b17      	ldr	r3, [pc, #92]	@ (8002f2c <Animation_Loop+0xef8>)
 8002ed0:	601a      	str	r2, [r3, #0]
                  lerp_targetY = centerY;
 8002ed2:	4b17      	ldr	r3, [pc, #92]	@ (8002f30 <Animation_Loop+0xefc>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4b16      	ldr	r3, [pc, #88]	@ (8002f34 <Animation_Loop+0xf00>)
 8002eda:	601a      	str	r2, [r3, #0]
                  lerp_t = 0.0f;
 8002edc:	4b16      	ldr	r3, [pc, #88]	@ (8002f38 <Animation_Loop+0xf04>)
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
                  state_index++;
 8002ee4:	4b15      	ldr	r3, [pc, #84]	@ (8002f3c <Animation_Loop+0xf08>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	4b13      	ldr	r3, [pc, #76]	@ (8002f3c <Animation_Loop+0xf08>)
 8002eee:	701a      	strb	r2, [r3, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8002ef0:	4b12      	ldr	r3, [pc, #72]	@ (8002f3c <Animation_Loop+0xf08>)
 8002ef2:	781a      	ldrb	r2, [r3, #0]
 8002ef4:	4b12      	ldr	r3, [pc, #72]	@ (8002f40 <Animation_Loop+0xf0c>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d302      	bcc.n	8002f02 <Animation_Loop+0xece>
 8002efc:	4b0f      	ldr	r3, [pc, #60]	@ (8002f3c <Animation_Loop+0xf08>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	701a      	strb	r2, [r3, #0]
                  state = state_sequence[state_index];
 8002f02:	4b0e      	ldr	r3, [pc, #56]	@ (8002f3c <Animation_Loop+0xf08>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	4b0e      	ldr	r3, [pc, #56]	@ (8002f44 <Animation_Loop+0xf10>)
 8002f0a:	5c9a      	ldrb	r2, [r3, r2]
 8002f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f48 <Animation_Loop+0xf14>)
 8002f0e:	701a      	strb	r2, [r3, #0]
                  break;
 8002f10:	bf00      	nop
              case STATE_PUPIL_ROTATE:
                  break;
              
          }
      }
}
 8002f12:	3728      	adds	r7, #40	@ 0x28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bdb0      	pop	{r4, r5, r7, pc}
 8002f18:	200001fe 	.word	0x200001fe
 8002f1c:	20000204 	.word	0x20000204
 8002f20:	200001ff 	.word	0x200001ff
 8002f24:	20000208 	.word	0x20000208
 8002f28:	200001f8 	.word	0x200001f8
 8002f2c:	2000020c 	.word	0x2000020c
 8002f30:	200001f9 	.word	0x200001f9
 8002f34:	20000210 	.word	0x20000210
 8002f38:	20000214 	.word	0x20000214
 8002f3c:	2000021c 	.word	0x2000021c
 8002f40:	2000021d 	.word	0x2000021d
 8002f44:	08007070 	.word	0x08007070
 8002f48:	20000200 	.word	0x20000200
 8002f4c:	2000021e 	.word	0x2000021e
 8002f50:	200001fa 	.word	0x200001fa
 8002f54:	200001fc 	.word	0x200001fc
 8002f58:	200001fb 	.word	0x200001fb

08002f5c <draw_eye_with_pupil_to_buffer>:

void draw_eye_with_pupil_to_buffer(
  int cx, int cy, int r,
  int pupil_r, int pupil_offset_x, int pupil_offset_y,
  uint16_t outer_color, uint16_t inner_color, uint16_t bgcolor, uint16_t pupil_color
) {
 8002f5c:	b590      	push	{r4, r7, lr}
 8002f5e:	b0a5      	sub	sp, #148	@ 0x94
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
  int r2 = r * r ;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	fb03 f303 	mul.w	r3, r3, r3
 8002f70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  int pupil_cx = cx;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	67fb      	str	r3, [r7, #124]	@ 0x7c
  int pupil_cy = cy;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	67bb      	str	r3, [r7, #120]	@ 0x78
  // Biến tick cho hiệu ứng rung highlight
  static int highlight_tick = 0;
  highlight_tick++;
 8002f7c:	4b4f      	ldr	r3, [pc, #316]	@ (80030bc <draw_eye_with_pupil_to_buffer+0x160>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3301      	adds	r3, #1
 8002f82:	4a4e      	ldr	r2, [pc, #312]	@ (80030bc <draw_eye_with_pupil_to_buffer+0x160>)
 8002f84:	6013      	str	r3, [r2, #0]

  // Tham số rung
  float shake_ampl = 2.0f; // Biên độ rung (pixel)
 8002f86:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002f8a:	677b      	str	r3, [r7, #116]	@ 0x74
  float shake1 = shake_ampl * sinf(highlight_tick * 0.15f);
 8002f8c:	4b4b      	ldr	r3, [pc, #300]	@ (80030bc <draw_eye_with_pupil_to_buffer+0x160>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fd fca3 	bl	80008dc <__aeabi_i2f>
 8002f96:	4603      	mov	r3, r0
 8002f98:	4949      	ldr	r1, [pc, #292]	@ (80030c0 <draw_eye_with_pupil_to_buffer+0x164>)
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd fcf2 	bl	8000984 <__aeabi_fmul>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f003 fa22 	bl	80063ec <sinf>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	4619      	mov	r1, r3
 8002fac:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002fae:	f7fd fce9 	bl	8000984 <__aeabi_fmul>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	673b      	str	r3, [r7, #112]	@ 0x70
  float shake2 = shake_ampl * cosf(highlight_tick * 0.18f);
 8002fb6:	4b41      	ldr	r3, [pc, #260]	@ (80030bc <draw_eye_with_pupil_to_buffer+0x160>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd fc8e 	bl	80008dc <__aeabi_i2f>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	4940      	ldr	r1, [pc, #256]	@ (80030c4 <draw_eye_with_pupil_to_buffer+0x168>)
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fd fcdd 	bl	8000984 <__aeabi_fmul>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f003 f9d5 	bl	800637c <cosf>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002fd8:	f7fd fcd4 	bl	8000984 <__aeabi_fmul>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	66fb      	str	r3, [r7, #108]	@ 0x6c
    // TÍNH TRƯỚC VÒNG LẶP
  int highlight_cx3 = cx - r / 3 + (int)(1.5f * sinf(highlight_tick * 0.22f)) + 15;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a39      	ldr	r2, [pc, #228]	@ (80030c8 <draw_eye_with_pupil_to_buffer+0x16c>)
 8002fe4:	fb82 1203 	smull	r1, r2, r2, r3
 8002fe8:	17db      	asrs	r3, r3, #31
 8002fea:	1a9a      	subs	r2, r3, r2
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	18d4      	adds	r4, r2, r3
 8002ff0:	4b32      	ldr	r3, [pc, #200]	@ (80030bc <draw_eye_with_pupil_to_buffer+0x160>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fd fc71 	bl	80008dc <__aeabi_i2f>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4933      	ldr	r1, [pc, #204]	@ (80030cc <draw_eye_with_pupil_to_buffer+0x170>)
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd fcc0 	bl	8000984 <__aeabi_fmul>
 8003004:	4603      	mov	r3, r0
 8003006:	4618      	mov	r0, r3
 8003008:	f003 f9f0 	bl	80063ec <sinf>
 800300c:	4603      	mov	r3, r0
 800300e:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fcb6 	bl	8000984 <__aeabi_fmul>
 8003018:	4603      	mov	r3, r0
 800301a:	4618      	mov	r0, r3
 800301c:	f7fd fe8e 	bl	8000d3c <__aeabi_f2iz>
 8003020:	4603      	mov	r3, r0
 8003022:	4423      	add	r3, r4
 8003024:	330f      	adds	r3, #15
 8003026:	66bb      	str	r3, [r7, #104]	@ 0x68
  int highlight_cy3 = cy - r / 3 + (int)(1.5f * cosf(highlight_tick * 0.19f)) - 3;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a27      	ldr	r2, [pc, #156]	@ (80030c8 <draw_eye_with_pupil_to_buffer+0x16c>)
 800302c:	fb82 1203 	smull	r1, r2, r2, r3
 8003030:	17db      	asrs	r3, r3, #31
 8003032:	1a9a      	subs	r2, r3, r2
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	18d4      	adds	r4, r2, r3
 8003038:	4b20      	ldr	r3, [pc, #128]	@ (80030bc <draw_eye_with_pupil_to_buffer+0x160>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f7fd fc4d 	bl	80008dc <__aeabi_i2f>
 8003042:	4603      	mov	r3, r0
 8003044:	4922      	ldr	r1, [pc, #136]	@ (80030d0 <draw_eye_with_pupil_to_buffer+0x174>)
 8003046:	4618      	mov	r0, r3
 8003048:	f7fd fc9c 	bl	8000984 <__aeabi_fmul>
 800304c:	4603      	mov	r3, r0
 800304e:	4618      	mov	r0, r3
 8003050:	f003 f994 	bl	800637c <cosf>
 8003054:	4603      	mov	r3, r0
 8003056:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fc92 	bl	8000984 <__aeabi_fmul>
 8003060:	4603      	mov	r3, r0
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd fe6a 	bl	8000d3c <__aeabi_f2iz>
 8003068:	4603      	mov	r3, r0
 800306a:	4423      	add	r3, r4
 800306c:	3b03      	subs	r3, #3
 800306e:	667b      	str	r3, [r7, #100]	@ 0x64
  int show_highlight3 = ((highlight_tick % 120) < 10);
 8003070:	4b12      	ldr	r3, [pc, #72]	@ (80030bc <draw_eye_with_pupil_to_buffer+0x160>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4b17      	ldr	r3, [pc, #92]	@ (80030d4 <draw_eye_with_pupil_to_buffer+0x178>)
 8003076:	fb83 1302 	smull	r1, r3, r3, r2
 800307a:	4413      	add	r3, r2
 800307c:	1199      	asrs	r1, r3, #6
 800307e:	17d3      	asrs	r3, r2, #31
 8003080:	1ac9      	subs	r1, r1, r3
 8003082:	460b      	mov	r3, r1
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	1a5b      	subs	r3, r3, r1
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	1ad1      	subs	r1, r2, r3
 800308c:	2909      	cmp	r1, #9
 800308e:	bfd4      	ite	le
 8003090:	2301      	movle	r3, #1
 8003092:	2300      	movgt	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	663b      	str	r3, [r7, #96]	@ 0x60

  for (int y = 0; y < BUF_H; y++) {
 8003098:	2300      	movs	r3, #0
 800309a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800309e:	e102      	b.n	80032a6 <draw_eye_with_pupil_to_buffer+0x34a>
      int dy = y - cy;
 80030a0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
      int dy2 = dy * dy;
 80030aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030ac:	fb03 f303 	mul.w	r3, r3, r3
 80030b0:	65bb      	str	r3, [r7, #88]	@ 0x58


      for (int x = 0; x < BUF_W; x++) {
 80030b2:	2300      	movs	r3, #0
 80030b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030b8:	e0eb      	b.n	8003292 <draw_eye_with_pupil_to_buffer+0x336>
 80030ba:	bf00      	nop
 80030bc:	200036b0 	.word	0x200036b0
 80030c0:	3e19999a 	.word	0x3e19999a
 80030c4:	3e3851ec 	.word	0x3e3851ec
 80030c8:	55555556 	.word	0x55555556
 80030cc:	3e6147ae 	.word	0x3e6147ae
 80030d0:	3e428f5c 	.word	0x3e428f5c
 80030d4:	88888889 	.word	0x88888889
          int dx = x - cx;
 80030d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	657b      	str	r3, [r7, #84]	@ 0x54
          int dist2 = dx * dx + dy2;
 80030e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e4:	fb03 f303 	mul.w	r3, r3, r3
 80030e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030ea:	4413      	add	r3, r2
 80030ec:	653b      	str	r3, [r7, #80]	@ 0x50

          uint16_t color = bgcolor;
 80030ee:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80030f2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

          if (dist2 <= r2) {
 80030f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80030f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030fc:	429a      	cmp	r2, r3
 80030fe:	dc39      	bgt.n	8003174 <draw_eye_with_pupil_to_buffer+0x218>
              // // Tính tỷ lệ nội suy (0 - 255)
              int t = (dist2 * 255) / r2;
 8003100:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003102:	4613      	mov	r3, r2
 8003104:	021b      	lsls	r3, r3, #8
 8003106:	1a9a      	subs	r2, r3, r2
 8003108:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800310c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003110:	64fb      	str	r3, [r7, #76]	@ 0x4c
              color = blend_color_fast(inner_color, outer_color, (uint8_t)(t*0.7f));
 8003112:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003114:	f7fd fbe2 	bl	80008dc <__aeabi_i2f>
 8003118:	4603      	mov	r3, r0
 800311a:	4968      	ldr	r1, [pc, #416]	@ (80032bc <draw_eye_with_pupil_to_buffer+0x360>)
 800311c:	4618      	mov	r0, r3
 800311e:	f7fd fc31 	bl	8000984 <__aeabi_fmul>
 8003122:	4603      	mov	r3, r0
 8003124:	4618      	mov	r0, r3
 8003126:	f7fd fe2f 	bl	8000d88 <__aeabi_f2uiz>
 800312a:	4603      	mov	r3, r0
 800312c:	b2da      	uxtb	r2, r3
 800312e:	f8b7 10a8 	ldrh.w	r1, [r7, #168]	@ 0xa8
 8003132:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8003136:	4618      	mov	r0, r3
 8003138:	f7fe fdec 	bl	8001d14 <blend_color_fast>
 800313c:	4603      	mov	r3, r0
 800313e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
              int dx_pupil = x - pupil_cx;
 8003142:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003146:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	64bb      	str	r3, [r7, #72]	@ 0x48
              int dy_pupil = y - pupil_cy;
 800314c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003150:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	647b      	str	r3, [r7, #68]	@ 0x44
              if (dx_pupil * dx_pupil + dy_pupil * dy_pupil <= pupil_r * pupil_r) {
 8003156:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003158:	fb03 f203 	mul.w	r2, r3, r3
 800315c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800315e:	fb03 f303 	mul.w	r3, r3, r3
 8003162:	441a      	add	r2, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	fb03 f303 	mul.w	r3, r3, r3
 800316a:	429a      	cmp	r2, r3
 800316c:	dc02      	bgt.n	8003174 <draw_eye_with_pupil_to_buffer+0x218>
                  color = 0x0000; // Đen
 800316e:	2300      	movs	r3, #0
 8003170:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
              }
          }


          // Vẽ highlight – chấm sáng trong mắt (rung nhẹ quanh vị trí gốc)
          int highlight_radius = 8;
 8003174:	2308      	movs	r3, #8
 8003176:	643b      	str	r3, [r7, #64]	@ 0x40
          int highlight_cx = cx - r / 3 + (int)shake1;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a51      	ldr	r2, [pc, #324]	@ (80032c0 <draw_eye_with_pupil_to_buffer+0x364>)
 800317c:	fb82 1203 	smull	r1, r2, r2, r3
 8003180:	17db      	asrs	r3, r3, #31
 8003182:	1a9a      	subs	r2, r3, r2
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	18d4      	adds	r4, r2, r3
 8003188:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800318a:	f7fd fdd7 	bl	8000d3c <__aeabi_f2iz>
 800318e:	4603      	mov	r3, r0
 8003190:	4423      	add	r3, r4
 8003192:	63fb      	str	r3, [r7, #60]	@ 0x3c
          int highlight_cy = cy - r / 3 + (int)shake2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a4a      	ldr	r2, [pc, #296]	@ (80032c0 <draw_eye_with_pupil_to_buffer+0x364>)
 8003198:	fb82 1203 	smull	r1, r2, r2, r3
 800319c:	17db      	asrs	r3, r3, #31
 800319e:	1a9a      	subs	r2, r3, r2
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	18d4      	adds	r4, r2, r3
 80031a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80031a6:	f7fd fdc9 	bl	8000d3c <__aeabi_f2iz>
 80031aa:	4603      	mov	r3, r0
 80031ac:	4423      	add	r3, r4
 80031ae:	63bb      	str	r3, [r7, #56]	@ 0x38
          int dx_h = x - highlight_cx;
 80031b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80031b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	637b      	str	r3, [r7, #52]	@ 0x34
          int dy_h = y - highlight_cy;
 80031ba:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80031be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	633b      	str	r3, [r7, #48]	@ 0x30
          if (dx_h * dx_h + dy_h * dy_h <= highlight_radius * highlight_radius) {
 80031c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c6:	fb03 f203 	mul.w	r2, r3, r3
 80031ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031cc:	fb03 f303 	mul.w	r3, r3, r3
 80031d0:	441a      	add	r2, r3
 80031d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031d4:	fb03 f303 	mul.w	r3, r3, r3
 80031d8:	429a      	cmp	r2, r3
 80031da:	dc03      	bgt.n	80031e4 <draw_eye_with_pupil_to_buffer+0x288>
              color = 0xFFFF; // Màu trắng
 80031dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031e0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
          }

          // Highlight 2: đối xứng qua tâm, cũng rung nhẹ
          int highlight_radius1 = 4;
 80031e4:	2304      	movs	r3, #4
 80031e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
          int highlight_cx1 = 2 * cx - highlight_cx;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	005a      	lsls	r2, r3, #1
 80031ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	62bb      	str	r3, [r7, #40]	@ 0x28
          int highlight_cy1 = 2 * cy - highlight_cy;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	005a      	lsls	r2, r3, #1
 80031f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	627b      	str	r3, [r7, #36]	@ 0x24
          int dx_h1 = x - highlight_cx1;
 80031fc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	623b      	str	r3, [r7, #32]
          int dy_h1 = y - highlight_cy1;
 8003206:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	61fb      	str	r3, [r7, #28]
          if (dx_h1 * dx_h1 + dy_h1 * dy_h1 <= highlight_radius1 * highlight_radius1) {
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	fb03 f203 	mul.w	r2, r3, r3
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	fb03 f303 	mul.w	r3, r3, r3
 800321c:	441a      	add	r2, r3
 800321e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003220:	fb03 f303 	mul.w	r3, r3, r3
 8003224:	429a      	cmp	r2, r3
 8003226:	dc03      	bgt.n	8003230 <draw_eye_with_pupil_to_buffer+0x2d4>
              color = 0xFFFF; // Màu trắng
 8003228:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800322c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
          }

          // ... các highlight khác ...
          int highlight_radius3 = 6;
 8003230:	2306      	movs	r3, #6
 8003232:	61bb      	str	r3, [r7, #24]
          int dx_h3 = x - highlight_cx3;
 8003234:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003238:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	617b      	str	r3, [r7, #20]
          int dy_h3 = y - highlight_cy3;
 800323e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003242:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	613b      	str	r3, [r7, #16]
          if (show_highlight3 && (dx_h3 * dx_h3 + dy_h3 * dy_h3 <= highlight_radius3 * highlight_radius3)) {
 8003248:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00f      	beq.n	800326e <draw_eye_with_pupil_to_buffer+0x312>
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	fb03 f203 	mul.w	r2, r3, r3
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	fb03 f303 	mul.w	r3, r3, r3
 800325a:	441a      	add	r2, r3
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	fb03 f303 	mul.w	r3, r3, r3
 8003262:	429a      	cmp	r2, r3
 8003264:	dc03      	bgt.n	800326e <draw_eye_with_pupil_to_buffer+0x312>
              color = 0xFFFF;
 8003266:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800326a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
          }

          framebuf[y * BUF_W + x] = color;
 800326e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003272:	2252      	movs	r2, #82	@ 0x52
 8003274:	fb03 f202 	mul.w	r2, r3, r2
 8003278:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800327c:	4413      	add	r3, r2
 800327e:	4911      	ldr	r1, [pc, #68]	@ (80032c4 <draw_eye_with_pupil_to_buffer+0x368>)
 8003280:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 8003284:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      for (int x = 0; x < BUF_W; x++) {
 8003288:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800328c:	3301      	adds	r3, #1
 800328e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003292:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003296:	2b51      	cmp	r3, #81	@ 0x51
 8003298:	f77f af1e 	ble.w	80030d8 <draw_eye_with_pupil_to_buffer+0x17c>
  for (int y = 0; y < BUF_H; y++) {
 800329c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032a0:	3301      	adds	r3, #1
 80032a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80032a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032aa:	2b51      	cmp	r3, #81	@ 0x51
 80032ac:	f77f aef8 	ble.w	80030a0 <draw_eye_with_pupil_to_buffer+0x144>
      }
  }
}
 80032b0:	bf00      	nop
 80032b2:	bf00      	nop
 80032b4:	3794      	adds	r7, #148	@ 0x94
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd90      	pop	{r4, r7, pc}
 80032ba:	bf00      	nop
 80032bc:	3f333333 	.word	0x3f333333
 80032c0:	55555556 	.word	0x55555556
 80032c4:	20000220 	.word	0x20000220

080032c8 <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1) {
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a07      	ldr	r2, [pc, #28]	@ (80032f4 <HAL_SPI_TxCpltCallback+0x2c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d108      	bne.n	80032ec <HAL_SPI_TxCpltCallback+0x24>
        // Đóng CS sau khi DMA xong
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); // CS_Pin
 80032da:	2201      	movs	r2, #1
 80032dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80032e0:	4805      	ldr	r0, [pc, #20]	@ (80032f8 <HAL_SPI_TxCpltCallback+0x30>)
 80032e2:	f001 f88d 	bl	8004400 <HAL_GPIO_WritePin>
        lcd128_dma_busy = 0;
 80032e6:	4b05      	ldr	r3, [pc, #20]	@ (80032fc <HAL_SPI_TxCpltCallback+0x34>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]
    }
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40013000 	.word	0x40013000
 80032f8:	40010c00 	.word	0x40010c00
 80032fc:	20000084 	.word	0x20000084

08003300 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b090      	sub	sp, #64	@ 0x40
 8003304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003306:	f107 0318 	add.w	r3, r7, #24
 800330a:	2228      	movs	r2, #40	@ 0x28
 800330c:	2100      	movs	r1, #0
 800330e:	4618      	mov	r0, r3
 8003310:	f002 f977 	bl	8005602 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003314:	1d3b      	adds	r3, r7, #4
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	609a      	str	r2, [r3, #8]
 800331e:	60da      	str	r2, [r3, #12]
 8003320:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003322:	2301      	movs	r3, #1
 8003324:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003326:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800332a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800332c:	2300      	movs	r3, #0
 800332e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003330:	2301      	movs	r3, #1
 8003332:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003334:	2302      	movs	r3, #2
 8003336:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003338:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800333c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800333e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8003342:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003344:	f107 0318 	add.w	r3, r7, #24
 8003348:	4618      	mov	r0, r3
 800334a:	f001 f871 	bl	8004430 <HAL_RCC_OscConfig>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003354:	f000 f90e 	bl	8003574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003358:	230f      	movs	r3, #15
 800335a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800335c:	2302      	movs	r3, #2
 800335e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003364:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003368:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800336e:	1d3b      	adds	r3, r7, #4
 8003370:	2102      	movs	r1, #2
 8003372:	4618      	mov	r0, r3
 8003374:	f001 fade 	bl	8004934 <HAL_RCC_ClockConfig>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800337e:	f000 f8f9 	bl	8003574 <Error_Handler>
  }
}
 8003382:	bf00      	nop
 8003384:	3740      	adds	r7, #64	@ 0x40
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003390:	4b17      	ldr	r3, [pc, #92]	@ (80033f0 <MX_SPI1_Init+0x64>)
 8003392:	4a18      	ldr	r2, [pc, #96]	@ (80033f4 <MX_SPI1_Init+0x68>)
 8003394:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003396:	4b16      	ldr	r3, [pc, #88]	@ (80033f0 <MX_SPI1_Init+0x64>)
 8003398:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800339c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800339e:	4b14      	ldr	r3, [pc, #80]	@ (80033f0 <MX_SPI1_Init+0x64>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80033a4:	4b12      	ldr	r3, [pc, #72]	@ (80033f0 <MX_SPI1_Init+0x64>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033aa:	4b11      	ldr	r3, [pc, #68]	@ (80033f0 <MX_SPI1_Init+0x64>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033b0:	4b0f      	ldr	r3, [pc, #60]	@ (80033f0 <MX_SPI1_Init+0x64>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80033b6:	4b0e      	ldr	r3, [pc, #56]	@ (80033f0 <MX_SPI1_Init+0x64>)
 80033b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80033be:	4b0c      	ldr	r3, [pc, #48]	@ (80033f0 <MX_SPI1_Init+0x64>)
 80033c0:	2208      	movs	r2, #8
 80033c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033c4:	4b0a      	ldr	r3, [pc, #40]	@ (80033f0 <MX_SPI1_Init+0x64>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80033ca:	4b09      	ldr	r3, [pc, #36]	@ (80033f0 <MX_SPI1_Init+0x64>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033d0:	4b07      	ldr	r3, [pc, #28]	@ (80033f0 <MX_SPI1_Init+0x64>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80033d6:	4b06      	ldr	r3, [pc, #24]	@ (80033f0 <MX_SPI1_Init+0x64>)
 80033d8:	220a      	movs	r2, #10
 80033da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80033dc:	4804      	ldr	r0, [pc, #16]	@ (80033f0 <MX_SPI1_Init+0x64>)
 80033de:	f001 fc05 	bl	8004bec <HAL_SPI_Init>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80033e8:	f000 f8c4 	bl	8003574 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80033ec:	bf00      	nop
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20000088 	.word	0x20000088
 80033f4:	40013000 	.word	0x40013000

080033f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80033fc:	4b17      	ldr	r3, [pc, #92]	@ (800345c <MX_SPI2_Init+0x64>)
 80033fe:	4a18      	ldr	r2, [pc, #96]	@ (8003460 <MX_SPI2_Init+0x68>)
 8003400:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003402:	4b16      	ldr	r3, [pc, #88]	@ (800345c <MX_SPI2_Init+0x64>)
 8003404:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003408:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800340a:	4b14      	ldr	r3, [pc, #80]	@ (800345c <MX_SPI2_Init+0x64>)
 800340c:	2200      	movs	r2, #0
 800340e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003410:	4b12      	ldr	r3, [pc, #72]	@ (800345c <MX_SPI2_Init+0x64>)
 8003412:	2200      	movs	r2, #0
 8003414:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003416:	4b11      	ldr	r3, [pc, #68]	@ (800345c <MX_SPI2_Init+0x64>)
 8003418:	2200      	movs	r2, #0
 800341a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800341c:	4b0f      	ldr	r3, [pc, #60]	@ (800345c <MX_SPI2_Init+0x64>)
 800341e:	2200      	movs	r2, #0
 8003420:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003422:	4b0e      	ldr	r3, [pc, #56]	@ (800345c <MX_SPI2_Init+0x64>)
 8003424:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003428:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800342a:	4b0c      	ldr	r3, [pc, #48]	@ (800345c <MX_SPI2_Init+0x64>)
 800342c:	2200      	movs	r2, #0
 800342e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003430:	4b0a      	ldr	r3, [pc, #40]	@ (800345c <MX_SPI2_Init+0x64>)
 8003432:	2200      	movs	r2, #0
 8003434:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003436:	4b09      	ldr	r3, [pc, #36]	@ (800345c <MX_SPI2_Init+0x64>)
 8003438:	2200      	movs	r2, #0
 800343a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800343c:	4b07      	ldr	r3, [pc, #28]	@ (800345c <MX_SPI2_Init+0x64>)
 800343e:	2200      	movs	r2, #0
 8003440:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003442:	4b06      	ldr	r3, [pc, #24]	@ (800345c <MX_SPI2_Init+0x64>)
 8003444:	220a      	movs	r2, #10
 8003446:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003448:	4804      	ldr	r0, [pc, #16]	@ (800345c <MX_SPI2_Init+0x64>)
 800344a:	f001 fbcf 	bl	8004bec <HAL_SPI_Init>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003454:	f000 f88e 	bl	8003574 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003458:	bf00      	nop
 800345a:	bd80      	pop	{r7, pc}
 800345c:	200000e0 	.word	0x200000e0
 8003460:	40003800 	.word	0x40003800

08003464 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800346a:	4b10      	ldr	r3, [pc, #64]	@ (80034ac <MX_DMA_Init+0x48>)
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	4a0f      	ldr	r2, [pc, #60]	@ (80034ac <MX_DMA_Init+0x48>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	6153      	str	r3, [r2, #20]
 8003476:	4b0d      	ldr	r3, [pc, #52]	@ (80034ac <MX_DMA_Init+0x48>)
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	607b      	str	r3, [r7, #4]
 8003480:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003482:	2200      	movs	r2, #0
 8003484:	2100      	movs	r1, #0
 8003486:	200d      	movs	r0, #13
 8003488:	f000 fc11 	bl	8003cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800348c:	200d      	movs	r0, #13
 800348e:	f000 fc2a 	bl	8003ce6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003492:	2200      	movs	r2, #0
 8003494:	2100      	movs	r1, #0
 8003496:	200f      	movs	r0, #15
 8003498:	f000 fc09 	bl	8003cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800349c:	200f      	movs	r0, #15
 800349e:	f000 fc22 	bl	8003ce6 <HAL_NVIC_EnableIRQ>

}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000

080034b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b088      	sub	sp, #32
 80034b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b6:	f107 0310 	add.w	r3, r7, #16
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	605a      	str	r2, [r3, #4]
 80034c0:	609a      	str	r2, [r3, #8]
 80034c2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034c4:	4b28      	ldr	r3, [pc, #160]	@ (8003568 <MX_GPIO_Init+0xb8>)
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	4a27      	ldr	r2, [pc, #156]	@ (8003568 <MX_GPIO_Init+0xb8>)
 80034ca:	f043 0320 	orr.w	r3, r3, #32
 80034ce:	6193      	str	r3, [r2, #24]
 80034d0:	4b25      	ldr	r3, [pc, #148]	@ (8003568 <MX_GPIO_Init+0xb8>)
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034dc:	4b22      	ldr	r3, [pc, #136]	@ (8003568 <MX_GPIO_Init+0xb8>)
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	4a21      	ldr	r2, [pc, #132]	@ (8003568 <MX_GPIO_Init+0xb8>)
 80034e2:	f043 0304 	orr.w	r3, r3, #4
 80034e6:	6193      	str	r3, [r2, #24]
 80034e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003568 <MX_GPIO_Init+0xb8>)
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003568 <MX_GPIO_Init+0xb8>)
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003568 <MX_GPIO_Init+0xb8>)
 80034fa:	f043 0308 	orr.w	r3, r3, #8
 80034fe:	6193      	str	r3, [r2, #24]
 8003500:	4b19      	ldr	r3, [pc, #100]	@ (8003568 <MX_GPIO_Init+0xb8>)
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 800350c:	2200      	movs	r2, #0
 800350e:	f240 4103 	movw	r1, #1027	@ 0x403
 8003512:	4816      	ldr	r0, [pc, #88]	@ (800356c <MX_GPIO_Init+0xbc>)
 8003514:	f000 ff74 	bl	8004400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8003518:	2200      	movs	r2, #0
 800351a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800351e:	4814      	ldr	r0, [pc, #80]	@ (8003570 <MX_GPIO_Init+0xc0>)
 8003520:	f000 ff6e 	bl	8004400 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 8003524:	f240 4303 	movw	r3, #1027	@ 0x403
 8003528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800352a:	2301      	movs	r3, #1
 800352c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	2300      	movs	r3, #0
 8003530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003532:	2302      	movs	r3, #2
 8003534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003536:	f107 0310 	add.w	r3, r7, #16
 800353a:	4619      	mov	r1, r3
 800353c:	480b      	ldr	r0, [pc, #44]	@ (800356c <MX_GPIO_Init+0xbc>)
 800353e:	f000 fddb 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003542:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8003546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003548:	2301      	movs	r3, #1
 800354a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003550:	2302      	movs	r3, #2
 8003552:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003554:	f107 0310 	add.w	r3, r7, #16
 8003558:	4619      	mov	r1, r3
 800355a:	4805      	ldr	r0, [pc, #20]	@ (8003570 <MX_GPIO_Init+0xc0>)
 800355c:	f000 fdcc 	bl	80040f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003560:	bf00      	nop
 8003562:	3720      	adds	r7, #32
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40021000 	.word	0x40021000
 800356c:	40010c00 	.word	0x40010c00
 8003570:	40010800 	.word	0x40010800

08003574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003578:	b672      	cpsid	i
}
 800357a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800357c:	bf00      	nop
 800357e:	e7fd      	b.n	800357c <Error_Handler+0x8>

08003580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003586:	4b15      	ldr	r3, [pc, #84]	@ (80035dc <HAL_MspInit+0x5c>)
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	4a14      	ldr	r2, [pc, #80]	@ (80035dc <HAL_MspInit+0x5c>)
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	6193      	str	r3, [r2, #24]
 8003592:	4b12      	ldr	r3, [pc, #72]	@ (80035dc <HAL_MspInit+0x5c>)
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800359e:	4b0f      	ldr	r3, [pc, #60]	@ (80035dc <HAL_MspInit+0x5c>)
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	4a0e      	ldr	r2, [pc, #56]	@ (80035dc <HAL_MspInit+0x5c>)
 80035a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035a8:	61d3      	str	r3, [r2, #28]
 80035aa:	4b0c      	ldr	r3, [pc, #48]	@ (80035dc <HAL_MspInit+0x5c>)
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b2:	607b      	str	r3, [r7, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80035b6:	4b0a      	ldr	r3, [pc, #40]	@ (80035e0 <HAL_MspInit+0x60>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	4a04      	ldr	r2, [pc, #16]	@ (80035e0 <HAL_MspInit+0x60>)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr
 80035dc:	40021000 	.word	0x40021000
 80035e0:	40010000 	.word	0x40010000

080035e4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08a      	sub	sp, #40	@ 0x28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ec:	f107 0318 	add.w	r3, r7, #24
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	605a      	str	r2, [r3, #4]
 80035f6:	609a      	str	r2, [r3, #8]
 80035f8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a5d      	ldr	r2, [pc, #372]	@ (8003774 <HAL_SPI_MspInit+0x190>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d156      	bne.n	80036b2 <HAL_SPI_MspInit+0xce>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003604:	4b5c      	ldr	r3, [pc, #368]	@ (8003778 <HAL_SPI_MspInit+0x194>)
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	4a5b      	ldr	r2, [pc, #364]	@ (8003778 <HAL_SPI_MspInit+0x194>)
 800360a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800360e:	6193      	str	r3, [r2, #24]
 8003610:	4b59      	ldr	r3, [pc, #356]	@ (8003778 <HAL_SPI_MspInit+0x194>)
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800361c:	4b56      	ldr	r3, [pc, #344]	@ (8003778 <HAL_SPI_MspInit+0x194>)
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	4a55      	ldr	r2, [pc, #340]	@ (8003778 <HAL_SPI_MspInit+0x194>)
 8003622:	f043 0304 	orr.w	r3, r3, #4
 8003626:	6193      	str	r3, [r2, #24]
 8003628:	4b53      	ldr	r3, [pc, #332]	@ (8003778 <HAL_SPI_MspInit+0x194>)
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003634:	23a0      	movs	r3, #160	@ 0xa0
 8003636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003638:	2302      	movs	r3, #2
 800363a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800363c:	2303      	movs	r3, #3
 800363e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003640:	f107 0318 	add.w	r3, r7, #24
 8003644:	4619      	mov	r1, r3
 8003646:	484d      	ldr	r0, [pc, #308]	@ (800377c <HAL_SPI_MspInit+0x198>)
 8003648:	f000 fd56 	bl	80040f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800364c:	2340      	movs	r3, #64	@ 0x40
 800364e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003650:	2300      	movs	r3, #0
 8003652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003658:	f107 0318 	add.w	r3, r7, #24
 800365c:	4619      	mov	r1, r3
 800365e:	4847      	ldr	r0, [pc, #284]	@ (800377c <HAL_SPI_MspInit+0x198>)
 8003660:	f000 fd4a 	bl	80040f8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003664:	4b46      	ldr	r3, [pc, #280]	@ (8003780 <HAL_SPI_MspInit+0x19c>)
 8003666:	4a47      	ldr	r2, [pc, #284]	@ (8003784 <HAL_SPI_MspInit+0x1a0>)
 8003668:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800366a:	4b45      	ldr	r3, [pc, #276]	@ (8003780 <HAL_SPI_MspInit+0x19c>)
 800366c:	2210      	movs	r2, #16
 800366e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003670:	4b43      	ldr	r3, [pc, #268]	@ (8003780 <HAL_SPI_MspInit+0x19c>)
 8003672:	2200      	movs	r2, #0
 8003674:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003676:	4b42      	ldr	r3, [pc, #264]	@ (8003780 <HAL_SPI_MspInit+0x19c>)
 8003678:	2280      	movs	r2, #128	@ 0x80
 800367a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800367c:	4b40      	ldr	r3, [pc, #256]	@ (8003780 <HAL_SPI_MspInit+0x19c>)
 800367e:	2200      	movs	r2, #0
 8003680:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003682:	4b3f      	ldr	r3, [pc, #252]	@ (8003780 <HAL_SPI_MspInit+0x19c>)
 8003684:	2200      	movs	r2, #0
 8003686:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003688:	4b3d      	ldr	r3, [pc, #244]	@ (8003780 <HAL_SPI_MspInit+0x19c>)
 800368a:	2200      	movs	r2, #0
 800368c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800368e:	4b3c      	ldr	r3, [pc, #240]	@ (8003780 <HAL_SPI_MspInit+0x19c>)
 8003690:	2200      	movs	r2, #0
 8003692:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003694:	483a      	ldr	r0, [pc, #232]	@ (8003780 <HAL_SPI_MspInit+0x19c>)
 8003696:	f000 fb41 	bl	8003d1c <HAL_DMA_Init>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 80036a0:	f7ff ff68 	bl	8003574 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a36      	ldr	r2, [pc, #216]	@ (8003780 <HAL_SPI_MspInit+0x19c>)
 80036a8:	649a      	str	r2, [r3, #72]	@ 0x48
 80036aa:	4a35      	ldr	r2, [pc, #212]	@ (8003780 <HAL_SPI_MspInit+0x19c>)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6253      	str	r3, [r2, #36]	@ 0x24
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 80036b0:	e05c      	b.n	800376c <HAL_SPI_MspInit+0x188>
  else if(hspi->Instance==SPI2)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a34      	ldr	r2, [pc, #208]	@ (8003788 <HAL_SPI_MspInit+0x1a4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d157      	bne.n	800376c <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80036bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003778 <HAL_SPI_MspInit+0x194>)
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003778 <HAL_SPI_MspInit+0x194>)
 80036c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036c6:	61d3      	str	r3, [r2, #28]
 80036c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003778 <HAL_SPI_MspInit+0x194>)
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036d4:	4b28      	ldr	r3, [pc, #160]	@ (8003778 <HAL_SPI_MspInit+0x194>)
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	4a27      	ldr	r2, [pc, #156]	@ (8003778 <HAL_SPI_MspInit+0x194>)
 80036da:	f043 0308 	orr.w	r3, r3, #8
 80036de:	6193      	str	r3, [r2, #24]
 80036e0:	4b25      	ldr	r3, [pc, #148]	@ (8003778 <HAL_SPI_MspInit+0x194>)
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80036ec:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80036f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f2:	2302      	movs	r3, #2
 80036f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036f6:	2303      	movs	r3, #3
 80036f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036fa:	f107 0318 	add.w	r3, r7, #24
 80036fe:	4619      	mov	r1, r3
 8003700:	4822      	ldr	r0, [pc, #136]	@ (800378c <HAL_SPI_MspInit+0x1a8>)
 8003702:	f000 fcf9 	bl	80040f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003706:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800370a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800370c:	2300      	movs	r3, #0
 800370e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003710:	2300      	movs	r3, #0
 8003712:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003714:	f107 0318 	add.w	r3, r7, #24
 8003718:	4619      	mov	r1, r3
 800371a:	481c      	ldr	r0, [pc, #112]	@ (800378c <HAL_SPI_MspInit+0x1a8>)
 800371c:	f000 fcec 	bl	80040f8 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8003720:	4b1b      	ldr	r3, [pc, #108]	@ (8003790 <HAL_SPI_MspInit+0x1ac>)
 8003722:	4a1c      	ldr	r2, [pc, #112]	@ (8003794 <HAL_SPI_MspInit+0x1b0>)
 8003724:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003726:	4b1a      	ldr	r3, [pc, #104]	@ (8003790 <HAL_SPI_MspInit+0x1ac>)
 8003728:	2210      	movs	r2, #16
 800372a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800372c:	4b18      	ldr	r3, [pc, #96]	@ (8003790 <HAL_SPI_MspInit+0x1ac>)
 800372e:	2200      	movs	r2, #0
 8003730:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003732:	4b17      	ldr	r3, [pc, #92]	@ (8003790 <HAL_SPI_MspInit+0x1ac>)
 8003734:	2280      	movs	r2, #128	@ 0x80
 8003736:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003738:	4b15      	ldr	r3, [pc, #84]	@ (8003790 <HAL_SPI_MspInit+0x1ac>)
 800373a:	2200      	movs	r2, #0
 800373c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800373e:	4b14      	ldr	r3, [pc, #80]	@ (8003790 <HAL_SPI_MspInit+0x1ac>)
 8003740:	2200      	movs	r2, #0
 8003742:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003744:	4b12      	ldr	r3, [pc, #72]	@ (8003790 <HAL_SPI_MspInit+0x1ac>)
 8003746:	2200      	movs	r2, #0
 8003748:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800374a:	4b11      	ldr	r3, [pc, #68]	@ (8003790 <HAL_SPI_MspInit+0x1ac>)
 800374c:	2200      	movs	r2, #0
 800374e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003750:	480f      	ldr	r0, [pc, #60]	@ (8003790 <HAL_SPI_MspInit+0x1ac>)
 8003752:	f000 fae3 	bl	8003d1c <HAL_DMA_Init>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_SPI_MspInit+0x17c>
      Error_Handler();
 800375c:	f7ff ff0a 	bl	8003574 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a0b      	ldr	r2, [pc, #44]	@ (8003790 <HAL_SPI_MspInit+0x1ac>)
 8003764:	649a      	str	r2, [r3, #72]	@ 0x48
 8003766:	4a0a      	ldr	r2, [pc, #40]	@ (8003790 <HAL_SPI_MspInit+0x1ac>)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6253      	str	r3, [r2, #36]	@ 0x24
}
 800376c:	bf00      	nop
 800376e:	3728      	adds	r7, #40	@ 0x28
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40013000 	.word	0x40013000
 8003778:	40021000 	.word	0x40021000
 800377c:	40010800 	.word	0x40010800
 8003780:	20000138 	.word	0x20000138
 8003784:	40020030 	.word	0x40020030
 8003788:	40003800 	.word	0x40003800
 800378c:	40010c00 	.word	0x40010c00
 8003790:	2000017c 	.word	0x2000017c
 8003794:	40020058 	.word	0x40020058

08003798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800379c:	bf00      	nop
 800379e:	e7fd      	b.n	800379c <NMI_Handler+0x4>

080037a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037a4:	bf00      	nop
 80037a6:	e7fd      	b.n	80037a4 <HardFault_Handler+0x4>

080037a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037ac:	bf00      	nop
 80037ae:	e7fd      	b.n	80037ac <MemManage_Handler+0x4>

080037b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037b4:	bf00      	nop
 80037b6:	e7fd      	b.n	80037b4 <BusFault_Handler+0x4>

080037b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037bc:	bf00      	nop
 80037be:	e7fd      	b.n	80037bc <UsageFault_Handler+0x4>

080037c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037c4:	bf00      	nop
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr

080037cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037d0:	bf00      	nop
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr

080037d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037dc:	bf00      	nop
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr

080037e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037e8:	f000 f94a 	bl	8003a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037ec:	bf00      	nop
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80037f4:	4802      	ldr	r0, [pc, #8]	@ (8003800 <DMA1_Channel3_IRQHandler+0x10>)
 80037f6:	f000 fb4b 	bl	8003e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000138 	.word	0x20000138

08003804 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003808:	4802      	ldr	r0, [pc, #8]	@ (8003814 <DMA1_Channel5_IRQHandler+0x10>)
 800380a:	f000 fb41 	bl	8003e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800380e:	bf00      	nop
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	2000017c 	.word	0x2000017c

08003818 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  return 1;
 800381c:	2301      	movs	r3, #1
}
 800381e:	4618      	mov	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr

08003826 <_kill>:

int _kill(int pid, int sig)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003830:	f001 ff36 	bl	80056a0 <__errno>
 8003834:	4603      	mov	r3, r0
 8003836:	2216      	movs	r2, #22
 8003838:	601a      	str	r2, [r3, #0]
  return -1;
 800383a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <_exit>:

void _exit (int status)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800384e:	f04f 31ff 	mov.w	r1, #4294967295
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff ffe7 	bl	8003826 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003858:	bf00      	nop
 800385a:	e7fd      	b.n	8003858 <_exit+0x12>

0800385c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	e00a      	b.n	8003884 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800386e:	f3af 8000 	nop.w
 8003872:	4601      	mov	r1, r0
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	60ba      	str	r2, [r7, #8]
 800387a:	b2ca      	uxtb	r2, r1
 800387c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	3301      	adds	r3, #1
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	429a      	cmp	r2, r3
 800388a:	dbf0      	blt.n	800386e <_read+0x12>
  }

  return len;
 800388c:	687b      	ldr	r3, [r7, #4]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b086      	sub	sp, #24
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	e009      	b.n	80038bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	60ba      	str	r2, [r7, #8]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	3301      	adds	r3, #1
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	dbf1      	blt.n	80038a8 <_write+0x12>
  }
  return len;
 80038c4:	687b      	ldr	r3, [r7, #4]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <_close>:

int _close(int file)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80038d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr

080038e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80038f4:	605a      	str	r2, [r3, #4]
  return 0;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr

08003902 <_isatty>:

int _isatty(int file)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800390a:	2301      	movs	r3, #1
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr

08003916 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003916:	b480      	push	{r7}
 8003918:	b085      	sub	sp, #20
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr
	...

08003930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003938:	4a14      	ldr	r2, [pc, #80]	@ (800398c <_sbrk+0x5c>)
 800393a:	4b15      	ldr	r3, [pc, #84]	@ (8003990 <_sbrk+0x60>)
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003944:	4b13      	ldr	r3, [pc, #76]	@ (8003994 <_sbrk+0x64>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d102      	bne.n	8003952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800394c:	4b11      	ldr	r3, [pc, #68]	@ (8003994 <_sbrk+0x64>)
 800394e:	4a12      	ldr	r2, [pc, #72]	@ (8003998 <_sbrk+0x68>)
 8003950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003952:	4b10      	ldr	r3, [pc, #64]	@ (8003994 <_sbrk+0x64>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4413      	add	r3, r2
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	429a      	cmp	r2, r3
 800395e:	d207      	bcs.n	8003970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003960:	f001 fe9e 	bl	80056a0 <__errno>
 8003964:	4603      	mov	r3, r0
 8003966:	220c      	movs	r2, #12
 8003968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800396a:	f04f 33ff 	mov.w	r3, #4294967295
 800396e:	e009      	b.n	8003984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003970:	4b08      	ldr	r3, [pc, #32]	@ (8003994 <_sbrk+0x64>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003976:	4b07      	ldr	r3, [pc, #28]	@ (8003994 <_sbrk+0x64>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4413      	add	r3, r2
 800397e:	4a05      	ldr	r2, [pc, #20]	@ (8003994 <_sbrk+0x64>)
 8003980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003982:	68fb      	ldr	r3, [r7, #12]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20005000 	.word	0x20005000
 8003990:	00000400 	.word	0x00000400
 8003994:	200036b4 	.word	0x200036b4
 8003998:	20003808 	.word	0x20003808

0800399c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039a0:	bf00      	nop
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr

080039a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80039a8:	f7ff fff8 	bl	800399c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039ac:	480b      	ldr	r0, [pc, #44]	@ (80039dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80039ae:	490c      	ldr	r1, [pc, #48]	@ (80039e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80039b0:	4a0c      	ldr	r2, [pc, #48]	@ (80039e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80039b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039b4:	e002      	b.n	80039bc <LoopCopyDataInit>

080039b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039ba:	3304      	adds	r3, #4

080039bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039c0:	d3f9      	bcc.n	80039b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039c2:	4a09      	ldr	r2, [pc, #36]	@ (80039e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80039c4:	4c09      	ldr	r4, [pc, #36]	@ (80039ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039c8:	e001      	b.n	80039ce <LoopFillZerobss>

080039ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039cc:	3204      	adds	r2, #4

080039ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039d0:	d3fb      	bcc.n	80039ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80039d2:	f001 fe6b 	bl	80056ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039d6:	f7fe fa07 	bl	8001de8 <main>
  bx lr
 80039da:	4770      	bx	lr
  ldr r0, =_sdata
 80039dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039e0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80039e4:	0800756c 	.word	0x0800756c
  ldr r2, =_sbss
 80039e8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80039ec:	20003808 	.word	0x20003808

080039f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039f0:	e7fe      	b.n	80039f0 <ADC1_2_IRQHandler>
	...

080039f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039f8:	4b08      	ldr	r3, [pc, #32]	@ (8003a1c <HAL_Init+0x28>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a07      	ldr	r2, [pc, #28]	@ (8003a1c <HAL_Init+0x28>)
 80039fe:	f043 0310 	orr.w	r3, r3, #16
 8003a02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a04:	2003      	movs	r0, #3
 8003a06:	f000 f947 	bl	8003c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a0a:	200f      	movs	r0, #15
 8003a0c:	f000 f808 	bl	8003a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a10:	f7ff fdb6 	bl	8003580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40022000 	.word	0x40022000

08003a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a28:	4b12      	ldr	r3, [pc, #72]	@ (8003a74 <HAL_InitTick+0x54>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	4b12      	ldr	r3, [pc, #72]	@ (8003a78 <HAL_InitTick+0x58>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	4619      	mov	r1, r3
 8003a32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f95f 	bl	8003d02 <HAL_SYSTICK_Config>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e00e      	b.n	8003a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b0f      	cmp	r3, #15
 8003a52:	d80a      	bhi.n	8003a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a54:	2200      	movs	r2, #0
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5c:	f000 f927 	bl	8003cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a60:	4a06      	ldr	r2, [pc, #24]	@ (8003a7c <HAL_InitTick+0x5c>)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	e000      	b.n	8003a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20000000 	.word	0x20000000
 8003a78:	20000008 	.word	0x20000008
 8003a7c:	20000004 	.word	0x20000004

08003a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a84:	4b05      	ldr	r3, [pc, #20]	@ (8003a9c <HAL_IncTick+0x1c>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4b05      	ldr	r3, [pc, #20]	@ (8003aa0 <HAL_IncTick+0x20>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4413      	add	r3, r2
 8003a90:	4a03      	ldr	r2, [pc, #12]	@ (8003aa0 <HAL_IncTick+0x20>)
 8003a92:	6013      	str	r3, [r2, #0]
}
 8003a94:	bf00      	nop
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr
 8003a9c:	20000008 	.word	0x20000008
 8003aa0:	200036b8 	.word	0x200036b8

08003aa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8003aa8:	4b02      	ldr	r3, [pc, #8]	@ (8003ab4 <HAL_GetTick+0x10>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr
 8003ab4:	200036b8 	.word	0x200036b8

08003ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ac0:	f7ff fff0 	bl	8003aa4 <HAL_GetTick>
 8003ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad0:	d005      	beq.n	8003ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8003afc <HAL_Delay+0x44>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4413      	add	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ade:	bf00      	nop
 8003ae0:	f7ff ffe0 	bl	8003aa4 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d8f7      	bhi.n	8003ae0 <HAL_Delay+0x28>
  {
  }
}
 8003af0:	bf00      	nop
 8003af2:	bf00      	nop
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000008 	.word	0x20000008

08003b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b10:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <__NVIC_SetPriorityGrouping+0x44>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b32:	4a04      	ldr	r2, [pc, #16]	@ (8003b44 <__NVIC_SetPriorityGrouping+0x44>)
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	60d3      	str	r3, [r2, #12]
}
 8003b38:	bf00      	nop
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	e000ed00 	.word	0xe000ed00

08003b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b4c:	4b04      	ldr	r3, [pc, #16]	@ (8003b60 <__NVIC_GetPriorityGrouping+0x18>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	0a1b      	lsrs	r3, r3, #8
 8003b52:	f003 0307 	and.w	r3, r3, #7
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	e000ed00 	.word	0xe000ed00

08003b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	db0b      	blt.n	8003b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b76:	79fb      	ldrb	r3, [r7, #7]
 8003b78:	f003 021f 	and.w	r2, r3, #31
 8003b7c:	4906      	ldr	r1, [pc, #24]	@ (8003b98 <__NVIC_EnableIRQ+0x34>)
 8003b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b82:	095b      	lsrs	r3, r3, #5
 8003b84:	2001      	movs	r0, #1
 8003b86:	fa00 f202 	lsl.w	r2, r0, r2
 8003b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr
 8003b98:	e000e100 	.word	0xe000e100

08003b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	6039      	str	r1, [r7, #0]
 8003ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	db0a      	blt.n	8003bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	490c      	ldr	r1, [pc, #48]	@ (8003be8 <__NVIC_SetPriority+0x4c>)
 8003bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bba:	0112      	lsls	r2, r2, #4
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bc4:	e00a      	b.n	8003bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	4908      	ldr	r1, [pc, #32]	@ (8003bec <__NVIC_SetPriority+0x50>)
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	3b04      	subs	r3, #4
 8003bd4:	0112      	lsls	r2, r2, #4
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	440b      	add	r3, r1
 8003bda:	761a      	strb	r2, [r3, #24]
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	e000e100 	.word	0xe000e100
 8003bec:	e000ed00 	.word	0xe000ed00

08003bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b089      	sub	sp, #36	@ 0x24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f1c3 0307 	rsb	r3, r3, #7
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	bf28      	it	cs
 8003c0e:	2304      	movcs	r3, #4
 8003c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	3304      	adds	r3, #4
 8003c16:	2b06      	cmp	r3, #6
 8003c18:	d902      	bls.n	8003c20 <NVIC_EncodePriority+0x30>
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	3b03      	subs	r3, #3
 8003c1e:	e000      	b.n	8003c22 <NVIC_EncodePriority+0x32>
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c24:	f04f 32ff 	mov.w	r2, #4294967295
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43da      	mvns	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	401a      	ands	r2, r3
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c38:	f04f 31ff 	mov.w	r1, #4294967295
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c42:	43d9      	mvns	r1, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c48:	4313      	orrs	r3, r2
         );
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3724      	adds	r7, #36	@ 0x24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr

08003c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c64:	d301      	bcc.n	8003c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c66:	2301      	movs	r3, #1
 8003c68:	e00f      	b.n	8003c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c94 <SysTick_Config+0x40>)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c72:	210f      	movs	r1, #15
 8003c74:	f04f 30ff 	mov.w	r0, #4294967295
 8003c78:	f7ff ff90 	bl	8003b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c7c:	4b05      	ldr	r3, [pc, #20]	@ (8003c94 <SysTick_Config+0x40>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c82:	4b04      	ldr	r3, [pc, #16]	@ (8003c94 <SysTick_Config+0x40>)
 8003c84:	2207      	movs	r2, #7
 8003c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	e000e010 	.word	0xe000e010

08003c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff ff2d 	bl	8003b00 <__NVIC_SetPriorityGrouping>
}
 8003ca6:	bf00      	nop
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b086      	sub	sp, #24
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	607a      	str	r2, [r7, #4]
 8003cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cc0:	f7ff ff42 	bl	8003b48 <__NVIC_GetPriorityGrouping>
 8003cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	6978      	ldr	r0, [r7, #20]
 8003ccc:	f7ff ff90 	bl	8003bf0 <NVIC_EncodePriority>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff ff5f 	bl	8003b9c <__NVIC_SetPriority>
}
 8003cde:	bf00      	nop
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	4603      	mov	r3, r0
 8003cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff ff35 	bl	8003b64 <__NVIC_EnableIRQ>
}
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff ffa2 	bl	8003c54 <SysTick_Config>
 8003d10:	4603      	mov	r3, r0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e043      	b.n	8003dba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	4b22      	ldr	r3, [pc, #136]	@ (8003dc4 <HAL_DMA_Init+0xa8>)
 8003d3a:	4413      	add	r3, r2
 8003d3c:	4a22      	ldr	r2, [pc, #136]	@ (8003dc8 <HAL_DMA_Init+0xac>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	091b      	lsrs	r3, r3, #4
 8003d44:	009a      	lsls	r2, r3, #2
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a1f      	ldr	r2, [pc, #124]	@ (8003dcc <HAL_DMA_Init+0xb0>)
 8003d4e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003d66:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003d6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr
 8003dc4:	bffdfff8 	.word	0xbffdfff8
 8003dc8:	cccccccd 	.word	0xcccccccd
 8003dcc:	40020000 	.word	0x40020000

08003dd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_DMA_Start_IT+0x20>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e04b      	b.n	8003e88 <HAL_DMA_Start_IT+0xb8>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d13a      	bne.n	8003e7a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0201 	bic.w	r2, r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f937 	bl	800409c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d008      	beq.n	8003e48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 020e 	orr.w	r2, r2, #14
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	e00f      	b.n	8003e68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0204 	bic.w	r2, r2, #4
 8003e56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 020a 	orr.w	r2, r2, #10
 8003e66:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	e005      	b.n	8003e86 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e82:	2302      	movs	r3, #2
 8003e84:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eac:	2204      	movs	r2, #4
 8003eae:	409a      	lsls	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d04f      	beq.n	8003f58 <HAL_DMA_IRQHandler+0xc8>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d04a      	beq.n	8003f58 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d107      	bne.n	8003ee0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0204 	bic.w	r2, r2, #4
 8003ede:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a66      	ldr	r2, [pc, #408]	@ (8004080 <HAL_DMA_IRQHandler+0x1f0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d029      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xae>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a65      	ldr	r2, [pc, #404]	@ (8004084 <HAL_DMA_IRQHandler+0x1f4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d022      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xaa>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a63      	ldr	r2, [pc, #396]	@ (8004088 <HAL_DMA_IRQHandler+0x1f8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01a      	beq.n	8003f34 <HAL_DMA_IRQHandler+0xa4>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a62      	ldr	r2, [pc, #392]	@ (800408c <HAL_DMA_IRQHandler+0x1fc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d012      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x9e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a60      	ldr	r2, [pc, #384]	@ (8004090 <HAL_DMA_IRQHandler+0x200>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00a      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x98>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a5f      	ldr	r2, [pc, #380]	@ (8004094 <HAL_DMA_IRQHandler+0x204>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d102      	bne.n	8003f22 <HAL_DMA_IRQHandler+0x92>
 8003f1c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003f20:	e00e      	b.n	8003f40 <HAL_DMA_IRQHandler+0xb0>
 8003f22:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003f26:	e00b      	b.n	8003f40 <HAL_DMA_IRQHandler+0xb0>
 8003f28:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003f2c:	e008      	b.n	8003f40 <HAL_DMA_IRQHandler+0xb0>
 8003f2e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f32:	e005      	b.n	8003f40 <HAL_DMA_IRQHandler+0xb0>
 8003f34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f38:	e002      	b.n	8003f40 <HAL_DMA_IRQHandler+0xb0>
 8003f3a:	2340      	movs	r3, #64	@ 0x40
 8003f3c:	e000      	b.n	8003f40 <HAL_DMA_IRQHandler+0xb0>
 8003f3e:	2304      	movs	r3, #4
 8003f40:	4a55      	ldr	r2, [pc, #340]	@ (8004098 <HAL_DMA_IRQHandler+0x208>)
 8003f42:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8094 	beq.w	8004076 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003f56:	e08e      	b.n	8004076 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d056      	beq.n	8004016 <HAL_DMA_IRQHandler+0x186>
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d051      	beq.n	8004016 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10b      	bne.n	8003f98 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 020a 	bic.w	r2, r2, #10
 8003f8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a38      	ldr	r2, [pc, #224]	@ (8004080 <HAL_DMA_IRQHandler+0x1f0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d029      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0x166>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a37      	ldr	r2, [pc, #220]	@ (8004084 <HAL_DMA_IRQHandler+0x1f4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d022      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0x162>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a35      	ldr	r2, [pc, #212]	@ (8004088 <HAL_DMA_IRQHandler+0x1f8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d01a      	beq.n	8003fec <HAL_DMA_IRQHandler+0x15c>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a34      	ldr	r2, [pc, #208]	@ (800408c <HAL_DMA_IRQHandler+0x1fc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d012      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x156>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a32      	ldr	r2, [pc, #200]	@ (8004090 <HAL_DMA_IRQHandler+0x200>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x150>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a31      	ldr	r2, [pc, #196]	@ (8004094 <HAL_DMA_IRQHandler+0x204>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d102      	bne.n	8003fda <HAL_DMA_IRQHandler+0x14a>
 8003fd4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003fd8:	e00e      	b.n	8003ff8 <HAL_DMA_IRQHandler+0x168>
 8003fda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fde:	e00b      	b.n	8003ff8 <HAL_DMA_IRQHandler+0x168>
 8003fe0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003fe4:	e008      	b.n	8003ff8 <HAL_DMA_IRQHandler+0x168>
 8003fe6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003fea:	e005      	b.n	8003ff8 <HAL_DMA_IRQHandler+0x168>
 8003fec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ff0:	e002      	b.n	8003ff8 <HAL_DMA_IRQHandler+0x168>
 8003ff2:	2320      	movs	r3, #32
 8003ff4:	e000      	b.n	8003ff8 <HAL_DMA_IRQHandler+0x168>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	4a27      	ldr	r2, [pc, #156]	@ (8004098 <HAL_DMA_IRQHandler+0x208>)
 8003ffa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004008:	2b00      	cmp	r3, #0
 800400a:	d034      	beq.n	8004076 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004014:	e02f      	b.n	8004076 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401a:	2208      	movs	r2, #8
 800401c:	409a      	lsls	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	4013      	ands	r3, r2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d028      	beq.n	8004078 <HAL_DMA_IRQHandler+0x1e8>
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b00      	cmp	r3, #0
 800402e:	d023      	beq.n	8004078 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 020e 	bic.w	r2, r2, #14
 800403e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004048:	2101      	movs	r1, #1
 800404a:	fa01 f202 	lsl.w	r2, r1, r2
 800404e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406a:	2b00      	cmp	r3, #0
 800406c:	d004      	beq.n	8004078 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	4798      	blx	r3
    }
  }
  return;
 8004076:	bf00      	nop
 8004078:	bf00      	nop
}
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40020008 	.word	0x40020008
 8004084:	4002001c 	.word	0x4002001c
 8004088:	40020030 	.word	0x40020030
 800408c:	40020044 	.word	0x40020044
 8004090:	40020058 	.word	0x40020058
 8004094:	4002006c 	.word	0x4002006c
 8004098:	40020000 	.word	0x40020000

0800409c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b2:	2101      	movs	r1, #1
 80040b4:	fa01 f202 	lsl.w	r2, r1, r2
 80040b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b10      	cmp	r3, #16
 80040c8:	d108      	bne.n	80040dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040da:	e007      	b.n	80040ec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	60da      	str	r2, [r3, #12]
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr
	...

080040f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b08b      	sub	sp, #44	@ 0x2c
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004102:	2300      	movs	r3, #0
 8004104:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004106:	2300      	movs	r3, #0
 8004108:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800410a:	e169      	b.n	80043e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800410c:	2201      	movs	r2, #1
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	4013      	ands	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	429a      	cmp	r2, r3
 8004126:	f040 8158 	bne.w	80043da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	4a9a      	ldr	r2, [pc, #616]	@ (8004398 <HAL_GPIO_Init+0x2a0>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d05e      	beq.n	80041f2 <HAL_GPIO_Init+0xfa>
 8004134:	4a98      	ldr	r2, [pc, #608]	@ (8004398 <HAL_GPIO_Init+0x2a0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d875      	bhi.n	8004226 <HAL_GPIO_Init+0x12e>
 800413a:	4a98      	ldr	r2, [pc, #608]	@ (800439c <HAL_GPIO_Init+0x2a4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d058      	beq.n	80041f2 <HAL_GPIO_Init+0xfa>
 8004140:	4a96      	ldr	r2, [pc, #600]	@ (800439c <HAL_GPIO_Init+0x2a4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d86f      	bhi.n	8004226 <HAL_GPIO_Init+0x12e>
 8004146:	4a96      	ldr	r2, [pc, #600]	@ (80043a0 <HAL_GPIO_Init+0x2a8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d052      	beq.n	80041f2 <HAL_GPIO_Init+0xfa>
 800414c:	4a94      	ldr	r2, [pc, #592]	@ (80043a0 <HAL_GPIO_Init+0x2a8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d869      	bhi.n	8004226 <HAL_GPIO_Init+0x12e>
 8004152:	4a94      	ldr	r2, [pc, #592]	@ (80043a4 <HAL_GPIO_Init+0x2ac>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d04c      	beq.n	80041f2 <HAL_GPIO_Init+0xfa>
 8004158:	4a92      	ldr	r2, [pc, #584]	@ (80043a4 <HAL_GPIO_Init+0x2ac>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d863      	bhi.n	8004226 <HAL_GPIO_Init+0x12e>
 800415e:	4a92      	ldr	r2, [pc, #584]	@ (80043a8 <HAL_GPIO_Init+0x2b0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d046      	beq.n	80041f2 <HAL_GPIO_Init+0xfa>
 8004164:	4a90      	ldr	r2, [pc, #576]	@ (80043a8 <HAL_GPIO_Init+0x2b0>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d85d      	bhi.n	8004226 <HAL_GPIO_Init+0x12e>
 800416a:	2b12      	cmp	r3, #18
 800416c:	d82a      	bhi.n	80041c4 <HAL_GPIO_Init+0xcc>
 800416e:	2b12      	cmp	r3, #18
 8004170:	d859      	bhi.n	8004226 <HAL_GPIO_Init+0x12e>
 8004172:	a201      	add	r2, pc, #4	@ (adr r2, 8004178 <HAL_GPIO_Init+0x80>)
 8004174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004178:	080041f3 	.word	0x080041f3
 800417c:	080041cd 	.word	0x080041cd
 8004180:	080041df 	.word	0x080041df
 8004184:	08004221 	.word	0x08004221
 8004188:	08004227 	.word	0x08004227
 800418c:	08004227 	.word	0x08004227
 8004190:	08004227 	.word	0x08004227
 8004194:	08004227 	.word	0x08004227
 8004198:	08004227 	.word	0x08004227
 800419c:	08004227 	.word	0x08004227
 80041a0:	08004227 	.word	0x08004227
 80041a4:	08004227 	.word	0x08004227
 80041a8:	08004227 	.word	0x08004227
 80041ac:	08004227 	.word	0x08004227
 80041b0:	08004227 	.word	0x08004227
 80041b4:	08004227 	.word	0x08004227
 80041b8:	08004227 	.word	0x08004227
 80041bc:	080041d5 	.word	0x080041d5
 80041c0:	080041e9 	.word	0x080041e9
 80041c4:	4a79      	ldr	r2, [pc, #484]	@ (80043ac <HAL_GPIO_Init+0x2b4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d013      	beq.n	80041f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80041ca:	e02c      	b.n	8004226 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	623b      	str	r3, [r7, #32]
          break;
 80041d2:	e029      	b.n	8004228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	3304      	adds	r3, #4
 80041da:	623b      	str	r3, [r7, #32]
          break;
 80041dc:	e024      	b.n	8004228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	3308      	adds	r3, #8
 80041e4:	623b      	str	r3, [r7, #32]
          break;
 80041e6:	e01f      	b.n	8004228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	330c      	adds	r3, #12
 80041ee:	623b      	str	r3, [r7, #32]
          break;
 80041f0:	e01a      	b.n	8004228 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d102      	bne.n	8004200 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80041fa:	2304      	movs	r3, #4
 80041fc:	623b      	str	r3, [r7, #32]
          break;
 80041fe:	e013      	b.n	8004228 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d105      	bne.n	8004214 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004208:	2308      	movs	r3, #8
 800420a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	611a      	str	r2, [r3, #16]
          break;
 8004212:	e009      	b.n	8004228 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004214:	2308      	movs	r3, #8
 8004216:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	69fa      	ldr	r2, [r7, #28]
 800421c:	615a      	str	r2, [r3, #20]
          break;
 800421e:	e003      	b.n	8004228 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004220:	2300      	movs	r3, #0
 8004222:	623b      	str	r3, [r7, #32]
          break;
 8004224:	e000      	b.n	8004228 <HAL_GPIO_Init+0x130>
          break;
 8004226:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	2bff      	cmp	r3, #255	@ 0xff
 800422c:	d801      	bhi.n	8004232 <HAL_GPIO_Init+0x13a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	e001      	b.n	8004236 <HAL_GPIO_Init+0x13e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3304      	adds	r3, #4
 8004236:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2bff      	cmp	r3, #255	@ 0xff
 800423c:	d802      	bhi.n	8004244 <HAL_GPIO_Init+0x14c>
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	e002      	b.n	800424a <HAL_GPIO_Init+0x152>
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	3b08      	subs	r3, #8
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	210f      	movs	r1, #15
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	fa01 f303 	lsl.w	r3, r1, r3
 8004258:	43db      	mvns	r3, r3
 800425a:	401a      	ands	r2, r3
 800425c:	6a39      	ldr	r1, [r7, #32]
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	fa01 f303 	lsl.w	r3, r1, r3
 8004264:	431a      	orrs	r2, r3
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 80b1 	beq.w	80043da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004278:	4b4d      	ldr	r3, [pc, #308]	@ (80043b0 <HAL_GPIO_Init+0x2b8>)
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	4a4c      	ldr	r2, [pc, #304]	@ (80043b0 <HAL_GPIO_Init+0x2b8>)
 800427e:	f043 0301 	orr.w	r3, r3, #1
 8004282:	6193      	str	r3, [r2, #24]
 8004284:	4b4a      	ldr	r3, [pc, #296]	@ (80043b0 <HAL_GPIO_Init+0x2b8>)
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004290:	4a48      	ldr	r2, [pc, #288]	@ (80043b4 <HAL_GPIO_Init+0x2bc>)
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004294:	089b      	lsrs	r3, r3, #2
 8004296:	3302      	adds	r3, #2
 8004298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800429c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800429e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a0:	f003 0303 	and.w	r3, r3, #3
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	220f      	movs	r2, #15
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	43db      	mvns	r3, r3
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4013      	ands	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a40      	ldr	r2, [pc, #256]	@ (80043b8 <HAL_GPIO_Init+0x2c0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d013      	beq.n	80042e4 <HAL_GPIO_Init+0x1ec>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a3f      	ldr	r2, [pc, #252]	@ (80043bc <HAL_GPIO_Init+0x2c4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d00d      	beq.n	80042e0 <HAL_GPIO_Init+0x1e8>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a3e      	ldr	r2, [pc, #248]	@ (80043c0 <HAL_GPIO_Init+0x2c8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d007      	beq.n	80042dc <HAL_GPIO_Init+0x1e4>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a3d      	ldr	r2, [pc, #244]	@ (80043c4 <HAL_GPIO_Init+0x2cc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d101      	bne.n	80042d8 <HAL_GPIO_Init+0x1e0>
 80042d4:	2303      	movs	r3, #3
 80042d6:	e006      	b.n	80042e6 <HAL_GPIO_Init+0x1ee>
 80042d8:	2304      	movs	r3, #4
 80042da:	e004      	b.n	80042e6 <HAL_GPIO_Init+0x1ee>
 80042dc:	2302      	movs	r3, #2
 80042de:	e002      	b.n	80042e6 <HAL_GPIO_Init+0x1ee>
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <HAL_GPIO_Init+0x1ee>
 80042e4:	2300      	movs	r3, #0
 80042e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e8:	f002 0203 	and.w	r2, r2, #3
 80042ec:	0092      	lsls	r2, r2, #2
 80042ee:	4093      	lsls	r3, r2
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80042f6:	492f      	ldr	r1, [pc, #188]	@ (80043b4 <HAL_GPIO_Init+0x2bc>)
 80042f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fa:	089b      	lsrs	r3, r3, #2
 80042fc:	3302      	adds	r3, #2
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d006      	beq.n	800431e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004310:	4b2d      	ldr	r3, [pc, #180]	@ (80043c8 <HAL_GPIO_Init+0x2d0>)
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	492c      	ldr	r1, [pc, #176]	@ (80043c8 <HAL_GPIO_Init+0x2d0>)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	4313      	orrs	r3, r2
 800431a:	608b      	str	r3, [r1, #8]
 800431c:	e006      	b.n	800432c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800431e:	4b2a      	ldr	r3, [pc, #168]	@ (80043c8 <HAL_GPIO_Init+0x2d0>)
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	43db      	mvns	r3, r3
 8004326:	4928      	ldr	r1, [pc, #160]	@ (80043c8 <HAL_GPIO_Init+0x2d0>)
 8004328:	4013      	ands	r3, r2
 800432a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d006      	beq.n	8004346 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004338:	4b23      	ldr	r3, [pc, #140]	@ (80043c8 <HAL_GPIO_Init+0x2d0>)
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	4922      	ldr	r1, [pc, #136]	@ (80043c8 <HAL_GPIO_Init+0x2d0>)
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	4313      	orrs	r3, r2
 8004342:	60cb      	str	r3, [r1, #12]
 8004344:	e006      	b.n	8004354 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004346:	4b20      	ldr	r3, [pc, #128]	@ (80043c8 <HAL_GPIO_Init+0x2d0>)
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	43db      	mvns	r3, r3
 800434e:	491e      	ldr	r1, [pc, #120]	@ (80043c8 <HAL_GPIO_Init+0x2d0>)
 8004350:	4013      	ands	r3, r2
 8004352:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d006      	beq.n	800436e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004360:	4b19      	ldr	r3, [pc, #100]	@ (80043c8 <HAL_GPIO_Init+0x2d0>)
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	4918      	ldr	r1, [pc, #96]	@ (80043c8 <HAL_GPIO_Init+0x2d0>)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	4313      	orrs	r3, r2
 800436a:	604b      	str	r3, [r1, #4]
 800436c:	e006      	b.n	800437c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800436e:	4b16      	ldr	r3, [pc, #88]	@ (80043c8 <HAL_GPIO_Init+0x2d0>)
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	43db      	mvns	r3, r3
 8004376:	4914      	ldr	r1, [pc, #80]	@ (80043c8 <HAL_GPIO_Init+0x2d0>)
 8004378:	4013      	ands	r3, r2
 800437a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d021      	beq.n	80043cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004388:	4b0f      	ldr	r3, [pc, #60]	@ (80043c8 <HAL_GPIO_Init+0x2d0>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	490e      	ldr	r1, [pc, #56]	@ (80043c8 <HAL_GPIO_Init+0x2d0>)
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	4313      	orrs	r3, r2
 8004392:	600b      	str	r3, [r1, #0]
 8004394:	e021      	b.n	80043da <HAL_GPIO_Init+0x2e2>
 8004396:	bf00      	nop
 8004398:	10320000 	.word	0x10320000
 800439c:	10310000 	.word	0x10310000
 80043a0:	10220000 	.word	0x10220000
 80043a4:	10210000 	.word	0x10210000
 80043a8:	10120000 	.word	0x10120000
 80043ac:	10110000 	.word	0x10110000
 80043b0:	40021000 	.word	0x40021000
 80043b4:	40010000 	.word	0x40010000
 80043b8:	40010800 	.word	0x40010800
 80043bc:	40010c00 	.word	0x40010c00
 80043c0:	40011000 	.word	0x40011000
 80043c4:	40011400 	.word	0x40011400
 80043c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80043cc:	4b0b      	ldr	r3, [pc, #44]	@ (80043fc <HAL_GPIO_Init+0x304>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	43db      	mvns	r3, r3
 80043d4:	4909      	ldr	r1, [pc, #36]	@ (80043fc <HAL_GPIO_Init+0x304>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	3301      	adds	r3, #1
 80043de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f47f ae8e 	bne.w	800410c <HAL_GPIO_Init+0x14>
  }
}
 80043f0:	bf00      	nop
 80043f2:	bf00      	nop
 80043f4:	372c      	adds	r7, #44	@ 0x2c
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr
 80043fc:	40010400 	.word	0x40010400

08004400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	807b      	strh	r3, [r7, #2]
 800440c:	4613      	mov	r3, r2
 800440e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004410:	787b      	ldrb	r3, [r7, #1]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004416:	887a      	ldrh	r2, [r7, #2]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800441c:	e003      	b.n	8004426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800441e:	887b      	ldrh	r3, [r7, #2]
 8004420:	041a      	lsls	r2, r3, #16
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	611a      	str	r2, [r3, #16]
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr

08004430 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e272      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 8087 	beq.w	800455e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004450:	4b92      	ldr	r3, [pc, #584]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f003 030c 	and.w	r3, r3, #12
 8004458:	2b04      	cmp	r3, #4
 800445a:	d00c      	beq.n	8004476 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800445c:	4b8f      	ldr	r3, [pc, #572]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f003 030c 	and.w	r3, r3, #12
 8004464:	2b08      	cmp	r3, #8
 8004466:	d112      	bne.n	800448e <HAL_RCC_OscConfig+0x5e>
 8004468:	4b8c      	ldr	r3, [pc, #560]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004474:	d10b      	bne.n	800448e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004476:	4b89      	ldr	r3, [pc, #548]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d06c      	beq.n	800455c <HAL_RCC_OscConfig+0x12c>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d168      	bne.n	800455c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e24c      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004496:	d106      	bne.n	80044a6 <HAL_RCC_OscConfig+0x76>
 8004498:	4b80      	ldr	r3, [pc, #512]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a7f      	ldr	r2, [pc, #508]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 800449e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	e02e      	b.n	8004504 <HAL_RCC_OscConfig+0xd4>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10c      	bne.n	80044c8 <HAL_RCC_OscConfig+0x98>
 80044ae:	4b7b      	ldr	r3, [pc, #492]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a7a      	ldr	r2, [pc, #488]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 80044b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	4b78      	ldr	r3, [pc, #480]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a77      	ldr	r2, [pc, #476]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 80044c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	e01d      	b.n	8004504 <HAL_RCC_OscConfig+0xd4>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044d0:	d10c      	bne.n	80044ec <HAL_RCC_OscConfig+0xbc>
 80044d2:	4b72      	ldr	r3, [pc, #456]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a71      	ldr	r2, [pc, #452]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 80044d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	4b6f      	ldr	r3, [pc, #444]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a6e      	ldr	r2, [pc, #440]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 80044e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	e00b      	b.n	8004504 <HAL_RCC_OscConfig+0xd4>
 80044ec:	4b6b      	ldr	r3, [pc, #428]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a6a      	ldr	r2, [pc, #424]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 80044f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	4b68      	ldr	r3, [pc, #416]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a67      	ldr	r2, [pc, #412]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 80044fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004502:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d013      	beq.n	8004534 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450c:	f7ff faca 	bl	8003aa4 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004514:	f7ff fac6 	bl	8003aa4 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	@ 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e200      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004526:	4b5d      	ldr	r3, [pc, #372]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0xe4>
 8004532:	e014      	b.n	800455e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004534:	f7ff fab6 	bl	8003aa4 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800453c:	f7ff fab2 	bl	8003aa4 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b64      	cmp	r3, #100	@ 0x64
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e1ec      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800454e:	4b53      	ldr	r3, [pc, #332]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f0      	bne.n	800453c <HAL_RCC_OscConfig+0x10c>
 800455a:	e000      	b.n	800455e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800455c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d063      	beq.n	8004632 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800456a:	4b4c      	ldr	r3, [pc, #304]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f003 030c 	and.w	r3, r3, #12
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00b      	beq.n	800458e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004576:	4b49      	ldr	r3, [pc, #292]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f003 030c 	and.w	r3, r3, #12
 800457e:	2b08      	cmp	r3, #8
 8004580:	d11c      	bne.n	80045bc <HAL_RCC_OscConfig+0x18c>
 8004582:	4b46      	ldr	r3, [pc, #280]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d116      	bne.n	80045bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800458e:	4b43      	ldr	r3, [pc, #268]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <HAL_RCC_OscConfig+0x176>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d001      	beq.n	80045a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e1c0      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a6:	4b3d      	ldr	r3, [pc, #244]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	4939      	ldr	r1, [pc, #228]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ba:	e03a      	b.n	8004632 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d020      	beq.n	8004606 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045c4:	4b36      	ldr	r3, [pc, #216]	@ (80046a0 <HAL_RCC_OscConfig+0x270>)
 80045c6:	2201      	movs	r2, #1
 80045c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ca:	f7ff fa6b 	bl	8003aa4 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045d2:	f7ff fa67 	bl	8003aa4 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e1a1      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e4:	4b2d      	ldr	r3, [pc, #180]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f0      	beq.n	80045d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f0:	4b2a      	ldr	r3, [pc, #168]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	4927      	ldr	r1, [pc, #156]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 8004600:	4313      	orrs	r3, r2
 8004602:	600b      	str	r3, [r1, #0]
 8004604:	e015      	b.n	8004632 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004606:	4b26      	ldr	r3, [pc, #152]	@ (80046a0 <HAL_RCC_OscConfig+0x270>)
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460c:	f7ff fa4a 	bl	8003aa4 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004614:	f7ff fa46 	bl	8003aa4 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e180      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004626:	4b1d      	ldr	r3, [pc, #116]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f0      	bne.n	8004614 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b00      	cmp	r3, #0
 800463c:	d03a      	beq.n	80046b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d019      	beq.n	800467a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004646:	4b17      	ldr	r3, [pc, #92]	@ (80046a4 <HAL_RCC_OscConfig+0x274>)
 8004648:	2201      	movs	r2, #1
 800464a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800464c:	f7ff fa2a 	bl	8003aa4 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004654:	f7ff fa26 	bl	8003aa4 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e160      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004666:	4b0d      	ldr	r3, [pc, #52]	@ (800469c <HAL_RCC_OscConfig+0x26c>)
 8004668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004672:	2001      	movs	r0, #1
 8004674:	f000 fa9c 	bl	8004bb0 <RCC_Delay>
 8004678:	e01c      	b.n	80046b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800467a:	4b0a      	ldr	r3, [pc, #40]	@ (80046a4 <HAL_RCC_OscConfig+0x274>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004680:	f7ff fa10 	bl	8003aa4 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004686:	e00f      	b.n	80046a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004688:	f7ff fa0c 	bl	8003aa4 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d908      	bls.n	80046a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e146      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000
 80046a0:	42420000 	.word	0x42420000
 80046a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a8:	4b92      	ldr	r3, [pc, #584]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 80046aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1e9      	bne.n	8004688 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80a6 	beq.w	800480e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c2:	2300      	movs	r3, #0
 80046c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046c6:	4b8b      	ldr	r3, [pc, #556]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10d      	bne.n	80046ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046d2:	4b88      	ldr	r3, [pc, #544]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	4a87      	ldr	r2, [pc, #540]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 80046d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046dc:	61d3      	str	r3, [r2, #28]
 80046de:	4b85      	ldr	r3, [pc, #532]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e6:	60bb      	str	r3, [r7, #8]
 80046e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ea:	2301      	movs	r3, #1
 80046ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ee:	4b82      	ldr	r3, [pc, #520]	@ (80048f8 <HAL_RCC_OscConfig+0x4c8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d118      	bne.n	800472c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046fa:	4b7f      	ldr	r3, [pc, #508]	@ (80048f8 <HAL_RCC_OscConfig+0x4c8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a7e      	ldr	r2, [pc, #504]	@ (80048f8 <HAL_RCC_OscConfig+0x4c8>)
 8004700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004706:	f7ff f9cd 	bl	8003aa4 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800470e:	f7ff f9c9 	bl	8003aa4 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b64      	cmp	r3, #100	@ 0x64
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e103      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004720:	4b75      	ldr	r3, [pc, #468]	@ (80048f8 <HAL_RCC_OscConfig+0x4c8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0f0      	beq.n	800470e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d106      	bne.n	8004742 <HAL_RCC_OscConfig+0x312>
 8004734:	4b6f      	ldr	r3, [pc, #444]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	4a6e      	ldr	r2, [pc, #440]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	6213      	str	r3, [r2, #32]
 8004740:	e02d      	b.n	800479e <HAL_RCC_OscConfig+0x36e>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10c      	bne.n	8004764 <HAL_RCC_OscConfig+0x334>
 800474a:	4b6a      	ldr	r3, [pc, #424]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	4a69      	ldr	r2, [pc, #420]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	6213      	str	r3, [r2, #32]
 8004756:	4b67      	ldr	r3, [pc, #412]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	4a66      	ldr	r2, [pc, #408]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 800475c:	f023 0304 	bic.w	r3, r3, #4
 8004760:	6213      	str	r3, [r2, #32]
 8004762:	e01c      	b.n	800479e <HAL_RCC_OscConfig+0x36e>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b05      	cmp	r3, #5
 800476a:	d10c      	bne.n	8004786 <HAL_RCC_OscConfig+0x356>
 800476c:	4b61      	ldr	r3, [pc, #388]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	4a60      	ldr	r2, [pc, #384]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004772:	f043 0304 	orr.w	r3, r3, #4
 8004776:	6213      	str	r3, [r2, #32]
 8004778:	4b5e      	ldr	r3, [pc, #376]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	4a5d      	ldr	r2, [pc, #372]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 800477e:	f043 0301 	orr.w	r3, r3, #1
 8004782:	6213      	str	r3, [r2, #32]
 8004784:	e00b      	b.n	800479e <HAL_RCC_OscConfig+0x36e>
 8004786:	4b5b      	ldr	r3, [pc, #364]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	4a5a      	ldr	r2, [pc, #360]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	6213      	str	r3, [r2, #32]
 8004792:	4b58      	ldr	r3, [pc, #352]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	4a57      	ldr	r2, [pc, #348]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004798:	f023 0304 	bic.w	r3, r3, #4
 800479c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d015      	beq.n	80047d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a6:	f7ff f97d 	bl	8003aa4 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ac:	e00a      	b.n	80047c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ae:	f7ff f979 	bl	8003aa4 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047bc:	4293      	cmp	r3, r2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e0b1      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c4:	4b4b      	ldr	r3, [pc, #300]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0ee      	beq.n	80047ae <HAL_RCC_OscConfig+0x37e>
 80047d0:	e014      	b.n	80047fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d2:	f7ff f967 	bl	8003aa4 <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d8:	e00a      	b.n	80047f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047da:	f7ff f963 	bl	8003aa4 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e09b      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f0:	4b40      	ldr	r3, [pc, #256]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1ee      	bne.n	80047da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047fc:	7dfb      	ldrb	r3, [r7, #23]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d105      	bne.n	800480e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004802:	4b3c      	ldr	r3, [pc, #240]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	4a3b      	ldr	r2, [pc, #236]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004808:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800480c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 8087 	beq.w	8004926 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004818:	4b36      	ldr	r3, [pc, #216]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 030c 	and.w	r3, r3, #12
 8004820:	2b08      	cmp	r3, #8
 8004822:	d061      	beq.n	80048e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	2b02      	cmp	r3, #2
 800482a:	d146      	bne.n	80048ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800482c:	4b33      	ldr	r3, [pc, #204]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004832:	f7ff f937 	bl	8003aa4 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800483a:	f7ff f933 	bl	8003aa4 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e06d      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800484c:	4b29      	ldr	r3, [pc, #164]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1f0      	bne.n	800483a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004860:	d108      	bne.n	8004874 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004862:	4b24      	ldr	r3, [pc, #144]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	4921      	ldr	r1, [pc, #132]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004870:	4313      	orrs	r3, r2
 8004872:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004874:	4b1f      	ldr	r3, [pc, #124]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a19      	ldr	r1, [r3, #32]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	430b      	orrs	r3, r1
 8004886:	491b      	ldr	r1, [pc, #108]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004888:	4313      	orrs	r3, r2
 800488a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800488c:	4b1b      	ldr	r3, [pc, #108]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004892:	f7ff f907 	bl	8003aa4 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800489a:	f7ff f903 	bl	8003aa4 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e03d      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048ac:	4b11      	ldr	r3, [pc, #68]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x46a>
 80048b8:	e035      	b.n	8004926 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ba:	4b10      	ldr	r3, [pc, #64]	@ (80048fc <HAL_RCC_OscConfig+0x4cc>)
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c0:	f7ff f8f0 	bl	8003aa4 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c8:	f7ff f8ec 	bl	8003aa4 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e026      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048da:	4b06      	ldr	r3, [pc, #24]	@ (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x498>
 80048e6:	e01e      	b.n	8004926 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d107      	bne.n	8004900 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e019      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
 80048f4:	40021000 	.word	0x40021000
 80048f8:	40007000 	.word	0x40007000
 80048fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004900:	4b0b      	ldr	r3, [pc, #44]	@ (8004930 <HAL_RCC_OscConfig+0x500>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	429a      	cmp	r2, r3
 8004912:	d106      	bne.n	8004922 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800491e:	429a      	cmp	r2, r3
 8004920:	d001      	beq.n	8004926 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40021000 	.word	0x40021000

08004934 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e0d0      	b.n	8004aea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004948:	4b6a      	ldr	r3, [pc, #424]	@ (8004af4 <HAL_RCC_ClockConfig+0x1c0>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d910      	bls.n	8004978 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004956:	4b67      	ldr	r3, [pc, #412]	@ (8004af4 <HAL_RCC_ClockConfig+0x1c0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f023 0207 	bic.w	r2, r3, #7
 800495e:	4965      	ldr	r1, [pc, #404]	@ (8004af4 <HAL_RCC_ClockConfig+0x1c0>)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	4313      	orrs	r3, r2
 8004964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004966:	4b63      	ldr	r3, [pc, #396]	@ (8004af4 <HAL_RCC_ClockConfig+0x1c0>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d001      	beq.n	8004978 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0b8      	b.n	8004aea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d020      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004990:	4b59      	ldr	r3, [pc, #356]	@ (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	4a58      	ldr	r2, [pc, #352]	@ (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004996:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800499a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049a8:	4b53      	ldr	r3, [pc, #332]	@ (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	4a52      	ldr	r2, [pc, #328]	@ (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 80049ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80049b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b4:	4b50      	ldr	r3, [pc, #320]	@ (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	494d      	ldr	r1, [pc, #308]	@ (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d040      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d107      	bne.n	80049ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049da:	4b47      	ldr	r3, [pc, #284]	@ (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d115      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e07f      	b.n	8004aea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d107      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f2:	4b41      	ldr	r3, [pc, #260]	@ (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d109      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e073      	b.n	8004aea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a02:	4b3d      	ldr	r3, [pc, #244]	@ (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e06b      	b.n	8004aea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a12:	4b39      	ldr	r3, [pc, #228]	@ (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f023 0203 	bic.w	r2, r3, #3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	4936      	ldr	r1, [pc, #216]	@ (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a24:	f7ff f83e 	bl	8003aa4 <HAL_GetTick>
 8004a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2a:	e00a      	b.n	8004a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a2c:	f7ff f83a 	bl	8003aa4 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e053      	b.n	8004aea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a42:	4b2d      	ldr	r3, [pc, #180]	@ (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f003 020c 	and.w	r2, r3, #12
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d1eb      	bne.n	8004a2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a54:	4b27      	ldr	r3, [pc, #156]	@ (8004af4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d210      	bcs.n	8004a84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a62:	4b24      	ldr	r3, [pc, #144]	@ (8004af4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f023 0207 	bic.w	r2, r3, #7
 8004a6a:	4922      	ldr	r1, [pc, #136]	@ (8004af4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a72:	4b20      	ldr	r3, [pc, #128]	@ (8004af4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e032      	b.n	8004aea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d008      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a90:	4b19      	ldr	r3, [pc, #100]	@ (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	4916      	ldr	r1, [pc, #88]	@ (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004aae:	4b12      	ldr	r3, [pc, #72]	@ (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	490e      	ldr	r1, [pc, #56]	@ (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ac2:	f000 f821 	bl	8004b08 <HAL_RCC_GetSysClockFreq>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	091b      	lsrs	r3, r3, #4
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	490a      	ldr	r1, [pc, #40]	@ (8004afc <HAL_RCC_ClockConfig+0x1c8>)
 8004ad4:	5ccb      	ldrb	r3, [r1, r3]
 8004ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8004ada:	4a09      	ldr	r2, [pc, #36]	@ (8004b00 <HAL_RCC_ClockConfig+0x1cc>)
 8004adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ade:	4b09      	ldr	r3, [pc, #36]	@ (8004b04 <HAL_RCC_ClockConfig+0x1d0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fe ff9c 	bl	8003a20 <HAL_InitTick>

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40022000 	.word	0x40022000
 8004af8:	40021000 	.word	0x40021000
 8004afc:	0800708c 	.word	0x0800708c
 8004b00:	20000000 	.word	0x20000000
 8004b04:	20000004 	.word	0x20000004

08004b08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	2300      	movs	r3, #0
 8004b14:	60bb      	str	r3, [r7, #8]
 8004b16:	2300      	movs	r3, #0
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b22:	4b1e      	ldr	r3, [pc, #120]	@ (8004b9c <HAL_RCC_GetSysClockFreq+0x94>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f003 030c 	and.w	r3, r3, #12
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d002      	beq.n	8004b38 <HAL_RCC_GetSysClockFreq+0x30>
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d003      	beq.n	8004b3e <HAL_RCC_GetSysClockFreq+0x36>
 8004b36:	e027      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b38:	4b19      	ldr	r3, [pc, #100]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b3a:	613b      	str	r3, [r7, #16]
      break;
 8004b3c:	e027      	b.n	8004b8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	0c9b      	lsrs	r3, r3, #18
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	4a17      	ldr	r2, [pc, #92]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b48:	5cd3      	ldrb	r3, [r2, r3]
 8004b4a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d010      	beq.n	8004b78 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b56:	4b11      	ldr	r3, [pc, #68]	@ (8004b9c <HAL_RCC_GetSysClockFreq+0x94>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	0c5b      	lsrs	r3, r3, #17
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	4a11      	ldr	r2, [pc, #68]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b62:	5cd3      	ldrb	r3, [r2, r3]
 8004b64:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a0d      	ldr	r2, [pc, #52]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b6a:	fb03 f202 	mul.w	r2, r3, r2
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	e004      	b.n	8004b82 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a0c      	ldr	r2, [pc, #48]	@ (8004bac <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b7c:	fb02 f303 	mul.w	r3, r2, r3
 8004b80:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	613b      	str	r3, [r7, #16]
      break;
 8004b86:	e002      	b.n	8004b8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b88:	4b05      	ldr	r3, [pc, #20]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b8a:	613b      	str	r3, [r7, #16]
      break;
 8004b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b8e:	693b      	ldr	r3, [r7, #16]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	371c      	adds	r7, #28
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bc80      	pop	{r7}
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	007a1200 	.word	0x007a1200
 8004ba4:	0800709c 	.word	0x0800709c
 8004ba8:	080070ac 	.word	0x080070ac
 8004bac:	003d0900 	.word	0x003d0900

08004bb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8004be4 <RCC_Delay+0x34>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8004be8 <RCC_Delay+0x38>)
 8004bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc2:	0a5b      	lsrs	r3, r3, #9
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004bcc:	bf00      	nop
  }
  while (Delay --);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1e5a      	subs	r2, r3, #1
 8004bd2:	60fa      	str	r2, [r7, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f9      	bne.n	8004bcc <RCC_Delay+0x1c>
}
 8004bd8:	bf00      	nop
 8004bda:	bf00      	nop
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr
 8004be4:	20000000 	.word	0x20000000
 8004be8:	10624dd3 	.word	0x10624dd3

08004bec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e076      	b.n	8004cec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d108      	bne.n	8004c18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c0e:	d009      	beq.n	8004c24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	61da      	str	r2, [r3, #28]
 8004c16:	e005      	b.n	8004c24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d106      	bne.n	8004c44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7fe fcd0 	bl	80035e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca8:	ea42 0103 	orr.w	r1, r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	0c1a      	lsrs	r2, r3, #16
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f002 0204 	and.w	r2, r2, #4
 8004cca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	69da      	ldr	r2, [r3, #28]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	4613      	mov	r3, r2
 8004d02:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d04:	f7fe fece 	bl	8003aa4 <HAL_GetTick>
 8004d08:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004d0a:	88fb      	ldrh	r3, [r7, #6]
 8004d0c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d001      	beq.n	8004d1e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e12a      	b.n	8004f74 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <HAL_SPI_Transmit+0x36>
 8004d24:	88fb      	ldrh	r3, [r7, #6]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e122      	b.n	8004f74 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_SPI_Transmit+0x48>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e11b      	b.n	8004f74 <HAL_SPI_Transmit+0x280>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2203      	movs	r2, #3
 8004d48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	88fa      	ldrh	r2, [r7, #6]
 8004d5c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	88fa      	ldrh	r2, [r7, #6]
 8004d62:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d8a:	d10f      	bne.n	8004dac <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004daa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db6:	2b40      	cmp	r3, #64	@ 0x40
 8004db8:	d007      	beq.n	8004dca <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dd2:	d152      	bne.n	8004e7a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <HAL_SPI_Transmit+0xee>
 8004ddc:	8b7b      	ldrh	r3, [r7, #26]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d145      	bne.n	8004e6e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de6:	881a      	ldrh	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df2:	1c9a      	adds	r2, r3, #2
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e06:	e032      	b.n	8004e6e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d112      	bne.n	8004e3c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1a:	881a      	ldrh	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e26:	1c9a      	adds	r2, r3, #2
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e3a:	e018      	b.n	8004e6e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e3c:	f7fe fe32 	bl	8003aa4 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d803      	bhi.n	8004e54 <HAL_SPI_Transmit+0x160>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e52:	d102      	bne.n	8004e5a <HAL_SPI_Transmit+0x166>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d109      	bne.n	8004e6e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e082      	b.n	8004f74 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1c7      	bne.n	8004e08 <HAL_SPI_Transmit+0x114>
 8004e78:	e053      	b.n	8004f22 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <HAL_SPI_Transmit+0x194>
 8004e82:	8b7b      	ldrh	r3, [r7, #26]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d147      	bne.n	8004f18 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	330c      	adds	r3, #12
 8004e92:	7812      	ldrb	r2, [r2, #0]
 8004e94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004eae:	e033      	b.n	8004f18 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d113      	bne.n	8004ee6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	330c      	adds	r3, #12
 8004ec8:	7812      	ldrb	r2, [r2, #0]
 8004eca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004ee4:	e018      	b.n	8004f18 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ee6:	f7fe fddd 	bl	8003aa4 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d803      	bhi.n	8004efe <HAL_SPI_Transmit+0x20a>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efc:	d102      	bne.n	8004f04 <HAL_SPI_Transmit+0x210>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d109      	bne.n	8004f18 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e02d      	b.n	8004f74 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1c6      	bne.n	8004eb0 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f22:	69fa      	ldr	r2, [r7, #28]
 8004f24:	6839      	ldr	r1, [r7, #0]
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 f9f6 	bl	8005318 <SPI_EndRxTxTransaction>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2220      	movs	r2, #32
 8004f36:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10a      	bne.n	8004f56 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f40:	2300      	movs	r3, #0
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004f72:	2300      	movs	r3, #0
  }
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3720      	adds	r7, #32
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	4613      	mov	r3, r2
 8004f88:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d001      	beq.n	8004f9a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004f96:	2302      	movs	r3, #2
 8004f98:	e097      	b.n	80050ca <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <HAL_SPI_Transmit_DMA+0x2a>
 8004fa0:	88fb      	ldrh	r3, [r7, #6]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e08f      	b.n	80050ca <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_SPI_Transmit_DMA+0x3c>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e088      	b.n	80050ca <HAL_SPI_Transmit_DMA+0x14e>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2203      	movs	r2, #3
 8004fc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	88fa      	ldrh	r2, [r7, #6]
 8004fd8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	88fa      	ldrh	r2, [r7, #6]
 8004fde:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005006:	d10f      	bne.n	8005028 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005016:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005026:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800502c:	4a29      	ldr	r2, [pc, #164]	@ (80050d4 <HAL_SPI_Transmit_DMA+0x158>)
 800502e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005034:	4a28      	ldr	r2, [pc, #160]	@ (80050d8 <HAL_SPI_Transmit_DMA+0x15c>)
 8005036:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800503c:	4a27      	ldr	r2, [pc, #156]	@ (80050dc <HAL_SPI_Transmit_DMA+0x160>)
 800503e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005044:	2200      	movs	r2, #0
 8005046:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005050:	4619      	mov	r1, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	330c      	adds	r3, #12
 8005058:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800505e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005060:	f7fe feb6 	bl	8003dd0 <HAL_DMA_Start_IT>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00b      	beq.n	8005082 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800506e:	f043 0210 	orr.w	r2, r3, #16
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e023      	b.n	80050ca <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800508c:	2b40      	cmp	r3, #64	@ 0x40
 800508e:	d007      	beq.n	80050a0 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800509e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0220 	orr.w	r2, r2, #32
 80050b6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0202 	orr.w	r2, r2, #2
 80050c6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	080051ab 	.word	0x080051ab
 80050d8:	08005105 	.word	0x08005105
 80050dc:	080051c7 	.word	0x080051c7

080050e0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bc80      	pop	{r7}
 80050f0:	4770      	bx	lr

080050f2 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr

08005104 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005112:	f7fe fcc7 	bl	8003aa4 <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0320 	and.w	r3, r3, #32
 8005122:	2b20      	cmp	r3, #32
 8005124:	d03b      	beq.n	800519e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0220 	bic.w	r2, r2, #32
 8005134:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0202 	bic.w	r2, r2, #2
 8005144:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	2164      	movs	r1, #100	@ 0x64
 800514a:	6978      	ldr	r0, [r7, #20]
 800514c:	f000 f8e4 	bl	8005318 <SPI_EndRxTxTransaction>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d005      	beq.n	8005162 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800515a:	f043 0220 	orr.w	r2, r3, #32
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	2200      	movs	r2, #0
 8005184:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005196:	6978      	ldr	r0, [r7, #20]
 8005198:	f7ff ffab 	bl	80050f2 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800519c:	e002      	b.n	80051a4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800519e:	6978      	ldr	r0, [r7, #20]
 80051a0:	f7fe f892 	bl	80032c8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b084      	sub	sp, #16
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f7ff ff91 	bl	80050e0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80051be:	bf00      	nop
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0203 	bic.w	r2, r2, #3
 80051e2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e8:	f043 0210 	orr.w	r2, r3, #16
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f7ff ff7a 	bl	80050f2 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80051fe:	bf00      	nop
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	603b      	str	r3, [r7, #0]
 8005214:	4613      	mov	r3, r2
 8005216:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005218:	f7fe fc44 	bl	8003aa4 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005220:	1a9b      	subs	r3, r3, r2
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	4413      	add	r3, r2
 8005226:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005228:	f7fe fc3c 	bl	8003aa4 <HAL_GetTick>
 800522c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800522e:	4b39      	ldr	r3, [pc, #228]	@ (8005314 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	015b      	lsls	r3, r3, #5
 8005234:	0d1b      	lsrs	r3, r3, #20
 8005236:	69fa      	ldr	r2, [r7, #28]
 8005238:	fb02 f303 	mul.w	r3, r2, r3
 800523c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800523e:	e054      	b.n	80052ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005246:	d050      	beq.n	80052ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005248:	f7fe fc2c 	bl	8003aa4 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	69fa      	ldr	r2, [r7, #28]
 8005254:	429a      	cmp	r2, r3
 8005256:	d902      	bls.n	800525e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d13d      	bne.n	80052da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800526c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005276:	d111      	bne.n	800529c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005280:	d004      	beq.n	800528c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800528a:	d107      	bne.n	800529c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800529a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052a4:	d10f      	bne.n	80052c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e017      	b.n	800530a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4013      	ands	r3, r2
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	bf0c      	ite	eq
 80052fa:	2301      	moveq	r3, #1
 80052fc:	2300      	movne	r3, #0
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	461a      	mov	r2, r3
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	429a      	cmp	r2, r3
 8005306:	d19b      	bne.n	8005240 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3720      	adds	r7, #32
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20000000 	.word	0x20000000

08005318 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af02      	add	r7, sp, #8
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2201      	movs	r2, #1
 800532c:	2102      	movs	r1, #2
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f7ff ff6a 	bl	8005208 <SPI_WaitFlagStateUntilTimeout>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d007      	beq.n	800534a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800533e:	f043 0220 	orr.w	r2, r3, #32
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e013      	b.n	8005372 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2200      	movs	r2, #0
 8005352:	2180      	movs	r1, #128	@ 0x80
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f7ff ff57 	bl	8005208 <SPI_WaitFlagStateUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d007      	beq.n	8005370 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005364:	f043 0220 	orr.w	r2, r3, #32
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e000      	b.n	8005372 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <rand>:
 800537c:	4b16      	ldr	r3, [pc, #88]	@ (80053d8 <rand+0x5c>)
 800537e:	b510      	push	{r4, lr}
 8005380:	681c      	ldr	r4, [r3, #0]
 8005382:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005384:	b9b3      	cbnz	r3, 80053b4 <rand+0x38>
 8005386:	2018      	movs	r0, #24
 8005388:	f000 fa1e 	bl	80057c8 <malloc>
 800538c:	4602      	mov	r2, r0
 800538e:	6320      	str	r0, [r4, #48]	@ 0x30
 8005390:	b920      	cbnz	r0, 800539c <rand+0x20>
 8005392:	2152      	movs	r1, #82	@ 0x52
 8005394:	4b11      	ldr	r3, [pc, #68]	@ (80053dc <rand+0x60>)
 8005396:	4812      	ldr	r0, [pc, #72]	@ (80053e0 <rand+0x64>)
 8005398:	f000 f9b0 	bl	80056fc <__assert_func>
 800539c:	4911      	ldr	r1, [pc, #68]	@ (80053e4 <rand+0x68>)
 800539e:	4b12      	ldr	r3, [pc, #72]	@ (80053e8 <rand+0x6c>)
 80053a0:	e9c0 1300 	strd	r1, r3, [r0]
 80053a4:	4b11      	ldr	r3, [pc, #68]	@ (80053ec <rand+0x70>)
 80053a6:	2100      	movs	r1, #0
 80053a8:	6083      	str	r3, [r0, #8]
 80053aa:	230b      	movs	r3, #11
 80053ac:	8183      	strh	r3, [r0, #12]
 80053ae:	2001      	movs	r0, #1
 80053b0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80053b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80053b6:	480e      	ldr	r0, [pc, #56]	@ (80053f0 <rand+0x74>)
 80053b8:	690b      	ldr	r3, [r1, #16]
 80053ba:	694c      	ldr	r4, [r1, #20]
 80053bc:	4358      	muls	r0, r3
 80053be:	4a0d      	ldr	r2, [pc, #52]	@ (80053f4 <rand+0x78>)
 80053c0:	fb02 0004 	mla	r0, r2, r4, r0
 80053c4:	fba3 3202 	umull	r3, r2, r3, r2
 80053c8:	3301      	adds	r3, #1
 80053ca:	eb40 0002 	adc.w	r0, r0, r2
 80053ce:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80053d2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80053d6:	bd10      	pop	{r4, pc}
 80053d8:	20000018 	.word	0x20000018
 80053dc:	080070ae 	.word	0x080070ae
 80053e0:	080070c5 	.word	0x080070c5
 80053e4:	abcd330e 	.word	0xabcd330e
 80053e8:	e66d1234 	.word	0xe66d1234
 80053ec:	0005deec 	.word	0x0005deec
 80053f0:	5851f42d 	.word	0x5851f42d
 80053f4:	4c957f2d 	.word	0x4c957f2d

080053f8 <std>:
 80053f8:	2300      	movs	r3, #0
 80053fa:	b510      	push	{r4, lr}
 80053fc:	4604      	mov	r4, r0
 80053fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005406:	6083      	str	r3, [r0, #8]
 8005408:	8181      	strh	r1, [r0, #12]
 800540a:	6643      	str	r3, [r0, #100]	@ 0x64
 800540c:	81c2      	strh	r2, [r0, #14]
 800540e:	6183      	str	r3, [r0, #24]
 8005410:	4619      	mov	r1, r3
 8005412:	2208      	movs	r2, #8
 8005414:	305c      	adds	r0, #92	@ 0x5c
 8005416:	f000 f8f4 	bl	8005602 <memset>
 800541a:	4b0d      	ldr	r3, [pc, #52]	@ (8005450 <std+0x58>)
 800541c:	6224      	str	r4, [r4, #32]
 800541e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005420:	4b0c      	ldr	r3, [pc, #48]	@ (8005454 <std+0x5c>)
 8005422:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005424:	4b0c      	ldr	r3, [pc, #48]	@ (8005458 <std+0x60>)
 8005426:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005428:	4b0c      	ldr	r3, [pc, #48]	@ (800545c <std+0x64>)
 800542a:	6323      	str	r3, [r4, #48]	@ 0x30
 800542c:	4b0c      	ldr	r3, [pc, #48]	@ (8005460 <std+0x68>)
 800542e:	429c      	cmp	r4, r3
 8005430:	d006      	beq.n	8005440 <std+0x48>
 8005432:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005436:	4294      	cmp	r4, r2
 8005438:	d002      	beq.n	8005440 <std+0x48>
 800543a:	33d0      	adds	r3, #208	@ 0xd0
 800543c:	429c      	cmp	r4, r3
 800543e:	d105      	bne.n	800544c <std+0x54>
 8005440:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005448:	f000 b954 	b.w	80056f4 <__retarget_lock_init_recursive>
 800544c:	bd10      	pop	{r4, pc}
 800544e:	bf00      	nop
 8005450:	0800557d 	.word	0x0800557d
 8005454:	0800559f 	.word	0x0800559f
 8005458:	080055d7 	.word	0x080055d7
 800545c:	080055fb 	.word	0x080055fb
 8005460:	200036bc 	.word	0x200036bc

08005464 <stdio_exit_handler>:
 8005464:	4a02      	ldr	r2, [pc, #8]	@ (8005470 <stdio_exit_handler+0xc>)
 8005466:	4903      	ldr	r1, [pc, #12]	@ (8005474 <stdio_exit_handler+0x10>)
 8005468:	4803      	ldr	r0, [pc, #12]	@ (8005478 <stdio_exit_handler+0x14>)
 800546a:	f000 b869 	b.w	8005540 <_fwalk_sglue>
 800546e:	bf00      	nop
 8005470:	2000000c 	.word	0x2000000c
 8005474:	08005a35 	.word	0x08005a35
 8005478:	2000001c 	.word	0x2000001c

0800547c <cleanup_stdio>:
 800547c:	6841      	ldr	r1, [r0, #4]
 800547e:	4b0c      	ldr	r3, [pc, #48]	@ (80054b0 <cleanup_stdio+0x34>)
 8005480:	b510      	push	{r4, lr}
 8005482:	4299      	cmp	r1, r3
 8005484:	4604      	mov	r4, r0
 8005486:	d001      	beq.n	800548c <cleanup_stdio+0x10>
 8005488:	f000 fad4 	bl	8005a34 <_fflush_r>
 800548c:	68a1      	ldr	r1, [r4, #8]
 800548e:	4b09      	ldr	r3, [pc, #36]	@ (80054b4 <cleanup_stdio+0x38>)
 8005490:	4299      	cmp	r1, r3
 8005492:	d002      	beq.n	800549a <cleanup_stdio+0x1e>
 8005494:	4620      	mov	r0, r4
 8005496:	f000 facd 	bl	8005a34 <_fflush_r>
 800549a:	68e1      	ldr	r1, [r4, #12]
 800549c:	4b06      	ldr	r3, [pc, #24]	@ (80054b8 <cleanup_stdio+0x3c>)
 800549e:	4299      	cmp	r1, r3
 80054a0:	d004      	beq.n	80054ac <cleanup_stdio+0x30>
 80054a2:	4620      	mov	r0, r4
 80054a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054a8:	f000 bac4 	b.w	8005a34 <_fflush_r>
 80054ac:	bd10      	pop	{r4, pc}
 80054ae:	bf00      	nop
 80054b0:	200036bc 	.word	0x200036bc
 80054b4:	20003724 	.word	0x20003724
 80054b8:	2000378c 	.word	0x2000378c

080054bc <global_stdio_init.part.0>:
 80054bc:	b510      	push	{r4, lr}
 80054be:	4b0b      	ldr	r3, [pc, #44]	@ (80054ec <global_stdio_init.part.0+0x30>)
 80054c0:	4c0b      	ldr	r4, [pc, #44]	@ (80054f0 <global_stdio_init.part.0+0x34>)
 80054c2:	4a0c      	ldr	r2, [pc, #48]	@ (80054f4 <global_stdio_init.part.0+0x38>)
 80054c4:	4620      	mov	r0, r4
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	2104      	movs	r1, #4
 80054ca:	2200      	movs	r2, #0
 80054cc:	f7ff ff94 	bl	80053f8 <std>
 80054d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80054d4:	2201      	movs	r2, #1
 80054d6:	2109      	movs	r1, #9
 80054d8:	f7ff ff8e 	bl	80053f8 <std>
 80054dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80054e0:	2202      	movs	r2, #2
 80054e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054e6:	2112      	movs	r1, #18
 80054e8:	f7ff bf86 	b.w	80053f8 <std>
 80054ec:	200037f4 	.word	0x200037f4
 80054f0:	200036bc 	.word	0x200036bc
 80054f4:	08005465 	.word	0x08005465

080054f8 <__sfp_lock_acquire>:
 80054f8:	4801      	ldr	r0, [pc, #4]	@ (8005500 <__sfp_lock_acquire+0x8>)
 80054fa:	f000 b8fc 	b.w	80056f6 <__retarget_lock_acquire_recursive>
 80054fe:	bf00      	nop
 8005500:	200037fd 	.word	0x200037fd

08005504 <__sfp_lock_release>:
 8005504:	4801      	ldr	r0, [pc, #4]	@ (800550c <__sfp_lock_release+0x8>)
 8005506:	f000 b8f7 	b.w	80056f8 <__retarget_lock_release_recursive>
 800550a:	bf00      	nop
 800550c:	200037fd 	.word	0x200037fd

08005510 <__sinit>:
 8005510:	b510      	push	{r4, lr}
 8005512:	4604      	mov	r4, r0
 8005514:	f7ff fff0 	bl	80054f8 <__sfp_lock_acquire>
 8005518:	6a23      	ldr	r3, [r4, #32]
 800551a:	b11b      	cbz	r3, 8005524 <__sinit+0x14>
 800551c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005520:	f7ff bff0 	b.w	8005504 <__sfp_lock_release>
 8005524:	4b04      	ldr	r3, [pc, #16]	@ (8005538 <__sinit+0x28>)
 8005526:	6223      	str	r3, [r4, #32]
 8005528:	4b04      	ldr	r3, [pc, #16]	@ (800553c <__sinit+0x2c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1f5      	bne.n	800551c <__sinit+0xc>
 8005530:	f7ff ffc4 	bl	80054bc <global_stdio_init.part.0>
 8005534:	e7f2      	b.n	800551c <__sinit+0xc>
 8005536:	bf00      	nop
 8005538:	0800547d 	.word	0x0800547d
 800553c:	200037f4 	.word	0x200037f4

08005540 <_fwalk_sglue>:
 8005540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005544:	4607      	mov	r7, r0
 8005546:	4688      	mov	r8, r1
 8005548:	4614      	mov	r4, r2
 800554a:	2600      	movs	r6, #0
 800554c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005550:	f1b9 0901 	subs.w	r9, r9, #1
 8005554:	d505      	bpl.n	8005562 <_fwalk_sglue+0x22>
 8005556:	6824      	ldr	r4, [r4, #0]
 8005558:	2c00      	cmp	r4, #0
 800555a:	d1f7      	bne.n	800554c <_fwalk_sglue+0xc>
 800555c:	4630      	mov	r0, r6
 800555e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005562:	89ab      	ldrh	r3, [r5, #12]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d907      	bls.n	8005578 <_fwalk_sglue+0x38>
 8005568:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800556c:	3301      	adds	r3, #1
 800556e:	d003      	beq.n	8005578 <_fwalk_sglue+0x38>
 8005570:	4629      	mov	r1, r5
 8005572:	4638      	mov	r0, r7
 8005574:	47c0      	blx	r8
 8005576:	4306      	orrs	r6, r0
 8005578:	3568      	adds	r5, #104	@ 0x68
 800557a:	e7e9      	b.n	8005550 <_fwalk_sglue+0x10>

0800557c <__sread>:
 800557c:	b510      	push	{r4, lr}
 800557e:	460c      	mov	r4, r1
 8005580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005584:	f000 f868 	bl	8005658 <_read_r>
 8005588:	2800      	cmp	r0, #0
 800558a:	bfab      	itete	ge
 800558c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800558e:	89a3      	ldrhlt	r3, [r4, #12]
 8005590:	181b      	addge	r3, r3, r0
 8005592:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005596:	bfac      	ite	ge
 8005598:	6563      	strge	r3, [r4, #84]	@ 0x54
 800559a:	81a3      	strhlt	r3, [r4, #12]
 800559c:	bd10      	pop	{r4, pc}

0800559e <__swrite>:
 800559e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055a2:	461f      	mov	r7, r3
 80055a4:	898b      	ldrh	r3, [r1, #12]
 80055a6:	4605      	mov	r5, r0
 80055a8:	05db      	lsls	r3, r3, #23
 80055aa:	460c      	mov	r4, r1
 80055ac:	4616      	mov	r6, r2
 80055ae:	d505      	bpl.n	80055bc <__swrite+0x1e>
 80055b0:	2302      	movs	r3, #2
 80055b2:	2200      	movs	r2, #0
 80055b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b8:	f000 f83c 	bl	8005634 <_lseek_r>
 80055bc:	89a3      	ldrh	r3, [r4, #12]
 80055be:	4632      	mov	r2, r6
 80055c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055c4:	81a3      	strh	r3, [r4, #12]
 80055c6:	4628      	mov	r0, r5
 80055c8:	463b      	mov	r3, r7
 80055ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055d2:	f000 b853 	b.w	800567c <_write_r>

080055d6 <__sseek>:
 80055d6:	b510      	push	{r4, lr}
 80055d8:	460c      	mov	r4, r1
 80055da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055de:	f000 f829 	bl	8005634 <_lseek_r>
 80055e2:	1c43      	adds	r3, r0, #1
 80055e4:	89a3      	ldrh	r3, [r4, #12]
 80055e6:	bf15      	itete	ne
 80055e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80055ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80055ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80055f2:	81a3      	strheq	r3, [r4, #12]
 80055f4:	bf18      	it	ne
 80055f6:	81a3      	strhne	r3, [r4, #12]
 80055f8:	bd10      	pop	{r4, pc}

080055fa <__sclose>:
 80055fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055fe:	f000 b809 	b.w	8005614 <_close_r>

08005602 <memset>:
 8005602:	4603      	mov	r3, r0
 8005604:	4402      	add	r2, r0
 8005606:	4293      	cmp	r3, r2
 8005608:	d100      	bne.n	800560c <memset+0xa>
 800560a:	4770      	bx	lr
 800560c:	f803 1b01 	strb.w	r1, [r3], #1
 8005610:	e7f9      	b.n	8005606 <memset+0x4>
	...

08005614 <_close_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	2300      	movs	r3, #0
 8005618:	4d05      	ldr	r5, [pc, #20]	@ (8005630 <_close_r+0x1c>)
 800561a:	4604      	mov	r4, r0
 800561c:	4608      	mov	r0, r1
 800561e:	602b      	str	r3, [r5, #0]
 8005620:	f7fe f955 	bl	80038ce <_close>
 8005624:	1c43      	adds	r3, r0, #1
 8005626:	d102      	bne.n	800562e <_close_r+0x1a>
 8005628:	682b      	ldr	r3, [r5, #0]
 800562a:	b103      	cbz	r3, 800562e <_close_r+0x1a>
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	bd38      	pop	{r3, r4, r5, pc}
 8005630:	200037f8 	.word	0x200037f8

08005634 <_lseek_r>:
 8005634:	b538      	push	{r3, r4, r5, lr}
 8005636:	4604      	mov	r4, r0
 8005638:	4608      	mov	r0, r1
 800563a:	4611      	mov	r1, r2
 800563c:	2200      	movs	r2, #0
 800563e:	4d05      	ldr	r5, [pc, #20]	@ (8005654 <_lseek_r+0x20>)
 8005640:	602a      	str	r2, [r5, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	f7fe f967 	bl	8003916 <_lseek>
 8005648:	1c43      	adds	r3, r0, #1
 800564a:	d102      	bne.n	8005652 <_lseek_r+0x1e>
 800564c:	682b      	ldr	r3, [r5, #0]
 800564e:	b103      	cbz	r3, 8005652 <_lseek_r+0x1e>
 8005650:	6023      	str	r3, [r4, #0]
 8005652:	bd38      	pop	{r3, r4, r5, pc}
 8005654:	200037f8 	.word	0x200037f8

08005658 <_read_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4604      	mov	r4, r0
 800565c:	4608      	mov	r0, r1
 800565e:	4611      	mov	r1, r2
 8005660:	2200      	movs	r2, #0
 8005662:	4d05      	ldr	r5, [pc, #20]	@ (8005678 <_read_r+0x20>)
 8005664:	602a      	str	r2, [r5, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	f7fe f8f8 	bl	800385c <_read>
 800566c:	1c43      	adds	r3, r0, #1
 800566e:	d102      	bne.n	8005676 <_read_r+0x1e>
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	b103      	cbz	r3, 8005676 <_read_r+0x1e>
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	bd38      	pop	{r3, r4, r5, pc}
 8005678:	200037f8 	.word	0x200037f8

0800567c <_write_r>:
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	4604      	mov	r4, r0
 8005680:	4608      	mov	r0, r1
 8005682:	4611      	mov	r1, r2
 8005684:	2200      	movs	r2, #0
 8005686:	4d05      	ldr	r5, [pc, #20]	@ (800569c <_write_r+0x20>)
 8005688:	602a      	str	r2, [r5, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	f7fe f903 	bl	8003896 <_write>
 8005690:	1c43      	adds	r3, r0, #1
 8005692:	d102      	bne.n	800569a <_write_r+0x1e>
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	b103      	cbz	r3, 800569a <_write_r+0x1e>
 8005698:	6023      	str	r3, [r4, #0]
 800569a:	bd38      	pop	{r3, r4, r5, pc}
 800569c:	200037f8 	.word	0x200037f8

080056a0 <__errno>:
 80056a0:	4b01      	ldr	r3, [pc, #4]	@ (80056a8 <__errno+0x8>)
 80056a2:	6818      	ldr	r0, [r3, #0]
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	20000018 	.word	0x20000018

080056ac <__libc_init_array>:
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	2600      	movs	r6, #0
 80056b0:	4d0c      	ldr	r5, [pc, #48]	@ (80056e4 <__libc_init_array+0x38>)
 80056b2:	4c0d      	ldr	r4, [pc, #52]	@ (80056e8 <__libc_init_array+0x3c>)
 80056b4:	1b64      	subs	r4, r4, r5
 80056b6:	10a4      	asrs	r4, r4, #2
 80056b8:	42a6      	cmp	r6, r4
 80056ba:	d109      	bne.n	80056d0 <__libc_init_array+0x24>
 80056bc:	f001 fccc 	bl	8007058 <_init>
 80056c0:	2600      	movs	r6, #0
 80056c2:	4d0a      	ldr	r5, [pc, #40]	@ (80056ec <__libc_init_array+0x40>)
 80056c4:	4c0a      	ldr	r4, [pc, #40]	@ (80056f0 <__libc_init_array+0x44>)
 80056c6:	1b64      	subs	r4, r4, r5
 80056c8:	10a4      	asrs	r4, r4, #2
 80056ca:	42a6      	cmp	r6, r4
 80056cc:	d105      	bne.n	80056da <__libc_init_array+0x2e>
 80056ce:	bd70      	pop	{r4, r5, r6, pc}
 80056d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d4:	4798      	blx	r3
 80056d6:	3601      	adds	r6, #1
 80056d8:	e7ee      	b.n	80056b8 <__libc_init_array+0xc>
 80056da:	f855 3b04 	ldr.w	r3, [r5], #4
 80056de:	4798      	blx	r3
 80056e0:	3601      	adds	r6, #1
 80056e2:	e7f2      	b.n	80056ca <__libc_init_array+0x1e>
 80056e4:	08007564 	.word	0x08007564
 80056e8:	08007564 	.word	0x08007564
 80056ec:	08007564 	.word	0x08007564
 80056f0:	08007568 	.word	0x08007568

080056f4 <__retarget_lock_init_recursive>:
 80056f4:	4770      	bx	lr

080056f6 <__retarget_lock_acquire_recursive>:
 80056f6:	4770      	bx	lr

080056f8 <__retarget_lock_release_recursive>:
 80056f8:	4770      	bx	lr
	...

080056fc <__assert_func>:
 80056fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056fe:	4614      	mov	r4, r2
 8005700:	461a      	mov	r2, r3
 8005702:	4b09      	ldr	r3, [pc, #36]	@ (8005728 <__assert_func+0x2c>)
 8005704:	4605      	mov	r5, r0
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68d8      	ldr	r0, [r3, #12]
 800570a:	b14c      	cbz	r4, 8005720 <__assert_func+0x24>
 800570c:	4b07      	ldr	r3, [pc, #28]	@ (800572c <__assert_func+0x30>)
 800570e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005712:	9100      	str	r1, [sp, #0]
 8005714:	462b      	mov	r3, r5
 8005716:	4906      	ldr	r1, [pc, #24]	@ (8005730 <__assert_func+0x34>)
 8005718:	f000 f9b4 	bl	8005a84 <fiprintf>
 800571c:	f000 f9d4 	bl	8005ac8 <abort>
 8005720:	4b04      	ldr	r3, [pc, #16]	@ (8005734 <__assert_func+0x38>)
 8005722:	461c      	mov	r4, r3
 8005724:	e7f3      	b.n	800570e <__assert_func+0x12>
 8005726:	bf00      	nop
 8005728:	20000018 	.word	0x20000018
 800572c:	0800711d 	.word	0x0800711d
 8005730:	0800712a 	.word	0x0800712a
 8005734:	08007158 	.word	0x08007158

08005738 <_free_r>:
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	4605      	mov	r5, r0
 800573c:	2900      	cmp	r1, #0
 800573e:	d040      	beq.n	80057c2 <_free_r+0x8a>
 8005740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005744:	1f0c      	subs	r4, r1, #4
 8005746:	2b00      	cmp	r3, #0
 8005748:	bfb8      	it	lt
 800574a:	18e4      	addlt	r4, r4, r3
 800574c:	f000 f8e6 	bl	800591c <__malloc_lock>
 8005750:	4a1c      	ldr	r2, [pc, #112]	@ (80057c4 <_free_r+0x8c>)
 8005752:	6813      	ldr	r3, [r2, #0]
 8005754:	b933      	cbnz	r3, 8005764 <_free_r+0x2c>
 8005756:	6063      	str	r3, [r4, #4]
 8005758:	6014      	str	r4, [r2, #0]
 800575a:	4628      	mov	r0, r5
 800575c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005760:	f000 b8e2 	b.w	8005928 <__malloc_unlock>
 8005764:	42a3      	cmp	r3, r4
 8005766:	d908      	bls.n	800577a <_free_r+0x42>
 8005768:	6820      	ldr	r0, [r4, #0]
 800576a:	1821      	adds	r1, r4, r0
 800576c:	428b      	cmp	r3, r1
 800576e:	bf01      	itttt	eq
 8005770:	6819      	ldreq	r1, [r3, #0]
 8005772:	685b      	ldreq	r3, [r3, #4]
 8005774:	1809      	addeq	r1, r1, r0
 8005776:	6021      	streq	r1, [r4, #0]
 8005778:	e7ed      	b.n	8005756 <_free_r+0x1e>
 800577a:	461a      	mov	r2, r3
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	b10b      	cbz	r3, 8005784 <_free_r+0x4c>
 8005780:	42a3      	cmp	r3, r4
 8005782:	d9fa      	bls.n	800577a <_free_r+0x42>
 8005784:	6811      	ldr	r1, [r2, #0]
 8005786:	1850      	adds	r0, r2, r1
 8005788:	42a0      	cmp	r0, r4
 800578a:	d10b      	bne.n	80057a4 <_free_r+0x6c>
 800578c:	6820      	ldr	r0, [r4, #0]
 800578e:	4401      	add	r1, r0
 8005790:	1850      	adds	r0, r2, r1
 8005792:	4283      	cmp	r3, r0
 8005794:	6011      	str	r1, [r2, #0]
 8005796:	d1e0      	bne.n	800575a <_free_r+0x22>
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	4408      	add	r0, r1
 800579e:	6010      	str	r0, [r2, #0]
 80057a0:	6053      	str	r3, [r2, #4]
 80057a2:	e7da      	b.n	800575a <_free_r+0x22>
 80057a4:	d902      	bls.n	80057ac <_free_r+0x74>
 80057a6:	230c      	movs	r3, #12
 80057a8:	602b      	str	r3, [r5, #0]
 80057aa:	e7d6      	b.n	800575a <_free_r+0x22>
 80057ac:	6820      	ldr	r0, [r4, #0]
 80057ae:	1821      	adds	r1, r4, r0
 80057b0:	428b      	cmp	r3, r1
 80057b2:	bf01      	itttt	eq
 80057b4:	6819      	ldreq	r1, [r3, #0]
 80057b6:	685b      	ldreq	r3, [r3, #4]
 80057b8:	1809      	addeq	r1, r1, r0
 80057ba:	6021      	streq	r1, [r4, #0]
 80057bc:	6063      	str	r3, [r4, #4]
 80057be:	6054      	str	r4, [r2, #4]
 80057c0:	e7cb      	b.n	800575a <_free_r+0x22>
 80057c2:	bd38      	pop	{r3, r4, r5, pc}
 80057c4:	20003804 	.word	0x20003804

080057c8 <malloc>:
 80057c8:	4b02      	ldr	r3, [pc, #8]	@ (80057d4 <malloc+0xc>)
 80057ca:	4601      	mov	r1, r0
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	f000 b825 	b.w	800581c <_malloc_r>
 80057d2:	bf00      	nop
 80057d4:	20000018 	.word	0x20000018

080057d8 <sbrk_aligned>:
 80057d8:	b570      	push	{r4, r5, r6, lr}
 80057da:	4e0f      	ldr	r6, [pc, #60]	@ (8005818 <sbrk_aligned+0x40>)
 80057dc:	460c      	mov	r4, r1
 80057de:	6831      	ldr	r1, [r6, #0]
 80057e0:	4605      	mov	r5, r0
 80057e2:	b911      	cbnz	r1, 80057ea <sbrk_aligned+0x12>
 80057e4:	f000 f960 	bl	8005aa8 <_sbrk_r>
 80057e8:	6030      	str	r0, [r6, #0]
 80057ea:	4621      	mov	r1, r4
 80057ec:	4628      	mov	r0, r5
 80057ee:	f000 f95b 	bl	8005aa8 <_sbrk_r>
 80057f2:	1c43      	adds	r3, r0, #1
 80057f4:	d103      	bne.n	80057fe <sbrk_aligned+0x26>
 80057f6:	f04f 34ff 	mov.w	r4, #4294967295
 80057fa:	4620      	mov	r0, r4
 80057fc:	bd70      	pop	{r4, r5, r6, pc}
 80057fe:	1cc4      	adds	r4, r0, #3
 8005800:	f024 0403 	bic.w	r4, r4, #3
 8005804:	42a0      	cmp	r0, r4
 8005806:	d0f8      	beq.n	80057fa <sbrk_aligned+0x22>
 8005808:	1a21      	subs	r1, r4, r0
 800580a:	4628      	mov	r0, r5
 800580c:	f000 f94c 	bl	8005aa8 <_sbrk_r>
 8005810:	3001      	adds	r0, #1
 8005812:	d1f2      	bne.n	80057fa <sbrk_aligned+0x22>
 8005814:	e7ef      	b.n	80057f6 <sbrk_aligned+0x1e>
 8005816:	bf00      	nop
 8005818:	20003800 	.word	0x20003800

0800581c <_malloc_r>:
 800581c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005820:	1ccd      	adds	r5, r1, #3
 8005822:	f025 0503 	bic.w	r5, r5, #3
 8005826:	3508      	adds	r5, #8
 8005828:	2d0c      	cmp	r5, #12
 800582a:	bf38      	it	cc
 800582c:	250c      	movcc	r5, #12
 800582e:	2d00      	cmp	r5, #0
 8005830:	4606      	mov	r6, r0
 8005832:	db01      	blt.n	8005838 <_malloc_r+0x1c>
 8005834:	42a9      	cmp	r1, r5
 8005836:	d904      	bls.n	8005842 <_malloc_r+0x26>
 8005838:	230c      	movs	r3, #12
 800583a:	6033      	str	r3, [r6, #0]
 800583c:	2000      	movs	r0, #0
 800583e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005842:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005918 <_malloc_r+0xfc>
 8005846:	f000 f869 	bl	800591c <__malloc_lock>
 800584a:	f8d8 3000 	ldr.w	r3, [r8]
 800584e:	461c      	mov	r4, r3
 8005850:	bb44      	cbnz	r4, 80058a4 <_malloc_r+0x88>
 8005852:	4629      	mov	r1, r5
 8005854:	4630      	mov	r0, r6
 8005856:	f7ff ffbf 	bl	80057d8 <sbrk_aligned>
 800585a:	1c43      	adds	r3, r0, #1
 800585c:	4604      	mov	r4, r0
 800585e:	d158      	bne.n	8005912 <_malloc_r+0xf6>
 8005860:	f8d8 4000 	ldr.w	r4, [r8]
 8005864:	4627      	mov	r7, r4
 8005866:	2f00      	cmp	r7, #0
 8005868:	d143      	bne.n	80058f2 <_malloc_r+0xd6>
 800586a:	2c00      	cmp	r4, #0
 800586c:	d04b      	beq.n	8005906 <_malloc_r+0xea>
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	4639      	mov	r1, r7
 8005872:	4630      	mov	r0, r6
 8005874:	eb04 0903 	add.w	r9, r4, r3
 8005878:	f000 f916 	bl	8005aa8 <_sbrk_r>
 800587c:	4581      	cmp	r9, r0
 800587e:	d142      	bne.n	8005906 <_malloc_r+0xea>
 8005880:	6821      	ldr	r1, [r4, #0]
 8005882:	4630      	mov	r0, r6
 8005884:	1a6d      	subs	r5, r5, r1
 8005886:	4629      	mov	r1, r5
 8005888:	f7ff ffa6 	bl	80057d8 <sbrk_aligned>
 800588c:	3001      	adds	r0, #1
 800588e:	d03a      	beq.n	8005906 <_malloc_r+0xea>
 8005890:	6823      	ldr	r3, [r4, #0]
 8005892:	442b      	add	r3, r5
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	f8d8 3000 	ldr.w	r3, [r8]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	bb62      	cbnz	r2, 80058f8 <_malloc_r+0xdc>
 800589e:	f8c8 7000 	str.w	r7, [r8]
 80058a2:	e00f      	b.n	80058c4 <_malloc_r+0xa8>
 80058a4:	6822      	ldr	r2, [r4, #0]
 80058a6:	1b52      	subs	r2, r2, r5
 80058a8:	d420      	bmi.n	80058ec <_malloc_r+0xd0>
 80058aa:	2a0b      	cmp	r2, #11
 80058ac:	d917      	bls.n	80058de <_malloc_r+0xc2>
 80058ae:	1961      	adds	r1, r4, r5
 80058b0:	42a3      	cmp	r3, r4
 80058b2:	6025      	str	r5, [r4, #0]
 80058b4:	bf18      	it	ne
 80058b6:	6059      	strne	r1, [r3, #4]
 80058b8:	6863      	ldr	r3, [r4, #4]
 80058ba:	bf08      	it	eq
 80058bc:	f8c8 1000 	streq.w	r1, [r8]
 80058c0:	5162      	str	r2, [r4, r5]
 80058c2:	604b      	str	r3, [r1, #4]
 80058c4:	4630      	mov	r0, r6
 80058c6:	f000 f82f 	bl	8005928 <__malloc_unlock>
 80058ca:	f104 000b 	add.w	r0, r4, #11
 80058ce:	1d23      	adds	r3, r4, #4
 80058d0:	f020 0007 	bic.w	r0, r0, #7
 80058d4:	1ac2      	subs	r2, r0, r3
 80058d6:	bf1c      	itt	ne
 80058d8:	1a1b      	subne	r3, r3, r0
 80058da:	50a3      	strne	r3, [r4, r2]
 80058dc:	e7af      	b.n	800583e <_malloc_r+0x22>
 80058de:	6862      	ldr	r2, [r4, #4]
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	bf0c      	ite	eq
 80058e4:	f8c8 2000 	streq.w	r2, [r8]
 80058e8:	605a      	strne	r2, [r3, #4]
 80058ea:	e7eb      	b.n	80058c4 <_malloc_r+0xa8>
 80058ec:	4623      	mov	r3, r4
 80058ee:	6864      	ldr	r4, [r4, #4]
 80058f0:	e7ae      	b.n	8005850 <_malloc_r+0x34>
 80058f2:	463c      	mov	r4, r7
 80058f4:	687f      	ldr	r7, [r7, #4]
 80058f6:	e7b6      	b.n	8005866 <_malloc_r+0x4a>
 80058f8:	461a      	mov	r2, r3
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	42a3      	cmp	r3, r4
 80058fe:	d1fb      	bne.n	80058f8 <_malloc_r+0xdc>
 8005900:	2300      	movs	r3, #0
 8005902:	6053      	str	r3, [r2, #4]
 8005904:	e7de      	b.n	80058c4 <_malloc_r+0xa8>
 8005906:	230c      	movs	r3, #12
 8005908:	4630      	mov	r0, r6
 800590a:	6033      	str	r3, [r6, #0]
 800590c:	f000 f80c 	bl	8005928 <__malloc_unlock>
 8005910:	e794      	b.n	800583c <_malloc_r+0x20>
 8005912:	6005      	str	r5, [r0, #0]
 8005914:	e7d6      	b.n	80058c4 <_malloc_r+0xa8>
 8005916:	bf00      	nop
 8005918:	20003804 	.word	0x20003804

0800591c <__malloc_lock>:
 800591c:	4801      	ldr	r0, [pc, #4]	@ (8005924 <__malloc_lock+0x8>)
 800591e:	f7ff beea 	b.w	80056f6 <__retarget_lock_acquire_recursive>
 8005922:	bf00      	nop
 8005924:	200037fc 	.word	0x200037fc

08005928 <__malloc_unlock>:
 8005928:	4801      	ldr	r0, [pc, #4]	@ (8005930 <__malloc_unlock+0x8>)
 800592a:	f7ff bee5 	b.w	80056f8 <__retarget_lock_release_recursive>
 800592e:	bf00      	nop
 8005930:	200037fc 	.word	0x200037fc

08005934 <__sflush_r>:
 8005934:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593a:	0716      	lsls	r6, r2, #28
 800593c:	4605      	mov	r5, r0
 800593e:	460c      	mov	r4, r1
 8005940:	d454      	bmi.n	80059ec <__sflush_r+0xb8>
 8005942:	684b      	ldr	r3, [r1, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	dc02      	bgt.n	800594e <__sflush_r+0x1a>
 8005948:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	dd48      	ble.n	80059e0 <__sflush_r+0xac>
 800594e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005950:	2e00      	cmp	r6, #0
 8005952:	d045      	beq.n	80059e0 <__sflush_r+0xac>
 8005954:	2300      	movs	r3, #0
 8005956:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800595a:	682f      	ldr	r7, [r5, #0]
 800595c:	6a21      	ldr	r1, [r4, #32]
 800595e:	602b      	str	r3, [r5, #0]
 8005960:	d030      	beq.n	80059c4 <__sflush_r+0x90>
 8005962:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	0759      	lsls	r1, r3, #29
 8005968:	d505      	bpl.n	8005976 <__sflush_r+0x42>
 800596a:	6863      	ldr	r3, [r4, #4]
 800596c:	1ad2      	subs	r2, r2, r3
 800596e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005970:	b10b      	cbz	r3, 8005976 <__sflush_r+0x42>
 8005972:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005974:	1ad2      	subs	r2, r2, r3
 8005976:	2300      	movs	r3, #0
 8005978:	4628      	mov	r0, r5
 800597a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800597c:	6a21      	ldr	r1, [r4, #32]
 800597e:	47b0      	blx	r6
 8005980:	1c43      	adds	r3, r0, #1
 8005982:	89a3      	ldrh	r3, [r4, #12]
 8005984:	d106      	bne.n	8005994 <__sflush_r+0x60>
 8005986:	6829      	ldr	r1, [r5, #0]
 8005988:	291d      	cmp	r1, #29
 800598a:	d82b      	bhi.n	80059e4 <__sflush_r+0xb0>
 800598c:	4a28      	ldr	r2, [pc, #160]	@ (8005a30 <__sflush_r+0xfc>)
 800598e:	40ca      	lsrs	r2, r1
 8005990:	07d6      	lsls	r6, r2, #31
 8005992:	d527      	bpl.n	80059e4 <__sflush_r+0xb0>
 8005994:	2200      	movs	r2, #0
 8005996:	6062      	str	r2, [r4, #4]
 8005998:	6922      	ldr	r2, [r4, #16]
 800599a:	04d9      	lsls	r1, r3, #19
 800599c:	6022      	str	r2, [r4, #0]
 800599e:	d504      	bpl.n	80059aa <__sflush_r+0x76>
 80059a0:	1c42      	adds	r2, r0, #1
 80059a2:	d101      	bne.n	80059a8 <__sflush_r+0x74>
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	b903      	cbnz	r3, 80059aa <__sflush_r+0x76>
 80059a8:	6560      	str	r0, [r4, #84]	@ 0x54
 80059aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059ac:	602f      	str	r7, [r5, #0]
 80059ae:	b1b9      	cbz	r1, 80059e0 <__sflush_r+0xac>
 80059b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059b4:	4299      	cmp	r1, r3
 80059b6:	d002      	beq.n	80059be <__sflush_r+0x8a>
 80059b8:	4628      	mov	r0, r5
 80059ba:	f7ff febd 	bl	8005738 <_free_r>
 80059be:	2300      	movs	r3, #0
 80059c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80059c2:	e00d      	b.n	80059e0 <__sflush_r+0xac>
 80059c4:	2301      	movs	r3, #1
 80059c6:	4628      	mov	r0, r5
 80059c8:	47b0      	blx	r6
 80059ca:	4602      	mov	r2, r0
 80059cc:	1c50      	adds	r0, r2, #1
 80059ce:	d1c9      	bne.n	8005964 <__sflush_r+0x30>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0c6      	beq.n	8005964 <__sflush_r+0x30>
 80059d6:	2b1d      	cmp	r3, #29
 80059d8:	d001      	beq.n	80059de <__sflush_r+0xaa>
 80059da:	2b16      	cmp	r3, #22
 80059dc:	d11d      	bne.n	8005a1a <__sflush_r+0xe6>
 80059de:	602f      	str	r7, [r5, #0]
 80059e0:	2000      	movs	r0, #0
 80059e2:	e021      	b.n	8005a28 <__sflush_r+0xf4>
 80059e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059e8:	b21b      	sxth	r3, r3
 80059ea:	e01a      	b.n	8005a22 <__sflush_r+0xee>
 80059ec:	690f      	ldr	r7, [r1, #16]
 80059ee:	2f00      	cmp	r7, #0
 80059f0:	d0f6      	beq.n	80059e0 <__sflush_r+0xac>
 80059f2:	0793      	lsls	r3, r2, #30
 80059f4:	bf18      	it	ne
 80059f6:	2300      	movne	r3, #0
 80059f8:	680e      	ldr	r6, [r1, #0]
 80059fa:	bf08      	it	eq
 80059fc:	694b      	ldreq	r3, [r1, #20]
 80059fe:	1bf6      	subs	r6, r6, r7
 8005a00:	600f      	str	r7, [r1, #0]
 8005a02:	608b      	str	r3, [r1, #8]
 8005a04:	2e00      	cmp	r6, #0
 8005a06:	ddeb      	ble.n	80059e0 <__sflush_r+0xac>
 8005a08:	4633      	mov	r3, r6
 8005a0a:	463a      	mov	r2, r7
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	6a21      	ldr	r1, [r4, #32]
 8005a10:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005a14:	47e0      	blx	ip
 8005a16:	2800      	cmp	r0, #0
 8005a18:	dc07      	bgt.n	8005a2a <__sflush_r+0xf6>
 8005a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a22:	f04f 30ff 	mov.w	r0, #4294967295
 8005a26:	81a3      	strh	r3, [r4, #12]
 8005a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a2a:	4407      	add	r7, r0
 8005a2c:	1a36      	subs	r6, r6, r0
 8005a2e:	e7e9      	b.n	8005a04 <__sflush_r+0xd0>
 8005a30:	20400001 	.word	0x20400001

08005a34 <_fflush_r>:
 8005a34:	b538      	push	{r3, r4, r5, lr}
 8005a36:	690b      	ldr	r3, [r1, #16]
 8005a38:	4605      	mov	r5, r0
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	b913      	cbnz	r3, 8005a44 <_fflush_r+0x10>
 8005a3e:	2500      	movs	r5, #0
 8005a40:	4628      	mov	r0, r5
 8005a42:	bd38      	pop	{r3, r4, r5, pc}
 8005a44:	b118      	cbz	r0, 8005a4e <_fflush_r+0x1a>
 8005a46:	6a03      	ldr	r3, [r0, #32]
 8005a48:	b90b      	cbnz	r3, 8005a4e <_fflush_r+0x1a>
 8005a4a:	f7ff fd61 	bl	8005510 <__sinit>
 8005a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0f3      	beq.n	8005a3e <_fflush_r+0xa>
 8005a56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005a58:	07d0      	lsls	r0, r2, #31
 8005a5a:	d404      	bmi.n	8005a66 <_fflush_r+0x32>
 8005a5c:	0599      	lsls	r1, r3, #22
 8005a5e:	d402      	bmi.n	8005a66 <_fflush_r+0x32>
 8005a60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a62:	f7ff fe48 	bl	80056f6 <__retarget_lock_acquire_recursive>
 8005a66:	4628      	mov	r0, r5
 8005a68:	4621      	mov	r1, r4
 8005a6a:	f7ff ff63 	bl	8005934 <__sflush_r>
 8005a6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a70:	4605      	mov	r5, r0
 8005a72:	07da      	lsls	r2, r3, #31
 8005a74:	d4e4      	bmi.n	8005a40 <_fflush_r+0xc>
 8005a76:	89a3      	ldrh	r3, [r4, #12]
 8005a78:	059b      	lsls	r3, r3, #22
 8005a7a:	d4e1      	bmi.n	8005a40 <_fflush_r+0xc>
 8005a7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a7e:	f7ff fe3b 	bl	80056f8 <__retarget_lock_release_recursive>
 8005a82:	e7dd      	b.n	8005a40 <_fflush_r+0xc>

08005a84 <fiprintf>:
 8005a84:	b40e      	push	{r1, r2, r3}
 8005a86:	b503      	push	{r0, r1, lr}
 8005a88:	4601      	mov	r1, r0
 8005a8a:	ab03      	add	r3, sp, #12
 8005a8c:	4805      	ldr	r0, [pc, #20]	@ (8005aa4 <fiprintf+0x20>)
 8005a8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a92:	6800      	ldr	r0, [r0, #0]
 8005a94:	9301      	str	r3, [sp, #4]
 8005a96:	f000 f845 	bl	8005b24 <_vfiprintf_r>
 8005a9a:	b002      	add	sp, #8
 8005a9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005aa0:	b003      	add	sp, #12
 8005aa2:	4770      	bx	lr
 8005aa4:	20000018 	.word	0x20000018

08005aa8 <_sbrk_r>:
 8005aa8:	b538      	push	{r3, r4, r5, lr}
 8005aaa:	2300      	movs	r3, #0
 8005aac:	4d05      	ldr	r5, [pc, #20]	@ (8005ac4 <_sbrk_r+0x1c>)
 8005aae:	4604      	mov	r4, r0
 8005ab0:	4608      	mov	r0, r1
 8005ab2:	602b      	str	r3, [r5, #0]
 8005ab4:	f7fd ff3c 	bl	8003930 <_sbrk>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d102      	bne.n	8005ac2 <_sbrk_r+0x1a>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	b103      	cbz	r3, 8005ac2 <_sbrk_r+0x1a>
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	200037f8 	.word	0x200037f8

08005ac8 <abort>:
 8005ac8:	2006      	movs	r0, #6
 8005aca:	b508      	push	{r3, lr}
 8005acc:	f000 fb8e 	bl	80061ec <raise>
 8005ad0:	2001      	movs	r0, #1
 8005ad2:	f7fd feb8 	bl	8003846 <_exit>

08005ad6 <__sfputc_r>:
 8005ad6:	6893      	ldr	r3, [r2, #8]
 8005ad8:	b410      	push	{r4}
 8005ada:	3b01      	subs	r3, #1
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	6093      	str	r3, [r2, #8]
 8005ae0:	da07      	bge.n	8005af2 <__sfputc_r+0x1c>
 8005ae2:	6994      	ldr	r4, [r2, #24]
 8005ae4:	42a3      	cmp	r3, r4
 8005ae6:	db01      	blt.n	8005aec <__sfputc_r+0x16>
 8005ae8:	290a      	cmp	r1, #10
 8005aea:	d102      	bne.n	8005af2 <__sfputc_r+0x1c>
 8005aec:	bc10      	pop	{r4}
 8005aee:	f000 bac1 	b.w	8006074 <__swbuf_r>
 8005af2:	6813      	ldr	r3, [r2, #0]
 8005af4:	1c58      	adds	r0, r3, #1
 8005af6:	6010      	str	r0, [r2, #0]
 8005af8:	7019      	strb	r1, [r3, #0]
 8005afa:	4608      	mov	r0, r1
 8005afc:	bc10      	pop	{r4}
 8005afe:	4770      	bx	lr

08005b00 <__sfputs_r>:
 8005b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b02:	4606      	mov	r6, r0
 8005b04:	460f      	mov	r7, r1
 8005b06:	4614      	mov	r4, r2
 8005b08:	18d5      	adds	r5, r2, r3
 8005b0a:	42ac      	cmp	r4, r5
 8005b0c:	d101      	bne.n	8005b12 <__sfputs_r+0x12>
 8005b0e:	2000      	movs	r0, #0
 8005b10:	e007      	b.n	8005b22 <__sfputs_r+0x22>
 8005b12:	463a      	mov	r2, r7
 8005b14:	4630      	mov	r0, r6
 8005b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b1a:	f7ff ffdc 	bl	8005ad6 <__sfputc_r>
 8005b1e:	1c43      	adds	r3, r0, #1
 8005b20:	d1f3      	bne.n	8005b0a <__sfputs_r+0xa>
 8005b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005b24 <_vfiprintf_r>:
 8005b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b28:	460d      	mov	r5, r1
 8005b2a:	4614      	mov	r4, r2
 8005b2c:	4698      	mov	r8, r3
 8005b2e:	4606      	mov	r6, r0
 8005b30:	b09d      	sub	sp, #116	@ 0x74
 8005b32:	b118      	cbz	r0, 8005b3c <_vfiprintf_r+0x18>
 8005b34:	6a03      	ldr	r3, [r0, #32]
 8005b36:	b90b      	cbnz	r3, 8005b3c <_vfiprintf_r+0x18>
 8005b38:	f7ff fcea 	bl	8005510 <__sinit>
 8005b3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b3e:	07d9      	lsls	r1, r3, #31
 8005b40:	d405      	bmi.n	8005b4e <_vfiprintf_r+0x2a>
 8005b42:	89ab      	ldrh	r3, [r5, #12]
 8005b44:	059a      	lsls	r2, r3, #22
 8005b46:	d402      	bmi.n	8005b4e <_vfiprintf_r+0x2a>
 8005b48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b4a:	f7ff fdd4 	bl	80056f6 <__retarget_lock_acquire_recursive>
 8005b4e:	89ab      	ldrh	r3, [r5, #12]
 8005b50:	071b      	lsls	r3, r3, #28
 8005b52:	d501      	bpl.n	8005b58 <_vfiprintf_r+0x34>
 8005b54:	692b      	ldr	r3, [r5, #16]
 8005b56:	b99b      	cbnz	r3, 8005b80 <_vfiprintf_r+0x5c>
 8005b58:	4629      	mov	r1, r5
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	f000 fac8 	bl	80060f0 <__swsetup_r>
 8005b60:	b170      	cbz	r0, 8005b80 <_vfiprintf_r+0x5c>
 8005b62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b64:	07dc      	lsls	r4, r3, #31
 8005b66:	d504      	bpl.n	8005b72 <_vfiprintf_r+0x4e>
 8005b68:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6c:	b01d      	add	sp, #116	@ 0x74
 8005b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b72:	89ab      	ldrh	r3, [r5, #12]
 8005b74:	0598      	lsls	r0, r3, #22
 8005b76:	d4f7      	bmi.n	8005b68 <_vfiprintf_r+0x44>
 8005b78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b7a:	f7ff fdbd 	bl	80056f8 <__retarget_lock_release_recursive>
 8005b7e:	e7f3      	b.n	8005b68 <_vfiprintf_r+0x44>
 8005b80:	2300      	movs	r3, #0
 8005b82:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b84:	2320      	movs	r3, #32
 8005b86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b8a:	2330      	movs	r3, #48	@ 0x30
 8005b8c:	f04f 0901 	mov.w	r9, #1
 8005b90:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b94:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005d40 <_vfiprintf_r+0x21c>
 8005b98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b9c:	4623      	mov	r3, r4
 8005b9e:	469a      	mov	sl, r3
 8005ba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ba4:	b10a      	cbz	r2, 8005baa <_vfiprintf_r+0x86>
 8005ba6:	2a25      	cmp	r2, #37	@ 0x25
 8005ba8:	d1f9      	bne.n	8005b9e <_vfiprintf_r+0x7a>
 8005baa:	ebba 0b04 	subs.w	fp, sl, r4
 8005bae:	d00b      	beq.n	8005bc8 <_vfiprintf_r+0xa4>
 8005bb0:	465b      	mov	r3, fp
 8005bb2:	4622      	mov	r2, r4
 8005bb4:	4629      	mov	r1, r5
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	f7ff ffa2 	bl	8005b00 <__sfputs_r>
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	f000 80a7 	beq.w	8005d10 <_vfiprintf_r+0x1ec>
 8005bc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bc4:	445a      	add	r2, fp
 8005bc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 809f 	beq.w	8005d10 <_vfiprintf_r+0x1ec>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bdc:	f10a 0a01 	add.w	sl, sl, #1
 8005be0:	9304      	str	r3, [sp, #16]
 8005be2:	9307      	str	r3, [sp, #28]
 8005be4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005be8:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bea:	4654      	mov	r4, sl
 8005bec:	2205      	movs	r2, #5
 8005bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bf2:	4853      	ldr	r0, [pc, #332]	@ (8005d40 <_vfiprintf_r+0x21c>)
 8005bf4:	f000 fb16 	bl	8006224 <memchr>
 8005bf8:	9a04      	ldr	r2, [sp, #16]
 8005bfa:	b9d8      	cbnz	r0, 8005c34 <_vfiprintf_r+0x110>
 8005bfc:	06d1      	lsls	r1, r2, #27
 8005bfe:	bf44      	itt	mi
 8005c00:	2320      	movmi	r3, #32
 8005c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c06:	0713      	lsls	r3, r2, #28
 8005c08:	bf44      	itt	mi
 8005c0a:	232b      	movmi	r3, #43	@ 0x2b
 8005c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c10:	f89a 3000 	ldrb.w	r3, [sl]
 8005c14:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c16:	d015      	beq.n	8005c44 <_vfiprintf_r+0x120>
 8005c18:	4654      	mov	r4, sl
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	f04f 0c0a 	mov.w	ip, #10
 8005c20:	9a07      	ldr	r2, [sp, #28]
 8005c22:	4621      	mov	r1, r4
 8005c24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c28:	3b30      	subs	r3, #48	@ 0x30
 8005c2a:	2b09      	cmp	r3, #9
 8005c2c:	d94b      	bls.n	8005cc6 <_vfiprintf_r+0x1a2>
 8005c2e:	b1b0      	cbz	r0, 8005c5e <_vfiprintf_r+0x13a>
 8005c30:	9207      	str	r2, [sp, #28]
 8005c32:	e014      	b.n	8005c5e <_vfiprintf_r+0x13a>
 8005c34:	eba0 0308 	sub.w	r3, r0, r8
 8005c38:	fa09 f303 	lsl.w	r3, r9, r3
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	46a2      	mov	sl, r4
 8005c40:	9304      	str	r3, [sp, #16]
 8005c42:	e7d2      	b.n	8005bea <_vfiprintf_r+0xc6>
 8005c44:	9b03      	ldr	r3, [sp, #12]
 8005c46:	1d19      	adds	r1, r3, #4
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	9103      	str	r1, [sp, #12]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	bfbb      	ittet	lt
 8005c50:	425b      	neglt	r3, r3
 8005c52:	f042 0202 	orrlt.w	r2, r2, #2
 8005c56:	9307      	strge	r3, [sp, #28]
 8005c58:	9307      	strlt	r3, [sp, #28]
 8005c5a:	bfb8      	it	lt
 8005c5c:	9204      	strlt	r2, [sp, #16]
 8005c5e:	7823      	ldrb	r3, [r4, #0]
 8005c60:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c62:	d10a      	bne.n	8005c7a <_vfiprintf_r+0x156>
 8005c64:	7863      	ldrb	r3, [r4, #1]
 8005c66:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c68:	d132      	bne.n	8005cd0 <_vfiprintf_r+0x1ac>
 8005c6a:	9b03      	ldr	r3, [sp, #12]
 8005c6c:	3402      	adds	r4, #2
 8005c6e:	1d1a      	adds	r2, r3, #4
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	9203      	str	r2, [sp, #12]
 8005c74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c78:	9305      	str	r3, [sp, #20]
 8005c7a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005d44 <_vfiprintf_r+0x220>
 8005c7e:	2203      	movs	r2, #3
 8005c80:	4650      	mov	r0, sl
 8005c82:	7821      	ldrb	r1, [r4, #0]
 8005c84:	f000 face 	bl	8006224 <memchr>
 8005c88:	b138      	cbz	r0, 8005c9a <_vfiprintf_r+0x176>
 8005c8a:	2240      	movs	r2, #64	@ 0x40
 8005c8c:	9b04      	ldr	r3, [sp, #16]
 8005c8e:	eba0 000a 	sub.w	r0, r0, sl
 8005c92:	4082      	lsls	r2, r0
 8005c94:	4313      	orrs	r3, r2
 8005c96:	3401      	adds	r4, #1
 8005c98:	9304      	str	r3, [sp, #16]
 8005c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c9e:	2206      	movs	r2, #6
 8005ca0:	4829      	ldr	r0, [pc, #164]	@ (8005d48 <_vfiprintf_r+0x224>)
 8005ca2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ca6:	f000 fabd 	bl	8006224 <memchr>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	d03f      	beq.n	8005d2e <_vfiprintf_r+0x20a>
 8005cae:	4b27      	ldr	r3, [pc, #156]	@ (8005d4c <_vfiprintf_r+0x228>)
 8005cb0:	bb1b      	cbnz	r3, 8005cfa <_vfiprintf_r+0x1d6>
 8005cb2:	9b03      	ldr	r3, [sp, #12]
 8005cb4:	3307      	adds	r3, #7
 8005cb6:	f023 0307 	bic.w	r3, r3, #7
 8005cba:	3308      	adds	r3, #8
 8005cbc:	9303      	str	r3, [sp, #12]
 8005cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cc0:	443b      	add	r3, r7
 8005cc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cc4:	e76a      	b.n	8005b9c <_vfiprintf_r+0x78>
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	2001      	movs	r0, #1
 8005cca:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cce:	e7a8      	b.n	8005c22 <_vfiprintf_r+0xfe>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	f04f 0c0a 	mov.w	ip, #10
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	3401      	adds	r4, #1
 8005cda:	9305      	str	r3, [sp, #20]
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ce2:	3a30      	subs	r2, #48	@ 0x30
 8005ce4:	2a09      	cmp	r2, #9
 8005ce6:	d903      	bls.n	8005cf0 <_vfiprintf_r+0x1cc>
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0c6      	beq.n	8005c7a <_vfiprintf_r+0x156>
 8005cec:	9105      	str	r1, [sp, #20]
 8005cee:	e7c4      	b.n	8005c7a <_vfiprintf_r+0x156>
 8005cf0:	4604      	mov	r4, r0
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cf8:	e7f0      	b.n	8005cdc <_vfiprintf_r+0x1b8>
 8005cfa:	ab03      	add	r3, sp, #12
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	462a      	mov	r2, r5
 8005d00:	4630      	mov	r0, r6
 8005d02:	4b13      	ldr	r3, [pc, #76]	@ (8005d50 <_vfiprintf_r+0x22c>)
 8005d04:	a904      	add	r1, sp, #16
 8005d06:	f3af 8000 	nop.w
 8005d0a:	4607      	mov	r7, r0
 8005d0c:	1c78      	adds	r0, r7, #1
 8005d0e:	d1d6      	bne.n	8005cbe <_vfiprintf_r+0x19a>
 8005d10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d12:	07d9      	lsls	r1, r3, #31
 8005d14:	d405      	bmi.n	8005d22 <_vfiprintf_r+0x1fe>
 8005d16:	89ab      	ldrh	r3, [r5, #12]
 8005d18:	059a      	lsls	r2, r3, #22
 8005d1a:	d402      	bmi.n	8005d22 <_vfiprintf_r+0x1fe>
 8005d1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d1e:	f7ff fceb 	bl	80056f8 <__retarget_lock_release_recursive>
 8005d22:	89ab      	ldrh	r3, [r5, #12]
 8005d24:	065b      	lsls	r3, r3, #25
 8005d26:	f53f af1f 	bmi.w	8005b68 <_vfiprintf_r+0x44>
 8005d2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d2c:	e71e      	b.n	8005b6c <_vfiprintf_r+0x48>
 8005d2e:	ab03      	add	r3, sp, #12
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	462a      	mov	r2, r5
 8005d34:	4630      	mov	r0, r6
 8005d36:	4b06      	ldr	r3, [pc, #24]	@ (8005d50 <_vfiprintf_r+0x22c>)
 8005d38:	a904      	add	r1, sp, #16
 8005d3a:	f000 f87d 	bl	8005e38 <_printf_i>
 8005d3e:	e7e4      	b.n	8005d0a <_vfiprintf_r+0x1e6>
 8005d40:	08007159 	.word	0x08007159
 8005d44:	0800715f 	.word	0x0800715f
 8005d48:	08007163 	.word	0x08007163
 8005d4c:	00000000 	.word	0x00000000
 8005d50:	08005b01 	.word	0x08005b01

08005d54 <_printf_common>:
 8005d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d58:	4616      	mov	r6, r2
 8005d5a:	4698      	mov	r8, r3
 8005d5c:	688a      	ldr	r2, [r1, #8]
 8005d5e:	690b      	ldr	r3, [r1, #16]
 8005d60:	4607      	mov	r7, r0
 8005d62:	4293      	cmp	r3, r2
 8005d64:	bfb8      	it	lt
 8005d66:	4613      	movlt	r3, r2
 8005d68:	6033      	str	r3, [r6, #0]
 8005d6a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d6e:	460c      	mov	r4, r1
 8005d70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d74:	b10a      	cbz	r2, 8005d7a <_printf_common+0x26>
 8005d76:	3301      	adds	r3, #1
 8005d78:	6033      	str	r3, [r6, #0]
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	0699      	lsls	r1, r3, #26
 8005d7e:	bf42      	ittt	mi
 8005d80:	6833      	ldrmi	r3, [r6, #0]
 8005d82:	3302      	addmi	r3, #2
 8005d84:	6033      	strmi	r3, [r6, #0]
 8005d86:	6825      	ldr	r5, [r4, #0]
 8005d88:	f015 0506 	ands.w	r5, r5, #6
 8005d8c:	d106      	bne.n	8005d9c <_printf_common+0x48>
 8005d8e:	f104 0a19 	add.w	sl, r4, #25
 8005d92:	68e3      	ldr	r3, [r4, #12]
 8005d94:	6832      	ldr	r2, [r6, #0]
 8005d96:	1a9b      	subs	r3, r3, r2
 8005d98:	42ab      	cmp	r3, r5
 8005d9a:	dc2b      	bgt.n	8005df4 <_printf_common+0xa0>
 8005d9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005da0:	6822      	ldr	r2, [r4, #0]
 8005da2:	3b00      	subs	r3, #0
 8005da4:	bf18      	it	ne
 8005da6:	2301      	movne	r3, #1
 8005da8:	0692      	lsls	r2, r2, #26
 8005daa:	d430      	bmi.n	8005e0e <_printf_common+0xba>
 8005dac:	4641      	mov	r1, r8
 8005dae:	4638      	mov	r0, r7
 8005db0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005db4:	47c8      	blx	r9
 8005db6:	3001      	adds	r0, #1
 8005db8:	d023      	beq.n	8005e02 <_printf_common+0xae>
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	6922      	ldr	r2, [r4, #16]
 8005dbe:	f003 0306 	and.w	r3, r3, #6
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	bf14      	ite	ne
 8005dc6:	2500      	movne	r5, #0
 8005dc8:	6833      	ldreq	r3, [r6, #0]
 8005dca:	f04f 0600 	mov.w	r6, #0
 8005dce:	bf08      	it	eq
 8005dd0:	68e5      	ldreq	r5, [r4, #12]
 8005dd2:	f104 041a 	add.w	r4, r4, #26
 8005dd6:	bf08      	it	eq
 8005dd8:	1aed      	subeq	r5, r5, r3
 8005dda:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005dde:	bf08      	it	eq
 8005de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005de4:	4293      	cmp	r3, r2
 8005de6:	bfc4      	itt	gt
 8005de8:	1a9b      	subgt	r3, r3, r2
 8005dea:	18ed      	addgt	r5, r5, r3
 8005dec:	42b5      	cmp	r5, r6
 8005dee:	d11a      	bne.n	8005e26 <_printf_common+0xd2>
 8005df0:	2000      	movs	r0, #0
 8005df2:	e008      	b.n	8005e06 <_printf_common+0xb2>
 8005df4:	2301      	movs	r3, #1
 8005df6:	4652      	mov	r2, sl
 8005df8:	4641      	mov	r1, r8
 8005dfa:	4638      	mov	r0, r7
 8005dfc:	47c8      	blx	r9
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d103      	bne.n	8005e0a <_printf_common+0xb6>
 8005e02:	f04f 30ff 	mov.w	r0, #4294967295
 8005e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e0a:	3501      	adds	r5, #1
 8005e0c:	e7c1      	b.n	8005d92 <_printf_common+0x3e>
 8005e0e:	2030      	movs	r0, #48	@ 0x30
 8005e10:	18e1      	adds	r1, r4, r3
 8005e12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e1c:	4422      	add	r2, r4
 8005e1e:	3302      	adds	r3, #2
 8005e20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e24:	e7c2      	b.n	8005dac <_printf_common+0x58>
 8005e26:	2301      	movs	r3, #1
 8005e28:	4622      	mov	r2, r4
 8005e2a:	4641      	mov	r1, r8
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	47c8      	blx	r9
 8005e30:	3001      	adds	r0, #1
 8005e32:	d0e6      	beq.n	8005e02 <_printf_common+0xae>
 8005e34:	3601      	adds	r6, #1
 8005e36:	e7d9      	b.n	8005dec <_printf_common+0x98>

08005e38 <_printf_i>:
 8005e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e3c:	7e0f      	ldrb	r7, [r1, #24]
 8005e3e:	4691      	mov	r9, r2
 8005e40:	2f78      	cmp	r7, #120	@ 0x78
 8005e42:	4680      	mov	r8, r0
 8005e44:	460c      	mov	r4, r1
 8005e46:	469a      	mov	sl, r3
 8005e48:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e4e:	d807      	bhi.n	8005e60 <_printf_i+0x28>
 8005e50:	2f62      	cmp	r7, #98	@ 0x62
 8005e52:	d80a      	bhi.n	8005e6a <_printf_i+0x32>
 8005e54:	2f00      	cmp	r7, #0
 8005e56:	f000 80d1 	beq.w	8005ffc <_printf_i+0x1c4>
 8005e5a:	2f58      	cmp	r7, #88	@ 0x58
 8005e5c:	f000 80b8 	beq.w	8005fd0 <_printf_i+0x198>
 8005e60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e68:	e03a      	b.n	8005ee0 <_printf_i+0xa8>
 8005e6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e6e:	2b15      	cmp	r3, #21
 8005e70:	d8f6      	bhi.n	8005e60 <_printf_i+0x28>
 8005e72:	a101      	add	r1, pc, #4	@ (adr r1, 8005e78 <_printf_i+0x40>)
 8005e74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e78:	08005ed1 	.word	0x08005ed1
 8005e7c:	08005ee5 	.word	0x08005ee5
 8005e80:	08005e61 	.word	0x08005e61
 8005e84:	08005e61 	.word	0x08005e61
 8005e88:	08005e61 	.word	0x08005e61
 8005e8c:	08005e61 	.word	0x08005e61
 8005e90:	08005ee5 	.word	0x08005ee5
 8005e94:	08005e61 	.word	0x08005e61
 8005e98:	08005e61 	.word	0x08005e61
 8005e9c:	08005e61 	.word	0x08005e61
 8005ea0:	08005e61 	.word	0x08005e61
 8005ea4:	08005fe3 	.word	0x08005fe3
 8005ea8:	08005f0f 	.word	0x08005f0f
 8005eac:	08005f9d 	.word	0x08005f9d
 8005eb0:	08005e61 	.word	0x08005e61
 8005eb4:	08005e61 	.word	0x08005e61
 8005eb8:	08006005 	.word	0x08006005
 8005ebc:	08005e61 	.word	0x08005e61
 8005ec0:	08005f0f 	.word	0x08005f0f
 8005ec4:	08005e61 	.word	0x08005e61
 8005ec8:	08005e61 	.word	0x08005e61
 8005ecc:	08005fa5 	.word	0x08005fa5
 8005ed0:	6833      	ldr	r3, [r6, #0]
 8005ed2:	1d1a      	adds	r2, r3, #4
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6032      	str	r2, [r6, #0]
 8005ed8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005edc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e09c      	b.n	800601e <_printf_i+0x1e6>
 8005ee4:	6833      	ldr	r3, [r6, #0]
 8005ee6:	6820      	ldr	r0, [r4, #0]
 8005ee8:	1d19      	adds	r1, r3, #4
 8005eea:	6031      	str	r1, [r6, #0]
 8005eec:	0606      	lsls	r6, r0, #24
 8005eee:	d501      	bpl.n	8005ef4 <_printf_i+0xbc>
 8005ef0:	681d      	ldr	r5, [r3, #0]
 8005ef2:	e003      	b.n	8005efc <_printf_i+0xc4>
 8005ef4:	0645      	lsls	r5, r0, #25
 8005ef6:	d5fb      	bpl.n	8005ef0 <_printf_i+0xb8>
 8005ef8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005efc:	2d00      	cmp	r5, #0
 8005efe:	da03      	bge.n	8005f08 <_printf_i+0xd0>
 8005f00:	232d      	movs	r3, #45	@ 0x2d
 8005f02:	426d      	negs	r5, r5
 8005f04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f08:	230a      	movs	r3, #10
 8005f0a:	4858      	ldr	r0, [pc, #352]	@ (800606c <_printf_i+0x234>)
 8005f0c:	e011      	b.n	8005f32 <_printf_i+0xfa>
 8005f0e:	6821      	ldr	r1, [r4, #0]
 8005f10:	6833      	ldr	r3, [r6, #0]
 8005f12:	0608      	lsls	r0, r1, #24
 8005f14:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f18:	d402      	bmi.n	8005f20 <_printf_i+0xe8>
 8005f1a:	0649      	lsls	r1, r1, #25
 8005f1c:	bf48      	it	mi
 8005f1e:	b2ad      	uxthmi	r5, r5
 8005f20:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f22:	6033      	str	r3, [r6, #0]
 8005f24:	bf14      	ite	ne
 8005f26:	230a      	movne	r3, #10
 8005f28:	2308      	moveq	r3, #8
 8005f2a:	4850      	ldr	r0, [pc, #320]	@ (800606c <_printf_i+0x234>)
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f32:	6866      	ldr	r6, [r4, #4]
 8005f34:	2e00      	cmp	r6, #0
 8005f36:	60a6      	str	r6, [r4, #8]
 8005f38:	db05      	blt.n	8005f46 <_printf_i+0x10e>
 8005f3a:	6821      	ldr	r1, [r4, #0]
 8005f3c:	432e      	orrs	r6, r5
 8005f3e:	f021 0104 	bic.w	r1, r1, #4
 8005f42:	6021      	str	r1, [r4, #0]
 8005f44:	d04b      	beq.n	8005fde <_printf_i+0x1a6>
 8005f46:	4616      	mov	r6, r2
 8005f48:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f4c:	fb03 5711 	mls	r7, r3, r1, r5
 8005f50:	5dc7      	ldrb	r7, [r0, r7]
 8005f52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f56:	462f      	mov	r7, r5
 8005f58:	42bb      	cmp	r3, r7
 8005f5a:	460d      	mov	r5, r1
 8005f5c:	d9f4      	bls.n	8005f48 <_printf_i+0x110>
 8005f5e:	2b08      	cmp	r3, #8
 8005f60:	d10b      	bne.n	8005f7a <_printf_i+0x142>
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	07df      	lsls	r7, r3, #31
 8005f66:	d508      	bpl.n	8005f7a <_printf_i+0x142>
 8005f68:	6923      	ldr	r3, [r4, #16]
 8005f6a:	6861      	ldr	r1, [r4, #4]
 8005f6c:	4299      	cmp	r1, r3
 8005f6e:	bfde      	ittt	le
 8005f70:	2330      	movle	r3, #48	@ 0x30
 8005f72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f7a:	1b92      	subs	r2, r2, r6
 8005f7c:	6122      	str	r2, [r4, #16]
 8005f7e:	464b      	mov	r3, r9
 8005f80:	4621      	mov	r1, r4
 8005f82:	4640      	mov	r0, r8
 8005f84:	f8cd a000 	str.w	sl, [sp]
 8005f88:	aa03      	add	r2, sp, #12
 8005f8a:	f7ff fee3 	bl	8005d54 <_printf_common>
 8005f8e:	3001      	adds	r0, #1
 8005f90:	d14a      	bne.n	8006028 <_printf_i+0x1f0>
 8005f92:	f04f 30ff 	mov.w	r0, #4294967295
 8005f96:	b004      	add	sp, #16
 8005f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	f043 0320 	orr.w	r3, r3, #32
 8005fa2:	6023      	str	r3, [r4, #0]
 8005fa4:	2778      	movs	r7, #120	@ 0x78
 8005fa6:	4832      	ldr	r0, [pc, #200]	@ (8006070 <_printf_i+0x238>)
 8005fa8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	6831      	ldr	r1, [r6, #0]
 8005fb0:	061f      	lsls	r7, r3, #24
 8005fb2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005fb6:	d402      	bmi.n	8005fbe <_printf_i+0x186>
 8005fb8:	065f      	lsls	r7, r3, #25
 8005fba:	bf48      	it	mi
 8005fbc:	b2ad      	uxthmi	r5, r5
 8005fbe:	6031      	str	r1, [r6, #0]
 8005fc0:	07d9      	lsls	r1, r3, #31
 8005fc2:	bf44      	itt	mi
 8005fc4:	f043 0320 	orrmi.w	r3, r3, #32
 8005fc8:	6023      	strmi	r3, [r4, #0]
 8005fca:	b11d      	cbz	r5, 8005fd4 <_printf_i+0x19c>
 8005fcc:	2310      	movs	r3, #16
 8005fce:	e7ad      	b.n	8005f2c <_printf_i+0xf4>
 8005fd0:	4826      	ldr	r0, [pc, #152]	@ (800606c <_printf_i+0x234>)
 8005fd2:	e7e9      	b.n	8005fa8 <_printf_i+0x170>
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	f023 0320 	bic.w	r3, r3, #32
 8005fda:	6023      	str	r3, [r4, #0]
 8005fdc:	e7f6      	b.n	8005fcc <_printf_i+0x194>
 8005fde:	4616      	mov	r6, r2
 8005fe0:	e7bd      	b.n	8005f5e <_printf_i+0x126>
 8005fe2:	6833      	ldr	r3, [r6, #0]
 8005fe4:	6825      	ldr	r5, [r4, #0]
 8005fe6:	1d18      	adds	r0, r3, #4
 8005fe8:	6961      	ldr	r1, [r4, #20]
 8005fea:	6030      	str	r0, [r6, #0]
 8005fec:	062e      	lsls	r6, r5, #24
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	d501      	bpl.n	8005ff6 <_printf_i+0x1be>
 8005ff2:	6019      	str	r1, [r3, #0]
 8005ff4:	e002      	b.n	8005ffc <_printf_i+0x1c4>
 8005ff6:	0668      	lsls	r0, r5, #25
 8005ff8:	d5fb      	bpl.n	8005ff2 <_printf_i+0x1ba>
 8005ffa:	8019      	strh	r1, [r3, #0]
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	4616      	mov	r6, r2
 8006000:	6123      	str	r3, [r4, #16]
 8006002:	e7bc      	b.n	8005f7e <_printf_i+0x146>
 8006004:	6833      	ldr	r3, [r6, #0]
 8006006:	2100      	movs	r1, #0
 8006008:	1d1a      	adds	r2, r3, #4
 800600a:	6032      	str	r2, [r6, #0]
 800600c:	681e      	ldr	r6, [r3, #0]
 800600e:	6862      	ldr	r2, [r4, #4]
 8006010:	4630      	mov	r0, r6
 8006012:	f000 f907 	bl	8006224 <memchr>
 8006016:	b108      	cbz	r0, 800601c <_printf_i+0x1e4>
 8006018:	1b80      	subs	r0, r0, r6
 800601a:	6060      	str	r0, [r4, #4]
 800601c:	6863      	ldr	r3, [r4, #4]
 800601e:	6123      	str	r3, [r4, #16]
 8006020:	2300      	movs	r3, #0
 8006022:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006026:	e7aa      	b.n	8005f7e <_printf_i+0x146>
 8006028:	4632      	mov	r2, r6
 800602a:	4649      	mov	r1, r9
 800602c:	4640      	mov	r0, r8
 800602e:	6923      	ldr	r3, [r4, #16]
 8006030:	47d0      	blx	sl
 8006032:	3001      	adds	r0, #1
 8006034:	d0ad      	beq.n	8005f92 <_printf_i+0x15a>
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	079b      	lsls	r3, r3, #30
 800603a:	d413      	bmi.n	8006064 <_printf_i+0x22c>
 800603c:	68e0      	ldr	r0, [r4, #12]
 800603e:	9b03      	ldr	r3, [sp, #12]
 8006040:	4298      	cmp	r0, r3
 8006042:	bfb8      	it	lt
 8006044:	4618      	movlt	r0, r3
 8006046:	e7a6      	b.n	8005f96 <_printf_i+0x15e>
 8006048:	2301      	movs	r3, #1
 800604a:	4632      	mov	r2, r6
 800604c:	4649      	mov	r1, r9
 800604e:	4640      	mov	r0, r8
 8006050:	47d0      	blx	sl
 8006052:	3001      	adds	r0, #1
 8006054:	d09d      	beq.n	8005f92 <_printf_i+0x15a>
 8006056:	3501      	adds	r5, #1
 8006058:	68e3      	ldr	r3, [r4, #12]
 800605a:	9903      	ldr	r1, [sp, #12]
 800605c:	1a5b      	subs	r3, r3, r1
 800605e:	42ab      	cmp	r3, r5
 8006060:	dcf2      	bgt.n	8006048 <_printf_i+0x210>
 8006062:	e7eb      	b.n	800603c <_printf_i+0x204>
 8006064:	2500      	movs	r5, #0
 8006066:	f104 0619 	add.w	r6, r4, #25
 800606a:	e7f5      	b.n	8006058 <_printf_i+0x220>
 800606c:	0800716a 	.word	0x0800716a
 8006070:	0800717b 	.word	0x0800717b

08006074 <__swbuf_r>:
 8006074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006076:	460e      	mov	r6, r1
 8006078:	4614      	mov	r4, r2
 800607a:	4605      	mov	r5, r0
 800607c:	b118      	cbz	r0, 8006086 <__swbuf_r+0x12>
 800607e:	6a03      	ldr	r3, [r0, #32]
 8006080:	b90b      	cbnz	r3, 8006086 <__swbuf_r+0x12>
 8006082:	f7ff fa45 	bl	8005510 <__sinit>
 8006086:	69a3      	ldr	r3, [r4, #24]
 8006088:	60a3      	str	r3, [r4, #8]
 800608a:	89a3      	ldrh	r3, [r4, #12]
 800608c:	071a      	lsls	r2, r3, #28
 800608e:	d501      	bpl.n	8006094 <__swbuf_r+0x20>
 8006090:	6923      	ldr	r3, [r4, #16]
 8006092:	b943      	cbnz	r3, 80060a6 <__swbuf_r+0x32>
 8006094:	4621      	mov	r1, r4
 8006096:	4628      	mov	r0, r5
 8006098:	f000 f82a 	bl	80060f0 <__swsetup_r>
 800609c:	b118      	cbz	r0, 80060a6 <__swbuf_r+0x32>
 800609e:	f04f 37ff 	mov.w	r7, #4294967295
 80060a2:	4638      	mov	r0, r7
 80060a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	6922      	ldr	r2, [r4, #16]
 80060aa:	b2f6      	uxtb	r6, r6
 80060ac:	1a98      	subs	r0, r3, r2
 80060ae:	6963      	ldr	r3, [r4, #20]
 80060b0:	4637      	mov	r7, r6
 80060b2:	4283      	cmp	r3, r0
 80060b4:	dc05      	bgt.n	80060c2 <__swbuf_r+0x4e>
 80060b6:	4621      	mov	r1, r4
 80060b8:	4628      	mov	r0, r5
 80060ba:	f7ff fcbb 	bl	8005a34 <_fflush_r>
 80060be:	2800      	cmp	r0, #0
 80060c0:	d1ed      	bne.n	800609e <__swbuf_r+0x2a>
 80060c2:	68a3      	ldr	r3, [r4, #8]
 80060c4:	3b01      	subs	r3, #1
 80060c6:	60a3      	str	r3, [r4, #8]
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	1c5a      	adds	r2, r3, #1
 80060cc:	6022      	str	r2, [r4, #0]
 80060ce:	701e      	strb	r6, [r3, #0]
 80060d0:	6962      	ldr	r2, [r4, #20]
 80060d2:	1c43      	adds	r3, r0, #1
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d004      	beq.n	80060e2 <__swbuf_r+0x6e>
 80060d8:	89a3      	ldrh	r3, [r4, #12]
 80060da:	07db      	lsls	r3, r3, #31
 80060dc:	d5e1      	bpl.n	80060a2 <__swbuf_r+0x2e>
 80060de:	2e0a      	cmp	r6, #10
 80060e0:	d1df      	bne.n	80060a2 <__swbuf_r+0x2e>
 80060e2:	4621      	mov	r1, r4
 80060e4:	4628      	mov	r0, r5
 80060e6:	f7ff fca5 	bl	8005a34 <_fflush_r>
 80060ea:	2800      	cmp	r0, #0
 80060ec:	d0d9      	beq.n	80060a2 <__swbuf_r+0x2e>
 80060ee:	e7d6      	b.n	800609e <__swbuf_r+0x2a>

080060f0 <__swsetup_r>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	4b29      	ldr	r3, [pc, #164]	@ (8006198 <__swsetup_r+0xa8>)
 80060f4:	4605      	mov	r5, r0
 80060f6:	6818      	ldr	r0, [r3, #0]
 80060f8:	460c      	mov	r4, r1
 80060fa:	b118      	cbz	r0, 8006104 <__swsetup_r+0x14>
 80060fc:	6a03      	ldr	r3, [r0, #32]
 80060fe:	b90b      	cbnz	r3, 8006104 <__swsetup_r+0x14>
 8006100:	f7ff fa06 	bl	8005510 <__sinit>
 8006104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006108:	0719      	lsls	r1, r3, #28
 800610a:	d422      	bmi.n	8006152 <__swsetup_r+0x62>
 800610c:	06da      	lsls	r2, r3, #27
 800610e:	d407      	bmi.n	8006120 <__swsetup_r+0x30>
 8006110:	2209      	movs	r2, #9
 8006112:	602a      	str	r2, [r5, #0]
 8006114:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006118:	f04f 30ff 	mov.w	r0, #4294967295
 800611c:	81a3      	strh	r3, [r4, #12]
 800611e:	e033      	b.n	8006188 <__swsetup_r+0x98>
 8006120:	0758      	lsls	r0, r3, #29
 8006122:	d512      	bpl.n	800614a <__swsetup_r+0x5a>
 8006124:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006126:	b141      	cbz	r1, 800613a <__swsetup_r+0x4a>
 8006128:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800612c:	4299      	cmp	r1, r3
 800612e:	d002      	beq.n	8006136 <__swsetup_r+0x46>
 8006130:	4628      	mov	r0, r5
 8006132:	f7ff fb01 	bl	8005738 <_free_r>
 8006136:	2300      	movs	r3, #0
 8006138:	6363      	str	r3, [r4, #52]	@ 0x34
 800613a:	89a3      	ldrh	r3, [r4, #12]
 800613c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006140:	81a3      	strh	r3, [r4, #12]
 8006142:	2300      	movs	r3, #0
 8006144:	6063      	str	r3, [r4, #4]
 8006146:	6923      	ldr	r3, [r4, #16]
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	89a3      	ldrh	r3, [r4, #12]
 800614c:	f043 0308 	orr.w	r3, r3, #8
 8006150:	81a3      	strh	r3, [r4, #12]
 8006152:	6923      	ldr	r3, [r4, #16]
 8006154:	b94b      	cbnz	r3, 800616a <__swsetup_r+0x7a>
 8006156:	89a3      	ldrh	r3, [r4, #12]
 8006158:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800615c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006160:	d003      	beq.n	800616a <__swsetup_r+0x7a>
 8006162:	4621      	mov	r1, r4
 8006164:	4628      	mov	r0, r5
 8006166:	f000 f890 	bl	800628a <__smakebuf_r>
 800616a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800616e:	f013 0201 	ands.w	r2, r3, #1
 8006172:	d00a      	beq.n	800618a <__swsetup_r+0x9a>
 8006174:	2200      	movs	r2, #0
 8006176:	60a2      	str	r2, [r4, #8]
 8006178:	6962      	ldr	r2, [r4, #20]
 800617a:	4252      	negs	r2, r2
 800617c:	61a2      	str	r2, [r4, #24]
 800617e:	6922      	ldr	r2, [r4, #16]
 8006180:	b942      	cbnz	r2, 8006194 <__swsetup_r+0xa4>
 8006182:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006186:	d1c5      	bne.n	8006114 <__swsetup_r+0x24>
 8006188:	bd38      	pop	{r3, r4, r5, pc}
 800618a:	0799      	lsls	r1, r3, #30
 800618c:	bf58      	it	pl
 800618e:	6962      	ldrpl	r2, [r4, #20]
 8006190:	60a2      	str	r2, [r4, #8]
 8006192:	e7f4      	b.n	800617e <__swsetup_r+0x8e>
 8006194:	2000      	movs	r0, #0
 8006196:	e7f7      	b.n	8006188 <__swsetup_r+0x98>
 8006198:	20000018 	.word	0x20000018

0800619c <_raise_r>:
 800619c:	291f      	cmp	r1, #31
 800619e:	b538      	push	{r3, r4, r5, lr}
 80061a0:	4605      	mov	r5, r0
 80061a2:	460c      	mov	r4, r1
 80061a4:	d904      	bls.n	80061b0 <_raise_r+0x14>
 80061a6:	2316      	movs	r3, #22
 80061a8:	6003      	str	r3, [r0, #0]
 80061aa:	f04f 30ff 	mov.w	r0, #4294967295
 80061ae:	bd38      	pop	{r3, r4, r5, pc}
 80061b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80061b2:	b112      	cbz	r2, 80061ba <_raise_r+0x1e>
 80061b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80061b8:	b94b      	cbnz	r3, 80061ce <_raise_r+0x32>
 80061ba:	4628      	mov	r0, r5
 80061bc:	f000 f830 	bl	8006220 <_getpid_r>
 80061c0:	4622      	mov	r2, r4
 80061c2:	4601      	mov	r1, r0
 80061c4:	4628      	mov	r0, r5
 80061c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061ca:	f000 b817 	b.w	80061fc <_kill_r>
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d00a      	beq.n	80061e8 <_raise_r+0x4c>
 80061d2:	1c59      	adds	r1, r3, #1
 80061d4:	d103      	bne.n	80061de <_raise_r+0x42>
 80061d6:	2316      	movs	r3, #22
 80061d8:	6003      	str	r3, [r0, #0]
 80061da:	2001      	movs	r0, #1
 80061dc:	e7e7      	b.n	80061ae <_raise_r+0x12>
 80061de:	2100      	movs	r1, #0
 80061e0:	4620      	mov	r0, r4
 80061e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80061e6:	4798      	blx	r3
 80061e8:	2000      	movs	r0, #0
 80061ea:	e7e0      	b.n	80061ae <_raise_r+0x12>

080061ec <raise>:
 80061ec:	4b02      	ldr	r3, [pc, #8]	@ (80061f8 <raise+0xc>)
 80061ee:	4601      	mov	r1, r0
 80061f0:	6818      	ldr	r0, [r3, #0]
 80061f2:	f7ff bfd3 	b.w	800619c <_raise_r>
 80061f6:	bf00      	nop
 80061f8:	20000018 	.word	0x20000018

080061fc <_kill_r>:
 80061fc:	b538      	push	{r3, r4, r5, lr}
 80061fe:	2300      	movs	r3, #0
 8006200:	4d06      	ldr	r5, [pc, #24]	@ (800621c <_kill_r+0x20>)
 8006202:	4604      	mov	r4, r0
 8006204:	4608      	mov	r0, r1
 8006206:	4611      	mov	r1, r2
 8006208:	602b      	str	r3, [r5, #0]
 800620a:	f7fd fb0c 	bl	8003826 <_kill>
 800620e:	1c43      	adds	r3, r0, #1
 8006210:	d102      	bne.n	8006218 <_kill_r+0x1c>
 8006212:	682b      	ldr	r3, [r5, #0]
 8006214:	b103      	cbz	r3, 8006218 <_kill_r+0x1c>
 8006216:	6023      	str	r3, [r4, #0]
 8006218:	bd38      	pop	{r3, r4, r5, pc}
 800621a:	bf00      	nop
 800621c:	200037f8 	.word	0x200037f8

08006220 <_getpid_r>:
 8006220:	f7fd bafa 	b.w	8003818 <_getpid>

08006224 <memchr>:
 8006224:	4603      	mov	r3, r0
 8006226:	b510      	push	{r4, lr}
 8006228:	b2c9      	uxtb	r1, r1
 800622a:	4402      	add	r2, r0
 800622c:	4293      	cmp	r3, r2
 800622e:	4618      	mov	r0, r3
 8006230:	d101      	bne.n	8006236 <memchr+0x12>
 8006232:	2000      	movs	r0, #0
 8006234:	e003      	b.n	800623e <memchr+0x1a>
 8006236:	7804      	ldrb	r4, [r0, #0]
 8006238:	3301      	adds	r3, #1
 800623a:	428c      	cmp	r4, r1
 800623c:	d1f6      	bne.n	800622c <memchr+0x8>
 800623e:	bd10      	pop	{r4, pc}

08006240 <__swhatbuf_r>:
 8006240:	b570      	push	{r4, r5, r6, lr}
 8006242:	460c      	mov	r4, r1
 8006244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006248:	4615      	mov	r5, r2
 800624a:	2900      	cmp	r1, #0
 800624c:	461e      	mov	r6, r3
 800624e:	b096      	sub	sp, #88	@ 0x58
 8006250:	da0c      	bge.n	800626c <__swhatbuf_r+0x2c>
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	2100      	movs	r1, #0
 8006256:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800625a:	bf14      	ite	ne
 800625c:	2340      	movne	r3, #64	@ 0x40
 800625e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006262:	2000      	movs	r0, #0
 8006264:	6031      	str	r1, [r6, #0]
 8006266:	602b      	str	r3, [r5, #0]
 8006268:	b016      	add	sp, #88	@ 0x58
 800626a:	bd70      	pop	{r4, r5, r6, pc}
 800626c:	466a      	mov	r2, sp
 800626e:	f000 f849 	bl	8006304 <_fstat_r>
 8006272:	2800      	cmp	r0, #0
 8006274:	dbed      	blt.n	8006252 <__swhatbuf_r+0x12>
 8006276:	9901      	ldr	r1, [sp, #4]
 8006278:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800627c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006280:	4259      	negs	r1, r3
 8006282:	4159      	adcs	r1, r3
 8006284:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006288:	e7eb      	b.n	8006262 <__swhatbuf_r+0x22>

0800628a <__smakebuf_r>:
 800628a:	898b      	ldrh	r3, [r1, #12]
 800628c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800628e:	079d      	lsls	r5, r3, #30
 8006290:	4606      	mov	r6, r0
 8006292:	460c      	mov	r4, r1
 8006294:	d507      	bpl.n	80062a6 <__smakebuf_r+0x1c>
 8006296:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800629a:	6023      	str	r3, [r4, #0]
 800629c:	6123      	str	r3, [r4, #16]
 800629e:	2301      	movs	r3, #1
 80062a0:	6163      	str	r3, [r4, #20]
 80062a2:	b003      	add	sp, #12
 80062a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062a6:	466a      	mov	r2, sp
 80062a8:	ab01      	add	r3, sp, #4
 80062aa:	f7ff ffc9 	bl	8006240 <__swhatbuf_r>
 80062ae:	9f00      	ldr	r7, [sp, #0]
 80062b0:	4605      	mov	r5, r0
 80062b2:	4639      	mov	r1, r7
 80062b4:	4630      	mov	r0, r6
 80062b6:	f7ff fab1 	bl	800581c <_malloc_r>
 80062ba:	b948      	cbnz	r0, 80062d0 <__smakebuf_r+0x46>
 80062bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062c0:	059a      	lsls	r2, r3, #22
 80062c2:	d4ee      	bmi.n	80062a2 <__smakebuf_r+0x18>
 80062c4:	f023 0303 	bic.w	r3, r3, #3
 80062c8:	f043 0302 	orr.w	r3, r3, #2
 80062cc:	81a3      	strh	r3, [r4, #12]
 80062ce:	e7e2      	b.n	8006296 <__smakebuf_r+0xc>
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80062d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062da:	81a3      	strh	r3, [r4, #12]
 80062dc:	9b01      	ldr	r3, [sp, #4]
 80062de:	6020      	str	r0, [r4, #0]
 80062e0:	b15b      	cbz	r3, 80062fa <__smakebuf_r+0x70>
 80062e2:	4630      	mov	r0, r6
 80062e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062e8:	f000 f81e 	bl	8006328 <_isatty_r>
 80062ec:	b128      	cbz	r0, 80062fa <__smakebuf_r+0x70>
 80062ee:	89a3      	ldrh	r3, [r4, #12]
 80062f0:	f023 0303 	bic.w	r3, r3, #3
 80062f4:	f043 0301 	orr.w	r3, r3, #1
 80062f8:	81a3      	strh	r3, [r4, #12]
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	431d      	orrs	r5, r3
 80062fe:	81a5      	strh	r5, [r4, #12]
 8006300:	e7cf      	b.n	80062a2 <__smakebuf_r+0x18>
	...

08006304 <_fstat_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	2300      	movs	r3, #0
 8006308:	4d06      	ldr	r5, [pc, #24]	@ (8006324 <_fstat_r+0x20>)
 800630a:	4604      	mov	r4, r0
 800630c:	4608      	mov	r0, r1
 800630e:	4611      	mov	r1, r2
 8006310:	602b      	str	r3, [r5, #0]
 8006312:	f7fd fae7 	bl	80038e4 <_fstat>
 8006316:	1c43      	adds	r3, r0, #1
 8006318:	d102      	bne.n	8006320 <_fstat_r+0x1c>
 800631a:	682b      	ldr	r3, [r5, #0]
 800631c:	b103      	cbz	r3, 8006320 <_fstat_r+0x1c>
 800631e:	6023      	str	r3, [r4, #0]
 8006320:	bd38      	pop	{r3, r4, r5, pc}
 8006322:	bf00      	nop
 8006324:	200037f8 	.word	0x200037f8

08006328 <_isatty_r>:
 8006328:	b538      	push	{r3, r4, r5, lr}
 800632a:	2300      	movs	r3, #0
 800632c:	4d05      	ldr	r5, [pc, #20]	@ (8006344 <_isatty_r+0x1c>)
 800632e:	4604      	mov	r4, r0
 8006330:	4608      	mov	r0, r1
 8006332:	602b      	str	r3, [r5, #0]
 8006334:	f7fd fae5 	bl	8003902 <_isatty>
 8006338:	1c43      	adds	r3, r0, #1
 800633a:	d102      	bne.n	8006342 <_isatty_r+0x1a>
 800633c:	682b      	ldr	r3, [r5, #0]
 800633e:	b103      	cbz	r3, 8006342 <_isatty_r+0x1a>
 8006340:	6023      	str	r3, [r4, #0]
 8006342:	bd38      	pop	{r3, r4, r5, pc}
 8006344:	200037f8 	.word	0x200037f8

08006348 <sqrtf>:
 8006348:	b538      	push	{r3, r4, r5, lr}
 800634a:	4605      	mov	r5, r0
 800634c:	f000 f888 	bl	8006460 <__ieee754_sqrtf>
 8006350:	4629      	mov	r1, r5
 8006352:	4604      	mov	r4, r0
 8006354:	4628      	mov	r0, r5
 8006356:	f7fa fcdb 	bl	8000d10 <__aeabi_fcmpun>
 800635a:	b968      	cbnz	r0, 8006378 <sqrtf+0x30>
 800635c:	2100      	movs	r1, #0
 800635e:	4628      	mov	r0, r5
 8006360:	f7fa fcae 	bl	8000cc0 <__aeabi_fcmplt>
 8006364:	b140      	cbz	r0, 8006378 <sqrtf+0x30>
 8006366:	f7ff f99b 	bl	80056a0 <__errno>
 800636a:	2321      	movs	r3, #33	@ 0x21
 800636c:	2100      	movs	r1, #0
 800636e:	6003      	str	r3, [r0, #0]
 8006370:	4608      	mov	r0, r1
 8006372:	f7fa fbbb 	bl	8000aec <__aeabi_fdiv>
 8006376:	4604      	mov	r4, r0
 8006378:	4620      	mov	r0, r4
 800637a:	bd38      	pop	{r3, r4, r5, pc}

0800637c <cosf>:
 800637c:	b507      	push	{r0, r1, r2, lr}
 800637e:	4a1a      	ldr	r2, [pc, #104]	@ (80063e8 <cosf+0x6c>)
 8006380:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8006384:	4293      	cmp	r3, r2
 8006386:	4601      	mov	r1, r0
 8006388:	d805      	bhi.n	8006396 <cosf+0x1a>
 800638a:	2100      	movs	r1, #0
 800638c:	b003      	add	sp, #12
 800638e:	f85d eb04 	ldr.w	lr, [sp], #4
 8006392:	f000 b8d5 	b.w	8006540 <__kernel_cosf>
 8006396:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800639a:	d304      	bcc.n	80063a6 <cosf+0x2a>
 800639c:	f7fa f9e8 	bl	8000770 <__aeabi_fsub>
 80063a0:	b003      	add	sp, #12
 80063a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80063a6:	4669      	mov	r1, sp
 80063a8:	f000 f9c0 	bl	800672c <__ieee754_rem_pio2f>
 80063ac:	f000 0203 	and.w	r2, r0, #3
 80063b0:	2a01      	cmp	r2, #1
 80063b2:	d007      	beq.n	80063c4 <cosf+0x48>
 80063b4:	2a02      	cmp	r2, #2
 80063b6:	d00c      	beq.n	80063d2 <cosf+0x56>
 80063b8:	b982      	cbnz	r2, 80063dc <cosf+0x60>
 80063ba:	9901      	ldr	r1, [sp, #4]
 80063bc:	9800      	ldr	r0, [sp, #0]
 80063be:	f000 f8bf 	bl	8006540 <__kernel_cosf>
 80063c2:	e7ed      	b.n	80063a0 <cosf+0x24>
 80063c4:	9901      	ldr	r1, [sp, #4]
 80063c6:	9800      	ldr	r0, [sp, #0]
 80063c8:	f000 f93a 	bl	8006640 <__kernel_sinf>
 80063cc:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80063d0:	e7e6      	b.n	80063a0 <cosf+0x24>
 80063d2:	9901      	ldr	r1, [sp, #4]
 80063d4:	9800      	ldr	r0, [sp, #0]
 80063d6:	f000 f8b3 	bl	8006540 <__kernel_cosf>
 80063da:	e7f7      	b.n	80063cc <cosf+0x50>
 80063dc:	2201      	movs	r2, #1
 80063de:	9901      	ldr	r1, [sp, #4]
 80063e0:	9800      	ldr	r0, [sp, #0]
 80063e2:	f000 f92d 	bl	8006640 <__kernel_sinf>
 80063e6:	e7db      	b.n	80063a0 <cosf+0x24>
 80063e8:	3f490fd8 	.word	0x3f490fd8

080063ec <sinf>:
 80063ec:	b507      	push	{r0, r1, r2, lr}
 80063ee:	4a1b      	ldr	r2, [pc, #108]	@ (800645c <sinf+0x70>)
 80063f0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80063f4:	4293      	cmp	r3, r2
 80063f6:	4601      	mov	r1, r0
 80063f8:	d806      	bhi.n	8006408 <sinf+0x1c>
 80063fa:	2200      	movs	r2, #0
 80063fc:	2100      	movs	r1, #0
 80063fe:	b003      	add	sp, #12
 8006400:	f85d eb04 	ldr.w	lr, [sp], #4
 8006404:	f000 b91c 	b.w	8006640 <__kernel_sinf>
 8006408:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800640c:	d304      	bcc.n	8006418 <sinf+0x2c>
 800640e:	f7fa f9af 	bl	8000770 <__aeabi_fsub>
 8006412:	b003      	add	sp, #12
 8006414:	f85d fb04 	ldr.w	pc, [sp], #4
 8006418:	4669      	mov	r1, sp
 800641a:	f000 f987 	bl	800672c <__ieee754_rem_pio2f>
 800641e:	f000 0003 	and.w	r0, r0, #3
 8006422:	2801      	cmp	r0, #1
 8006424:	d008      	beq.n	8006438 <sinf+0x4c>
 8006426:	2802      	cmp	r0, #2
 8006428:	d00b      	beq.n	8006442 <sinf+0x56>
 800642a:	b990      	cbnz	r0, 8006452 <sinf+0x66>
 800642c:	2201      	movs	r2, #1
 800642e:	9901      	ldr	r1, [sp, #4]
 8006430:	9800      	ldr	r0, [sp, #0]
 8006432:	f000 f905 	bl	8006640 <__kernel_sinf>
 8006436:	e7ec      	b.n	8006412 <sinf+0x26>
 8006438:	9901      	ldr	r1, [sp, #4]
 800643a:	9800      	ldr	r0, [sp, #0]
 800643c:	f000 f880 	bl	8006540 <__kernel_cosf>
 8006440:	e7e7      	b.n	8006412 <sinf+0x26>
 8006442:	2201      	movs	r2, #1
 8006444:	9901      	ldr	r1, [sp, #4]
 8006446:	9800      	ldr	r0, [sp, #0]
 8006448:	f000 f8fa 	bl	8006640 <__kernel_sinf>
 800644c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8006450:	e7df      	b.n	8006412 <sinf+0x26>
 8006452:	9901      	ldr	r1, [sp, #4]
 8006454:	9800      	ldr	r0, [sp, #0]
 8006456:	f000 f873 	bl	8006540 <__kernel_cosf>
 800645a:	e7f7      	b.n	800644c <sinf+0x60>
 800645c:	3f490fd8 	.word	0x3f490fd8

08006460 <__ieee754_sqrtf>:
 8006460:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8006464:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800646c:	4603      	mov	r3, r0
 800646e:	4604      	mov	r4, r0
 8006470:	d30a      	bcc.n	8006488 <__ieee754_sqrtf+0x28>
 8006472:	4601      	mov	r1, r0
 8006474:	f7fa fa86 	bl	8000984 <__aeabi_fmul>
 8006478:	4601      	mov	r1, r0
 800647a:	4620      	mov	r0, r4
 800647c:	f7fa f97a 	bl	8000774 <__addsf3>
 8006480:	4604      	mov	r4, r0
 8006482:	4620      	mov	r0, r4
 8006484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006488:	2a00      	cmp	r2, #0
 800648a:	d0fa      	beq.n	8006482 <__ieee754_sqrtf+0x22>
 800648c:	2800      	cmp	r0, #0
 800648e:	da06      	bge.n	800649e <__ieee754_sqrtf+0x3e>
 8006490:	4601      	mov	r1, r0
 8006492:	f7fa f96d 	bl	8000770 <__aeabi_fsub>
 8006496:	4601      	mov	r1, r0
 8006498:	f7fa fb28 	bl	8000aec <__aeabi_fdiv>
 800649c:	e7f0      	b.n	8006480 <__ieee754_sqrtf+0x20>
 800649e:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 80064a2:	d03c      	beq.n	800651e <__ieee754_sqrtf+0xbe>
 80064a4:	15c2      	asrs	r2, r0, #23
 80064a6:	2400      	movs	r4, #0
 80064a8:	2019      	movs	r0, #25
 80064aa:	4626      	mov	r6, r4
 80064ac:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80064b0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80064b4:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 80064b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80064bc:	07d2      	lsls	r2, r2, #31
 80064be:	bf58      	it	pl
 80064c0:	005b      	lslpl	r3, r3, #1
 80064c2:	106d      	asrs	r5, r5, #1
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	1872      	adds	r2, r6, r1
 80064c8:	429a      	cmp	r2, r3
 80064ca:	bfcf      	iteee	gt
 80064cc:	461a      	movgt	r2, r3
 80064ce:	1856      	addle	r6, r2, r1
 80064d0:	1864      	addle	r4, r4, r1
 80064d2:	1a9a      	suble	r2, r3, r2
 80064d4:	3801      	subs	r0, #1
 80064d6:	ea4f 0342 	mov.w	r3, r2, lsl #1
 80064da:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80064de:	d1f2      	bne.n	80064c6 <__ieee754_sqrtf+0x66>
 80064e0:	b1ba      	cbz	r2, 8006512 <__ieee754_sqrtf+0xb2>
 80064e2:	4e15      	ldr	r6, [pc, #84]	@ (8006538 <__ieee754_sqrtf+0xd8>)
 80064e4:	4f15      	ldr	r7, [pc, #84]	@ (800653c <__ieee754_sqrtf+0xdc>)
 80064e6:	6830      	ldr	r0, [r6, #0]
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	f7fa f941 	bl	8000770 <__aeabi_fsub>
 80064ee:	f8d6 8000 	ldr.w	r8, [r6]
 80064f2:	4601      	mov	r1, r0
 80064f4:	4640      	mov	r0, r8
 80064f6:	f7fa fbed 	bl	8000cd4 <__aeabi_fcmple>
 80064fa:	b150      	cbz	r0, 8006512 <__ieee754_sqrtf+0xb2>
 80064fc:	6830      	ldr	r0, [r6, #0]
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	f7fa f938 	bl	8000774 <__addsf3>
 8006504:	6836      	ldr	r6, [r6, #0]
 8006506:	4601      	mov	r1, r0
 8006508:	4630      	mov	r0, r6
 800650a:	f7fa fbd9 	bl	8000cc0 <__aeabi_fcmplt>
 800650e:	b170      	cbz	r0, 800652e <__ieee754_sqrtf+0xce>
 8006510:	3402      	adds	r4, #2
 8006512:	1064      	asrs	r4, r4, #1
 8006514:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8006518:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800651c:	e7b1      	b.n	8006482 <__ieee754_sqrtf+0x22>
 800651e:	005b      	lsls	r3, r3, #1
 8006520:	0218      	lsls	r0, r3, #8
 8006522:	460a      	mov	r2, r1
 8006524:	f101 0101 	add.w	r1, r1, #1
 8006528:	d5f9      	bpl.n	800651e <__ieee754_sqrtf+0xbe>
 800652a:	4252      	negs	r2, r2
 800652c:	e7bb      	b.n	80064a6 <__ieee754_sqrtf+0x46>
 800652e:	3401      	adds	r4, #1
 8006530:	f024 0401 	bic.w	r4, r4, #1
 8006534:	e7ed      	b.n	8006512 <__ieee754_sqrtf+0xb2>
 8006536:	bf00      	nop
 8006538:	08007190 	.word	0x08007190
 800653c:	0800718c 	.word	0x0800718c

08006540 <__kernel_cosf>:
 8006540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006544:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8006548:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 800654c:	4606      	mov	r6, r0
 800654e:	4688      	mov	r8, r1
 8006550:	d203      	bcs.n	800655a <__kernel_cosf+0x1a>
 8006552:	f7fa fbf3 	bl	8000d3c <__aeabi_f2iz>
 8006556:	2800      	cmp	r0, #0
 8006558:	d05c      	beq.n	8006614 <__kernel_cosf+0xd4>
 800655a:	4631      	mov	r1, r6
 800655c:	4630      	mov	r0, r6
 800655e:	f7fa fa11 	bl	8000984 <__aeabi_fmul>
 8006562:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006566:	4604      	mov	r4, r0
 8006568:	f7fa fa0c 	bl	8000984 <__aeabi_fmul>
 800656c:	492b      	ldr	r1, [pc, #172]	@ (800661c <__kernel_cosf+0xdc>)
 800656e:	4607      	mov	r7, r0
 8006570:	4620      	mov	r0, r4
 8006572:	f7fa fa07 	bl	8000984 <__aeabi_fmul>
 8006576:	492a      	ldr	r1, [pc, #168]	@ (8006620 <__kernel_cosf+0xe0>)
 8006578:	f7fa f8fc 	bl	8000774 <__addsf3>
 800657c:	4621      	mov	r1, r4
 800657e:	f7fa fa01 	bl	8000984 <__aeabi_fmul>
 8006582:	4928      	ldr	r1, [pc, #160]	@ (8006624 <__kernel_cosf+0xe4>)
 8006584:	f7fa f8f4 	bl	8000770 <__aeabi_fsub>
 8006588:	4621      	mov	r1, r4
 800658a:	f7fa f9fb 	bl	8000984 <__aeabi_fmul>
 800658e:	4926      	ldr	r1, [pc, #152]	@ (8006628 <__kernel_cosf+0xe8>)
 8006590:	f7fa f8f0 	bl	8000774 <__addsf3>
 8006594:	4621      	mov	r1, r4
 8006596:	f7fa f9f5 	bl	8000984 <__aeabi_fmul>
 800659a:	4924      	ldr	r1, [pc, #144]	@ (800662c <__kernel_cosf+0xec>)
 800659c:	f7fa f8e8 	bl	8000770 <__aeabi_fsub>
 80065a0:	4621      	mov	r1, r4
 80065a2:	f7fa f9ef 	bl	8000984 <__aeabi_fmul>
 80065a6:	4922      	ldr	r1, [pc, #136]	@ (8006630 <__kernel_cosf+0xf0>)
 80065a8:	f7fa f8e4 	bl	8000774 <__addsf3>
 80065ac:	4621      	mov	r1, r4
 80065ae:	f7fa f9e9 	bl	8000984 <__aeabi_fmul>
 80065b2:	4621      	mov	r1, r4
 80065b4:	f7fa f9e6 	bl	8000984 <__aeabi_fmul>
 80065b8:	4641      	mov	r1, r8
 80065ba:	4604      	mov	r4, r0
 80065bc:	4630      	mov	r0, r6
 80065be:	f7fa f9e1 	bl	8000984 <__aeabi_fmul>
 80065c2:	4601      	mov	r1, r0
 80065c4:	4620      	mov	r0, r4
 80065c6:	f7fa f8d3 	bl	8000770 <__aeabi_fsub>
 80065ca:	4b1a      	ldr	r3, [pc, #104]	@ (8006634 <__kernel_cosf+0xf4>)
 80065cc:	4604      	mov	r4, r0
 80065ce:	429d      	cmp	r5, r3
 80065d0:	d80a      	bhi.n	80065e8 <__kernel_cosf+0xa8>
 80065d2:	4601      	mov	r1, r0
 80065d4:	4638      	mov	r0, r7
 80065d6:	f7fa f8cb 	bl	8000770 <__aeabi_fsub>
 80065da:	4601      	mov	r1, r0
 80065dc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80065e0:	f7fa f8c6 	bl	8000770 <__aeabi_fsub>
 80065e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e8:	4b13      	ldr	r3, [pc, #76]	@ (8006638 <__kernel_cosf+0xf8>)
 80065ea:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80065ee:	429d      	cmp	r5, r3
 80065f0:	bf8c      	ite	hi
 80065f2:	4d12      	ldrhi	r5, [pc, #72]	@ (800663c <__kernel_cosf+0xfc>)
 80065f4:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 80065f8:	4629      	mov	r1, r5
 80065fa:	f7fa f8b9 	bl	8000770 <__aeabi_fsub>
 80065fe:	4629      	mov	r1, r5
 8006600:	4606      	mov	r6, r0
 8006602:	4638      	mov	r0, r7
 8006604:	f7fa f8b4 	bl	8000770 <__aeabi_fsub>
 8006608:	4621      	mov	r1, r4
 800660a:	f7fa f8b1 	bl	8000770 <__aeabi_fsub>
 800660e:	4601      	mov	r1, r0
 8006610:	4630      	mov	r0, r6
 8006612:	e7e5      	b.n	80065e0 <__kernel_cosf+0xa0>
 8006614:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006618:	e7e4      	b.n	80065e4 <__kernel_cosf+0xa4>
 800661a:	bf00      	nop
 800661c:	ad47d74e 	.word	0xad47d74e
 8006620:	310f74f6 	.word	0x310f74f6
 8006624:	3493f27c 	.word	0x3493f27c
 8006628:	37d00d01 	.word	0x37d00d01
 800662c:	3ab60b61 	.word	0x3ab60b61
 8006630:	3d2aaaab 	.word	0x3d2aaaab
 8006634:	3e999999 	.word	0x3e999999
 8006638:	3f480000 	.word	0x3f480000
 800663c:	3e900000 	.word	0x3e900000

08006640 <__kernel_sinf>:
 8006640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006644:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8006648:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800664c:	4604      	mov	r4, r0
 800664e:	460f      	mov	r7, r1
 8006650:	4691      	mov	r9, r2
 8006652:	d203      	bcs.n	800665c <__kernel_sinf+0x1c>
 8006654:	f7fa fb72 	bl	8000d3c <__aeabi_f2iz>
 8006658:	2800      	cmp	r0, #0
 800665a:	d035      	beq.n	80066c8 <__kernel_sinf+0x88>
 800665c:	4621      	mov	r1, r4
 800665e:	4620      	mov	r0, r4
 8006660:	f7fa f990 	bl	8000984 <__aeabi_fmul>
 8006664:	4605      	mov	r5, r0
 8006666:	4601      	mov	r1, r0
 8006668:	4620      	mov	r0, r4
 800666a:	f7fa f98b 	bl	8000984 <__aeabi_fmul>
 800666e:	4929      	ldr	r1, [pc, #164]	@ (8006714 <__kernel_sinf+0xd4>)
 8006670:	4606      	mov	r6, r0
 8006672:	4628      	mov	r0, r5
 8006674:	f7fa f986 	bl	8000984 <__aeabi_fmul>
 8006678:	4927      	ldr	r1, [pc, #156]	@ (8006718 <__kernel_sinf+0xd8>)
 800667a:	f7fa f879 	bl	8000770 <__aeabi_fsub>
 800667e:	4629      	mov	r1, r5
 8006680:	f7fa f980 	bl	8000984 <__aeabi_fmul>
 8006684:	4925      	ldr	r1, [pc, #148]	@ (800671c <__kernel_sinf+0xdc>)
 8006686:	f7fa f875 	bl	8000774 <__addsf3>
 800668a:	4629      	mov	r1, r5
 800668c:	f7fa f97a 	bl	8000984 <__aeabi_fmul>
 8006690:	4923      	ldr	r1, [pc, #140]	@ (8006720 <__kernel_sinf+0xe0>)
 8006692:	f7fa f86d 	bl	8000770 <__aeabi_fsub>
 8006696:	4629      	mov	r1, r5
 8006698:	f7fa f974 	bl	8000984 <__aeabi_fmul>
 800669c:	4921      	ldr	r1, [pc, #132]	@ (8006724 <__kernel_sinf+0xe4>)
 800669e:	f7fa f869 	bl	8000774 <__addsf3>
 80066a2:	4680      	mov	r8, r0
 80066a4:	f1b9 0f00 	cmp.w	r9, #0
 80066a8:	d111      	bne.n	80066ce <__kernel_sinf+0x8e>
 80066aa:	4601      	mov	r1, r0
 80066ac:	4628      	mov	r0, r5
 80066ae:	f7fa f969 	bl	8000984 <__aeabi_fmul>
 80066b2:	491d      	ldr	r1, [pc, #116]	@ (8006728 <__kernel_sinf+0xe8>)
 80066b4:	f7fa f85c 	bl	8000770 <__aeabi_fsub>
 80066b8:	4631      	mov	r1, r6
 80066ba:	f7fa f963 	bl	8000984 <__aeabi_fmul>
 80066be:	4601      	mov	r1, r0
 80066c0:	4620      	mov	r0, r4
 80066c2:	f7fa f857 	bl	8000774 <__addsf3>
 80066c6:	4604      	mov	r4, r0
 80066c8:	4620      	mov	r0, r4
 80066ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066ce:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80066d2:	4638      	mov	r0, r7
 80066d4:	f7fa f956 	bl	8000984 <__aeabi_fmul>
 80066d8:	4641      	mov	r1, r8
 80066da:	4681      	mov	r9, r0
 80066dc:	4630      	mov	r0, r6
 80066de:	f7fa f951 	bl	8000984 <__aeabi_fmul>
 80066e2:	4601      	mov	r1, r0
 80066e4:	4648      	mov	r0, r9
 80066e6:	f7fa f843 	bl	8000770 <__aeabi_fsub>
 80066ea:	4629      	mov	r1, r5
 80066ec:	f7fa f94a 	bl	8000984 <__aeabi_fmul>
 80066f0:	4639      	mov	r1, r7
 80066f2:	f7fa f83d 	bl	8000770 <__aeabi_fsub>
 80066f6:	490c      	ldr	r1, [pc, #48]	@ (8006728 <__kernel_sinf+0xe8>)
 80066f8:	4605      	mov	r5, r0
 80066fa:	4630      	mov	r0, r6
 80066fc:	f7fa f942 	bl	8000984 <__aeabi_fmul>
 8006700:	4601      	mov	r1, r0
 8006702:	4628      	mov	r0, r5
 8006704:	f7fa f836 	bl	8000774 <__addsf3>
 8006708:	4601      	mov	r1, r0
 800670a:	4620      	mov	r0, r4
 800670c:	f7fa f830 	bl	8000770 <__aeabi_fsub>
 8006710:	e7d9      	b.n	80066c6 <__kernel_sinf+0x86>
 8006712:	bf00      	nop
 8006714:	2f2ec9d3 	.word	0x2f2ec9d3
 8006718:	32d72f34 	.word	0x32d72f34
 800671c:	3638ef1b 	.word	0x3638ef1b
 8006720:	39500d01 	.word	0x39500d01
 8006724:	3c088889 	.word	0x3c088889
 8006728:	3e2aaaab 	.word	0x3e2aaaab

0800672c <__ieee754_rem_pio2f>:
 800672c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006730:	4aa4      	ldr	r2, [pc, #656]	@ (80069c4 <__ieee754_rem_pio2f+0x298>)
 8006732:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8006736:	4590      	cmp	r8, r2
 8006738:	460c      	mov	r4, r1
 800673a:	4682      	mov	sl, r0
 800673c:	b087      	sub	sp, #28
 800673e:	d804      	bhi.n	800674a <__ieee754_rem_pio2f+0x1e>
 8006740:	2300      	movs	r3, #0
 8006742:	6008      	str	r0, [r1, #0]
 8006744:	604b      	str	r3, [r1, #4]
 8006746:	2500      	movs	r5, #0
 8006748:	e01d      	b.n	8006786 <__ieee754_rem_pio2f+0x5a>
 800674a:	4a9f      	ldr	r2, [pc, #636]	@ (80069c8 <__ieee754_rem_pio2f+0x29c>)
 800674c:	4590      	cmp	r8, r2
 800674e:	d84f      	bhi.n	80067f0 <__ieee754_rem_pio2f+0xc4>
 8006750:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8006754:	2800      	cmp	r0, #0
 8006756:	499d      	ldr	r1, [pc, #628]	@ (80069cc <__ieee754_rem_pio2f+0x2a0>)
 8006758:	4f9d      	ldr	r7, [pc, #628]	@ (80069d0 <__ieee754_rem_pio2f+0x2a4>)
 800675a:	f025 050f 	bic.w	r5, r5, #15
 800675e:	dd24      	ble.n	80067aa <__ieee754_rem_pio2f+0x7e>
 8006760:	f7fa f806 	bl	8000770 <__aeabi_fsub>
 8006764:	42bd      	cmp	r5, r7
 8006766:	4606      	mov	r6, r0
 8006768:	d011      	beq.n	800678e <__ieee754_rem_pio2f+0x62>
 800676a:	499a      	ldr	r1, [pc, #616]	@ (80069d4 <__ieee754_rem_pio2f+0x2a8>)
 800676c:	f7fa f800 	bl	8000770 <__aeabi_fsub>
 8006770:	4601      	mov	r1, r0
 8006772:	4605      	mov	r5, r0
 8006774:	4630      	mov	r0, r6
 8006776:	f7f9 fffb 	bl	8000770 <__aeabi_fsub>
 800677a:	4996      	ldr	r1, [pc, #600]	@ (80069d4 <__ieee754_rem_pio2f+0x2a8>)
 800677c:	f7f9 fff8 	bl	8000770 <__aeabi_fsub>
 8006780:	6025      	str	r5, [r4, #0]
 8006782:	2501      	movs	r5, #1
 8006784:	6060      	str	r0, [r4, #4]
 8006786:	4628      	mov	r0, r5
 8006788:	b007      	add	sp, #28
 800678a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800678e:	4992      	ldr	r1, [pc, #584]	@ (80069d8 <__ieee754_rem_pio2f+0x2ac>)
 8006790:	f7f9 ffee 	bl	8000770 <__aeabi_fsub>
 8006794:	4991      	ldr	r1, [pc, #580]	@ (80069dc <__ieee754_rem_pio2f+0x2b0>)
 8006796:	4606      	mov	r6, r0
 8006798:	f7f9 ffea 	bl	8000770 <__aeabi_fsub>
 800679c:	4601      	mov	r1, r0
 800679e:	4605      	mov	r5, r0
 80067a0:	4630      	mov	r0, r6
 80067a2:	f7f9 ffe5 	bl	8000770 <__aeabi_fsub>
 80067a6:	498d      	ldr	r1, [pc, #564]	@ (80069dc <__ieee754_rem_pio2f+0x2b0>)
 80067a8:	e7e8      	b.n	800677c <__ieee754_rem_pio2f+0x50>
 80067aa:	f7f9 ffe3 	bl	8000774 <__addsf3>
 80067ae:	42bd      	cmp	r5, r7
 80067b0:	4606      	mov	r6, r0
 80067b2:	d00f      	beq.n	80067d4 <__ieee754_rem_pio2f+0xa8>
 80067b4:	4987      	ldr	r1, [pc, #540]	@ (80069d4 <__ieee754_rem_pio2f+0x2a8>)
 80067b6:	f7f9 ffdd 	bl	8000774 <__addsf3>
 80067ba:	4601      	mov	r1, r0
 80067bc:	4605      	mov	r5, r0
 80067be:	4630      	mov	r0, r6
 80067c0:	f7f9 ffd6 	bl	8000770 <__aeabi_fsub>
 80067c4:	4983      	ldr	r1, [pc, #524]	@ (80069d4 <__ieee754_rem_pio2f+0x2a8>)
 80067c6:	f7f9 ffd5 	bl	8000774 <__addsf3>
 80067ca:	6025      	str	r5, [r4, #0]
 80067cc:	6060      	str	r0, [r4, #4]
 80067ce:	f04f 35ff 	mov.w	r5, #4294967295
 80067d2:	e7d8      	b.n	8006786 <__ieee754_rem_pio2f+0x5a>
 80067d4:	4980      	ldr	r1, [pc, #512]	@ (80069d8 <__ieee754_rem_pio2f+0x2ac>)
 80067d6:	f7f9 ffcd 	bl	8000774 <__addsf3>
 80067da:	4980      	ldr	r1, [pc, #512]	@ (80069dc <__ieee754_rem_pio2f+0x2b0>)
 80067dc:	4606      	mov	r6, r0
 80067de:	f7f9 ffc9 	bl	8000774 <__addsf3>
 80067e2:	4601      	mov	r1, r0
 80067e4:	4605      	mov	r5, r0
 80067e6:	4630      	mov	r0, r6
 80067e8:	f7f9 ffc2 	bl	8000770 <__aeabi_fsub>
 80067ec:	497b      	ldr	r1, [pc, #492]	@ (80069dc <__ieee754_rem_pio2f+0x2b0>)
 80067ee:	e7ea      	b.n	80067c6 <__ieee754_rem_pio2f+0x9a>
 80067f0:	4a7b      	ldr	r2, [pc, #492]	@ (80069e0 <__ieee754_rem_pio2f+0x2b4>)
 80067f2:	4590      	cmp	r8, r2
 80067f4:	f200 8095 	bhi.w	8006922 <__ieee754_rem_pio2f+0x1f6>
 80067f8:	f000 f8fe 	bl	80069f8 <fabsf>
 80067fc:	4979      	ldr	r1, [pc, #484]	@ (80069e4 <__ieee754_rem_pio2f+0x2b8>)
 80067fe:	4606      	mov	r6, r0
 8006800:	f7fa f8c0 	bl	8000984 <__aeabi_fmul>
 8006804:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006808:	f7f9 ffb4 	bl	8000774 <__addsf3>
 800680c:	f7fa fa96 	bl	8000d3c <__aeabi_f2iz>
 8006810:	4605      	mov	r5, r0
 8006812:	f7fa f863 	bl	80008dc <__aeabi_i2f>
 8006816:	496d      	ldr	r1, [pc, #436]	@ (80069cc <__ieee754_rem_pio2f+0x2a0>)
 8006818:	4681      	mov	r9, r0
 800681a:	f7fa f8b3 	bl	8000984 <__aeabi_fmul>
 800681e:	4601      	mov	r1, r0
 8006820:	4630      	mov	r0, r6
 8006822:	f7f9 ffa5 	bl	8000770 <__aeabi_fsub>
 8006826:	496b      	ldr	r1, [pc, #428]	@ (80069d4 <__ieee754_rem_pio2f+0x2a8>)
 8006828:	4607      	mov	r7, r0
 800682a:	4648      	mov	r0, r9
 800682c:	f7fa f8aa 	bl	8000984 <__aeabi_fmul>
 8006830:	2d1f      	cmp	r5, #31
 8006832:	4606      	mov	r6, r0
 8006834:	dc0e      	bgt.n	8006854 <__ieee754_rem_pio2f+0x128>
 8006836:	4a6c      	ldr	r2, [pc, #432]	@ (80069e8 <__ieee754_rem_pio2f+0x2bc>)
 8006838:	1e69      	subs	r1, r5, #1
 800683a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800683e:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 8006842:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006846:	4293      	cmp	r3, r2
 8006848:	d004      	beq.n	8006854 <__ieee754_rem_pio2f+0x128>
 800684a:	4631      	mov	r1, r6
 800684c:	4638      	mov	r0, r7
 800684e:	f7f9 ff8f 	bl	8000770 <__aeabi_fsub>
 8006852:	e00b      	b.n	800686c <__ieee754_rem_pio2f+0x140>
 8006854:	4631      	mov	r1, r6
 8006856:	4638      	mov	r0, r7
 8006858:	f7f9 ff8a 	bl	8000770 <__aeabi_fsub>
 800685c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006860:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 8006864:	2b08      	cmp	r3, #8
 8006866:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800686a:	dc01      	bgt.n	8006870 <__ieee754_rem_pio2f+0x144>
 800686c:	6020      	str	r0, [r4, #0]
 800686e:	e026      	b.n	80068be <__ieee754_rem_pio2f+0x192>
 8006870:	4959      	ldr	r1, [pc, #356]	@ (80069d8 <__ieee754_rem_pio2f+0x2ac>)
 8006872:	4648      	mov	r0, r9
 8006874:	f7fa f886 	bl	8000984 <__aeabi_fmul>
 8006878:	4606      	mov	r6, r0
 800687a:	4601      	mov	r1, r0
 800687c:	4638      	mov	r0, r7
 800687e:	f7f9 ff77 	bl	8000770 <__aeabi_fsub>
 8006882:	4601      	mov	r1, r0
 8006884:	4680      	mov	r8, r0
 8006886:	4638      	mov	r0, r7
 8006888:	f7f9 ff72 	bl	8000770 <__aeabi_fsub>
 800688c:	4631      	mov	r1, r6
 800688e:	f7f9 ff6f 	bl	8000770 <__aeabi_fsub>
 8006892:	4606      	mov	r6, r0
 8006894:	4951      	ldr	r1, [pc, #324]	@ (80069dc <__ieee754_rem_pio2f+0x2b0>)
 8006896:	4648      	mov	r0, r9
 8006898:	f7fa f874 	bl	8000984 <__aeabi_fmul>
 800689c:	4631      	mov	r1, r6
 800689e:	f7f9 ff67 	bl	8000770 <__aeabi_fsub>
 80068a2:	4601      	mov	r1, r0
 80068a4:	4606      	mov	r6, r0
 80068a6:	4640      	mov	r0, r8
 80068a8:	f7f9 ff62 	bl	8000770 <__aeabi_fsub>
 80068ac:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80068b0:	ebab 0b03 	sub.w	fp, fp, r3
 80068b4:	f1bb 0f19 	cmp.w	fp, #25
 80068b8:	dc18      	bgt.n	80068ec <__ieee754_rem_pio2f+0x1c0>
 80068ba:	4647      	mov	r7, r8
 80068bc:	6020      	str	r0, [r4, #0]
 80068be:	f8d4 8000 	ldr.w	r8, [r4]
 80068c2:	4638      	mov	r0, r7
 80068c4:	4641      	mov	r1, r8
 80068c6:	f7f9 ff53 	bl	8000770 <__aeabi_fsub>
 80068ca:	4631      	mov	r1, r6
 80068cc:	f7f9 ff50 	bl	8000770 <__aeabi_fsub>
 80068d0:	f1ba 0f00 	cmp.w	sl, #0
 80068d4:	6060      	str	r0, [r4, #4]
 80068d6:	f6bf af56 	bge.w	8006786 <__ieee754_rem_pio2f+0x5a>
 80068da:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 80068de:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80068e2:	f8c4 8000 	str.w	r8, [r4]
 80068e6:	6060      	str	r0, [r4, #4]
 80068e8:	426d      	negs	r5, r5
 80068ea:	e74c      	b.n	8006786 <__ieee754_rem_pio2f+0x5a>
 80068ec:	493f      	ldr	r1, [pc, #252]	@ (80069ec <__ieee754_rem_pio2f+0x2c0>)
 80068ee:	4648      	mov	r0, r9
 80068f0:	f7fa f848 	bl	8000984 <__aeabi_fmul>
 80068f4:	4606      	mov	r6, r0
 80068f6:	4601      	mov	r1, r0
 80068f8:	4640      	mov	r0, r8
 80068fa:	f7f9 ff39 	bl	8000770 <__aeabi_fsub>
 80068fe:	4601      	mov	r1, r0
 8006900:	4607      	mov	r7, r0
 8006902:	4640      	mov	r0, r8
 8006904:	f7f9 ff34 	bl	8000770 <__aeabi_fsub>
 8006908:	4631      	mov	r1, r6
 800690a:	f7f9 ff31 	bl	8000770 <__aeabi_fsub>
 800690e:	4606      	mov	r6, r0
 8006910:	4937      	ldr	r1, [pc, #220]	@ (80069f0 <__ieee754_rem_pio2f+0x2c4>)
 8006912:	4648      	mov	r0, r9
 8006914:	f7fa f836 	bl	8000984 <__aeabi_fmul>
 8006918:	4631      	mov	r1, r6
 800691a:	f7f9 ff29 	bl	8000770 <__aeabi_fsub>
 800691e:	4606      	mov	r6, r0
 8006920:	e793      	b.n	800684a <__ieee754_rem_pio2f+0x11e>
 8006922:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8006926:	d305      	bcc.n	8006934 <__ieee754_rem_pio2f+0x208>
 8006928:	4601      	mov	r1, r0
 800692a:	f7f9 ff21 	bl	8000770 <__aeabi_fsub>
 800692e:	6060      	str	r0, [r4, #4]
 8006930:	6020      	str	r0, [r4, #0]
 8006932:	e708      	b.n	8006746 <__ieee754_rem_pio2f+0x1a>
 8006934:	ea4f 56e8 	mov.w	r6, r8, asr #23
 8006938:	3e86      	subs	r6, #134	@ 0x86
 800693a:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800693e:	4640      	mov	r0, r8
 8006940:	f7fa f9fc 	bl	8000d3c <__aeabi_f2iz>
 8006944:	f7f9 ffca 	bl	80008dc <__aeabi_i2f>
 8006948:	4601      	mov	r1, r0
 800694a:	9003      	str	r0, [sp, #12]
 800694c:	4640      	mov	r0, r8
 800694e:	f7f9 ff0f 	bl	8000770 <__aeabi_fsub>
 8006952:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8006956:	f7fa f815 	bl	8000984 <__aeabi_fmul>
 800695a:	4607      	mov	r7, r0
 800695c:	f7fa f9ee 	bl	8000d3c <__aeabi_f2iz>
 8006960:	f7f9 ffbc 	bl	80008dc <__aeabi_i2f>
 8006964:	4601      	mov	r1, r0
 8006966:	9004      	str	r0, [sp, #16]
 8006968:	4605      	mov	r5, r0
 800696a:	4638      	mov	r0, r7
 800696c:	f7f9 ff00 	bl	8000770 <__aeabi_fsub>
 8006970:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8006974:	f7fa f806 	bl	8000984 <__aeabi_fmul>
 8006978:	2100      	movs	r1, #0
 800697a:	9005      	str	r0, [sp, #20]
 800697c:	f7fa f996 	bl	8000cac <__aeabi_fcmpeq>
 8006980:	b1f0      	cbz	r0, 80069c0 <__ieee754_rem_pio2f+0x294>
 8006982:	2100      	movs	r1, #0
 8006984:	4628      	mov	r0, r5
 8006986:	f7fa f991 	bl	8000cac <__aeabi_fcmpeq>
 800698a:	2800      	cmp	r0, #0
 800698c:	bf14      	ite	ne
 800698e:	2301      	movne	r3, #1
 8006990:	2302      	moveq	r3, #2
 8006992:	4a18      	ldr	r2, [pc, #96]	@ (80069f4 <__ieee754_rem_pio2f+0x2c8>)
 8006994:	4621      	mov	r1, r4
 8006996:	9201      	str	r2, [sp, #4]
 8006998:	2202      	movs	r2, #2
 800699a:	a803      	add	r0, sp, #12
 800699c:	9200      	str	r2, [sp, #0]
 800699e:	4632      	mov	r2, r6
 80069a0:	f000 f87a 	bl	8006a98 <__kernel_rem_pio2f>
 80069a4:	f1ba 0f00 	cmp.w	sl, #0
 80069a8:	4605      	mov	r5, r0
 80069aa:	f6bf aeec 	bge.w	8006786 <__ieee754_rem_pio2f+0x5a>
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	6863      	ldr	r3, [r4, #4]
 80069b8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80069bc:	6063      	str	r3, [r4, #4]
 80069be:	e793      	b.n	80068e8 <__ieee754_rem_pio2f+0x1bc>
 80069c0:	2303      	movs	r3, #3
 80069c2:	e7e6      	b.n	8006992 <__ieee754_rem_pio2f+0x266>
 80069c4:	3f490fd8 	.word	0x3f490fd8
 80069c8:	4016cbe3 	.word	0x4016cbe3
 80069cc:	3fc90f80 	.word	0x3fc90f80
 80069d0:	3fc90fd0 	.word	0x3fc90fd0
 80069d4:	37354443 	.word	0x37354443
 80069d8:	37354400 	.word	0x37354400
 80069dc:	2e85a308 	.word	0x2e85a308
 80069e0:	43490f80 	.word	0x43490f80
 80069e4:	3f22f984 	.word	0x3f22f984
 80069e8:	08007194 	.word	0x08007194
 80069ec:	2e85a300 	.word	0x2e85a300
 80069f0:	248d3132 	.word	0x248d3132
 80069f4:	08007214 	.word	0x08007214

080069f8 <fabsf>:
 80069f8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80069fc:	4770      	bx	lr
	...

08006a00 <scalbnf>:
 8006a00:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8006a04:	b538      	push	{r3, r4, r5, lr}
 8006a06:	4603      	mov	r3, r0
 8006a08:	460d      	mov	r5, r1
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	d02e      	beq.n	8006a6c <scalbnf+0x6c>
 8006a0e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006a12:	d304      	bcc.n	8006a1e <scalbnf+0x1e>
 8006a14:	4601      	mov	r1, r0
 8006a16:	f7f9 fead 	bl	8000774 <__addsf3>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	e026      	b.n	8006a6c <scalbnf+0x6c>
 8006a1e:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8006a22:	d118      	bne.n	8006a56 <scalbnf+0x56>
 8006a24:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8006a28:	f7f9 ffac 	bl	8000984 <__aeabi_fmul>
 8006a2c:	4a17      	ldr	r2, [pc, #92]	@ (8006a8c <scalbnf+0x8c>)
 8006a2e:	4603      	mov	r3, r0
 8006a30:	4295      	cmp	r5, r2
 8006a32:	db0c      	blt.n	8006a4e <scalbnf+0x4e>
 8006a34:	4604      	mov	r4, r0
 8006a36:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8006a3a:	3a19      	subs	r2, #25
 8006a3c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006a40:	428d      	cmp	r5, r1
 8006a42:	dd0a      	ble.n	8006a5a <scalbnf+0x5a>
 8006a44:	4912      	ldr	r1, [pc, #72]	@ (8006a90 <scalbnf+0x90>)
 8006a46:	4618      	mov	r0, r3
 8006a48:	f361 001e 	bfi	r0, r1, #0, #31
 8006a4c:	e000      	b.n	8006a50 <scalbnf+0x50>
 8006a4e:	4911      	ldr	r1, [pc, #68]	@ (8006a94 <scalbnf+0x94>)
 8006a50:	f7f9 ff98 	bl	8000984 <__aeabi_fmul>
 8006a54:	e7e1      	b.n	8006a1a <scalbnf+0x1a>
 8006a56:	0dd2      	lsrs	r2, r2, #23
 8006a58:	e7f0      	b.n	8006a3c <scalbnf+0x3c>
 8006a5a:	1951      	adds	r1, r2, r5
 8006a5c:	29fe      	cmp	r1, #254	@ 0xfe
 8006a5e:	dcf1      	bgt.n	8006a44 <scalbnf+0x44>
 8006a60:	2900      	cmp	r1, #0
 8006a62:	dd05      	ble.n	8006a70 <scalbnf+0x70>
 8006a64:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8006a68:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	bd38      	pop	{r3, r4, r5, pc}
 8006a70:	f111 0f16 	cmn.w	r1, #22
 8006a74:	da01      	bge.n	8006a7a <scalbnf+0x7a>
 8006a76:	4907      	ldr	r1, [pc, #28]	@ (8006a94 <scalbnf+0x94>)
 8006a78:	e7e5      	b.n	8006a46 <scalbnf+0x46>
 8006a7a:	f101 0019 	add.w	r0, r1, #25
 8006a7e:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8006a82:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8006a86:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8006a8a:	e7e1      	b.n	8006a50 <scalbnf+0x50>
 8006a8c:	ffff3cb0 	.word	0xffff3cb0
 8006a90:	7149f2ca 	.word	0x7149f2ca
 8006a94:	0da24260 	.word	0x0da24260

08006a98 <__kernel_rem_pio2f>:
 8006a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9c:	b0db      	sub	sp, #364	@ 0x16c
 8006a9e:	9202      	str	r2, [sp, #8]
 8006aa0:	9304      	str	r3, [sp, #16]
 8006aa2:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8006aa4:	4bac      	ldr	r3, [pc, #688]	@ (8006d58 <__kernel_rem_pio2f+0x2c0>)
 8006aa6:	9005      	str	r0, [sp, #20]
 8006aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aac:	9100      	str	r1, [sp, #0]
 8006aae:	9301      	str	r3, [sp, #4]
 8006ab0:	9b04      	ldr	r3, [sp, #16]
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	9303      	str	r3, [sp, #12]
 8006ab6:	9b02      	ldr	r3, [sp, #8]
 8006ab8:	1d1a      	adds	r2, r3, #4
 8006aba:	f2c0 8099 	blt.w	8006bf0 <__kernel_rem_pio2f+0x158>
 8006abe:	1edc      	subs	r4, r3, #3
 8006ac0:	bf48      	it	mi
 8006ac2:	1d1c      	addmi	r4, r3, #4
 8006ac4:	10e4      	asrs	r4, r4, #3
 8006ac6:	2500      	movs	r5, #0
 8006ac8:	f04f 0b00 	mov.w	fp, #0
 8006acc:	1c67      	adds	r7, r4, #1
 8006ace:	00fb      	lsls	r3, r7, #3
 8006ad0:	9306      	str	r3, [sp, #24]
 8006ad2:	9b02      	ldr	r3, [sp, #8]
 8006ad4:	9a03      	ldr	r2, [sp, #12]
 8006ad6:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8006ada:	9b01      	ldr	r3, [sp, #4]
 8006adc:	eba4 0802 	sub.w	r8, r4, r2
 8006ae0:	eb03 0902 	add.w	r9, r3, r2
 8006ae4:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8006ae6:	ae1e      	add	r6, sp, #120	@ 0x78
 8006ae8:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8006aec:	454d      	cmp	r5, r9
 8006aee:	f340 8081 	ble.w	8006bf4 <__kernel_rem_pio2f+0x15c>
 8006af2:	9a04      	ldr	r2, [sp, #16]
 8006af4:	ab1e      	add	r3, sp, #120	@ 0x78
 8006af6:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8006afa:	f04f 0900 	mov.w	r9, #0
 8006afe:	2300      	movs	r3, #0
 8006b00:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8006b04:	9a01      	ldr	r2, [sp, #4]
 8006b06:	4591      	cmp	r9, r2
 8006b08:	f340 809a 	ble.w	8006c40 <__kernel_rem_pio2f+0x1a8>
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	aa0a      	add	r2, sp, #40	@ 0x28
 8006b10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006b14:	9308      	str	r3, [sp, #32]
 8006b16:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8006b18:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006b1c:	9c01      	ldr	r4, [sp, #4]
 8006b1e:	9307      	str	r3, [sp, #28]
 8006b20:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8006b24:	4646      	mov	r6, r8
 8006b26:	4625      	mov	r5, r4
 8006b28:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 8006b2c:	ab5a      	add	r3, sp, #360	@ 0x168
 8006b2e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006b32:	f853 bc50 	ldr.w	fp, [r3, #-80]
 8006b36:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8006b3a:	2d00      	cmp	r5, #0
 8006b3c:	f300 8085 	bgt.w	8006c4a <__kernel_rem_pio2f+0x1b2>
 8006b40:	4639      	mov	r1, r7
 8006b42:	4658      	mov	r0, fp
 8006b44:	f7ff ff5c 	bl	8006a00 <scalbnf>
 8006b48:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	f7f9 ff19 	bl	8000984 <__aeabi_fmul>
 8006b52:	f000 fa3f 	bl	8006fd4 <floorf>
 8006b56:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8006b5a:	f7f9 ff13 	bl	8000984 <__aeabi_fmul>
 8006b5e:	4601      	mov	r1, r0
 8006b60:	4628      	mov	r0, r5
 8006b62:	f7f9 fe05 	bl	8000770 <__aeabi_fsub>
 8006b66:	4605      	mov	r5, r0
 8006b68:	f7fa f8e8 	bl	8000d3c <__aeabi_f2iz>
 8006b6c:	4606      	mov	r6, r0
 8006b6e:	f7f9 feb5 	bl	80008dc <__aeabi_i2f>
 8006b72:	4601      	mov	r1, r0
 8006b74:	4628      	mov	r0, r5
 8006b76:	f7f9 fdfb 	bl	8000770 <__aeabi_fsub>
 8006b7a:	2f00      	cmp	r7, #0
 8006b7c:	4681      	mov	r9, r0
 8006b7e:	f340 8081 	ble.w	8006c84 <__kernel_rem_pio2f+0x1ec>
 8006b82:	1e62      	subs	r2, r4, #1
 8006b84:	ab0a      	add	r3, sp, #40	@ 0x28
 8006b86:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8006b8a:	f1c7 0108 	rsb	r1, r7, #8
 8006b8e:	fa45 f301 	asr.w	r3, r5, r1
 8006b92:	441e      	add	r6, r3
 8006b94:	408b      	lsls	r3, r1
 8006b96:	1aed      	subs	r5, r5, r3
 8006b98:	ab0a      	add	r3, sp, #40	@ 0x28
 8006b9a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006b9e:	f1c7 0307 	rsb	r3, r7, #7
 8006ba2:	411d      	asrs	r5, r3
 8006ba4:	2d00      	cmp	r5, #0
 8006ba6:	dd7a      	ble.n	8006c9e <__kernel_rem_pio2f+0x206>
 8006ba8:	2200      	movs	r2, #0
 8006baa:	4692      	mov	sl, r2
 8006bac:	3601      	adds	r6, #1
 8006bae:	4294      	cmp	r4, r2
 8006bb0:	f300 80aa 	bgt.w	8006d08 <__kernel_rem_pio2f+0x270>
 8006bb4:	2f00      	cmp	r7, #0
 8006bb6:	dd05      	ble.n	8006bc4 <__kernel_rem_pio2f+0x12c>
 8006bb8:	2f01      	cmp	r7, #1
 8006bba:	f000 80b6 	beq.w	8006d2a <__kernel_rem_pio2f+0x292>
 8006bbe:	2f02      	cmp	r7, #2
 8006bc0:	f000 80bd 	beq.w	8006d3e <__kernel_rem_pio2f+0x2a6>
 8006bc4:	2d02      	cmp	r5, #2
 8006bc6:	d16a      	bne.n	8006c9e <__kernel_rem_pio2f+0x206>
 8006bc8:	4649      	mov	r1, r9
 8006bca:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006bce:	f7f9 fdcf 	bl	8000770 <__aeabi_fsub>
 8006bd2:	4681      	mov	r9, r0
 8006bd4:	f1ba 0f00 	cmp.w	sl, #0
 8006bd8:	d061      	beq.n	8006c9e <__kernel_rem_pio2f+0x206>
 8006bda:	4639      	mov	r1, r7
 8006bdc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006be0:	f7ff ff0e 	bl	8006a00 <scalbnf>
 8006be4:	4601      	mov	r1, r0
 8006be6:	4648      	mov	r0, r9
 8006be8:	f7f9 fdc2 	bl	8000770 <__aeabi_fsub>
 8006bec:	4681      	mov	r9, r0
 8006bee:	e056      	b.n	8006c9e <__kernel_rem_pio2f+0x206>
 8006bf0:	2400      	movs	r4, #0
 8006bf2:	e768      	b.n	8006ac6 <__kernel_rem_pio2f+0x2e>
 8006bf4:	eb18 0f05 	cmn.w	r8, r5
 8006bf8:	d407      	bmi.n	8006c0a <__kernel_rem_pio2f+0x172>
 8006bfa:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8006bfe:	f7f9 fe6d 	bl	80008dc <__aeabi_i2f>
 8006c02:	f846 0b04 	str.w	r0, [r6], #4
 8006c06:	3501      	adds	r5, #1
 8006c08:	e770      	b.n	8006aec <__kernel_rem_pio2f+0x54>
 8006c0a:	4658      	mov	r0, fp
 8006c0c:	e7f9      	b.n	8006c02 <__kernel_rem_pio2f+0x16a>
 8006c0e:	9307      	str	r3, [sp, #28]
 8006c10:	9b05      	ldr	r3, [sp, #20]
 8006c12:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 8006c16:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006c1a:	f7f9 feb3 	bl	8000984 <__aeabi_fmul>
 8006c1e:	4601      	mov	r1, r0
 8006c20:	4630      	mov	r0, r6
 8006c22:	f7f9 fda7 	bl	8000774 <__addsf3>
 8006c26:	4606      	mov	r6, r0
 8006c28:	9b07      	ldr	r3, [sp, #28]
 8006c2a:	f108 0801 	add.w	r8, r8, #1
 8006c2e:	9a03      	ldr	r2, [sp, #12]
 8006c30:	4590      	cmp	r8, r2
 8006c32:	ddec      	ble.n	8006c0e <__kernel_rem_pio2f+0x176>
 8006c34:	f84a 6b04 	str.w	r6, [sl], #4
 8006c38:	f109 0901 	add.w	r9, r9, #1
 8006c3c:	3504      	adds	r5, #4
 8006c3e:	e761      	b.n	8006b04 <__kernel_rem_pio2f+0x6c>
 8006c40:	46ab      	mov	fp, r5
 8006c42:	461e      	mov	r6, r3
 8006c44:	f04f 0800 	mov.w	r8, #0
 8006c48:	e7f1      	b.n	8006c2e <__kernel_rem_pio2f+0x196>
 8006c4a:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8006c4e:	4658      	mov	r0, fp
 8006c50:	f7f9 fe98 	bl	8000984 <__aeabi_fmul>
 8006c54:	f7fa f872 	bl	8000d3c <__aeabi_f2iz>
 8006c58:	f7f9 fe40 	bl	80008dc <__aeabi_i2f>
 8006c5c:	4649      	mov	r1, r9
 8006c5e:	9009      	str	r0, [sp, #36]	@ 0x24
 8006c60:	f7f9 fe90 	bl	8000984 <__aeabi_fmul>
 8006c64:	4601      	mov	r1, r0
 8006c66:	4658      	mov	r0, fp
 8006c68:	f7f9 fd82 	bl	8000770 <__aeabi_fsub>
 8006c6c:	f7fa f866 	bl	8000d3c <__aeabi_f2iz>
 8006c70:	3d01      	subs	r5, #1
 8006c72:	f846 0b04 	str.w	r0, [r6], #4
 8006c76:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 8006c7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c7c:	f7f9 fd7a 	bl	8000774 <__addsf3>
 8006c80:	4683      	mov	fp, r0
 8006c82:	e75a      	b.n	8006b3a <__kernel_rem_pio2f+0xa2>
 8006c84:	d105      	bne.n	8006c92 <__kernel_rem_pio2f+0x1fa>
 8006c86:	1e63      	subs	r3, r4, #1
 8006c88:	aa0a      	add	r2, sp, #40	@ 0x28
 8006c8a:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8006c8e:	11ed      	asrs	r5, r5, #7
 8006c90:	e788      	b.n	8006ba4 <__kernel_rem_pio2f+0x10c>
 8006c92:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006c96:	f7fa f827 	bl	8000ce8 <__aeabi_fcmpge>
 8006c9a:	4605      	mov	r5, r0
 8006c9c:	bb90      	cbnz	r0, 8006d04 <__kernel_rem_pio2f+0x26c>
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	4648      	mov	r0, r9
 8006ca2:	f7fa f803 	bl	8000cac <__aeabi_fcmpeq>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	f000 8090 	beq.w	8006dcc <__kernel_rem_pio2f+0x334>
 8006cac:	2200      	movs	r2, #0
 8006cae:	1e63      	subs	r3, r4, #1
 8006cb0:	9901      	ldr	r1, [sp, #4]
 8006cb2:	428b      	cmp	r3, r1
 8006cb4:	da4a      	bge.n	8006d4c <__kernel_rem_pio2f+0x2b4>
 8006cb6:	2a00      	cmp	r2, #0
 8006cb8:	d076      	beq.n	8006da8 <__kernel_rem_pio2f+0x310>
 8006cba:	3c01      	subs	r4, #1
 8006cbc:	ab0a      	add	r3, sp, #40	@ 0x28
 8006cbe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006cc2:	3f08      	subs	r7, #8
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0f8      	beq.n	8006cba <__kernel_rem_pio2f+0x222>
 8006cc8:	4639      	mov	r1, r7
 8006cca:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006cce:	f7ff fe97 	bl	8006a00 <scalbnf>
 8006cd2:	46a2      	mov	sl, r4
 8006cd4:	4607      	mov	r7, r0
 8006cd6:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 8006cda:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 8006cde:	f1ba 0f00 	cmp.w	sl, #0
 8006ce2:	f280 80a1 	bge.w	8006e28 <__kernel_rem_pio2f+0x390>
 8006ce6:	4627      	mov	r7, r4
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2f00      	cmp	r7, #0
 8006cec:	f2c0 80cb 	blt.w	8006e86 <__kernel_rem_pio2f+0x3ee>
 8006cf0:	a946      	add	r1, sp, #280	@ 0x118
 8006cf2:	4690      	mov	r8, r2
 8006cf4:	f04f 0a00 	mov.w	sl, #0
 8006cf8:	4b18      	ldr	r3, [pc, #96]	@ (8006d5c <__kernel_rem_pio2f+0x2c4>)
 8006cfa:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8006cfe:	eba4 0907 	sub.w	r9, r4, r7
 8006d02:	e0b4      	b.n	8006e6e <__kernel_rem_pio2f+0x3d6>
 8006d04:	2502      	movs	r5, #2
 8006d06:	e74f      	b.n	8006ba8 <__kernel_rem_pio2f+0x110>
 8006d08:	f858 3b04 	ldr.w	r3, [r8], #4
 8006d0c:	f1ba 0f00 	cmp.w	sl, #0
 8006d10:	d108      	bne.n	8006d24 <__kernel_rem_pio2f+0x28c>
 8006d12:	b123      	cbz	r3, 8006d1e <__kernel_rem_pio2f+0x286>
 8006d14:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8006d18:	f848 3c04 	str.w	r3, [r8, #-4]
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	469a      	mov	sl, r3
 8006d20:	3201      	adds	r2, #1
 8006d22:	e744      	b.n	8006bae <__kernel_rem_pio2f+0x116>
 8006d24:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8006d28:	e7f6      	b.n	8006d18 <__kernel_rem_pio2f+0x280>
 8006d2a:	1e62      	subs	r2, r4, #1
 8006d2c:	ab0a      	add	r3, sp, #40	@ 0x28
 8006d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d36:	a90a      	add	r1, sp, #40	@ 0x28
 8006d38:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006d3c:	e742      	b.n	8006bc4 <__kernel_rem_pio2f+0x12c>
 8006d3e:	1e62      	subs	r2, r4, #1
 8006d40:	ab0a      	add	r3, sp, #40	@ 0x28
 8006d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d4a:	e7f4      	b.n	8006d36 <__kernel_rem_pio2f+0x29e>
 8006d4c:	a90a      	add	r1, sp, #40	@ 0x28
 8006d4e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	430a      	orrs	r2, r1
 8006d56:	e7ab      	b.n	8006cb0 <__kernel_rem_pio2f+0x218>
 8006d58:	08007558 	.word	0x08007558
 8006d5c:	0800752c 	.word	0x0800752c
 8006d60:	3301      	adds	r3, #1
 8006d62:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006d66:	2900      	cmp	r1, #0
 8006d68:	d0fa      	beq.n	8006d60 <__kernel_rem_pio2f+0x2c8>
 8006d6a:	9a04      	ldr	r2, [sp, #16]
 8006d6c:	a91e      	add	r1, sp, #120	@ 0x78
 8006d6e:	18a2      	adds	r2, r4, r2
 8006d70:	1c66      	adds	r6, r4, #1
 8006d72:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 8006d76:	441c      	add	r4, r3
 8006d78:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 8006d7c:	42b4      	cmp	r4, r6
 8006d7e:	f6ff aecf 	blt.w	8006b20 <__kernel_rem_pio2f+0x88>
 8006d82:	9b07      	ldr	r3, [sp, #28]
 8006d84:	46ab      	mov	fp, r5
 8006d86:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006d8a:	f7f9 fda7 	bl	80008dc <__aeabi_i2f>
 8006d8e:	f04f 0a00 	mov.w	sl, #0
 8006d92:	f04f 0800 	mov.w	r8, #0
 8006d96:	6028      	str	r0, [r5, #0]
 8006d98:	9b03      	ldr	r3, [sp, #12]
 8006d9a:	459a      	cmp	sl, r3
 8006d9c:	dd07      	ble.n	8006dae <__kernel_rem_pio2f+0x316>
 8006d9e:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 8006da2:	3504      	adds	r5, #4
 8006da4:	3601      	adds	r6, #1
 8006da6:	e7e9      	b.n	8006d7c <__kernel_rem_pio2f+0x2e4>
 8006da8:	2301      	movs	r3, #1
 8006daa:	9a08      	ldr	r2, [sp, #32]
 8006dac:	e7d9      	b.n	8006d62 <__kernel_rem_pio2f+0x2ca>
 8006dae:	9b05      	ldr	r3, [sp, #20]
 8006db0:	f85b 0904 	ldr.w	r0, [fp], #-4
 8006db4:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8006db8:	f7f9 fde4 	bl	8000984 <__aeabi_fmul>
 8006dbc:	4601      	mov	r1, r0
 8006dbe:	4640      	mov	r0, r8
 8006dc0:	f7f9 fcd8 	bl	8000774 <__addsf3>
 8006dc4:	f10a 0a01 	add.w	sl, sl, #1
 8006dc8:	4680      	mov	r8, r0
 8006dca:	e7e5      	b.n	8006d98 <__kernel_rem_pio2f+0x300>
 8006dcc:	9b06      	ldr	r3, [sp, #24]
 8006dce:	9a02      	ldr	r2, [sp, #8]
 8006dd0:	4648      	mov	r0, r9
 8006dd2:	1a99      	subs	r1, r3, r2
 8006dd4:	f7ff fe14 	bl	8006a00 <scalbnf>
 8006dd8:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8006ddc:	4680      	mov	r8, r0
 8006dde:	f7f9 ff83 	bl	8000ce8 <__aeabi_fcmpge>
 8006de2:	b1f8      	cbz	r0, 8006e24 <__kernel_rem_pio2f+0x38c>
 8006de4:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8006de8:	4640      	mov	r0, r8
 8006dea:	f7f9 fdcb 	bl	8000984 <__aeabi_fmul>
 8006dee:	f7f9 ffa5 	bl	8000d3c <__aeabi_f2iz>
 8006df2:	f7f9 fd73 	bl	80008dc <__aeabi_i2f>
 8006df6:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8006dfa:	4681      	mov	r9, r0
 8006dfc:	f7f9 fdc2 	bl	8000984 <__aeabi_fmul>
 8006e00:	4601      	mov	r1, r0
 8006e02:	4640      	mov	r0, r8
 8006e04:	f7f9 fcb4 	bl	8000770 <__aeabi_fsub>
 8006e08:	f7f9 ff98 	bl	8000d3c <__aeabi_f2iz>
 8006e0c:	ab0a      	add	r3, sp, #40	@ 0x28
 8006e0e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006e12:	4648      	mov	r0, r9
 8006e14:	3401      	adds	r4, #1
 8006e16:	3708      	adds	r7, #8
 8006e18:	f7f9 ff90 	bl	8000d3c <__aeabi_f2iz>
 8006e1c:	ab0a      	add	r3, sp, #40	@ 0x28
 8006e1e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006e22:	e751      	b.n	8006cc8 <__kernel_rem_pio2f+0x230>
 8006e24:	4640      	mov	r0, r8
 8006e26:	e7f7      	b.n	8006e18 <__kernel_rem_pio2f+0x380>
 8006e28:	ab0a      	add	r3, sp, #40	@ 0x28
 8006e2a:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006e2e:	f7f9 fd55 	bl	80008dc <__aeabi_i2f>
 8006e32:	4639      	mov	r1, r7
 8006e34:	f7f9 fda6 	bl	8000984 <__aeabi_fmul>
 8006e38:	4649      	mov	r1, r9
 8006e3a:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 8006e3e:	4638      	mov	r0, r7
 8006e40:	f7f9 fda0 	bl	8000984 <__aeabi_fmul>
 8006e44:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e48:	4607      	mov	r7, r0
 8006e4a:	e748      	b.n	8006cde <__kernel_rem_pio2f+0x246>
 8006e4c:	f853 0b04 	ldr.w	r0, [r3], #4
 8006e50:	f85b 1b04 	ldr.w	r1, [fp], #4
 8006e54:	9203      	str	r2, [sp, #12]
 8006e56:	9302      	str	r3, [sp, #8]
 8006e58:	f7f9 fd94 	bl	8000984 <__aeabi_fmul>
 8006e5c:	4601      	mov	r1, r0
 8006e5e:	4640      	mov	r0, r8
 8006e60:	f7f9 fc88 	bl	8000774 <__addsf3>
 8006e64:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006e68:	4680      	mov	r8, r0
 8006e6a:	f10a 0a01 	add.w	sl, sl, #1
 8006e6e:	9901      	ldr	r1, [sp, #4]
 8006e70:	458a      	cmp	sl, r1
 8006e72:	dc01      	bgt.n	8006e78 <__kernel_rem_pio2f+0x3e0>
 8006e74:	45ca      	cmp	sl, r9
 8006e76:	dde9      	ble.n	8006e4c <__kernel_rem_pio2f+0x3b4>
 8006e78:	ab5a      	add	r3, sp, #360	@ 0x168
 8006e7a:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8006e7e:	f849 8ca0 	str.w	r8, [r9, #-160]
 8006e82:	3f01      	subs	r7, #1
 8006e84:	e731      	b.n	8006cea <__kernel_rem_pio2f+0x252>
 8006e86:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	dc07      	bgt.n	8006e9c <__kernel_rem_pio2f+0x404>
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	dc4e      	bgt.n	8006f2e <__kernel_rem_pio2f+0x496>
 8006e90:	d02e      	beq.n	8006ef0 <__kernel_rem_pio2f+0x458>
 8006e92:	f006 0007 	and.w	r0, r6, #7
 8006e96:	b05b      	add	sp, #364	@ 0x16c
 8006e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e9c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d1f7      	bne.n	8006e92 <__kernel_rem_pio2f+0x3fa>
 8006ea2:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 8006ea6:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8006eaa:	46b8      	mov	r8, r7
 8006eac:	46a2      	mov	sl, r4
 8006eae:	f1ba 0f00 	cmp.w	sl, #0
 8006eb2:	dc49      	bgt.n	8006f48 <__kernel_rem_pio2f+0x4b0>
 8006eb4:	46a1      	mov	r9, r4
 8006eb6:	f1b9 0f01 	cmp.w	r9, #1
 8006eba:	dc60      	bgt.n	8006f7e <__kernel_rem_pio2f+0x4e6>
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	2c01      	cmp	r4, #1
 8006ec0:	dc76      	bgt.n	8006fb0 <__kernel_rem_pio2f+0x518>
 8006ec2:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8006ec4:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8006ec6:	2d00      	cmp	r5, #0
 8006ec8:	d178      	bne.n	8006fbc <__kernel_rem_pio2f+0x524>
 8006eca:	9900      	ldr	r1, [sp, #0]
 8006ecc:	600a      	str	r2, [r1, #0]
 8006ece:	460a      	mov	r2, r1
 8006ed0:	604b      	str	r3, [r1, #4]
 8006ed2:	6090      	str	r0, [r2, #8]
 8006ed4:	e7dd      	b.n	8006e92 <__kernel_rem_pio2f+0x3fa>
 8006ed6:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8006eda:	f7f9 fc4b 	bl	8000774 <__addsf3>
 8006ede:	3c01      	subs	r4, #1
 8006ee0:	2c00      	cmp	r4, #0
 8006ee2:	daf8      	bge.n	8006ed6 <__kernel_rem_pio2f+0x43e>
 8006ee4:	b10d      	cbz	r5, 8006eea <__kernel_rem_pio2f+0x452>
 8006ee6:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8006eea:	9b00      	ldr	r3, [sp, #0]
 8006eec:	6018      	str	r0, [r3, #0]
 8006eee:	e7d0      	b.n	8006e92 <__kernel_rem_pio2f+0x3fa>
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	af32      	add	r7, sp, #200	@ 0xc8
 8006ef4:	e7f4      	b.n	8006ee0 <__kernel_rem_pio2f+0x448>
 8006ef6:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8006efa:	f7f9 fc3b 	bl	8000774 <__addsf3>
 8006efe:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f02:	f1b8 0f00 	cmp.w	r8, #0
 8006f06:	daf6      	bge.n	8006ef6 <__kernel_rem_pio2f+0x45e>
 8006f08:	b1ad      	cbz	r5, 8006f36 <__kernel_rem_pio2f+0x49e>
 8006f0a:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 8006f0e:	9a00      	ldr	r2, [sp, #0]
 8006f10:	4601      	mov	r1, r0
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8006f16:	f7f9 fc2b 	bl	8000770 <__aeabi_fsub>
 8006f1a:	f04f 0801 	mov.w	r8, #1
 8006f1e:	4544      	cmp	r4, r8
 8006f20:	da0b      	bge.n	8006f3a <__kernel_rem_pio2f+0x4a2>
 8006f22:	b10d      	cbz	r5, 8006f28 <__kernel_rem_pio2f+0x490>
 8006f24:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8006f28:	9b00      	ldr	r3, [sp, #0]
 8006f2a:	6058      	str	r0, [r3, #4]
 8006f2c:	e7b1      	b.n	8006e92 <__kernel_rem_pio2f+0x3fa>
 8006f2e:	46a0      	mov	r8, r4
 8006f30:	2000      	movs	r0, #0
 8006f32:	af32      	add	r7, sp, #200	@ 0xc8
 8006f34:	e7e5      	b.n	8006f02 <__kernel_rem_pio2f+0x46a>
 8006f36:	4603      	mov	r3, r0
 8006f38:	e7e9      	b.n	8006f0e <__kernel_rem_pio2f+0x476>
 8006f3a:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8006f3e:	f7f9 fc19 	bl	8000774 <__addsf3>
 8006f42:	f108 0801 	add.w	r8, r8, #1
 8006f46:	e7ea      	b.n	8006f1e <__kernel_rem_pio2f+0x486>
 8006f48:	f8d8 3000 	ldr.w	r3, [r8]
 8006f4c:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8006f50:	4619      	mov	r1, r3
 8006f52:	4610      	mov	r0, r2
 8006f54:	9302      	str	r3, [sp, #8]
 8006f56:	9201      	str	r2, [sp, #4]
 8006f58:	f7f9 fc0c 	bl	8000774 <__addsf3>
 8006f5c:	9a01      	ldr	r2, [sp, #4]
 8006f5e:	4601      	mov	r1, r0
 8006f60:	4681      	mov	r9, r0
 8006f62:	4610      	mov	r0, r2
 8006f64:	f7f9 fc04 	bl	8000770 <__aeabi_fsub>
 8006f68:	9b02      	ldr	r3, [sp, #8]
 8006f6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f6e:	4619      	mov	r1, r3
 8006f70:	f7f9 fc00 	bl	8000774 <__addsf3>
 8006f74:	f848 0904 	str.w	r0, [r8], #-4
 8006f78:	f8c8 9000 	str.w	r9, [r8]
 8006f7c:	e797      	b.n	8006eae <__kernel_rem_pio2f+0x416>
 8006f7e:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8006f82:	f8d7 a000 	ldr.w	sl, [r7]
 8006f86:	4618      	mov	r0, r3
 8006f88:	4651      	mov	r1, sl
 8006f8a:	9301      	str	r3, [sp, #4]
 8006f8c:	f7f9 fbf2 	bl	8000774 <__addsf3>
 8006f90:	9b01      	ldr	r3, [sp, #4]
 8006f92:	4601      	mov	r1, r0
 8006f94:	4680      	mov	r8, r0
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7f9 fbea 	bl	8000770 <__aeabi_fsub>
 8006f9c:	4651      	mov	r1, sl
 8006f9e:	f7f9 fbe9 	bl	8000774 <__addsf3>
 8006fa2:	f847 0904 	str.w	r0, [r7], #-4
 8006fa6:	f109 39ff 	add.w	r9, r9, #4294967295
 8006faa:	f8c7 8000 	str.w	r8, [r7]
 8006fae:	e782      	b.n	8006eb6 <__kernel_rem_pio2f+0x41e>
 8006fb0:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8006fb4:	f7f9 fbde 	bl	8000774 <__addsf3>
 8006fb8:	3c01      	subs	r4, #1
 8006fba:	e780      	b.n	8006ebe <__kernel_rem_pio2f+0x426>
 8006fbc:	9900      	ldr	r1, [sp, #0]
 8006fbe:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8006fc2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006fc6:	600a      	str	r2, [r1, #0]
 8006fc8:	604b      	str	r3, [r1, #4]
 8006fca:	460a      	mov	r2, r1
 8006fcc:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8006fd0:	e77f      	b.n	8006ed2 <__kernel_rem_pio2f+0x43a>
 8006fd2:	bf00      	nop

08006fd4 <floorf>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8006fda:	3d7f      	subs	r5, #127	@ 0x7f
 8006fdc:	2d16      	cmp	r5, #22
 8006fde:	4601      	mov	r1, r0
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8006fe6:	dc26      	bgt.n	8007036 <floorf+0x62>
 8006fe8:	2d00      	cmp	r5, #0
 8006fea:	da0f      	bge.n	800700c <floorf+0x38>
 8006fec:	4917      	ldr	r1, [pc, #92]	@ (800704c <floorf+0x78>)
 8006fee:	f7f9 fbc1 	bl	8000774 <__addsf3>
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	f7f9 fe82 	bl	8000cfc <__aeabi_fcmpgt>
 8006ff8:	b130      	cbz	r0, 8007008 <floorf+0x34>
 8006ffa:	2c00      	cmp	r4, #0
 8006ffc:	da23      	bge.n	8007046 <floorf+0x72>
 8006ffe:	2e00      	cmp	r6, #0
 8007000:	4c13      	ldr	r4, [pc, #76]	@ (8007050 <floorf+0x7c>)
 8007002:	bf08      	it	eq
 8007004:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007008:	4621      	mov	r1, r4
 800700a:	e01a      	b.n	8007042 <floorf+0x6e>
 800700c:	4e11      	ldr	r6, [pc, #68]	@ (8007054 <floorf+0x80>)
 800700e:	412e      	asrs	r6, r5
 8007010:	4230      	tst	r0, r6
 8007012:	d016      	beq.n	8007042 <floorf+0x6e>
 8007014:	490d      	ldr	r1, [pc, #52]	@ (800704c <floorf+0x78>)
 8007016:	f7f9 fbad 	bl	8000774 <__addsf3>
 800701a:	2100      	movs	r1, #0
 800701c:	f7f9 fe6e 	bl	8000cfc <__aeabi_fcmpgt>
 8007020:	2800      	cmp	r0, #0
 8007022:	d0f1      	beq.n	8007008 <floorf+0x34>
 8007024:	2c00      	cmp	r4, #0
 8007026:	bfbe      	ittt	lt
 8007028:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 800702c:	412b      	asrlt	r3, r5
 800702e:	18e4      	addlt	r4, r4, r3
 8007030:	ea24 0406 	bic.w	r4, r4, r6
 8007034:	e7e8      	b.n	8007008 <floorf+0x34>
 8007036:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800703a:	d302      	bcc.n	8007042 <floorf+0x6e>
 800703c:	f7f9 fb9a 	bl	8000774 <__addsf3>
 8007040:	4601      	mov	r1, r0
 8007042:	4608      	mov	r0, r1
 8007044:	bd70      	pop	{r4, r5, r6, pc}
 8007046:	2400      	movs	r4, #0
 8007048:	e7de      	b.n	8007008 <floorf+0x34>
 800704a:	bf00      	nop
 800704c:	7149f2ca 	.word	0x7149f2ca
 8007050:	bf800000 	.word	0xbf800000
 8007054:	007fffff 	.word	0x007fffff

08007058 <_init>:
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705a:	bf00      	nop
 800705c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800705e:	bc08      	pop	{r3}
 8007060:	469e      	mov	lr, r3
 8007062:	4770      	bx	lr

08007064 <_fini>:
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007066:	bf00      	nop
 8007068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706a:	bc08      	pop	{r3}
 800706c:	469e      	mov	lr, r3
 800706e:	4770      	bx	lr
