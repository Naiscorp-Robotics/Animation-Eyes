
LCD_TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069f0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001238  08006afc  08006afc  00007afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d34  08007d34  0000908c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007d34  08007d34  0000908c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007d34  08007d34  0000908c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d34  08007d34  00008d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d38  08007d38  00008d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08007d3c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002990  2000008c  08007dc8  0000908c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a1c  08007dc8  00009a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083fc  00000000  00000000  000090b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd7  00000000  00000000  000114b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  00013188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000678  00000000  00000000  00013a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018206  00000000  00000000  000140c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b091  00000000  00000000  0002c2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008484c  00000000  00000000  0003735f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbbab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030b0  00000000  00000000  000bbbf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000beca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006ae4 	.word	0x08006ae4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08006ae4 	.word	0x08006ae4

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpun>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000700:	d102      	bne.n	8000708 <__aeabi_fcmpun+0x14>
 8000702:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000706:	d108      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000708:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800070c:	d102      	bne.n	8000714 <__aeabi_fcmpun+0x20>
 800070e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000712:	d102      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	4770      	bx	lr
 800071a:	f04f 0001 	mov.w	r0, #1
 800071e:	4770      	bx	lr

08000720 <__aeabi_f2iz>:
 8000720:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000724:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000728:	d30f      	bcc.n	800074a <__aeabi_f2iz+0x2a>
 800072a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800072e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000732:	d90d      	bls.n	8000750 <__aeabi_f2iz+0x30>
 8000734:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000738:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000740:	fa23 f002 	lsr.w	r0, r3, r2
 8000744:	bf18      	it	ne
 8000746:	4240      	negne	r0, r0
 8000748:	4770      	bx	lr
 800074a:	f04f 0000 	mov.w	r0, #0
 800074e:	4770      	bx	lr
 8000750:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000754:	d101      	bne.n	800075a <__aeabi_f2iz+0x3a>
 8000756:	0242      	lsls	r2, r0, #9
 8000758:	d105      	bne.n	8000766 <__aeabi_f2iz+0x46>
 800075a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800075e:	bf08      	it	eq
 8000760:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <LCD_Paint_DrawPixel>:
#include <stdlib.h>
#include <math.h>
#define _swap_int16_t(a, b) { int16_t t = a; a = b; b = t; }
#define min(a, b) (((a) < (b)) ? (a) : (b))

void LCD_Paint_DrawPixel(LCD128_HandleTypeDef* lcd, int16_t x, int16_t y, uint16_t color) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	4608      	mov	r0, r1
 8000776:	4611      	mov	r1, r2
 8000778:	461a      	mov	r2, r3
 800077a:	4603      	mov	r3, r0
 800077c:	817b      	strh	r3, [r7, #10]
 800077e:	460b      	mov	r3, r1
 8000780:	813b      	strh	r3, [r7, #8]
 8000782:	4613      	mov	r3, r2
 8000784:	80fb      	strh	r3, [r7, #6]
    LCD128_DrawPixel(lcd, x, y, color);
 8000786:	8979      	ldrh	r1, [r7, #10]
 8000788:	893a      	ldrh	r2, [r7, #8]
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	68f8      	ldr	r0, [r7, #12]
 800078e:	f000 fed3 	bl	8001538 <LCD128_DrawPixel>
}
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <LCD_Paint_FillRect>:

void LCD_Paint_FillRect(LCD128_HandleTypeDef* lcd, int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 800079a:	b590      	push	{r4, r7, lr}
 800079c:	b087      	sub	sp, #28
 800079e:	af02      	add	r7, sp, #8
 80007a0:	60f8      	str	r0, [r7, #12]
 80007a2:	4608      	mov	r0, r1
 80007a4:	4611      	mov	r1, r2
 80007a6:	461a      	mov	r2, r3
 80007a8:	4603      	mov	r3, r0
 80007aa:	817b      	strh	r3, [r7, #10]
 80007ac:	460b      	mov	r3, r1
 80007ae:	813b      	strh	r3, [r7, #8]
 80007b0:	4613      	mov	r3, r2
 80007b2:	80fb      	strh	r3, [r7, #6]
    LCD128_FillRectangle(lcd, x, y, w, h, color);
 80007b4:	8979      	ldrh	r1, [r7, #10]
 80007b6:	8938      	ldrh	r0, [r7, #8]
 80007b8:	88fc      	ldrh	r4, [r7, #6]
 80007ba:	8c3b      	ldrh	r3, [r7, #32]
 80007bc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80007be:	9201      	str	r2, [sp, #4]
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	4623      	mov	r3, r4
 80007c4:	4602      	mov	r2, r0
 80007c6:	68f8      	ldr	r0, [r7, #12]
 80007c8:	f000 ff80 	bl	80016cc <LCD128_FillRectangle>
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd90      	pop	{r4, r7, pc}

080007d4 <LCD_Paint_WritePixel>:

void LCD_Paint_WritePixel(LCD128_HandleTypeDef* lcd, int16_t x, int16_t y, uint16_t color) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	4608      	mov	r0, r1
 80007de:	4611      	mov	r1, r2
 80007e0:	461a      	mov	r2, r3
 80007e2:	4603      	mov	r3, r0
 80007e4:	817b      	strh	r3, [r7, #10]
 80007e6:	460b      	mov	r3, r1
 80007e8:	813b      	strh	r3, [r7, #8]
 80007ea:	4613      	mov	r3, r2
 80007ec:	80fb      	strh	r3, [r7, #6]
    LCD_Paint_DrawPixel(lcd, x, y, color);
 80007ee:	88fb      	ldrh	r3, [r7, #6]
 80007f0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80007f4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80007f8:	68f8      	ldr	r0, [r7, #12]
 80007fa:	f7ff ffb7 	bl	800076c <LCD_Paint_DrawPixel>
}
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <LCD_Paint_WriteLine>:

void LCD_Paint_WriteLine(LCD128_HandleTypeDef* lcd, int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8000806:	b580      	push	{r7, lr}
 8000808:	b08a      	sub	sp, #40	@ 0x28
 800080a:	af00      	add	r7, sp, #0
 800080c:	60f8      	str	r0, [r7, #12]
 800080e:	4608      	mov	r0, r1
 8000810:	4611      	mov	r1, r2
 8000812:	461a      	mov	r2, r3
 8000814:	4603      	mov	r3, r0
 8000816:	817b      	strh	r3, [r7, #10]
 8000818:	460b      	mov	r3, r1
 800081a:	813b      	strh	r3, [r7, #8]
 800081c:	4613      	mov	r3, r2
 800081e:	80fb      	strh	r3, [r7, #6]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000820:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 8000824:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800082e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000832:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000836:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800083a:	1acb      	subs	r3, r1, r3
 800083c:	2b00      	cmp	r3, #0
 800083e:	bfb8      	it	lt
 8000840:	425b      	neglt	r3, r3
 8000842:	429a      	cmp	r2, r3
 8000844:	bfcc      	ite	gt
 8000846:	2301      	movgt	r3, #1
 8000848:	2300      	movle	r3, #0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    if (steep) {
 800084e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000852:	2b00      	cmp	r3, #0
 8000854:	d00b      	beq.n	800086e <LCD_Paint_WriteLine+0x68>
        _swap_int16_t(x0, y0);
 8000856:	897b      	ldrh	r3, [r7, #10]
 8000858:	847b      	strh	r3, [r7, #34]	@ 0x22
 800085a:	893b      	ldrh	r3, [r7, #8]
 800085c:	817b      	strh	r3, [r7, #10]
 800085e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000860:	813b      	strh	r3, [r7, #8]
        _swap_int16_t(x1, y1);
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	843b      	strh	r3, [r7, #32]
 8000866:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000868:	80fb      	strh	r3, [r7, #6]
 800086a:	8c3b      	ldrh	r3, [r7, #32]
 800086c:	863b      	strh	r3, [r7, #48]	@ 0x30
    }
    if (x0 > x1) {
 800086e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000876:	429a      	cmp	r2, r3
 8000878:	dd0b      	ble.n	8000892 <LCD_Paint_WriteLine+0x8c>
        _swap_int16_t(x0, x1);
 800087a:	897b      	ldrh	r3, [r7, #10]
 800087c:	83fb      	strh	r3, [r7, #30]
 800087e:	88fb      	ldrh	r3, [r7, #6]
 8000880:	817b      	strh	r3, [r7, #10]
 8000882:	8bfb      	ldrh	r3, [r7, #30]
 8000884:	80fb      	strh	r3, [r7, #6]
        _swap_int16_t(y0, y1);
 8000886:	893b      	ldrh	r3, [r7, #8]
 8000888:	83bb      	strh	r3, [r7, #28]
 800088a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800088c:	813b      	strh	r3, [r7, #8]
 800088e:	8bbb      	ldrh	r3, [r7, #28]
 8000890:	863b      	strh	r3, [r7, #48]	@ 0x30
    }
    int16_t dx = x1 - x0;
 8000892:	88fa      	ldrh	r2, [r7, #6]
 8000894:	897b      	ldrh	r3, [r7, #10]
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	b29b      	uxth	r3, r3
 800089a:	837b      	strh	r3, [r7, #26]
    int16_t dy = abs(y1 - y0);
 800089c:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 80008a0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	bfb8      	it	lt
 80008aa:	425b      	neglt	r3, r3
 80008ac:	833b      	strh	r3, [r7, #24]
    int16_t err = dx / 2;
 80008ae:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80008b2:	0fda      	lsrs	r2, r3, #31
 80008b4:	4413      	add	r3, r2
 80008b6:	105b      	asrs	r3, r3, #1
 80008b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    int16_t ystep = (y0 < y1) ? 1 : -1;
 80008ba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80008be:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80008c2:	429a      	cmp	r2, r3
 80008c4:	da01      	bge.n	80008ca <LCD_Paint_WriteLine+0xc4>
 80008c6:	2301      	movs	r3, #1
 80008c8:	e001      	b.n	80008ce <LCD_Paint_WriteLine+0xc8>
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295
 80008ce:	82fb      	strh	r3, [r7, #22]
    for (; x0 <= x1; x0++) {
 80008d0:	e02d      	b.n	800092e <LCD_Paint_WriteLine+0x128>
        if (steep) {
 80008d2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d008      	beq.n	80008ec <LCD_Paint_WriteLine+0xe6>
            LCD_Paint_WritePixel(lcd, y0, x0, color);
 80008da:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80008dc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80008e0:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80008e4:	68f8      	ldr	r0, [r7, #12]
 80008e6:	f7ff ff75 	bl	80007d4 <LCD_Paint_WritePixel>
 80008ea:	e007      	b.n	80008fc <LCD_Paint_WriteLine+0xf6>
        } else {
            LCD_Paint_WritePixel(lcd, x0, y0, color);
 80008ec:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80008ee:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80008f2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80008f6:	68f8      	ldr	r0, [r7, #12]
 80008f8:	f7ff ff6c 	bl	80007d4 <LCD_Paint_WritePixel>
        }
        err -= dy;
 80008fc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80008fe:	8b3b      	ldrh	r3, [r7, #24]
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	b29b      	uxth	r3, r3
 8000904:	84fb      	strh	r3, [r7, #38]	@ 0x26
        if (err < 0) {
 8000906:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800090a:	2b00      	cmp	r3, #0
 800090c:	da09      	bge.n	8000922 <LCD_Paint_WriteLine+0x11c>
            y0 += ystep;
 800090e:	893a      	ldrh	r2, [r7, #8]
 8000910:	8afb      	ldrh	r3, [r7, #22]
 8000912:	4413      	add	r3, r2
 8000914:	b29b      	uxth	r3, r3
 8000916:	813b      	strh	r3, [r7, #8]
            err += dx;
 8000918:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800091a:	8b7b      	ldrh	r3, [r7, #26]
 800091c:	4413      	add	r3, r2
 800091e:	b29b      	uxth	r3, r3
 8000920:	84fb      	strh	r3, [r7, #38]	@ 0x26
    for (; x0 <= x1; x0++) {
 8000922:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000926:	b29b      	uxth	r3, r3
 8000928:	3301      	adds	r3, #1
 800092a:	b29b      	uxth	r3, r3
 800092c:	817b      	strh	r3, [r7, #10]
 800092e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000936:	429a      	cmp	r2, r3
 8000938:	ddcb      	ble.n	80008d2 <LCD_Paint_WriteLine+0xcc>
        }
    }
}
 800093a:	bf00      	nop
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	@ 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <LCD_Paint_DrawFastVLine>:

void LCD_Paint_DrawFastVLine(LCD128_HandleTypeDef* lcd, int16_t x, int16_t y, int16_t h, uint16_t color) {
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b087      	sub	sp, #28
 8000948:	af02      	add	r7, sp, #8
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	4608      	mov	r0, r1
 800094e:	4611      	mov	r1, r2
 8000950:	461a      	mov	r2, r3
 8000952:	4603      	mov	r3, r0
 8000954:	817b      	strh	r3, [r7, #10]
 8000956:	460b      	mov	r3, r1
 8000958:	813b      	strh	r3, [r7, #8]
 800095a:	4613      	mov	r3, r2
 800095c:	80fb      	strh	r3, [r7, #6]
    LCD_Paint_WriteLine(lcd, x, y, x, y + h - 1, color);
 800095e:	893a      	ldrh	r2, [r7, #8]
 8000960:	88fb      	ldrh	r3, [r7, #6]
 8000962:	4413      	add	r3, r2
 8000964:	b29b      	uxth	r3, r3
 8000966:	3b01      	subs	r3, #1
 8000968:	b29b      	uxth	r3, r3
 800096a:	b21b      	sxth	r3, r3
 800096c:	f9b7 400a 	ldrsh.w	r4, [r7, #10]
 8000970:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8000974:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000978:	8c3a      	ldrh	r2, [r7, #32]
 800097a:	9201      	str	r2, [sp, #4]
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	4623      	mov	r3, r4
 8000980:	4602      	mov	r2, r0
 8000982:	68f8      	ldr	r0, [r7, #12]
 8000984:	f7ff ff3f 	bl	8000806 <LCD_Paint_WriteLine>
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	bd90      	pop	{r4, r7, pc}

08000990 <LCD_Paint_FillCircleHelper>:
            LCD_Paint_WritePixel(lcd, x0 - x, y0 - y, color);
        }
    }
}

void LCD_Paint_FillCircleHelper(LCD128_HandleTypeDef* lcd, int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af02      	add	r7, sp, #8
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	4608      	mov	r0, r1
 800099a:	4611      	mov	r1, r2
 800099c:	461a      	mov	r2, r3
 800099e:	4603      	mov	r3, r0
 80009a0:	817b      	strh	r3, [r7, #10]
 80009a2:	460b      	mov	r3, r1
 80009a4:	813b      	strh	r3, [r7, #8]
 80009a6:	4613      	mov	r3, r2
 80009a8:	80fb      	strh	r3, [r7, #6]
    int16_t f = 1 - r;
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	f1c3 0301 	rsb	r3, r3, #1
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 80009b4:	2301      	movs	r3, #1
 80009b6:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 80009b8:	88fb      	ldrh	r3, [r7, #6]
 80009ba:	461a      	mov	r2, r3
 80009bc:	03d2      	lsls	r2, r2, #15
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	837b      	strh	r3, [r7, #26]
    int16_t x = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	833b      	strh	r3, [r7, #24]
    int16_t y = r;
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	82fb      	strh	r3, [r7, #22]
    int16_t px = x;
 80009ce:	8b3b      	ldrh	r3, [r7, #24]
 80009d0:	82bb      	strh	r3, [r7, #20]
    int16_t py = y;
 80009d2:	8afb      	ldrh	r3, [r7, #22]
 80009d4:	827b      	strh	r3, [r7, #18]
    delta++;
 80009d6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80009da:	b29b      	uxth	r3, r3
 80009dc:	3301      	adds	r3, #1
 80009de:	b29b      	uxth	r3, r3
 80009e0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    while (x < y) {
 80009e2:	e0a9      	b.n	8000b38 <LCD_Paint_FillCircleHelper+0x1a8>
        if (f >= 0) {
 80009e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	db0e      	blt.n	8000a0a <LCD_Paint_FillCircleHelper+0x7a>
            y--;
 80009ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	3b01      	subs	r3, #1
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80009f8:	8b7b      	ldrh	r3, [r7, #26]
 80009fa:	3302      	adds	r3, #2
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	837b      	strh	r3, [r7, #26]
            f += ddF_y;
 8000a00:	8bfa      	ldrh	r2, [r7, #30]
 8000a02:	8b7b      	ldrh	r3, [r7, #26]
 8000a04:	4413      	add	r3, r2
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8000a0a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	3301      	adds	r3, #1
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8000a16:	8bbb      	ldrh	r3, [r7, #28]
 8000a18:	3302      	adds	r3, #2
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	83bb      	strh	r3, [r7, #28]
        f += ddF_x;
 8000a1e:	8bfa      	ldrh	r2, [r7, #30]
 8000a20:	8bbb      	ldrh	r3, [r7, #28]
 8000a22:	4413      	add	r3, r2
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	83fb      	strh	r3, [r7, #30]
        if (x < (y + 1)) {
 8000a28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000a2c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	db3b      	blt.n	8000aac <LCD_Paint_FillCircleHelper+0x11c>
            if (corners & 1) LCD_Paint_DrawFastVLine(lcd, x0 + x, y0 - y, 2 * y + delta, color);
 8000a34:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d017      	beq.n	8000a70 <LCD_Paint_FillCircleHelper+0xe0>
 8000a40:	897a      	ldrh	r2, [r7, #10]
 8000a42:	8b3b      	ldrh	r3, [r7, #24]
 8000a44:	4413      	add	r3, r2
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	b219      	sxth	r1, r3
 8000a4a:	893a      	ldrh	r2, [r7, #8]
 8000a4c:	8afb      	ldrh	r3, [r7, #22]
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	b218      	sxth	r0, r3
 8000a54:	8afb      	ldrh	r3, [r7, #22]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a5c:	4413      	add	r3, r2
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	b21a      	sxth	r2, r3
 8000a62:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	4613      	mov	r3, r2
 8000a68:	4602      	mov	r2, r0
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f7ff ff6a 	bl	8000944 <LCD_Paint_DrawFastVLine>
            if (corners & 2) LCD_Paint_DrawFastVLine(lcd, x0 - x, y0 - y, 2 * y + delta, color);
 8000a70:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000a74:	f003 0302 	and.w	r3, r3, #2
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d017      	beq.n	8000aac <LCD_Paint_FillCircleHelper+0x11c>
 8000a7c:	897a      	ldrh	r2, [r7, #10]
 8000a7e:	8b3b      	ldrh	r3, [r7, #24]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	b219      	sxth	r1, r3
 8000a86:	893a      	ldrh	r2, [r7, #8]
 8000a88:	8afb      	ldrh	r3, [r7, #22]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	b218      	sxth	r0, r3
 8000a90:	8afb      	ldrh	r3, [r7, #22]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a98:	4413      	add	r3, r2
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	b21a      	sxth	r2, r3
 8000a9e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	68f8      	ldr	r0, [r7, #12]
 8000aa8:	f7ff ff4c 	bl	8000944 <LCD_Paint_DrawFastVLine>
        }
        if (y != py) {
 8000aac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000ab0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d03d      	beq.n	8000b34 <LCD_Paint_FillCircleHelper+0x1a4>
            if (corners & 1) LCD_Paint_DrawFastVLine(lcd, x0 + py, y0 - px, 2 * px + delta, color);
 8000ab8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d017      	beq.n	8000af4 <LCD_Paint_FillCircleHelper+0x164>
 8000ac4:	897a      	ldrh	r2, [r7, #10]
 8000ac6:	8a7b      	ldrh	r3, [r7, #18]
 8000ac8:	4413      	add	r3, r2
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	b219      	sxth	r1, r3
 8000ace:	893a      	ldrh	r2, [r7, #8]
 8000ad0:	8abb      	ldrh	r3, [r7, #20]
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	b218      	sxth	r0, r3
 8000ad8:	8abb      	ldrh	r3, [r7, #20]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000ae0:	4413      	add	r3, r2
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	b21a      	sxth	r2, r3
 8000ae6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	4613      	mov	r3, r2
 8000aec:	4602      	mov	r2, r0
 8000aee:	68f8      	ldr	r0, [r7, #12]
 8000af0:	f7ff ff28 	bl	8000944 <LCD_Paint_DrawFastVLine>
            if (corners & 2) LCD_Paint_DrawFastVLine(lcd, x0 - py, y0 - px, 2 * px + delta, color);
 8000af4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d017      	beq.n	8000b30 <LCD_Paint_FillCircleHelper+0x1a0>
 8000b00:	897a      	ldrh	r2, [r7, #10]
 8000b02:	8a7b      	ldrh	r3, [r7, #18]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	b219      	sxth	r1, r3
 8000b0a:	893a      	ldrh	r2, [r7, #8]
 8000b0c:	8abb      	ldrh	r3, [r7, #20]
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	b218      	sxth	r0, r3
 8000b14:	8abb      	ldrh	r3, [r7, #20]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000b1c:	4413      	add	r3, r2
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	b21a      	sxth	r2, r3
 8000b22:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	4613      	mov	r3, r2
 8000b28:	4602      	mov	r2, r0
 8000b2a:	68f8      	ldr	r0, [r7, #12]
 8000b2c:	f7ff ff0a 	bl	8000944 <LCD_Paint_DrawFastVLine>
            py = y;
 8000b30:	8afb      	ldrh	r3, [r7, #22]
 8000b32:	827b      	strh	r3, [r7, #18]
        }
        px = x;
 8000b34:	8b3b      	ldrh	r3, [r7, #24]
 8000b36:	82bb      	strh	r3, [r7, #20]
    while (x < y) {
 8000b38:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000b3c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	f6ff af4f 	blt.w	80009e4 <LCD_Paint_FillCircleHelper+0x54>
    }
}
 8000b46:	bf00      	nop
 8000b48:	bf00      	nop
 8000b4a:	3720      	adds	r7, #32
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <LCD_Paint_FillCircle>:

void LCD_Paint_FillCircle(LCD128_HandleTypeDef* lcd, int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af04      	add	r7, sp, #16
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	4608      	mov	r0, r1
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4603      	mov	r3, r0
 8000b60:	817b      	strh	r3, [r7, #10]
 8000b62:	460b      	mov	r3, r1
 8000b64:	813b      	strh	r3, [r7, #8]
 8000b66:	4613      	mov	r3, r2
 8000b68:	80fb      	strh	r3, [r7, #6]
    LCD_Paint_DrawFastVLine(lcd, x0, y0 - r, 2 * r + 1, color);
 8000b6a:	893a      	ldrh	r2, [r7, #8]
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	b21a      	sxth	r2, r3
 8000b74:	88fb      	ldrh	r3, [r7, #6]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	b218      	sxth	r0, r3
 8000b80:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000b84:	8b3b      	ldrh	r3, [r7, #24]
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	4603      	mov	r3, r0
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff feda 	bl	8000944 <LCD_Paint_DrawFastVLine>
    LCD_Paint_FillCircleHelper(lcd, x0, y0, r, 3, 0, color);
 8000b90:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000b94:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000b98:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000b9c:	8b3b      	ldrh	r3, [r7, #24]
 8000b9e:	9302      	str	r3, [sp, #8]
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	9301      	str	r3, [sp, #4]
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	4603      	mov	r3, r0
 8000baa:	68f8      	ldr	r0, [r7, #12]
 8000bac:	f7ff fef0 	bl	8000990 <LCD_Paint_FillCircleHelper>
}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <LCD_Paint_DrawDashedEllipse>:
        if (a > b) _swap_int16_t(a, b);
        LCD_Paint_DrawFastHLine(lcd, a, y, b - a + 1, color);
    }
}

void LCD_Paint_DrawDashedEllipse(LCD128_HandleTypeDef* lcd, int16_t x0, int16_t y0, int16_t rx, int16_t ry, int dashStep, int dashLength, int dotRadius, uint16_t color) {
 8000bb8:	b5b0      	push	{r4, r5, r7, lr}
 8000bba:	b08c      	sub	sp, #48	@ 0x30
 8000bbc:	af02      	add	r7, sp, #8
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	4608      	mov	r0, r1
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	817b      	strh	r3, [r7, #10]
 8000bca:	460b      	mov	r3, r1
 8000bcc:	813b      	strh	r3, [r7, #8]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	80fb      	strh	r3, [r7, #6]
    for (int angle = 0; angle < 360; angle += dashStep) {
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bd6:	e06a      	b.n	8000cae <LCD_Paint_DrawDashedEllipse+0xf6>
        for (int i = 0; i < dashLength; i++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
 8000bdc:	e05f      	b.n	8000c9e <LCD_Paint_DrawDashedEllipse+0xe6>
            float theta = (angle + i) * 3.14159f / 180.0f;
 8000bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000be0:	6a3b      	ldr	r3, [r7, #32]
 8000be2:	4413      	add	r3, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fb6b 	bl	80002c0 <__aeabi_i2f>
 8000bea:	4603      	mov	r3, r0
 8000bec:	4934      	ldr	r1, [pc, #208]	@ (8000cc0 <LCD_Paint_DrawDashedEllipse+0x108>)
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fbba 	bl	8000368 <__aeabi_fmul>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4933      	ldr	r1, [pc, #204]	@ (8000cc4 <LCD_Paint_DrawDashedEllipse+0x10c>)
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fc69 	bl	80004d0 <__aeabi_fdiv>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	61fb      	str	r3, [r7, #28]
            int x = x0 + rx * cosf(theta);
 8000c02:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fb5a 	bl	80002c0 <__aeabi_i2f>
 8000c0c:	4604      	mov	r4, r0
 8000c0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fb54 	bl	80002c0 <__aeabi_i2f>
 8000c18:	4605      	mov	r5, r0
 8000c1a:	69f8      	ldr	r0, [r7, #28]
 8000c1c:	f005 f8f4 	bl	8005e08 <cosf>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4619      	mov	r1, r3
 8000c24:	4628      	mov	r0, r5
 8000c26:	f7ff fb9f 	bl	8000368 <__aeabi_fmul>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4620      	mov	r0, r4
 8000c30:	f7ff fa92 	bl	8000158 <__addsf3>
 8000c34:	4603      	mov	r3, r0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fd72 	bl	8000720 <__aeabi_f2iz>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	61bb      	str	r3, [r7, #24]
            int y = y0 + ry * sinf(theta);
 8000c40:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fb3b 	bl	80002c0 <__aeabi_i2f>
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fb35 	bl	80002c0 <__aeabi_i2f>
 8000c56:	4605      	mov	r5, r0
 8000c58:	69f8      	ldr	r0, [r7, #28]
 8000c5a:	f005 f90d 	bl	8005e78 <sinf>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	4619      	mov	r1, r3
 8000c62:	4628      	mov	r0, r5
 8000c64:	f7ff fb80 	bl	8000368 <__aeabi_fmul>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	f7ff fa73 	bl	8000158 <__addsf3>
 8000c72:	4603      	mov	r3, r0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fd53 	bl	8000720 <__aeabi_f2iz>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	617b      	str	r3, [r7, #20]
            LCD_Paint_FillCircle(lcd, x, y, dotRadius, color);
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	b219      	sxth	r1, r3
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	b21a      	sxth	r2, r3
 8000c86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c88:	b218      	sxth	r0, r3
 8000c8a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	4603      	mov	r3, r0
 8000c92:	68f8      	ldr	r0, [r7, #12]
 8000c94:	f7ff ff5c 	bl	8000b50 <LCD_Paint_FillCircle>
        for (int i = 0; i < dashLength; i++) {
 8000c98:	6a3b      	ldr	r3, [r7, #32]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	623b      	str	r3, [r7, #32]
 8000c9e:	6a3a      	ldr	r2, [r7, #32]
 8000ca0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	db9b      	blt.n	8000bde <LCD_Paint_DrawDashedEllipse+0x26>
    for (int angle = 0; angle < 360; angle += dashStep) {
 8000ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000caa:	4413      	add	r3, r2
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb0:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000cb4:	db90      	blt.n	8000bd8 <LCD_Paint_DrawDashedEllipse+0x20>
//            LCD_Paint_FillCircle(lcd, x + 3, y + 3, dotRadius, color);
        }
    }
} 
 8000cb6:	bf00      	nop
 8000cb8:	bf00      	nop
 8000cba:	3728      	adds	r7, #40	@ 0x28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8000cc0:	40490fd0 	.word	0x40490fd0
 8000cc4:	43340000 	.word	0x43340000

08000cc8 <LCD128_CS_0>:
#define LCD128_MADCTL  0x36
#define LCD128_COLMOD  0x3A
#define LCD128_INVON   0x21
#define LCD128_INVOFF  0x20

static void LCD128_CS_0(LCD128_HandleTypeDef* lcd) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, GPIO_PIN_RESET);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6858      	ldr	r0, [r3, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	891b      	ldrh	r3, [r3, #8]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f002 fefe 	bl	8003adc <HAL_GPIO_WritePin>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <LCD128_CS_1>:
static void LCD128_CS_1(LCD128_HandleTypeDef* lcd) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, GPIO_PIN_SET);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6858      	ldr	r0, [r3, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	891b      	ldrh	r3, [r3, #8]
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f002 feee 	bl	8003adc <HAL_GPIO_WritePin>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <LCD128_DC_0>:
static void LCD128_DC_0(LCD128_HandleTypeDef* lcd) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->DC_Port, lcd->DC_Pin, GPIO_PIN_RESET);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68d8      	ldr	r0, [r3, #12]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	8a1b      	ldrh	r3, [r3, #16]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f002 fede 	bl	8003adc <HAL_GPIO_WritePin>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <LCD128_DC_1>:
static void LCD128_DC_1(LCD128_HandleTypeDef* lcd) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->DC_Port, lcd->DC_Pin, GPIO_PIN_SET);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68d8      	ldr	r0, [r3, #12]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	8a1b      	ldrh	r3, [r3, #16]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f002 fece 	bl	8003adc <HAL_GPIO_WritePin>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <LCD128_RST_0>:
static void LCD128_RST_0(LCD128_HandleTypeDef* lcd) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->RST_Port, lcd->RST_Pin, GPIO_PIN_RESET);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6958      	ldr	r0, [r3, #20]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	8b1b      	ldrh	r3, [r3, #24]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f002 febe 	bl	8003adc <HAL_GPIO_WritePin>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <LCD128_RST_1>:
static void LCD128_RST_1(LCD128_HandleTypeDef* lcd) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->RST_Port, lcd->RST_Pin, GPIO_PIN_SET);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6958      	ldr	r0, [r3, #20]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	8b1b      	ldrh	r3, [r3, #24]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f002 feae 	bl	8003adc <HAL_GPIO_WritePin>
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <LCD128_SPI_WRITE>:
static void LCD128_SPI_WRITE(LCD128_HandleTypeDef* lcd, uint8_t byte) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	70fb      	strb	r3, [r7, #3]
    HAL_SPI_Transmit(lcd->hspi, &byte, 1, HAL_MAX_DELAY);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6818      	ldr	r0, [r3, #0]
 8000d98:	1cf9      	adds	r1, r7, #3
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f003 fb16 	bl	80043d0 <HAL_SPI_Transmit>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <LCD128_DELAY>:
static void LCD128_DELAY(uint32_t ms) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f002 f9ed 	bl	8003194 <HAL_Delay>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <LCD128_WriteCommand>:

static void LCD128_WriteCommand(LCD128_HandleTypeDef* lcd, uint8_t cmd) {
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	70fb      	strb	r3, [r7, #3]
    LCD128_DC_0(lcd);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ff9a 	bl	8000d08 <LCD128_DC_0>
    LCD128_CS_0(lcd);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff77 	bl	8000cc8 <LCD128_CS_0>
    LCD128_SPI_WRITE(lcd, cmd);
 8000dda:	78fb      	ldrb	r3, [r7, #3]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ffd2 	bl	8000d88 <LCD128_SPI_WRITE>
    LCD128_CS_1(lcd);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff ff7f 	bl	8000ce8 <LCD128_CS_1>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <LCD128_WriteData8>:

static void LCD128_WriteData8(LCD128_HandleTypeDef* lcd, uint8_t data) {
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	70fb      	strb	r3, [r7, #3]
    LCD128_DC_1(lcd);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ff92 	bl	8000d28 <LCD128_DC_1>
    LCD128_CS_0(lcd);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff5f 	bl	8000cc8 <LCD128_CS_0>
    LCD128_SPI_WRITE(lcd, data);
 8000e0a:	78fb      	ldrb	r3, [r7, #3]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ffba 	bl	8000d88 <LCD128_SPI_WRITE>
    LCD128_CS_1(lcd);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ff67 	bl	8000ce8 <LCD128_CS_1>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <LCD128_WriteData16>:

static void LCD128_WriteData16(LCD128_HandleTypeDef* lcd, uint16_t data) {
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b084      	sub	sp, #16
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	807b      	strh	r3, [r7, #2]
    LCD128_DC_1(lcd);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ff7a 	bl	8000d28 <LCD128_DC_1>
    LCD128_CS_0(lcd);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ff47 	bl	8000cc8 <LCD128_CS_0>
    uint8_t hi = data >> 8, lo = data & 0xFF;
 8000e3a:	887b      	ldrh	r3, [r7, #2]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	73fb      	strb	r3, [r7, #15]
 8000e42:	887b      	ldrh	r3, [r7, #2]
 8000e44:	73bb      	strb	r3, [r7, #14]
    LCD128_SPI_WRITE(lcd, hi);
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ff9c 	bl	8000d88 <LCD128_SPI_WRITE>
    LCD128_SPI_WRITE(lcd, lo);
 8000e50:	7bbb      	ldrb	r3, [r7, #14]
 8000e52:	4619      	mov	r1, r3
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ff97 	bl	8000d88 <LCD128_SPI_WRITE>
    LCD128_CS_1(lcd);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ff44 	bl	8000ce8 <LCD128_CS_1>
}
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <LCD128_Reset>:
        LCD128_SPI_WRITE(lcd, buff[i]);
    }
    LCD128_CS_1(lcd);
}

static void LCD128_Reset(LCD128_HandleTypeDef* lcd) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
    LCD128_RST_1(lcd);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff79 	bl	8000d68 <LCD128_RST_1>
    LCD128_DELAY(100);
 8000e76:	2064      	movs	r0, #100	@ 0x64
 8000e78:	f7ff ff98 	bl	8000dac <LCD128_DELAY>
    LCD128_RST_0(lcd);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ff63 	bl	8000d48 <LCD128_RST_0>
    LCD128_DELAY(100);
 8000e82:	2064      	movs	r0, #100	@ 0x64
 8000e84:	f7ff ff92 	bl	8000dac <LCD128_DELAY>
    LCD128_RST_1(lcd);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ff6d 	bl	8000d68 <LCD128_RST_1>
    LCD128_DELAY(100);
 8000e8e:	2064      	movs	r0, #100	@ 0x64
 8000e90:	f7ff ff8c 	bl	8000dac <LCD128_DELAY>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <LCD128_SetAddressWindow>:

void LCD128_SetAddressWindow(LCD128_HandleTypeDef* lcd, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4603      	mov	r3, r0
 8000eac:	817b      	strh	r3, [r7, #10]
 8000eae:	460b      	mov	r3, r1
 8000eb0:	813b      	strh	r3, [r7, #8]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	80fb      	strh	r3, [r7, #6]
    LCD128_WriteCommand(lcd, LCD128_CASET);
 8000eb6:	212a      	movs	r1, #42	@ 0x2a
 8000eb8:	68f8      	ldr	r0, [r7, #12]
 8000eba:	f7ff ff82 	bl	8000dc2 <LCD128_WriteCommand>
    LCD128_WriteData8(lcd, x0 >> 8);
 8000ebe:	897b      	ldrh	r3, [r7, #10]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f7ff ff92 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteData8(lcd, x0 & 0xFF);
 8000ece:	897b      	ldrh	r3, [r7, #10]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f7ff ff8c 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteData8(lcd, x1 >> 8);
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	f7ff ff84 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteData8(lcd, x1 & 0xFF);
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	4619      	mov	r1, r3
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	f7ff ff7e 	bl	8000df2 <LCD128_WriteData8>

    LCD128_WriteCommand(lcd, LCD128_RASET);
 8000ef6:	212b      	movs	r1, #43	@ 0x2b
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	f7ff ff62 	bl	8000dc2 <LCD128_WriteCommand>
    LCD128_WriteData8(lcd, y0 >> 8);
 8000efe:	893b      	ldrh	r3, [r7, #8]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	4619      	mov	r1, r3
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f7ff ff72 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteData8(lcd, y0 & 0xFF);
 8000f0e:	893b      	ldrh	r3, [r7, #8]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4619      	mov	r1, r3
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f7ff ff6c 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteData8(lcd, y1 >> 8);
 8000f1a:	8b3b      	ldrh	r3, [r7, #24]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	4619      	mov	r1, r3
 8000f24:	68f8      	ldr	r0, [r7, #12]
 8000f26:	f7ff ff64 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteData8(lcd, y1 & 0xFF);
 8000f2a:	8b3b      	ldrh	r3, [r7, #24]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4619      	mov	r1, r3
 8000f30:	68f8      	ldr	r0, [r7, #12]
 8000f32:	f7ff ff5e 	bl	8000df2 <LCD128_WriteData8>

    LCD128_WriteCommand(lcd, LCD128_RAMWR);
 8000f36:	212c      	movs	r1, #44	@ 0x2c
 8000f38:	68f8      	ldr	r0, [r7, #12]
 8000f3a:	f7ff ff42 	bl	8000dc2 <LCD128_WriteCommand>
}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <LCD128_Init>:

void LCD128_Init(LCD128_HandleTypeDef* lcd) {
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
    LCD128_Reset(lcd);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ff8a 	bl	8000e68 <LCD128_Reset>
    // Chuỗi lệnh khởi tạo GC9A01 (tham khảo LCD_1in28.c)
    LCD128_WriteCommand(lcd, 0xEF);
 8000f54:	21ef      	movs	r1, #239	@ 0xef
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ff33 	bl	8000dc2 <LCD128_WriteCommand>
    LCD128_WriteCommand(lcd, 0xEB); LCD128_WriteData8(lcd, 0x14);
 8000f5c:	21eb      	movs	r1, #235	@ 0xeb
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ff2f 	bl	8000dc2 <LCD128_WriteCommand>
 8000f64:	2114      	movs	r1, #20
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ff43 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xFE);
 8000f6c:	21fe      	movs	r1, #254	@ 0xfe
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ff27 	bl	8000dc2 <LCD128_WriteCommand>
    LCD128_WriteCommand(lcd, 0xEF);
 8000f74:	21ef      	movs	r1, #239	@ 0xef
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ff23 	bl	8000dc2 <LCD128_WriteCommand>
    LCD128_WriteCommand(lcd, 0xEB); LCD128_WriteData8(lcd, 0x14);
 8000f7c:	21eb      	movs	r1, #235	@ 0xeb
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ff1f 	bl	8000dc2 <LCD128_WriteCommand>
 8000f84:	2114      	movs	r1, #20
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ff33 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x84); LCD128_WriteData8(lcd, 0x40);
 8000f8c:	2184      	movs	r1, #132	@ 0x84
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ff17 	bl	8000dc2 <LCD128_WriteCommand>
 8000f94:	2140      	movs	r1, #64	@ 0x40
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ff2b 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x85); LCD128_WriteData8(lcd, 0xFF);
 8000f9c:	2185      	movs	r1, #133	@ 0x85
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ff0f 	bl	8000dc2 <LCD128_WriteCommand>
 8000fa4:	21ff      	movs	r1, #255	@ 0xff
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ff23 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x86); LCD128_WriteData8(lcd, 0xFF);
 8000fac:	2186      	movs	r1, #134	@ 0x86
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ff07 	bl	8000dc2 <LCD128_WriteCommand>
 8000fb4:	21ff      	movs	r1, #255	@ 0xff
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ff1b 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x87); LCD128_WriteData8(lcd, 0xFF);
 8000fbc:	2187      	movs	r1, #135	@ 0x87
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff feff 	bl	8000dc2 <LCD128_WriteCommand>
 8000fc4:	21ff      	movs	r1, #255	@ 0xff
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ff13 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x88); LCD128_WriteData8(lcd, 0x0A);
 8000fcc:	2188      	movs	r1, #136	@ 0x88
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff fef7 	bl	8000dc2 <LCD128_WriteCommand>
 8000fd4:	210a      	movs	r1, #10
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ff0b 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x89); LCD128_WriteData8(lcd, 0x21);
 8000fdc:	2189      	movs	r1, #137	@ 0x89
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff feef 	bl	8000dc2 <LCD128_WriteCommand>
 8000fe4:	2121      	movs	r1, #33	@ 0x21
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ff03 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8A); LCD128_WriteData8(lcd, 0x00);
 8000fec:	218a      	movs	r1, #138	@ 0x8a
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff fee7 	bl	8000dc2 <LCD128_WriteCommand>
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff fefb 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8B); LCD128_WriteData8(lcd, 0x80);
 8000ffc:	218b      	movs	r1, #139	@ 0x8b
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fedf 	bl	8000dc2 <LCD128_WriteCommand>
 8001004:	2180      	movs	r1, #128	@ 0x80
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff fef3 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8C); LCD128_WriteData8(lcd, 0x01);
 800100c:	218c      	movs	r1, #140	@ 0x8c
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff fed7 	bl	8000dc2 <LCD128_WriteCommand>
 8001014:	2101      	movs	r1, #1
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff feeb 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8D); LCD128_WriteData8(lcd, 0x01);
 800101c:	218d      	movs	r1, #141	@ 0x8d
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff fecf 	bl	8000dc2 <LCD128_WriteCommand>
 8001024:	2101      	movs	r1, #1
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff fee3 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8E); LCD128_WriteData8(lcd, 0xFF);
 800102c:	218e      	movs	r1, #142	@ 0x8e
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff fec7 	bl	8000dc2 <LCD128_WriteCommand>
 8001034:	21ff      	movs	r1, #255	@ 0xff
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff fedb 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x8F); LCD128_WriteData8(lcd, 0xFF);
 800103c:	218f      	movs	r1, #143	@ 0x8f
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff febf 	bl	8000dc2 <LCD128_WriteCommand>
 8001044:	21ff      	movs	r1, #255	@ 0xff
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff fed3 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xB6); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x20);
 800104c:	21b6      	movs	r1, #182	@ 0xb6
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff feb7 	bl	8000dc2 <LCD128_WriteCommand>
 8001054:	2100      	movs	r1, #0
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff fecb 	bl	8000df2 <LCD128_WriteData8>
 800105c:	2120      	movs	r1, #32
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff fec7 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x36); LCD128_WriteData8(lcd, 0x08); // vertical
 8001064:	2136      	movs	r1, #54	@ 0x36
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff feab 	bl	8000dc2 <LCD128_WriteCommand>
 800106c:	2108      	movs	r1, #8
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff febf 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x3A); LCD128_WriteData8(lcd, 0x05);
 8001074:	213a      	movs	r1, #58	@ 0x3a
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff fea3 	bl	8000dc2 <LCD128_WriteCommand>
 800107c:	2105      	movs	r1, #5
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff feb7 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x90); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08);
 8001084:	2190      	movs	r1, #144	@ 0x90
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff fe9b 	bl	8000dc2 <LCD128_WriteCommand>
 800108c:	2108      	movs	r1, #8
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff feaf 	bl	8000df2 <LCD128_WriteData8>
 8001094:	2108      	movs	r1, #8
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff feab 	bl	8000df2 <LCD128_WriteData8>
 800109c:	2108      	movs	r1, #8
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff fea7 	bl	8000df2 <LCD128_WriteData8>
 80010a4:	2108      	movs	r1, #8
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff fea3 	bl	8000df2 <LCD128_WriteData8>
 80010ac:	2108      	movs	r1, #8
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fe9f 	bl	8000df2 <LCD128_WriteData8>
 80010b4:	2108      	movs	r1, #8
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff fe9b 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xBD); LCD128_WriteData8(lcd, 0x06);
 80010bc:	21bd      	movs	r1, #189	@ 0xbd
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff fe7f 	bl	8000dc2 <LCD128_WriteCommand>
 80010c4:	2106      	movs	r1, #6
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff fe93 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xBC); LCD128_WriteData8(lcd, 0x00);
 80010cc:	21bc      	movs	r1, #188	@ 0xbc
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff fe77 	bl	8000dc2 <LCD128_WriteCommand>
 80010d4:	2100      	movs	r1, #0
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff fe8b 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xFF); LCD128_WriteData8(lcd, 0x60); LCD128_WriteData8(lcd, 0x01); LCD128_WriteData8(lcd, 0x04);
 80010dc:	21ff      	movs	r1, #255	@ 0xff
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fe6f 	bl	8000dc2 <LCD128_WriteCommand>
 80010e4:	2160      	movs	r1, #96	@ 0x60
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff fe83 	bl	8000df2 <LCD128_WriteData8>
 80010ec:	2101      	movs	r1, #1
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff fe7f 	bl	8000df2 <LCD128_WriteData8>
 80010f4:	2104      	movs	r1, #4
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff fe7b 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xC3); LCD128_WriteData8(lcd, 0x13);
 80010fc:	21c3      	movs	r1, #195	@ 0xc3
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff fe5f 	bl	8000dc2 <LCD128_WriteCommand>
 8001104:	2113      	movs	r1, #19
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff fe73 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xC4); LCD128_WriteData8(lcd, 0x13);
 800110c:	21c4      	movs	r1, #196	@ 0xc4
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff fe57 	bl	8000dc2 <LCD128_WriteCommand>
 8001114:	2113      	movs	r1, #19
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff fe6b 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xC9); LCD128_WriteData8(lcd, 0x22);
 800111c:	21c9      	movs	r1, #201	@ 0xc9
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fe4f 	bl	8000dc2 <LCD128_WriteCommand>
 8001124:	2122      	movs	r1, #34	@ 0x22
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff fe63 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xBE); LCD128_WriteData8(lcd, 0x11);
 800112c:	21be      	movs	r1, #190	@ 0xbe
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff fe47 	bl	8000dc2 <LCD128_WriteCommand>
 8001134:	2111      	movs	r1, #17
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff fe5b 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xE1); LCD128_WriteData8(lcd, 0x10); LCD128_WriteData8(lcd, 0x0E);
 800113c:	21e1      	movs	r1, #225	@ 0xe1
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff fe3f 	bl	8000dc2 <LCD128_WriteCommand>
 8001144:	2110      	movs	r1, #16
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fe53 	bl	8000df2 <LCD128_WriteData8>
 800114c:	210e      	movs	r1, #14
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff fe4f 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xDF); LCD128_WriteData8(lcd, 0x21); LCD128_WriteData8(lcd, 0x0c); LCD128_WriteData8(lcd, 0x02);
 8001154:	21df      	movs	r1, #223	@ 0xdf
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fe33 	bl	8000dc2 <LCD128_WriteCommand>
 800115c:	2121      	movs	r1, #33	@ 0x21
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff fe47 	bl	8000df2 <LCD128_WriteData8>
 8001164:	210c      	movs	r1, #12
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff fe43 	bl	8000df2 <LCD128_WriteData8>
 800116c:	2102      	movs	r1, #2
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff fe3f 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xF0); LCD128_WriteData8(lcd, 0x45); LCD128_WriteData8(lcd, 0x09); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x26); LCD128_WriteData8(lcd, 0x2A);
 8001174:	21f0      	movs	r1, #240	@ 0xf0
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff fe23 	bl	8000dc2 <LCD128_WriteCommand>
 800117c:	2145      	movs	r1, #69	@ 0x45
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff fe37 	bl	8000df2 <LCD128_WriteData8>
 8001184:	2109      	movs	r1, #9
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff fe33 	bl	8000df2 <LCD128_WriteData8>
 800118c:	2108      	movs	r1, #8
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff fe2f 	bl	8000df2 <LCD128_WriteData8>
 8001194:	2108      	movs	r1, #8
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff fe2b 	bl	8000df2 <LCD128_WriteData8>
 800119c:	2126      	movs	r1, #38	@ 0x26
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff fe27 	bl	8000df2 <LCD128_WriteData8>
 80011a4:	212a      	movs	r1, #42	@ 0x2a
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff fe23 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xF1); LCD128_WriteData8(lcd, 0x43); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x72); LCD128_WriteData8(lcd, 0x36); LCD128_WriteData8(lcd, 0x37); LCD128_WriteData8(lcd, 0x6F);
 80011ac:	21f1      	movs	r1, #241	@ 0xf1
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff fe07 	bl	8000dc2 <LCD128_WriteCommand>
 80011b4:	2143      	movs	r1, #67	@ 0x43
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fe1b 	bl	8000df2 <LCD128_WriteData8>
 80011bc:	2170      	movs	r1, #112	@ 0x70
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff fe17 	bl	8000df2 <LCD128_WriteData8>
 80011c4:	2172      	movs	r1, #114	@ 0x72
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff fe13 	bl	8000df2 <LCD128_WriteData8>
 80011cc:	2136      	movs	r1, #54	@ 0x36
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff fe0f 	bl	8000df2 <LCD128_WriteData8>
 80011d4:	2137      	movs	r1, #55	@ 0x37
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff fe0b 	bl	8000df2 <LCD128_WriteData8>
 80011dc:	216f      	movs	r1, #111	@ 0x6f
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fe07 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xF2); LCD128_WriteData8(lcd, 0x45); LCD128_WriteData8(lcd, 0x09); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x26); LCD128_WriteData8(lcd, 0x2A);
 80011e4:	21f2      	movs	r1, #242	@ 0xf2
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fdeb 	bl	8000dc2 <LCD128_WriteCommand>
 80011ec:	2145      	movs	r1, #69	@ 0x45
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fdff 	bl	8000df2 <LCD128_WriteData8>
 80011f4:	2109      	movs	r1, #9
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff fdfb 	bl	8000df2 <LCD128_WriteData8>
 80011fc:	2108      	movs	r1, #8
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff fdf7 	bl	8000df2 <LCD128_WriteData8>
 8001204:	2108      	movs	r1, #8
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff fdf3 	bl	8000df2 <LCD128_WriteData8>
 800120c:	2126      	movs	r1, #38	@ 0x26
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff fdef 	bl	8000df2 <LCD128_WriteData8>
 8001214:	212a      	movs	r1, #42	@ 0x2a
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff fdeb 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xF3); LCD128_WriteData8(lcd, 0x43); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x72); LCD128_WriteData8(lcd, 0x36); LCD128_WriteData8(lcd, 0x37); LCD128_WriteData8(lcd, 0x6F);
 800121c:	21f3      	movs	r1, #243	@ 0xf3
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fdcf 	bl	8000dc2 <LCD128_WriteCommand>
 8001224:	2143      	movs	r1, #67	@ 0x43
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff fde3 	bl	8000df2 <LCD128_WriteData8>
 800122c:	2170      	movs	r1, #112	@ 0x70
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff fddf 	bl	8000df2 <LCD128_WriteData8>
 8001234:	2172      	movs	r1, #114	@ 0x72
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff fddb 	bl	8000df2 <LCD128_WriteData8>
 800123c:	2136      	movs	r1, #54	@ 0x36
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff fdd7 	bl	8000df2 <LCD128_WriteData8>
 8001244:	2137      	movs	r1, #55	@ 0x37
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fdd3 	bl	8000df2 <LCD128_WriteData8>
 800124c:	216f      	movs	r1, #111	@ 0x6f
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff fdcf 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xED); LCD128_WriteData8(lcd, 0x1B); LCD128_WriteData8(lcd, 0x0B);
 8001254:	21ed      	movs	r1, #237	@ 0xed
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff fdb3 	bl	8000dc2 <LCD128_WriteCommand>
 800125c:	211b      	movs	r1, #27
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff fdc7 	bl	8000df2 <LCD128_WriteData8>
 8001264:	210b      	movs	r1, #11
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fdc3 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xAE); LCD128_WriteData8(lcd, 0x77);
 800126c:	21ae      	movs	r1, #174	@ 0xae
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff fda7 	bl	8000dc2 <LCD128_WriteCommand>
 8001274:	2177      	movs	r1, #119	@ 0x77
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff fdbb 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xCD); LCD128_WriteData8(lcd, 0x63);
 800127c:	21cd      	movs	r1, #205	@ 0xcd
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff fd9f 	bl	8000dc2 <LCD128_WriteCommand>
 8001284:	2163      	movs	r1, #99	@ 0x63
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fdb3 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x70); LCD128_WriteData8(lcd, 0x07); LCD128_WriteData8(lcd, 0x07); LCD128_WriteData8(lcd, 0x04); LCD128_WriteData8(lcd, 0x0E); LCD128_WriteData8(lcd, 0x0F); LCD128_WriteData8(lcd, 0x09); LCD128_WriteData8(lcd, 0x07); LCD128_WriteData8(lcd, 0x08); LCD128_WriteData8(lcd, 0x03);
 800128c:	2170      	movs	r1, #112	@ 0x70
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fd97 	bl	8000dc2 <LCD128_WriteCommand>
 8001294:	2107      	movs	r1, #7
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fdab 	bl	8000df2 <LCD128_WriteData8>
 800129c:	2107      	movs	r1, #7
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff fda7 	bl	8000df2 <LCD128_WriteData8>
 80012a4:	2104      	movs	r1, #4
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff fda3 	bl	8000df2 <LCD128_WriteData8>
 80012ac:	210e      	movs	r1, #14
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff fd9f 	bl	8000df2 <LCD128_WriteData8>
 80012b4:	210f      	movs	r1, #15
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff fd9b 	bl	8000df2 <LCD128_WriteData8>
 80012bc:	2109      	movs	r1, #9
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fd97 	bl	8000df2 <LCD128_WriteData8>
 80012c4:	2107      	movs	r1, #7
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff fd93 	bl	8000df2 <LCD128_WriteData8>
 80012cc:	2108      	movs	r1, #8
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff fd8f 	bl	8000df2 <LCD128_WriteData8>
 80012d4:	2103      	movs	r1, #3
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fd8b 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0xE8); LCD128_WriteData8(lcd, 0x34);
 80012dc:	21e8      	movs	r1, #232	@ 0xe8
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff fd6f 	bl	8000dc2 <LCD128_WriteCommand>
 80012e4:	2134      	movs	r1, #52	@ 0x34
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff fd83 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x62); LCD128_WriteData8(lcd, 0x18); LCD128_WriteData8(lcd, 0x0D); LCD128_WriteData8(lcd, 0x71); LCD128_WriteData8(lcd, 0xED); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x18); LCD128_WriteData8(lcd, 0x0F); LCD128_WriteData8(lcd, 0x71); LCD128_WriteData8(lcd, 0xEF); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x70);
 80012ec:	2162      	movs	r1, #98	@ 0x62
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff fd67 	bl	8000dc2 <LCD128_WriteCommand>
 80012f4:	2118      	movs	r1, #24
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff fd7b 	bl	8000df2 <LCD128_WriteData8>
 80012fc:	210d      	movs	r1, #13
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff fd77 	bl	8000df2 <LCD128_WriteData8>
 8001304:	2171      	movs	r1, #113	@ 0x71
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fd73 	bl	8000df2 <LCD128_WriteData8>
 800130c:	21ed      	movs	r1, #237	@ 0xed
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fd6f 	bl	8000df2 <LCD128_WriteData8>
 8001314:	2170      	movs	r1, #112	@ 0x70
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff fd6b 	bl	8000df2 <LCD128_WriteData8>
 800131c:	2170      	movs	r1, #112	@ 0x70
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fd67 	bl	8000df2 <LCD128_WriteData8>
 8001324:	2118      	movs	r1, #24
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff fd63 	bl	8000df2 <LCD128_WriteData8>
 800132c:	210f      	movs	r1, #15
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff fd5f 	bl	8000df2 <LCD128_WriteData8>
 8001334:	2171      	movs	r1, #113	@ 0x71
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff fd5b 	bl	8000df2 <LCD128_WriteData8>
 800133c:	21ef      	movs	r1, #239	@ 0xef
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fd57 	bl	8000df2 <LCD128_WriteData8>
 8001344:	2170      	movs	r1, #112	@ 0x70
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff fd53 	bl	8000df2 <LCD128_WriteData8>
 800134c:	2170      	movs	r1, #112	@ 0x70
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fd4f 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x63); LCD128_WriteData8(lcd, 0x18); LCD128_WriteData8(lcd, 0x11); LCD128_WriteData8(lcd, 0x71); LCD128_WriteData8(lcd, 0xF1); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x18); LCD128_WriteData8(lcd, 0x13); LCD128_WriteData8(lcd, 0x71); LCD128_WriteData8(lcd, 0xF3); LCD128_WriteData8(lcd, 0x70); LCD128_WriteData8(lcd, 0x70);
 8001354:	2163      	movs	r1, #99	@ 0x63
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff fd33 	bl	8000dc2 <LCD128_WriteCommand>
 800135c:	2118      	movs	r1, #24
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff fd47 	bl	8000df2 <LCD128_WriteData8>
 8001364:	2111      	movs	r1, #17
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff fd43 	bl	8000df2 <LCD128_WriteData8>
 800136c:	2171      	movs	r1, #113	@ 0x71
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fd3f 	bl	8000df2 <LCD128_WriteData8>
 8001374:	21f1      	movs	r1, #241	@ 0xf1
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff fd3b 	bl	8000df2 <LCD128_WriteData8>
 800137c:	2170      	movs	r1, #112	@ 0x70
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fd37 	bl	8000df2 <LCD128_WriteData8>
 8001384:	2170      	movs	r1, #112	@ 0x70
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff fd33 	bl	8000df2 <LCD128_WriteData8>
 800138c:	2118      	movs	r1, #24
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff fd2f 	bl	8000df2 <LCD128_WriteData8>
 8001394:	2113      	movs	r1, #19
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fd2b 	bl	8000df2 <LCD128_WriteData8>
 800139c:	2171      	movs	r1, #113	@ 0x71
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff fd27 	bl	8000df2 <LCD128_WriteData8>
 80013a4:	21f3      	movs	r1, #243	@ 0xf3
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fd23 	bl	8000df2 <LCD128_WriteData8>
 80013ac:	2170      	movs	r1, #112	@ 0x70
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fd1f 	bl	8000df2 <LCD128_WriteData8>
 80013b4:	2170      	movs	r1, #112	@ 0x70
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fd1b 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x64); LCD128_WriteData8(lcd, 0x28); LCD128_WriteData8(lcd, 0x29); LCD128_WriteData8(lcd, 0xF1); LCD128_WriteData8(lcd, 0x01); LCD128_WriteData8(lcd, 0xF1); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x07);
 80013bc:	2164      	movs	r1, #100	@ 0x64
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff fcff 	bl	8000dc2 <LCD128_WriteCommand>
 80013c4:	2128      	movs	r1, #40	@ 0x28
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fd13 	bl	8000df2 <LCD128_WriteData8>
 80013cc:	2129      	movs	r1, #41	@ 0x29
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff fd0f 	bl	8000df2 <LCD128_WriteData8>
 80013d4:	21f1      	movs	r1, #241	@ 0xf1
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fd0b 	bl	8000df2 <LCD128_WriteData8>
 80013dc:	2101      	movs	r1, #1
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fd07 	bl	8000df2 <LCD128_WriteData8>
 80013e4:	21f1      	movs	r1, #241	@ 0xf1
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff fd03 	bl	8000df2 <LCD128_WriteData8>
 80013ec:	2100      	movs	r1, #0
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fcff 	bl	8000df2 <LCD128_WriteData8>
 80013f4:	2107      	movs	r1, #7
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fcfb 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x66); LCD128_WriteData8(lcd, 0x3C); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0xCD); LCD128_WriteData8(lcd, 0x67); LCD128_WriteData8(lcd, 0x45); LCD128_WriteData8(lcd, 0x45); LCD128_WriteData8(lcd, 0x10); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x00);
 80013fc:	2166      	movs	r1, #102	@ 0x66
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff fcdf 	bl	8000dc2 <LCD128_WriteCommand>
 8001404:	213c      	movs	r1, #60	@ 0x3c
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff fcf3 	bl	8000df2 <LCD128_WriteData8>
 800140c:	2100      	movs	r1, #0
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fcef 	bl	8000df2 <LCD128_WriteData8>
 8001414:	21cd      	movs	r1, #205	@ 0xcd
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff fceb 	bl	8000df2 <LCD128_WriteData8>
 800141c:	2167      	movs	r1, #103	@ 0x67
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff fce7 	bl	8000df2 <LCD128_WriteData8>
 8001424:	2145      	movs	r1, #69	@ 0x45
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff fce3 	bl	8000df2 <LCD128_WriteData8>
 800142c:	2145      	movs	r1, #69	@ 0x45
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff fcdf 	bl	8000df2 <LCD128_WriteData8>
 8001434:	2110      	movs	r1, #16
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff fcdb 	bl	8000df2 <LCD128_WriteData8>
 800143c:	2100      	movs	r1, #0
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff fcd7 	bl	8000df2 <LCD128_WriteData8>
 8001444:	2100      	movs	r1, #0
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff fcd3 	bl	8000df2 <LCD128_WriteData8>
 800144c:	2100      	movs	r1, #0
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fccf 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x67); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x3C); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x01); LCD128_WriteData8(lcd, 0x54); LCD128_WriteData8(lcd, 0x10); LCD128_WriteData8(lcd, 0x32); LCD128_WriteData8(lcd, 0x98);
 8001454:	2167      	movs	r1, #103	@ 0x67
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff fcb3 	bl	8000dc2 <LCD128_WriteCommand>
 800145c:	2100      	movs	r1, #0
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff fcc7 	bl	8000df2 <LCD128_WriteData8>
 8001464:	213c      	movs	r1, #60	@ 0x3c
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fcc3 	bl	8000df2 <LCD128_WriteData8>
 800146c:	2100      	movs	r1, #0
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fcbf 	bl	8000df2 <LCD128_WriteData8>
 8001474:	2100      	movs	r1, #0
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff fcbb 	bl	8000df2 <LCD128_WriteData8>
 800147c:	2100      	movs	r1, #0
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff fcb7 	bl	8000df2 <LCD128_WriteData8>
 8001484:	2101      	movs	r1, #1
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff fcb3 	bl	8000df2 <LCD128_WriteData8>
 800148c:	2154      	movs	r1, #84	@ 0x54
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fcaf 	bl	8000df2 <LCD128_WriteData8>
 8001494:	2110      	movs	r1, #16
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff fcab 	bl	8000df2 <LCD128_WriteData8>
 800149c:	2132      	movs	r1, #50	@ 0x32
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fca7 	bl	8000df2 <LCD128_WriteData8>
 80014a4:	2198      	movs	r1, #152	@ 0x98
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fca3 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x74); LCD128_WriteData8(lcd, 0x10); LCD128_WriteData8(lcd, 0x85); LCD128_WriteData8(lcd, 0x80); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x00); LCD128_WriteData8(lcd, 0x4E); LCD128_WriteData8(lcd, 0x00);
 80014ac:	2174      	movs	r1, #116	@ 0x74
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff fc87 	bl	8000dc2 <LCD128_WriteCommand>
 80014b4:	2110      	movs	r1, #16
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff fc9b 	bl	8000df2 <LCD128_WriteData8>
 80014bc:	2185      	movs	r1, #133	@ 0x85
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff fc97 	bl	8000df2 <LCD128_WriteData8>
 80014c4:	2180      	movs	r1, #128	@ 0x80
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff fc93 	bl	8000df2 <LCD128_WriteData8>
 80014cc:	2100      	movs	r1, #0
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fc8f 	bl	8000df2 <LCD128_WriteData8>
 80014d4:	2100      	movs	r1, #0
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff fc8b 	bl	8000df2 <LCD128_WriteData8>
 80014dc:	214e      	movs	r1, #78	@ 0x4e
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff fc87 	bl	8000df2 <LCD128_WriteData8>
 80014e4:	2100      	movs	r1, #0
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fc83 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x98); LCD128_WriteData8(lcd, 0x3e); LCD128_WriteData8(lcd, 0x07);
 80014ec:	2198      	movs	r1, #152	@ 0x98
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fc67 	bl	8000dc2 <LCD128_WriteCommand>
 80014f4:	213e      	movs	r1, #62	@ 0x3e
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff fc7b 	bl	8000df2 <LCD128_WriteData8>
 80014fc:	2107      	movs	r1, #7
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fc77 	bl	8000df2 <LCD128_WriteData8>
    LCD128_WriteCommand(lcd, 0x35);
 8001504:	2135      	movs	r1, #53	@ 0x35
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff fc5b 	bl	8000dc2 <LCD128_WriteCommand>
    LCD128_WriteCommand(lcd, 0x21);
 800150c:	2121      	movs	r1, #33	@ 0x21
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff fc57 	bl	8000dc2 <LCD128_WriteCommand>
    LCD128_WriteCommand(lcd, LCD128_SLPOUT);
 8001514:	2111      	movs	r1, #17
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fc53 	bl	8000dc2 <LCD128_WriteCommand>
    LCD128_DELAY(120);
 800151c:	2078      	movs	r0, #120	@ 0x78
 800151e:	f7ff fc45 	bl	8000dac <LCD128_DELAY>
    LCD128_WriteCommand(lcd, LCD128_DISPON);
 8001522:	2129      	movs	r1, #41	@ 0x29
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff fc4c 	bl	8000dc2 <LCD128_WriteCommand>
    LCD128_DELAY(20);
 800152a:	2014      	movs	r0, #20
 800152c:	f7ff fc3e 	bl	8000dac <LCD128_DELAY>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <LCD128_DrawPixel>:

void LCD128_DrawPixel(LCD128_HandleTypeDef* lcd, uint16_t x, uint16_t y, uint16_t color) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af02      	add	r7, sp, #8
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	4608      	mov	r0, r1
 8001542:	4611      	mov	r1, r2
 8001544:	461a      	mov	r2, r3
 8001546:	4603      	mov	r3, r0
 8001548:	817b      	strh	r3, [r7, #10]
 800154a:	460b      	mov	r3, r1
 800154c:	813b      	strh	r3, [r7, #8]
 800154e:	4613      	mov	r3, r2
 8001550:	80fb      	strh	r3, [r7, #6]
    if (x >= LCD128_WIDTH || y >= LCD128_HEIGHT) return;
 8001552:	897b      	ldrh	r3, [r7, #10]
 8001554:	2bef      	cmp	r3, #239	@ 0xef
 8001556:	d811      	bhi.n	800157c <LCD128_DrawPixel+0x44>
 8001558:	893b      	ldrh	r3, [r7, #8]
 800155a:	2bef      	cmp	r3, #239	@ 0xef
 800155c:	d80e      	bhi.n	800157c <LCD128_DrawPixel+0x44>
    LCD128_SetAddressWindow(lcd, x, y, x, y);
 800155e:	8978      	ldrh	r0, [r7, #10]
 8001560:	893a      	ldrh	r2, [r7, #8]
 8001562:	8979      	ldrh	r1, [r7, #10]
 8001564:	893b      	ldrh	r3, [r7, #8]
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	4603      	mov	r3, r0
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f7ff fc96 	bl	8000e9c <LCD128_SetAddressWindow>
    LCD128_WriteData16(lcd, color);
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	4619      	mov	r1, r3
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f7ff fc54 	bl	8000e22 <LCD128_WriteData16>
 800157a:	e000      	b.n	800157e <LCD128_DrawPixel+0x46>
    if (x >= LCD128_WIDTH || y >= LCD128_HEIGHT) return;
 800157c:	bf00      	nop
}
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <LCD128_WriteChar>:

static void LCD128_WriteChar(LCD128_HandleTypeDef* lcd, uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	@ 0x28
 8001588:	af02      	add	r7, sp, #8
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	4608      	mov	r0, r1
 800158e:	4611      	mov	r1, r2
 8001590:	461a      	mov	r2, r3
 8001592:	4603      	mov	r3, r0
 8001594:	817b      	strh	r3, [r7, #10]
 8001596:	460b      	mov	r3, r1
 8001598:	813b      	strh	r3, [r7, #8]
 800159a:	4613      	mov	r3, r2
 800159c:	71fb      	strb	r3, [r7, #7]
    uint32_t i, b, j;
    LCD128_SetAddressWindow(lcd, x, y, x + font.width - 1, y + font.height - 1);
 800159e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80015a2:	461a      	mov	r2, r3
 80015a4:	897b      	ldrh	r3, [r7, #10]
 80015a6:	4413      	add	r3, r2
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	3b01      	subs	r3, #1
 80015ac:	b298      	uxth	r0, r3
 80015ae:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80015b2:	461a      	mov	r2, r3
 80015b4:	893b      	ldrh	r3, [r7, #8]
 80015b6:	4413      	add	r3, r2
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	3b01      	subs	r3, #1
 80015bc:	b29b      	uxth	r3, r3
 80015be:	893a      	ldrh	r2, [r7, #8]
 80015c0:	8979      	ldrh	r1, [r7, #10]
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	4603      	mov	r3, r0
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f7ff fc68 	bl	8000e9c <LCD128_SetAddressWindow>
    for (i = 0; i < font.height; i++) {
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
 80015d0:	e02d      	b.n	800162e <LCD128_WriteChar+0xaa>
        b = font.data[(ch - 32) * font.height + i];
 80015d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	3b20      	subs	r3, #32
 80015d8:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 80015dc:	fb01 f303 	mul.w	r3, r1, r3
 80015e0:	4619      	mov	r1, r3
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	440b      	add	r3, r1
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	617b      	str	r3, [r7, #20]
        for (j = 0; j < font.width; j++) {
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	e013      	b.n	800161c <LCD128_WriteChar+0x98>
            uint16_t pixel = ((b << j) & 0x8000) ? color : bgcolor;
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <LCD128_WriteChar+0x84>
 8001604:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001606:	e000      	b.n	800160a <LCD128_WriteChar+0x86>
 8001608:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800160a:	827b      	strh	r3, [r7, #18]
            LCD128_WriteData16(lcd, pixel);
 800160c:	8a7b      	ldrh	r3, [r7, #18]
 800160e:	4619      	mov	r1, r3
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f7ff fc06 	bl	8000e22 <LCD128_WriteData16>
        for (j = 0; j < font.width; j++) {
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	3301      	adds	r3, #1
 800161a:	61bb      	str	r3, [r7, #24]
 800161c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001620:	461a      	mov	r2, r3
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	4293      	cmp	r3, r2
 8001626:	d3e5      	bcc.n	80015f4 <LCD128_WriteChar+0x70>
    for (i = 0; i < font.height; i++) {
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	3301      	adds	r3, #1
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001632:	461a      	mov	r2, r3
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	4293      	cmp	r3, r2
 8001638:	d3cb      	bcc.n	80015d2 <LCD128_WriteChar+0x4e>
        }
    }
}
 800163a:	bf00      	nop
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <LCD128_WriteString>:

void LCD128_WriteString(LCD128_HandleTypeDef* lcd, uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001644:	b5b0      	push	{r4, r5, r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af04      	add	r7, sp, #16
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	460b      	mov	r3, r1
 8001650:	817b      	strh	r3, [r7, #10]
 8001652:	4613      	mov	r3, r2
 8001654:	813b      	strh	r3, [r7, #8]
    while (*str) {
 8001656:	e02f      	b.n	80016b8 <LCD128_WriteString+0x74>
        if (x + font.width > LCD128_WIDTH) {
 8001658:	897b      	ldrh	r3, [r7, #10]
 800165a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800165e:	4413      	add	r3, r2
 8001660:	2bf0      	cmp	r3, #240	@ 0xf0
 8001662:	dd0d      	ble.n	8001680 <LCD128_WriteString+0x3c>
            x = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	817b      	strh	r3, [r7, #10]
            y += font.height;
 8001668:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800166c:	461a      	mov	r2, r3
 800166e:	893b      	ldrh	r3, [r7, #8]
 8001670:	4413      	add	r3, r2
 8001672:	813b      	strh	r3, [r7, #8]
            if (y + font.height > LCD128_HEIGHT) break;
 8001674:	893b      	ldrh	r3, [r7, #8]
 8001676:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800167a:	4413      	add	r3, r2
 800167c:	2bf0      	cmp	r3, #240	@ 0xf0
 800167e:	dc20      	bgt.n	80016c2 <LCD128_WriteString+0x7e>
        }
        LCD128_WriteChar(lcd, x, y, *str, font, color, bgcolor);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	781d      	ldrb	r5, [r3, #0]
 8001684:	893a      	ldrh	r2, [r7, #8]
 8001686:	897c      	ldrh	r4, [r7, #10]
 8001688:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800168a:	9303      	str	r3, [sp, #12]
 800168c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800168e:	9302      	str	r3, [sp, #8]
 8001690:	466b      	mov	r3, sp
 8001692:	f107 0120 	add.w	r1, r7, #32
 8001696:	c903      	ldmia	r1, {r0, r1}
 8001698:	e883 0003 	stmia.w	r3, {r0, r1}
 800169c:	462b      	mov	r3, r5
 800169e:	4621      	mov	r1, r4
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f7ff ff6f 	bl	8001584 <LCD128_WriteChar>
        x += font.width;
 80016a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016aa:	461a      	mov	r2, r3
 80016ac:	897b      	ldrh	r3, [r7, #10]
 80016ae:	4413      	add	r3, r2
 80016b0:	817b      	strh	r3, [r7, #10]
        str++;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3301      	adds	r3, #1
 80016b6:	607b      	str	r3, [r7, #4]
    while (*str) {
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1cb      	bne.n	8001658 <LCD128_WriteString+0x14>
    }
}
 80016c0:	e000      	b.n	80016c4 <LCD128_WriteString+0x80>
            if (y + font.height > LCD128_HEIGHT) break;
 80016c2:	bf00      	nop
}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bdb0      	pop	{r4, r5, r7, pc}

080016cc <LCD128_FillRectangle>:

void LCD128_FillRectangle(LCD128_HandleTypeDef* lcd, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af02      	add	r7, sp, #8
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	4608      	mov	r0, r1
 80016d6:	4611      	mov	r1, r2
 80016d8:	461a      	mov	r2, r3
 80016da:	4603      	mov	r3, r0
 80016dc:	817b      	strh	r3, [r7, #10]
 80016de:	460b      	mov	r3, r1
 80016e0:	813b      	strh	r3, [r7, #8]
 80016e2:	4613      	mov	r3, r2
 80016e4:	80fb      	strh	r3, [r7, #6]
    if ((x >= LCD128_WIDTH) || (y >= LCD128_HEIGHT)) return;
 80016e6:	897b      	ldrh	r3, [r7, #10]
 80016e8:	2bef      	cmp	r3, #239	@ 0xef
 80016ea:	d83b      	bhi.n	8001764 <LCD128_FillRectangle+0x98>
 80016ec:	893b      	ldrh	r3, [r7, #8]
 80016ee:	2bef      	cmp	r3, #239	@ 0xef
 80016f0:	d838      	bhi.n	8001764 <LCD128_FillRectangle+0x98>
    if ((x + w - 1) >= LCD128_WIDTH) w = LCD128_WIDTH - x;
 80016f2:	897a      	ldrh	r2, [r7, #10]
 80016f4:	88fb      	ldrh	r3, [r7, #6]
 80016f6:	4413      	add	r3, r2
 80016f8:	2bf0      	cmp	r3, #240	@ 0xf0
 80016fa:	dd03      	ble.n	8001704 <LCD128_FillRectangle+0x38>
 80016fc:	897b      	ldrh	r3, [r7, #10]
 80016fe:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001702:	80fb      	strh	r3, [r7, #6]
    if ((y + h - 1) >= LCD128_HEIGHT) h = LCD128_HEIGHT - y;
 8001704:	893a      	ldrh	r2, [r7, #8]
 8001706:	8c3b      	ldrh	r3, [r7, #32]
 8001708:	4413      	add	r3, r2
 800170a:	2bf0      	cmp	r3, #240	@ 0xf0
 800170c:	dd03      	ble.n	8001716 <LCD128_FillRectangle+0x4a>
 800170e:	893b      	ldrh	r3, [r7, #8]
 8001710:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001714:	843b      	strh	r3, [r7, #32]
    LCD128_SetAddressWindow(lcd, x, y, x + w - 1, y + h - 1);
 8001716:	897a      	ldrh	r2, [r7, #10]
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	4413      	add	r3, r2
 800171c:	b29b      	uxth	r3, r3
 800171e:	3b01      	subs	r3, #1
 8001720:	b298      	uxth	r0, r3
 8001722:	893a      	ldrh	r2, [r7, #8]
 8001724:	8c3b      	ldrh	r3, [r7, #32]
 8001726:	4413      	add	r3, r2
 8001728:	b29b      	uxth	r3, r3
 800172a:	3b01      	subs	r3, #1
 800172c:	b29b      	uxth	r3, r3
 800172e:	893a      	ldrh	r2, [r7, #8]
 8001730:	8979      	ldrh	r1, [r7, #10]
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	4603      	mov	r3, r0
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f7ff fbb0 	bl	8000e9c <LCD128_SetAddressWindow>
    for (uint32_t i = 0; i < w * h; i++) {
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e007      	b.n	8001752 <LCD128_FillRectangle+0x86>
        LCD128_WriteData16(lcd, color);
 8001742:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001744:	4619      	mov	r1, r3
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f7ff fb6b 	bl	8000e22 <LCD128_WriteData16>
    for (uint32_t i = 0; i < w * h; i++) {
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3301      	adds	r3, #1
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	8c3a      	ldrh	r2, [r7, #32]
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	461a      	mov	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	4293      	cmp	r3, r2
 8001760:	d3ef      	bcc.n	8001742 <LCD128_FillRectangle+0x76>
 8001762:	e000      	b.n	8001766 <LCD128_FillRectangle+0x9a>
    if ((x >= LCD128_WIDTH) || (y >= LCD128_HEIGHT)) return;
 8001764:	bf00      	nop
    }
}
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <LCD128_FillScreen>:

void LCD128_FillScreen(LCD128_HandleTypeDef* lcd, uint16_t color) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af02      	add	r7, sp, #8
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
    LCD128_FillRectangle(lcd, 0, 0, LCD128_WIDTH, LCD128_HEIGHT, color);
 8001778:	887b      	ldrh	r3, [r7, #2]
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	23f0      	movs	r3, #240	@ 0xf0
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	23f0      	movs	r3, #240	@ 0xf0
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffa0 	bl	80016cc <LCD128_FillRectangle>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <LCD128_DrawImage_DMA>:
}

// Biến trạng thái DMA (nên đặt volatile nếu dùng trong ngắt)
volatile uint8_t lcd128_dma_busy = 0;

void LCD128_DrawImage_DMA(LCD128_HandleTypeDef* lcd, uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af02      	add	r7, sp, #8
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	4608      	mov	r0, r1
 800179e:	4611      	mov	r1, r2
 80017a0:	461a      	mov	r2, r3
 80017a2:	4603      	mov	r3, r0
 80017a4:	817b      	strh	r3, [r7, #10]
 80017a6:	460b      	mov	r3, r1
 80017a8:	813b      	strh	r3, [r7, #8]
 80017aa:	4613      	mov	r3, r2
 80017ac:	80fb      	strh	r3, [r7, #6]
    if ((x >= LCD128_WIDTH) || (y >= LCD128_HEIGHT)) return;
 80017ae:	897b      	ldrh	r3, [r7, #10]
 80017b0:	2bef      	cmp	r3, #239	@ 0xef
 80017b2:	d836      	bhi.n	8001822 <LCD128_DrawImage_DMA+0x8e>
 80017b4:	893b      	ldrh	r3, [r7, #8]
 80017b6:	2bef      	cmp	r3, #239	@ 0xef
 80017b8:	d833      	bhi.n	8001822 <LCD128_DrawImage_DMA+0x8e>
    if ((x + w - 1) >= LCD128_WIDTH) return;
 80017ba:	897a      	ldrh	r2, [r7, #10]
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	4413      	add	r3, r2
 80017c0:	2bf0      	cmp	r3, #240	@ 0xf0
 80017c2:	dc30      	bgt.n	8001826 <LCD128_DrawImage_DMA+0x92>
    if ((y + h - 1) >= LCD128_HEIGHT) return;
 80017c4:	893a      	ldrh	r2, [r7, #8]
 80017c6:	8b3b      	ldrh	r3, [r7, #24]
 80017c8:	4413      	add	r3, r2
 80017ca:	2bf0      	cmp	r3, #240	@ 0xf0
 80017cc:	dc2d      	bgt.n	800182a <LCD128_DrawImage_DMA+0x96>
    LCD128_SetAddressWindow(lcd, x, y, x + w - 1, y + h - 1);
 80017ce:	897a      	ldrh	r2, [r7, #10]
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	4413      	add	r3, r2
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	3b01      	subs	r3, #1
 80017d8:	b298      	uxth	r0, r3
 80017da:	893a      	ldrh	r2, [r7, #8]
 80017dc:	8b3b      	ldrh	r3, [r7, #24]
 80017de:	4413      	add	r3, r2
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	3b01      	subs	r3, #1
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	893a      	ldrh	r2, [r7, #8]
 80017e8:	8979      	ldrh	r1, [r7, #10]
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	4603      	mov	r3, r0
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f7ff fb54 	bl	8000e9c <LCD128_SetAddressWindow>
    LCD128_DC_1(lcd);
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f7ff fa97 	bl	8000d28 <LCD128_DC_1>
    LCD128_CS_0(lcd);
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f7ff fa64 	bl	8000cc8 <LCD128_CS_0>
    lcd128_dma_busy = 1;
 8001800:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <LCD128_DrawImage_DMA+0xa0>)
 8001802:	2201      	movs	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
    // Truyền buffer qua DMA, mỗi pixel 2 byte
    HAL_SPI_Transmit_DMA(lcd->hspi, (uint8_t*)data, w * h * 2);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	8b3a      	ldrh	r2, [r7, #24]
 800180e:	fb02 f303 	mul.w	r3, r2, r3
 8001812:	b29b      	uxth	r3, r3
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	b29b      	uxth	r3, r3
 8001818:	461a      	mov	r2, r3
 800181a:	69f9      	ldr	r1, [r7, #28]
 800181c:	f002 ff1c 	bl	8004658 <HAL_SPI_Transmit_DMA>
 8001820:	e004      	b.n	800182c <LCD128_DrawImage_DMA+0x98>
    if ((x >= LCD128_WIDTH) || (y >= LCD128_HEIGHT)) return;
 8001822:	bf00      	nop
 8001824:	e002      	b.n	800182c <LCD128_DrawImage_DMA+0x98>
    if ((x + w - 1) >= LCD128_WIDTH) return;
 8001826:	bf00      	nop
 8001828:	e000      	b.n	800182c <LCD128_DrawImage_DMA+0x98>
    if ((y + h - 1) >= LCD128_HEIGHT) return;
 800182a:	bf00      	nop
    // Không đóng CS ở đây, sẽ đóng trong callback khi DMA xong
}
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200000a8 	.word	0x200000a8

08001838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800183e:	f001 fc47 	bl	80030d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001842:	f001 f8cb 	bl	80029dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001846:	f001 f9a1 	bl	8002b8c <MX_GPIO_Init>
  MX_DMA_Init();
 800184a:	f001 f979 	bl	8002b40 <MX_DMA_Init>
  MX_SPI1_Init();
 800184e:	f001 f90b 	bl	8002a68 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001852:	f001 f93f 	bl	8002ad4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  // Gán cấu hình LCD
  lcd1.hspi = &hspi1;
 8001856:	4b9a      	ldr	r3, [pc, #616]	@ (8001ac0 <main+0x288>)
 8001858:	4a9a      	ldr	r2, [pc, #616]	@ (8001ac4 <main+0x28c>)
 800185a:	601a      	str	r2, [r3, #0]
  lcd1.CS_Port = GPIOB; lcd1.CS_Pin = GPIO_PIN_10;
 800185c:	4b98      	ldr	r3, [pc, #608]	@ (8001ac0 <main+0x288>)
 800185e:	4a9a      	ldr	r2, [pc, #616]	@ (8001ac8 <main+0x290>)
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	4b97      	ldr	r3, [pc, #604]	@ (8001ac0 <main+0x288>)
 8001864:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001868:	811a      	strh	r2, [r3, #8]
  lcd1.DC_Port = GPIOB; lcd1.DC_Pin = GPIO_PIN_1;
 800186a:	4b95      	ldr	r3, [pc, #596]	@ (8001ac0 <main+0x288>)
 800186c:	4a96      	ldr	r2, [pc, #600]	@ (8001ac8 <main+0x290>)
 800186e:	60da      	str	r2, [r3, #12]
 8001870:	4b93      	ldr	r3, [pc, #588]	@ (8001ac0 <main+0x288>)
 8001872:	2202      	movs	r2, #2
 8001874:	821a      	strh	r2, [r3, #16]
  lcd1.RST_Port = GPIOB; lcd1.RST_Pin = GPIO_PIN_0;
 8001876:	4b92      	ldr	r3, [pc, #584]	@ (8001ac0 <main+0x288>)
 8001878:	4a93      	ldr	r2, [pc, #588]	@ (8001ac8 <main+0x290>)
 800187a:	615a      	str	r2, [r3, #20]
 800187c:	4b90      	ldr	r3, [pc, #576]	@ (8001ac0 <main+0x288>)
 800187e:	2201      	movs	r2, #1
 8001880:	831a      	strh	r2, [r3, #24]

  // LCD2
  lcd2.hspi = &hspi2;
 8001882:	4b92      	ldr	r3, [pc, #584]	@ (8001acc <main+0x294>)
 8001884:	4a92      	ldr	r2, [pc, #584]	@ (8001ad0 <main+0x298>)
 8001886:	601a      	str	r2, [r3, #0]
  lcd2.CS_Port = GPIOA; lcd2.CS_Pin = GPIO_PIN_10;
 8001888:	4b90      	ldr	r3, [pc, #576]	@ (8001acc <main+0x294>)
 800188a:	4a92      	ldr	r2, [pc, #584]	@ (8001ad4 <main+0x29c>)
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	4b8f      	ldr	r3, [pc, #572]	@ (8001acc <main+0x294>)
 8001890:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001894:	811a      	strh	r2, [r3, #8]
  lcd2.DC_Port = GPIOA; lcd2.DC_Pin = GPIO_PIN_9;
 8001896:	4b8d      	ldr	r3, [pc, #564]	@ (8001acc <main+0x294>)
 8001898:	4a8e      	ldr	r2, [pc, #568]	@ (8001ad4 <main+0x29c>)
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	4b8b      	ldr	r3, [pc, #556]	@ (8001acc <main+0x294>)
 800189e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018a2:	821a      	strh	r2, [r3, #16]
  lcd2.RST_Port = GPIOA; lcd2.RST_Pin = GPIO_PIN_8;
 80018a4:	4b89      	ldr	r3, [pc, #548]	@ (8001acc <main+0x294>)
 80018a6:	4a8b      	ldr	r2, [pc, #556]	@ (8001ad4 <main+0x29c>)
 80018a8:	615a      	str	r2, [r3, #20]
 80018aa:	4b88      	ldr	r3, [pc, #544]	@ (8001acc <main+0x294>)
 80018ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018b0:	831a      	strh	r2, [r3, #24]
  // Khởi tạo LCD
  LCD128_Init(&lcd1);
 80018b2:	4883      	ldr	r0, [pc, #524]	@ (8001ac0 <main+0x288>)
 80018b4:	f7ff fb47 	bl	8000f46 <LCD128_Init>
  LCD128_Init(&lcd2);
 80018b8:	4884      	ldr	r0, [pc, #528]	@ (8001acc <main+0x294>)
 80018ba:	f7ff fb44 	bl	8000f46 <LCD128_Init>
//  EyeTFT_Init(&lcd1);

  // Xóa màn hình (tô đen)
  LCD128_FillScreen(&lcd1, LCD128_BLACK);
 80018be:	2100      	movs	r1, #0
 80018c0:	487f      	ldr	r0, [pc, #508]	@ (8001ac0 <main+0x288>)
 80018c2:	f7ff ff53 	bl	800176c <LCD128_FillScreen>
  LCD128_FillScreen(&lcd2, LCD128_BLACK);
 80018c6:	2100      	movs	r1, #0
 80018c8:	4880      	ldr	r0, [pc, #512]	@ (8001acc <main+0x294>)
 80018ca:	f7ff ff4f 	bl	800176c <LCD128_FillScreen>

  LCD_Paint_DrawDashedEllipse(&lcd1, 120, 120, 83, 108, 6, 2, 2, LCD128_WHITE);
 80018ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018d2:	9304      	str	r3, [sp, #16]
 80018d4:	2302      	movs	r3, #2
 80018d6:	9303      	str	r3, [sp, #12]
 80018d8:	2302      	movs	r3, #2
 80018da:	9302      	str	r3, [sp, #8]
 80018dc:	2306      	movs	r3, #6
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	236c      	movs	r3, #108	@ 0x6c
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2353      	movs	r3, #83	@ 0x53
 80018e6:	2278      	movs	r2, #120	@ 0x78
 80018e8:	2178      	movs	r1, #120	@ 0x78
 80018ea:	4875      	ldr	r0, [pc, #468]	@ (8001ac0 <main+0x288>)
 80018ec:	f7ff f964 	bl	8000bb8 <LCD_Paint_DrawDashedEllipse>
  LCD_Paint_DrawDashedEllipse(&lcd1, 120, 120, 90, 115, 7, 2, 2, LCD128_WHITE);
 80018f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018f4:	9304      	str	r3, [sp, #16]
 80018f6:	2302      	movs	r3, #2
 80018f8:	9303      	str	r3, [sp, #12]
 80018fa:	2302      	movs	r3, #2
 80018fc:	9302      	str	r3, [sp, #8]
 80018fe:	2307      	movs	r3, #7
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	2373      	movs	r3, #115	@ 0x73
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	235a      	movs	r3, #90	@ 0x5a
 8001908:	2278      	movs	r2, #120	@ 0x78
 800190a:	2178      	movs	r1, #120	@ 0x78
 800190c:	486c      	ldr	r0, [pc, #432]	@ (8001ac0 <main+0x288>)
 800190e:	f7ff f953 	bl	8000bb8 <LCD_Paint_DrawDashedEllipse>
  LCD_Paint_DrawDashedEllipse(&lcd1, 120, 120, 95, 120, 8, 2, 2, LCD128_WHITE);
 8001912:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001916:	9304      	str	r3, [sp, #16]
 8001918:	2302      	movs	r3, #2
 800191a:	9303      	str	r3, [sp, #12]
 800191c:	2302      	movs	r3, #2
 800191e:	9302      	str	r3, [sp, #8]
 8001920:	2308      	movs	r3, #8
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	2378      	movs	r3, #120	@ 0x78
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	235f      	movs	r3, #95	@ 0x5f
 800192a:	2278      	movs	r2, #120	@ 0x78
 800192c:	2178      	movs	r1, #120	@ 0x78
 800192e:	4864      	ldr	r0, [pc, #400]	@ (8001ac0 <main+0x288>)
 8001930:	f7ff f942 	bl	8000bb8 <LCD_Paint_DrawDashedEllipse>
  LCD_Paint_DrawDashedEllipse(&lcd2, 120, 120, 83, 108, 6, 2, 2, LCD128_WHITE);
 8001934:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001938:	9304      	str	r3, [sp, #16]
 800193a:	2302      	movs	r3, #2
 800193c:	9303      	str	r3, [sp, #12]
 800193e:	2302      	movs	r3, #2
 8001940:	9302      	str	r3, [sp, #8]
 8001942:	2306      	movs	r3, #6
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	236c      	movs	r3, #108	@ 0x6c
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	2353      	movs	r3, #83	@ 0x53
 800194c:	2278      	movs	r2, #120	@ 0x78
 800194e:	2178      	movs	r1, #120	@ 0x78
 8001950:	485e      	ldr	r0, [pc, #376]	@ (8001acc <main+0x294>)
 8001952:	f7ff f931 	bl	8000bb8 <LCD_Paint_DrawDashedEllipse>
  LCD_Paint_DrawDashedEllipse(&lcd2, 120, 120, 90, 115, 7, 2, 2, LCD128_WHITE);
 8001956:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800195a:	9304      	str	r3, [sp, #16]
 800195c:	2302      	movs	r3, #2
 800195e:	9303      	str	r3, [sp, #12]
 8001960:	2302      	movs	r3, #2
 8001962:	9302      	str	r3, [sp, #8]
 8001964:	2307      	movs	r3, #7
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	2373      	movs	r3, #115	@ 0x73
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	235a      	movs	r3, #90	@ 0x5a
 800196e:	2278      	movs	r2, #120	@ 0x78
 8001970:	2178      	movs	r1, #120	@ 0x78
 8001972:	4856      	ldr	r0, [pc, #344]	@ (8001acc <main+0x294>)
 8001974:	f7ff f920 	bl	8000bb8 <LCD_Paint_DrawDashedEllipse>
  LCD_Paint_DrawDashedEllipse(&lcd2, 120, 120, 95, 120, 8, 2, 2, LCD128_WHITE);
 8001978:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800197c:	9304      	str	r3, [sp, #16]
 800197e:	2302      	movs	r3, #2
 8001980:	9303      	str	r3, [sp, #12]
 8001982:	2302      	movs	r3, #2
 8001984:	9302      	str	r3, [sp, #8]
 8001986:	2308      	movs	r3, #8
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	2378      	movs	r3, #120	@ 0x78
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	235f      	movs	r3, #95	@ 0x5f
 8001990:	2278      	movs	r2, #120	@ 0x78
 8001992:	2178      	movs	r1, #120	@ 0x78
 8001994:	484d      	ldr	r0, [pc, #308]	@ (8001acc <main+0x294>)
 8001996:	f7ff f90f 	bl	8000bb8 <LCD_Paint_DrawDashedEllipse>



  centerX = 120; centerY = 120;
 800199a:	4b4f      	ldr	r3, [pc, #316]	@ (8001ad8 <main+0x2a0>)
 800199c:	2278      	movs	r2, #120	@ 0x78
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	4b4e      	ldr	r3, [pc, #312]	@ (8001adc <main+0x2a4>)
 80019a2:	2278      	movs	r2, #120	@ 0x78
 80019a4:	601a      	str	r2, [r3, #0]
  rx_in  = 70; ry_in  = 90;
 80019a6:	4b4e      	ldr	r3, [pc, #312]	@ (8001ae0 <main+0x2a8>)
 80019a8:	2246      	movs	r2, #70	@ 0x46
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	4b4d      	ldr	r3, [pc, #308]	@ (8001ae4 <main+0x2ac>)
 80019ae:	225a      	movs	r2, #90	@ 0x5a
 80019b0:	601a      	str	r2, [r3, #0]
  pupilRadius = 32;
 80019b2:	4b4d      	ldr	r3, [pc, #308]	@ (8001ae8 <main+0x2b0>)
 80019b4:	2220      	movs	r2, #32
 80019b6:	601a      	str	r2, [r3, #0]
  eyeRadius = pupilRadius / 2;
 80019b8:	4b4b      	ldr	r3, [pc, #300]	@ (8001ae8 <main+0x2b0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	0fda      	lsrs	r2, r3, #31
 80019be:	4413      	add	r3, r2
 80019c0:	105b      	asrs	r3, r3, #1
 80019c2:	461a      	mov	r2, r3
 80019c4:	4b49      	ldr	r3, [pc, #292]	@ (8001aec <main+0x2b4>)
 80019c6:	601a      	str	r2, [r3, #0]
  pupilX = centerX; pupilY = centerY;
 80019c8:	4b43      	ldr	r3, [pc, #268]	@ (8001ad8 <main+0x2a0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a48      	ldr	r2, [pc, #288]	@ (8001af0 <main+0x2b8>)
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b42      	ldr	r3, [pc, #264]	@ (8001adc <main+0x2a4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a47      	ldr	r2, [pc, #284]	@ (8001af4 <main+0x2bc>)
 80019d6:	6013      	str	r3, [r2, #0]
  state = STATE_RANDOM_MOVE1;
 80019d8:	4b47      	ldr	r3, [pc, #284]	@ (8001af8 <main+0x2c0>)
 80019da:	2211      	movs	r2, #17
 80019dc:	701a      	strb	r2, [r3, #0]
  last_tick = HAL_GetTick();
 80019de:	f001 fbcf 	bl	8003180 <HAL_GetTick>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4a45      	ldr	r2, [pc, #276]	@ (8001afc <main+0x2c4>)
 80019e6:	6013      	str	r3, [r2, #0]
  frame_count = 0;
 80019e8:	4b45      	ldr	r3, [pc, #276]	@ (8001b00 <main+0x2c8>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
  fps = 0;
 80019ee:	4b45      	ldr	r3, [pc, #276]	@ (8001b04 <main+0x2cc>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
  lerp_startX = lerp_startY = lerp_targetX = lerp_targetY = 0;
 80019f4:	4b44      	ldr	r3, [pc, #272]	@ (8001b08 <main+0x2d0>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	4b43      	ldr	r3, [pc, #268]	@ (8001b08 <main+0x2d0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a43      	ldr	r2, [pc, #268]	@ (8001b0c <main+0x2d4>)
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	4b42      	ldr	r3, [pc, #264]	@ (8001b0c <main+0x2d4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a42      	ldr	r2, [pc, #264]	@ (8001b10 <main+0x2d8>)
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b41      	ldr	r3, [pc, #260]	@ (8001b10 <main+0x2d8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a41      	ldr	r2, [pc, #260]	@ (8001b14 <main+0x2dc>)
 8001a10:	6013      	str	r3, [r2, #0]
  lerp_t = 1.0f;
 8001a12:	4b41      	ldr	r3, [pc, #260]	@ (8001b18 <main+0x2e0>)
 8001a14:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a18:	601a      	str	r2, [r3, #0]
  lerp_steps = 30;
 8001a1a:	4b40      	ldr	r3, [pc, #256]	@ (8001b1c <main+0x2e4>)
 8001a1c:	221e      	movs	r2, #30
 8001a1e:	601a      	str	r2, [r3, #0]
  random_count = 0;
 8001a20:	4b3f      	ldr	r3, [pc, #252]	@ (8001b20 <main+0x2e8>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
  state_sequence_len = sizeof(state_sequence) / sizeof(state_sequence[0]);
 8001a26:	4b3f      	ldr	r3, [pc, #252]	@ (8001b24 <main+0x2ec>)
 8001a28:	2219      	movs	r2, #25
 8001a2a:	601a      	str	r2, [r3, #0]
  state_index = 0;
 8001a2c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b28 <main+0x2f0>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
  state = state_sequence[state_index];
 8001a32:	4b3d      	ldr	r3, [pc, #244]	@ (8001b28 <main+0x2f0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a3d      	ldr	r2, [pc, #244]	@ (8001b2c <main+0x2f4>)
 8001a38:	5cd2      	ldrb	r2, [r2, r3]
 8001a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001af8 <main+0x2c0>)
 8001a3c:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      Animation_Loop();
 8001a3e:	f000 f87d 	bl	8001b3c <Animation_Loop>
	    HAL_Delay(10);
 8001a42:	200a      	movs	r0, #10
 8001a44:	f001 fba6 	bl	8003194 <HAL_Delay>
      frame_count++;
 8001a48:	4b2d      	ldr	r3, [pc, #180]	@ (8001b00 <main+0x2c8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	4a2c      	ldr	r2, [pc, #176]	@ (8001b00 <main+0x2c8>)
 8001a50:	6013      	str	r3, [r2, #0]
      uint32_t now = HAL_GetTick();
 8001a52:	f001 fb95 	bl	8003180 <HAL_GetTick>
 8001a56:	6078      	str	r0, [r7, #4]
      if (now - last_tick >= 1000) { // Đủ 1 giây
 8001a58:	4b28      	ldr	r3, [pc, #160]	@ (8001afc <main+0x2c4>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a64:	d3eb      	bcc.n	8001a3e <main+0x206>
        fps = frame_count;
 8001a66:	4b26      	ldr	r3, [pc, #152]	@ (8001b00 <main+0x2c8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a26      	ldr	r2, [pc, #152]	@ (8001b04 <main+0x2cc>)
 8001a6c:	6013      	str	r3, [r2, #0]
        frame_count = 0;
 8001a6e:	4b24      	ldr	r3, [pc, #144]	@ (8001b00 <main+0x2c8>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
        last_tick = now;
 8001a74:	4a21      	ldr	r2, [pc, #132]	@ (8001afc <main+0x2c4>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6013      	str	r3, [r2, #0]
        // Hiển thị FPS lên LCD1 góc trên bên trái
        sprintf(fps_buf, "%lu", fps);
 8001a7a:	4b22      	ldr	r3, [pc, #136]	@ (8001b04 <main+0x2cc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	492b      	ldr	r1, [pc, #172]	@ (8001b30 <main+0x2f8>)
 8001a82:	482c      	ldr	r0, [pc, #176]	@ (8001b34 <main+0x2fc>)
 8001a84:	f003 f8e8 	bl	8004c58 <siprintf>
        LCD_Paint_FillRect(&lcd1, 0, 120, 60, 16, LCD128_BLACK); // Xóa vùng cũ
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	2310      	movs	r3, #16
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	233c      	movs	r3, #60	@ 0x3c
 8001a92:	2278      	movs	r2, #120	@ 0x78
 8001a94:	2100      	movs	r1, #0
 8001a96:	480a      	ldr	r0, [pc, #40]	@ (8001ac0 <main+0x288>)
 8001a98:	f7fe fe7f 	bl	800079a <LCD_Paint_FillRect>
        LCD128_WriteString(&lcd1, 0, 120, fps_buf, Font_11x18, LCD128_WHITE, LCD128_BLACK);
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9303      	str	r3, [sp, #12]
 8001aa0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001aa4:	9302      	str	r3, [sp, #8]
 8001aa6:	4a24      	ldr	r2, [pc, #144]	@ (8001b38 <main+0x300>)
 8001aa8:	466b      	mov	r3, sp
 8001aaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aae:	e883 0003 	stmia.w	r3, {r0, r1}
 8001ab2:	4b20      	ldr	r3, [pc, #128]	@ (8001b34 <main+0x2fc>)
 8001ab4:	2278      	movs	r2, #120	@ 0x78
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4801      	ldr	r0, [pc, #4]	@ (8001ac0 <main+0x288>)
 8001aba:	f7ff fdc3 	bl	8001644 <LCD128_WriteString>
  {
 8001abe:	e7be      	b.n	8001a3e <main+0x206>
 8001ac0:	200001e4 	.word	0x200001e4
 8001ac4:	200000ac 	.word	0x200000ac
 8001ac8:	40010c00 	.word	0x40010c00
 8001acc:	20000200 	.word	0x20000200
 8001ad0:	20000104 	.word	0x20000104
 8001ad4:	40010800 	.word	0x40010800
 8001ad8:	2000021c 	.word	0x2000021c
 8001adc:	20000220 	.word	0x20000220
 8001ae0:	20000224 	.word	0x20000224
 8001ae4:	20000228 	.word	0x20000228
 8001ae8:	2000022c 	.word	0x2000022c
 8001aec:	20000230 	.word	0x20000230
 8001af0:	20000234 	.word	0x20000234
 8001af4:	20000238 	.word	0x20000238
 8001af8:	2000023c 	.word	0x2000023c
 8001afc:	20000240 	.word	0x20000240
 8001b00:	20000244 	.word	0x20000244
 8001b04:	20000248 	.word	0x20000248
 8001b08:	20000268 	.word	0x20000268
 8001b0c:	20000264 	.word	0x20000264
 8001b10:	20000260 	.word	0x20000260
 8001b14:	2000025c 	.word	0x2000025c
 8001b18:	2000026c 	.word	0x2000026c
 8001b1c:	20000270 	.word	0x20000270
 8001b20:	20000274 	.word	0x20000274
 8001b24:	20000278 	.word	0x20000278
 8001b28:	2000027c 	.word	0x2000027c
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	08006afc 	.word	0x08006afc
 8001b34:	2000024c 	.word	0x2000024c
 8001b38:	20000000 	.word	0x20000000

08001b3c <Animation_Loop>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void Animation_Loop(void){
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b08f      	sub	sp, #60	@ 0x3c
 8001b40:	af06      	add	r7, sp, #24
      // Tính offset pupil theo hướng di chuyển, giới hạn trong mắt trắng
      int pupil_offset_x = centerX - pupilX;  
 8001b42:	4b97      	ldr	r3, [pc, #604]	@ (8001da0 <Animation_Loop+0x264>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4b97      	ldr	r3, [pc, #604]	@ (8001da4 <Animation_Loop+0x268>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	61fb      	str	r3, [r7, #28]
      int pupil_offset_y = centerY - pupilY;
 8001b4e:	4b96      	ldr	r3, [pc, #600]	@ (8001da8 <Animation_Loop+0x26c>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4b96      	ldr	r3, [pc, #600]	@ (8001dac <Animation_Loop+0x270>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	61bb      	str	r3, [r7, #24]

      float max_offset = eyeRadius - pupilRadius;
 8001b5a:	4b95      	ldr	r3, [pc, #596]	@ (8001db0 <Animation_Loop+0x274>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4b95      	ldr	r3, [pc, #596]	@ (8001db4 <Animation_Loop+0x278>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fbab 	bl	80002c0 <__aeabi_i2f>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	617b      	str	r3, [r7, #20]
      float dist = sqrtf(pupil_offset_x * pupil_offset_x + pupil_offset_y * pupil_offset_y);
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	fb03 f203 	mul.w	r2, r3, r3
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	fb03 f303 	mul.w	r3, r3, r3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fb9f 	bl	80002c0 <__aeabi_i2f>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f004 f925 	bl	8005dd4 <sqrtf>
 8001b8a:	6138      	str	r0, [r7, #16]
      if (dist > max_offset && dist > 0) {
 8001b8c:	6979      	ldr	r1, [r7, #20]
 8001b8e:	6938      	ldr	r0, [r7, #16]
 8001b90:	f7fe fda6 	bl	80006e0 <__aeabi_fcmpgt>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d02d      	beq.n	8001bf6 <Animation_Loop+0xba>
 8001b9a:	f04f 0100 	mov.w	r1, #0
 8001b9e:	6938      	ldr	r0, [r7, #16]
 8001ba0:	f7fe fd9e 	bl	80006e0 <__aeabi_fcmpgt>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d025      	beq.n	8001bf6 <Animation_Loop+0xba>
          pupil_offset_x = (int)(pupil_offset_x * max_offset / dist);
 8001baa:	69f8      	ldr	r0, [r7, #28]
 8001bac:	f7fe fb88 	bl	80002c0 <__aeabi_i2f>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	6979      	ldr	r1, [r7, #20]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fbd7 	bl	8000368 <__aeabi_fmul>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	6939      	ldr	r1, [r7, #16]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fc86 	bl	80004d0 <__aeabi_fdiv>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fdaa 	bl	8000720 <__aeabi_f2iz>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	61fb      	str	r3, [r7, #28]
          pupil_offset_y = (int)(pupil_offset_y * max_offset / dist);
 8001bd0:	69b8      	ldr	r0, [r7, #24]
 8001bd2:	f7fe fb75 	bl	80002c0 <__aeabi_i2f>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6979      	ldr	r1, [r7, #20]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fbc4 	bl	8000368 <__aeabi_fmul>
 8001be0:	4603      	mov	r3, r0
 8001be2:	6939      	ldr	r1, [r7, #16]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fc73 	bl	80004d0 <__aeabi_fdiv>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fd97 	bl	8000720 <__aeabi_f2iz>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	61bb      	str	r3, [r7, #24]
      }

      draw_eye_with_pupil_to_buffer(BUF_W/2, BUF_H/2, pupilRadius, eyeRadius, pupil_offset_x, pupil_offset_y, LCD128_WHITE, LCD128_BLACK, LCD128_BLACK);
 8001bf6:	4b6f      	ldr	r3, [pc, #444]	@ (8001db4 <Animation_Loop+0x278>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	4b6d      	ldr	r3, [pc, #436]	@ (8001db0 <Animation_Loop+0x274>)
 8001bfc:	6819      	ldr	r1, [r3, #0]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	9304      	str	r3, [sp, #16]
 8001c02:	2300      	movs	r3, #0
 8001c04:	9303      	str	r3, [sp, #12]
 8001c06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c0a:	9302      	str	r3, [sp, #8]
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	460b      	mov	r3, r1
 8001c16:	2123      	movs	r1, #35	@ 0x23
 8001c18:	2023      	movs	r0, #35	@ 0x23
 8001c1a:	f000 fe3d 	bl	8002898 <draw_eye_with_pupil_to_buffer>

	    // Vẽ buffer lên LCD tại vị trí mong muốn bằng DMA
	    LCD128_DrawImage_DMA(&lcd1, pupilX - BUF_W/2, pupilY - BUF_H/2, BUF_W, BUF_H, (uint16_t*)framebuf);
 8001c1e:	4b61      	ldr	r3, [pc, #388]	@ (8001da4 <Animation_Loop+0x268>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3b23      	subs	r3, #35	@ 0x23
 8001c26:	b299      	uxth	r1, r3
 8001c28:	4b60      	ldr	r3, [pc, #384]	@ (8001dac <Animation_Loop+0x270>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	3b23      	subs	r3, #35	@ 0x23
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	4b61      	ldr	r3, [pc, #388]	@ (8001db8 <Animation_Loop+0x27c>)
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	2346      	movs	r3, #70	@ 0x46
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2346      	movs	r3, #70	@ 0x46
 8001c3c:	485f      	ldr	r0, [pc, #380]	@ (8001dbc <Animation_Loop+0x280>)
 8001c3e:	f7ff fda9 	bl	8001794 <LCD128_DrawImage_DMA>
	    LCD128_DrawImage_DMA(&lcd2, pupilX - BUF_W/2, pupilY - BUF_H/2, BUF_W, BUF_H, (uint16_t*)framebuf);
 8001c42:	4b58      	ldr	r3, [pc, #352]	@ (8001da4 <Animation_Loop+0x268>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	3b23      	subs	r3, #35	@ 0x23
 8001c4a:	b299      	uxth	r1, r3
 8001c4c:	4b57      	ldr	r3, [pc, #348]	@ (8001dac <Animation_Loop+0x270>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	3b23      	subs	r3, #35	@ 0x23
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	4b58      	ldr	r3, [pc, #352]	@ (8001db8 <Animation_Loop+0x27c>)
 8001c58:	9301      	str	r3, [sp, #4]
 8001c5a:	2346      	movs	r3, #70	@ 0x46
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2346      	movs	r3, #70	@ 0x46
 8001c60:	4857      	ldr	r0, [pc, #348]	@ (8001dc0 <Animation_Loop+0x284>)
 8001c62:	f7ff fd97 	bl	8001794 <LCD128_DrawImage_DMA>
	    // Chờ DMA xong
	    while (lcd128_dma_busy);
 8001c66:	bf00      	nop
 8001c68:	4b56      	ldr	r3, [pc, #344]	@ (8001dc4 <Animation_Loop+0x288>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1fa      	bne.n	8001c68 <Animation_Loop+0x12c>
      // Thêm biến trạng thái bên ngoài vòng lặp (nên đặt ở phần khai báo biến):
      // Di chuyển pupil bằng nội suy tuyến tính
      if (lerp_t < 1.0f) {
 8001c72:	4b55      	ldr	r3, [pc, #340]	@ (8001dc8 <Animation_Loop+0x28c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fd12 	bl	80006a4 <__aeabi_fcmplt>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d058      	beq.n	8001d38 <Animation_Loop+0x1fc>
          lerp_t += 1.0f / lerp_steps;
 8001c86:	4b51      	ldr	r3, [pc, #324]	@ (8001dcc <Animation_Loop+0x290>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fb18 	bl	80002c0 <__aeabi_i2f>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4619      	mov	r1, r3
 8001c94:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001c98:	f7fe fc1a 	bl	80004d0 <__aeabi_fdiv>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4b49      	ldr	r3, [pc, #292]	@ (8001dc8 <Animation_Loop+0x28c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	f7fe fa56 	bl	8000158 <__addsf3>
 8001cac:	4603      	mov	r3, r0
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b45      	ldr	r3, [pc, #276]	@ (8001dc8 <Animation_Loop+0x28c>)
 8001cb2:	601a      	str	r2, [r3, #0]
          if (lerp_t > 1.0f) lerp_t = 1.0f;
 8001cb4:	4b44      	ldr	r3, [pc, #272]	@ (8001dc8 <Animation_Loop+0x28c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fd0f 	bl	80006e0 <__aeabi_fcmpgt>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <Animation_Loop+0x194>
 8001cc8:	4b3f      	ldr	r3, [pc, #252]	@ (8001dc8 <Animation_Loop+0x28c>)
 8001cca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001cce:	601a      	str	r2, [r3, #0]
          pupilX = lerp_startX + (int)((lerp_targetX - lerp_startX) * lerp_t);
 8001cd0:	4b3f      	ldr	r3, [pc, #252]	@ (8001dd0 <Animation_Loop+0x294>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b3f      	ldr	r3, [pc, #252]	@ (8001dd4 <Animation_Loop+0x298>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe faf0 	bl	80002c0 <__aeabi_i2f>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4b39      	ldr	r3, [pc, #228]	@ (8001dc8 <Animation_Loop+0x28c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4610      	mov	r0, r2
 8001cea:	f7fe fb3d 	bl	8000368 <__aeabi_fmul>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fd15 	bl	8000720 <__aeabi_f2iz>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	4b36      	ldr	r3, [pc, #216]	@ (8001dd4 <Animation_Loop+0x298>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4a29      	ldr	r2, [pc, #164]	@ (8001da4 <Animation_Loop+0x268>)
 8001d00:	6013      	str	r3, [r2, #0]
          pupilY = lerp_startY + (int)((lerp_targetY - lerp_startY) * lerp_t);
 8001d02:	4b35      	ldr	r3, [pc, #212]	@ (8001dd8 <Animation_Loop+0x29c>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	4b35      	ldr	r3, [pc, #212]	@ (8001ddc <Animation_Loop+0x2a0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fad7 	bl	80002c0 <__aeabi_i2f>
 8001d12:	4602      	mov	r2, r0
 8001d14:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc8 <Animation_Loop+0x28c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	f7fe fb24 	bl	8000368 <__aeabi_fmul>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fcfc 	bl	8000720 <__aeabi_f2iz>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001ddc <Animation_Loop+0x2a0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	4a1e      	ldr	r2, [pc, #120]	@ (8001dac <Animation_Loop+0x270>)
 8001d32:	6013      	str	r3, [r2, #0]
              case STATE_SURPRISED_SHRINK:
                  break;
              
          }
      }
}
 8001d34:	f000 bd89 	b.w	800284a <Animation_Loop+0xd0e>
          switch (state) {
 8001d38:	4b29      	ldr	r3, [pc, #164]	@ (8001de0 <Animation_Loop+0x2a4>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b15      	cmp	r3, #21
 8001d3e:	f200 8584 	bhi.w	800284a <Animation_Loop+0xd0e>
 8001d42:	a201      	add	r2, pc, #4	@ (adr r2, 8001d48 <Animation_Loop+0x20c>)
 8001d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d48:	08001ee7 	.word	0x08001ee7
 8001d4c:	08001f47 	.word	0x08001f47
 8001d50:	08001f9b 	.word	0x08001f9b
 8001d54:	08002041 	.word	0x08002041
 8001d58:	08002093 	.word	0x08002093
 8001d5c:	080020f1 	.word	0x080020f1
 8001d60:	08002143 	.word	0x08002143
 8001d64:	080021a1 	.word	0x080021a1
 8001d68:	08002235 	.word	0x08002235
 8001d6c:	080022f3 	.word	0x080022f3
 8001d70:	08002345 	.word	0x08002345
 8001d74:	08002403 	.word	0x08002403
 8001d78:	08002499 	.word	0x08002499
 8001d7c:	08002557 	.word	0x08002557
 8001d80:	080025a9 	.word	0x080025a9
 8001d84:	08002667 	.word	0x08002667
 8001d88:	080026fd 	.word	0x080026fd
 8001d8c:	08001de5 	.word	0x08001de5
 8001d90:	080027f7 	.word	0x080027f7
 8001d94:	08002849 	.word	0x08002849
 8001d98:	08002849 	.word	0x08002849
 8001d9c:	08002849 	.word	0x08002849
 8001da0:	2000021c 	.word	0x2000021c
 8001da4:	20000234 	.word	0x20000234
 8001da8:	20000220 	.word	0x20000220
 8001dac:	20000238 	.word	0x20000238
 8001db0:	20000230 	.word	0x20000230
 8001db4:	2000022c 	.word	0x2000022c
 8001db8:	20000280 	.word	0x20000280
 8001dbc:	200001e4 	.word	0x200001e4
 8001dc0:	20000200 	.word	0x20000200
 8001dc4:	200000a8 	.word	0x200000a8
 8001dc8:	2000026c 	.word	0x2000026c
 8001dcc:	20000270 	.word	0x20000270
 8001dd0:	20000264 	.word	0x20000264
 8001dd4:	2000025c 	.word	0x2000025c
 8001dd8:	20000268 	.word	0x20000268
 8001ddc:	20000260 	.word	0x20000260
 8001de0:	2000023c 	.word	0x2000023c
                      int rangeX = rx_in - pupilRadius * 2;
 8001de4:	4b85      	ldr	r3, [pc, #532]	@ (8001ffc <Animation_Loop+0x4c0>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b85      	ldr	r3, [pc, #532]	@ (8002000 <Animation_Loop+0x4c4>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	60fb      	str	r3, [r7, #12]
                      int rangeY = ry_in - pupilRadius * 2;
 8001df2:	4b84      	ldr	r3, [pc, #528]	@ (8002004 <Animation_Loop+0x4c8>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4b82      	ldr	r3, [pc, #520]	@ (8002000 <Animation_Loop+0x4c4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	60bb      	str	r3, [r7, #8]
                      if (random_count < RANDOM_REPEAT) {
 8001e00:	4b81      	ldr	r3, [pc, #516]	@ (8002008 <Animation_Loop+0x4cc>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2214      	movs	r2, #20
 8001e06:	4293      	cmp	r3, r2
 8001e08:	da40      	bge.n	8001e8c <Animation_Loop+0x350>
                          lerp_startX = pupilX;
 8001e0a:	4b80      	ldr	r3, [pc, #512]	@ (800200c <Animation_Loop+0x4d0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a80      	ldr	r2, [pc, #512]	@ (8002010 <Animation_Loop+0x4d4>)
 8001e10:	6013      	str	r3, [r2, #0]
                          lerp_startY = pupilY;
 8001e12:	4b80      	ldr	r3, [pc, #512]	@ (8002014 <Animation_Loop+0x4d8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a80      	ldr	r2, [pc, #512]	@ (8002018 <Animation_Loop+0x4dc>)
 8001e18:	6013      	str	r3, [r2, #0]
                          int offsetX = (rand() % rangeX) - rangeX / 2;
 8001e1a:	f002 fe1d 	bl	8004a58 <rand>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	fb93 f2f2 	sdiv	r2, r3, r2
 8001e26:	68f9      	ldr	r1, [r7, #12]
 8001e28:	fb01 f202 	mul.w	r2, r1, r2
 8001e2c:	1a9a      	subs	r2, r3, r2
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	0fd9      	lsrs	r1, r3, #31
 8001e32:	440b      	add	r3, r1
 8001e34:	105b      	asrs	r3, r3, #1
 8001e36:	425b      	negs	r3, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	607b      	str	r3, [r7, #4]
                          int offsetY = (rand() % rangeY) - rangeY / 2;
 8001e3c:	f002 fe0c 	bl	8004a58 <rand>
 8001e40:	4603      	mov	r3, r0
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	fb93 f2f2 	sdiv	r2, r3, r2
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	fb01 f202 	mul.w	r2, r1, r2
 8001e4e:	1a9a      	subs	r2, r3, r2
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	0fd9      	lsrs	r1, r3, #31
 8001e54:	440b      	add	r3, r1
 8001e56:	105b      	asrs	r3, r3, #1
 8001e58:	425b      	negs	r3, r3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	603b      	str	r3, [r7, #0]
                          lerp_targetX = centerX + offsetX;
 8001e5e:	4b6f      	ldr	r3, [pc, #444]	@ (800201c <Animation_Loop+0x4e0>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	4a6e      	ldr	r2, [pc, #440]	@ (8002020 <Animation_Loop+0x4e4>)
 8001e68:	6013      	str	r3, [r2, #0]
                          lerp_targetY = centerY + offsetY;
 8001e6a:	4b6e      	ldr	r3, [pc, #440]	@ (8002024 <Animation_Loop+0x4e8>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a6d      	ldr	r2, [pc, #436]	@ (8002028 <Animation_Loop+0x4ec>)
 8001e74:	6013      	str	r3, [r2, #0]
                          lerp_t = 0.0f;
 8001e76:	4b6d      	ldr	r3, [pc, #436]	@ (800202c <Animation_Loop+0x4f0>)
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
                          random_count++;
 8001e7e:	4b62      	ldr	r3, [pc, #392]	@ (8002008 <Animation_Loop+0x4cc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	3301      	adds	r3, #1
 8001e84:	4a60      	ldr	r2, [pc, #384]	@ (8002008 <Animation_Loop+0x4cc>)
 8001e86:	6013      	str	r3, [r2, #0]
                      break;
 8001e88:	f000 bcdf 	b.w	800284a <Animation_Loop+0xd0e>
                          random_count = 0;
 8001e8c:	4b5e      	ldr	r3, [pc, #376]	@ (8002008 <Animation_Loop+0x4cc>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
                          lerp_startX = pupilX;
 8001e92:	4b5e      	ldr	r3, [pc, #376]	@ (800200c <Animation_Loop+0x4d0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a5e      	ldr	r2, [pc, #376]	@ (8002010 <Animation_Loop+0x4d4>)
 8001e98:	6013      	str	r3, [r2, #0]
                          lerp_startY = pupilY;
 8001e9a:	4b5e      	ldr	r3, [pc, #376]	@ (8002014 <Animation_Loop+0x4d8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a5e      	ldr	r2, [pc, #376]	@ (8002018 <Animation_Loop+0x4dc>)
 8001ea0:	6013      	str	r3, [r2, #0]
                          lerp_targetX = centerX;
 8001ea2:	4b5e      	ldr	r3, [pc, #376]	@ (800201c <Animation_Loop+0x4e0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a5e      	ldr	r2, [pc, #376]	@ (8002020 <Animation_Loop+0x4e4>)
 8001ea8:	6013      	str	r3, [r2, #0]
                          lerp_targetY = centerY;
 8001eaa:	4b5e      	ldr	r3, [pc, #376]	@ (8002024 <Animation_Loop+0x4e8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a5e      	ldr	r2, [pc, #376]	@ (8002028 <Animation_Loop+0x4ec>)
 8001eb0:	6013      	str	r3, [r2, #0]
                          lerp_t = 0.0f;
 8001eb2:	4b5e      	ldr	r3, [pc, #376]	@ (800202c <Animation_Loop+0x4f0>)
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
                          state_index++;
 8001eba:	4b5d      	ldr	r3, [pc, #372]	@ (8002030 <Animation_Loop+0x4f4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	4a5b      	ldr	r2, [pc, #364]	@ (8002030 <Animation_Loop+0x4f4>)
 8001ec2:	6013      	str	r3, [r2, #0]
                          if (state_index >= state_sequence_len) state_index = 0;
 8001ec4:	4b5a      	ldr	r3, [pc, #360]	@ (8002030 <Animation_Loop+0x4f4>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b5a      	ldr	r3, [pc, #360]	@ (8002034 <Animation_Loop+0x4f8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	db02      	blt.n	8001ed6 <Animation_Loop+0x39a>
 8001ed0:	4b57      	ldr	r3, [pc, #348]	@ (8002030 <Animation_Loop+0x4f4>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
                          state = state_sequence[state_index];
 8001ed6:	4b56      	ldr	r3, [pc, #344]	@ (8002030 <Animation_Loop+0x4f4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a57      	ldr	r2, [pc, #348]	@ (8002038 <Animation_Loop+0x4fc>)
 8001edc:	5cd2      	ldrb	r2, [r2, r3]
 8001ede:	4b57      	ldr	r3, [pc, #348]	@ (800203c <Animation_Loop+0x500>)
 8001ee0:	701a      	strb	r2, [r3, #0]
                      break;
 8001ee2:	f000 bcb2 	b.w	800284a <Animation_Loop+0xd0e>
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8001ee6:	4b49      	ldr	r3, [pc, #292]	@ (800200c <Animation_Loop+0x4d0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a49      	ldr	r2, [pc, #292]	@ (8002010 <Animation_Loop+0x4d4>)
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b49      	ldr	r3, [pc, #292]	@ (8002014 <Animation_Loop+0x4d8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a49      	ldr	r2, [pc, #292]	@ (8002018 <Animation_Loop+0x4dc>)
 8001ef4:	6013      	str	r3, [r2, #0]
                  lerp_targetX = centerX;
 8001ef6:	4b49      	ldr	r3, [pc, #292]	@ (800201c <Animation_Loop+0x4e0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a49      	ldr	r2, [pc, #292]	@ (8002020 <Animation_Loop+0x4e4>)
 8001efc:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY - (ry_in - pupilRadius);
 8001efe:	4b49      	ldr	r3, [pc, #292]	@ (8002024 <Animation_Loop+0x4e8>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	4b40      	ldr	r3, [pc, #256]	@ (8002004 <Animation_Loop+0x4c8>)
 8001f04:	6819      	ldr	r1, [r3, #0]
 8001f06:	4b3e      	ldr	r3, [pc, #248]	@ (8002000 <Animation_Loop+0x4c4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	1acb      	subs	r3, r1, r3
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	4a46      	ldr	r2, [pc, #280]	@ (8002028 <Animation_Loop+0x4ec>)
 8001f10:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 8001f12:	4b46      	ldr	r3, [pc, #280]	@ (800202c <Animation_Loop+0x4f0>)
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
                  state_index++;
 8001f1a:	4b45      	ldr	r3, [pc, #276]	@ (8002030 <Animation_Loop+0x4f4>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	4a43      	ldr	r2, [pc, #268]	@ (8002030 <Animation_Loop+0x4f4>)
 8001f22:	6013      	str	r3, [r2, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8001f24:	4b42      	ldr	r3, [pc, #264]	@ (8002030 <Animation_Loop+0x4f4>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b42      	ldr	r3, [pc, #264]	@ (8002034 <Animation_Loop+0x4f8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	db02      	blt.n	8001f36 <Animation_Loop+0x3fa>
 8001f30:	4b3f      	ldr	r3, [pc, #252]	@ (8002030 <Animation_Loop+0x4f4>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
                  state = state_sequence[state_index];
 8001f36:	4b3e      	ldr	r3, [pc, #248]	@ (8002030 <Animation_Loop+0x4f4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a3f      	ldr	r2, [pc, #252]	@ (8002038 <Animation_Loop+0x4fc>)
 8001f3c:	5cd2      	ldrb	r2, [r2, r3]
 8001f3e:	4b3f      	ldr	r3, [pc, #252]	@ (800203c <Animation_Loop+0x500>)
 8001f40:	701a      	strb	r2, [r3, #0]
                  break;
 8001f42:	f000 bc82 	b.w	800284a <Animation_Loop+0xd0e>
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8001f46:	4b31      	ldr	r3, [pc, #196]	@ (800200c <Animation_Loop+0x4d0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a31      	ldr	r2, [pc, #196]	@ (8002010 <Animation_Loop+0x4d4>)
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b31      	ldr	r3, [pc, #196]	@ (8002014 <Animation_Loop+0x4d8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a31      	ldr	r2, [pc, #196]	@ (8002018 <Animation_Loop+0x4dc>)
 8001f54:	6013      	str	r3, [r2, #0]
                  lerp_targetX = centerX;
 8001f56:	4b31      	ldr	r3, [pc, #196]	@ (800201c <Animation_Loop+0x4e0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a31      	ldr	r2, [pc, #196]	@ (8002020 <Animation_Loop+0x4e4>)
 8001f5c:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY;
 8001f5e:	4b31      	ldr	r3, [pc, #196]	@ (8002024 <Animation_Loop+0x4e8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a31      	ldr	r2, [pc, #196]	@ (8002028 <Animation_Loop+0x4ec>)
 8001f64:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 8001f66:	4b31      	ldr	r3, [pc, #196]	@ (800202c <Animation_Loop+0x4f0>)
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
                  state_index++;
 8001f6e:	4b30      	ldr	r3, [pc, #192]	@ (8002030 <Animation_Loop+0x4f4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	3301      	adds	r3, #1
 8001f74:	4a2e      	ldr	r2, [pc, #184]	@ (8002030 <Animation_Loop+0x4f4>)
 8001f76:	6013      	str	r3, [r2, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8001f78:	4b2d      	ldr	r3, [pc, #180]	@ (8002030 <Animation_Loop+0x4f4>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002034 <Animation_Loop+0x4f8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	db02      	blt.n	8001f8a <Animation_Loop+0x44e>
 8001f84:	4b2a      	ldr	r3, [pc, #168]	@ (8002030 <Animation_Loop+0x4f4>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
                  state = state_sequence[state_index];
 8001f8a:	4b29      	ldr	r3, [pc, #164]	@ (8002030 <Animation_Loop+0x4f4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a2a      	ldr	r2, [pc, #168]	@ (8002038 <Animation_Loop+0x4fc>)
 8001f90:	5cd2      	ldrb	r2, [r2, r3]
 8001f92:	4b2a      	ldr	r3, [pc, #168]	@ (800203c <Animation_Loop+0x500>)
 8001f94:	701a      	strb	r2, [r3, #0]
                  break;
 8001f96:	f000 bc58 	b.w	800284a <Animation_Loop+0xd0e>
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8001f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800200c <Animation_Loop+0x4d0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002010 <Animation_Loop+0x4d4>)
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8002014 <Animation_Loop+0x4d8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8002018 <Animation_Loop+0x4dc>)
 8001fa8:	6013      	str	r3, [r2, #0]
                  lerp_targetX = centerX - (rx_in - pupilRadius);
 8001faa:	4b1c      	ldr	r3, [pc, #112]	@ (800201c <Animation_Loop+0x4e0>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <Animation_Loop+0x4c0>)
 8001fb0:	6819      	ldr	r1, [r3, #0]
 8001fb2:	4b13      	ldr	r3, [pc, #76]	@ (8002000 <Animation_Loop+0x4c4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	1acb      	subs	r3, r1, r3
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	4a19      	ldr	r2, [pc, #100]	@ (8002020 <Animation_Loop+0x4e4>)
 8001fbc:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY;
 8001fbe:	4b19      	ldr	r3, [pc, #100]	@ (8002024 <Animation_Loop+0x4e8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a19      	ldr	r2, [pc, #100]	@ (8002028 <Animation_Loop+0x4ec>)
 8001fc4:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 8001fc6:	4b19      	ldr	r3, [pc, #100]	@ (800202c <Animation_Loop+0x4f0>)
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
                  state_index++;
 8001fce:	4b18      	ldr	r3, [pc, #96]	@ (8002030 <Animation_Loop+0x4f4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	4a16      	ldr	r2, [pc, #88]	@ (8002030 <Animation_Loop+0x4f4>)
 8001fd6:	6013      	str	r3, [r2, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8001fd8:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <Animation_Loop+0x4f4>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b15      	ldr	r3, [pc, #84]	@ (8002034 <Animation_Loop+0x4f8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	db02      	blt.n	8001fea <Animation_Loop+0x4ae>
 8001fe4:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <Animation_Loop+0x4f4>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
                  state = state_sequence[state_index];
 8001fea:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <Animation_Loop+0x4f4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a12      	ldr	r2, [pc, #72]	@ (8002038 <Animation_Loop+0x4fc>)
 8001ff0:	5cd2      	ldrb	r2, [r2, r3]
 8001ff2:	4b12      	ldr	r3, [pc, #72]	@ (800203c <Animation_Loop+0x500>)
 8001ff4:	701a      	strb	r2, [r3, #0]
                  break;
 8001ff6:	f000 bc28 	b.w	800284a <Animation_Loop+0xd0e>
 8001ffa:	bf00      	nop
 8001ffc:	20000224 	.word	0x20000224
 8002000:	2000022c 	.word	0x2000022c
 8002004:	20000228 	.word	0x20000228
 8002008:	20000274 	.word	0x20000274
 800200c:	20000234 	.word	0x20000234
 8002010:	2000025c 	.word	0x2000025c
 8002014:	20000238 	.word	0x20000238
 8002018:	20000260 	.word	0x20000260
 800201c:	2000021c 	.word	0x2000021c
 8002020:	20000264 	.word	0x20000264
 8002024:	20000220 	.word	0x20000220
 8002028:	20000268 	.word	0x20000268
 800202c:	2000026c 	.word	0x2000026c
 8002030:	2000027c 	.word	0x2000027c
 8002034:	20000278 	.word	0x20000278
 8002038:	20000008 	.word	0x20000008
 800203c:	2000023c 	.word	0x2000023c
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8002040:	4b6c      	ldr	r3, [pc, #432]	@ (80021f4 <Animation_Loop+0x6b8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a6c      	ldr	r2, [pc, #432]	@ (80021f8 <Animation_Loop+0x6bc>)
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	4b6c      	ldr	r3, [pc, #432]	@ (80021fc <Animation_Loop+0x6c0>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a6c      	ldr	r2, [pc, #432]	@ (8002200 <Animation_Loop+0x6c4>)
 800204e:	6013      	str	r3, [r2, #0]
                  lerp_targetX = centerX;
 8002050:	4b6c      	ldr	r3, [pc, #432]	@ (8002204 <Animation_Loop+0x6c8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a6c      	ldr	r2, [pc, #432]	@ (8002208 <Animation_Loop+0x6cc>)
 8002056:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY;
 8002058:	4b6c      	ldr	r3, [pc, #432]	@ (800220c <Animation_Loop+0x6d0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a6c      	ldr	r2, [pc, #432]	@ (8002210 <Animation_Loop+0x6d4>)
 800205e:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 8002060:	4b6c      	ldr	r3, [pc, #432]	@ (8002214 <Animation_Loop+0x6d8>)
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
                  state_index++;
 8002068:	4b6b      	ldr	r3, [pc, #428]	@ (8002218 <Animation_Loop+0x6dc>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	3301      	adds	r3, #1
 800206e:	4a6a      	ldr	r2, [pc, #424]	@ (8002218 <Animation_Loop+0x6dc>)
 8002070:	6013      	str	r3, [r2, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8002072:	4b69      	ldr	r3, [pc, #420]	@ (8002218 <Animation_Loop+0x6dc>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	4b69      	ldr	r3, [pc, #420]	@ (800221c <Animation_Loop+0x6e0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	db02      	blt.n	8002084 <Animation_Loop+0x548>
 800207e:	4b66      	ldr	r3, [pc, #408]	@ (8002218 <Animation_Loop+0x6dc>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
                  state = state_sequence[state_index];
 8002084:	4b64      	ldr	r3, [pc, #400]	@ (8002218 <Animation_Loop+0x6dc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a65      	ldr	r2, [pc, #404]	@ (8002220 <Animation_Loop+0x6e4>)
 800208a:	5cd2      	ldrb	r2, [r2, r3]
 800208c:	4b65      	ldr	r3, [pc, #404]	@ (8002224 <Animation_Loop+0x6e8>)
 800208e:	701a      	strb	r2, [r3, #0]
                  break;
 8002090:	e3db      	b.n	800284a <Animation_Loop+0xd0e>
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8002092:	4b58      	ldr	r3, [pc, #352]	@ (80021f4 <Animation_Loop+0x6b8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a58      	ldr	r2, [pc, #352]	@ (80021f8 <Animation_Loop+0x6bc>)
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	4b58      	ldr	r3, [pc, #352]	@ (80021fc <Animation_Loop+0x6c0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a58      	ldr	r2, [pc, #352]	@ (8002200 <Animation_Loop+0x6c4>)
 80020a0:	6013      	str	r3, [r2, #0]
                  lerp_targetX = centerX;
 80020a2:	4b58      	ldr	r3, [pc, #352]	@ (8002204 <Animation_Loop+0x6c8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a58      	ldr	r2, [pc, #352]	@ (8002208 <Animation_Loop+0x6cc>)
 80020a8:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY + (ry_in - pupilRadius);
 80020aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002228 <Animation_Loop+0x6ec>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4b5f      	ldr	r3, [pc, #380]	@ (800222c <Animation_Loop+0x6f0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	1ad2      	subs	r2, r2, r3
 80020b4:	4b55      	ldr	r3, [pc, #340]	@ (800220c <Animation_Loop+0x6d0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4413      	add	r3, r2
 80020ba:	4a55      	ldr	r2, [pc, #340]	@ (8002210 <Animation_Loop+0x6d4>)
 80020bc:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 80020be:	4b55      	ldr	r3, [pc, #340]	@ (8002214 <Animation_Loop+0x6d8>)
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
                  state_index++;
 80020c6:	4b54      	ldr	r3, [pc, #336]	@ (8002218 <Animation_Loop+0x6dc>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	3301      	adds	r3, #1
 80020cc:	4a52      	ldr	r2, [pc, #328]	@ (8002218 <Animation_Loop+0x6dc>)
 80020ce:	6013      	str	r3, [r2, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 80020d0:	4b51      	ldr	r3, [pc, #324]	@ (8002218 <Animation_Loop+0x6dc>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b51      	ldr	r3, [pc, #324]	@ (800221c <Animation_Loop+0x6e0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	db02      	blt.n	80020e2 <Animation_Loop+0x5a6>
 80020dc:	4b4e      	ldr	r3, [pc, #312]	@ (8002218 <Animation_Loop+0x6dc>)
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
                  state = state_sequence[state_index];
 80020e2:	4b4d      	ldr	r3, [pc, #308]	@ (8002218 <Animation_Loop+0x6dc>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a4e      	ldr	r2, [pc, #312]	@ (8002220 <Animation_Loop+0x6e4>)
 80020e8:	5cd2      	ldrb	r2, [r2, r3]
 80020ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002224 <Animation_Loop+0x6e8>)
 80020ec:	701a      	strb	r2, [r3, #0]
                  break;
 80020ee:	e3ac      	b.n	800284a <Animation_Loop+0xd0e>
                  lerp_startX = pupilX; lerp_startY = pupilY;
 80020f0:	4b40      	ldr	r3, [pc, #256]	@ (80021f4 <Animation_Loop+0x6b8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a40      	ldr	r2, [pc, #256]	@ (80021f8 <Animation_Loop+0x6bc>)
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4b40      	ldr	r3, [pc, #256]	@ (80021fc <Animation_Loop+0x6c0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a40      	ldr	r2, [pc, #256]	@ (8002200 <Animation_Loop+0x6c4>)
 80020fe:	6013      	str	r3, [r2, #0]
                  lerp_targetX = centerX;
 8002100:	4b40      	ldr	r3, [pc, #256]	@ (8002204 <Animation_Loop+0x6c8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a40      	ldr	r2, [pc, #256]	@ (8002208 <Animation_Loop+0x6cc>)
 8002106:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY;
 8002108:	4b40      	ldr	r3, [pc, #256]	@ (800220c <Animation_Loop+0x6d0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a40      	ldr	r2, [pc, #256]	@ (8002210 <Animation_Loop+0x6d4>)
 800210e:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 8002110:	4b40      	ldr	r3, [pc, #256]	@ (8002214 <Animation_Loop+0x6d8>)
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
                  state_index++;
 8002118:	4b3f      	ldr	r3, [pc, #252]	@ (8002218 <Animation_Loop+0x6dc>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	3301      	adds	r3, #1
 800211e:	4a3e      	ldr	r2, [pc, #248]	@ (8002218 <Animation_Loop+0x6dc>)
 8002120:	6013      	str	r3, [r2, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8002122:	4b3d      	ldr	r3, [pc, #244]	@ (8002218 <Animation_Loop+0x6dc>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	4b3d      	ldr	r3, [pc, #244]	@ (800221c <Animation_Loop+0x6e0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	db02      	blt.n	8002134 <Animation_Loop+0x5f8>
 800212e:	4b3a      	ldr	r3, [pc, #232]	@ (8002218 <Animation_Loop+0x6dc>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
                  state = state_sequence[state_index];
 8002134:	4b38      	ldr	r3, [pc, #224]	@ (8002218 <Animation_Loop+0x6dc>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a39      	ldr	r2, [pc, #228]	@ (8002220 <Animation_Loop+0x6e4>)
 800213a:	5cd2      	ldrb	r2, [r2, r3]
 800213c:	4b39      	ldr	r3, [pc, #228]	@ (8002224 <Animation_Loop+0x6e8>)
 800213e:	701a      	strb	r2, [r3, #0]
                  break;
 8002140:	e383      	b.n	800284a <Animation_Loop+0xd0e>
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8002142:	4b2c      	ldr	r3, [pc, #176]	@ (80021f4 <Animation_Loop+0x6b8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a2c      	ldr	r2, [pc, #176]	@ (80021f8 <Animation_Loop+0x6bc>)
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	4b2c      	ldr	r3, [pc, #176]	@ (80021fc <Animation_Loop+0x6c0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a2c      	ldr	r2, [pc, #176]	@ (8002200 <Animation_Loop+0x6c4>)
 8002150:	6013      	str	r3, [r2, #0]
                  lerp_targetX = centerX + (rx_in - pupilRadius);
 8002152:	4b37      	ldr	r3, [pc, #220]	@ (8002230 <Animation_Loop+0x6f4>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	4b35      	ldr	r3, [pc, #212]	@ (800222c <Animation_Loop+0x6f0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	1ad2      	subs	r2, r2, r3
 800215c:	4b29      	ldr	r3, [pc, #164]	@ (8002204 <Animation_Loop+0x6c8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4413      	add	r3, r2
 8002162:	4a29      	ldr	r2, [pc, #164]	@ (8002208 <Animation_Loop+0x6cc>)
 8002164:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY;
 8002166:	4b29      	ldr	r3, [pc, #164]	@ (800220c <Animation_Loop+0x6d0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a29      	ldr	r2, [pc, #164]	@ (8002210 <Animation_Loop+0x6d4>)
 800216c:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 800216e:	4b29      	ldr	r3, [pc, #164]	@ (8002214 <Animation_Loop+0x6d8>)
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
                  state_index++;
 8002176:	4b28      	ldr	r3, [pc, #160]	@ (8002218 <Animation_Loop+0x6dc>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	4a26      	ldr	r2, [pc, #152]	@ (8002218 <Animation_Loop+0x6dc>)
 800217e:	6013      	str	r3, [r2, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8002180:	4b25      	ldr	r3, [pc, #148]	@ (8002218 <Animation_Loop+0x6dc>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b25      	ldr	r3, [pc, #148]	@ (800221c <Animation_Loop+0x6e0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	db02      	blt.n	8002192 <Animation_Loop+0x656>
 800218c:	4b22      	ldr	r3, [pc, #136]	@ (8002218 <Animation_Loop+0x6dc>)
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
                  state = state_sequence[state_index];
 8002192:	4b21      	ldr	r3, [pc, #132]	@ (8002218 <Animation_Loop+0x6dc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a22      	ldr	r2, [pc, #136]	@ (8002220 <Animation_Loop+0x6e4>)
 8002198:	5cd2      	ldrb	r2, [r2, r3]
 800219a:	4b22      	ldr	r3, [pc, #136]	@ (8002224 <Animation_Loop+0x6e8>)
 800219c:	701a      	strb	r2, [r3, #0]
                  break;
 800219e:	e354      	b.n	800284a <Animation_Loop+0xd0e>
                  lerp_startX = pupilX; lerp_startY = pupilY;
 80021a0:	4b14      	ldr	r3, [pc, #80]	@ (80021f4 <Animation_Loop+0x6b8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a14      	ldr	r2, [pc, #80]	@ (80021f8 <Animation_Loop+0x6bc>)
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	4b14      	ldr	r3, [pc, #80]	@ (80021fc <Animation_Loop+0x6c0>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a14      	ldr	r2, [pc, #80]	@ (8002200 <Animation_Loop+0x6c4>)
 80021ae:	6013      	str	r3, [r2, #0]
                  lerp_targetX = centerX;
 80021b0:	4b14      	ldr	r3, [pc, #80]	@ (8002204 <Animation_Loop+0x6c8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a14      	ldr	r2, [pc, #80]	@ (8002208 <Animation_Loop+0x6cc>)
 80021b6:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY;
 80021b8:	4b14      	ldr	r3, [pc, #80]	@ (800220c <Animation_Loop+0x6d0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a14      	ldr	r2, [pc, #80]	@ (8002210 <Animation_Loop+0x6d4>)
 80021be:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 80021c0:	4b14      	ldr	r3, [pc, #80]	@ (8002214 <Animation_Loop+0x6d8>)
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
                  state_index++;
 80021c8:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <Animation_Loop+0x6dc>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	3301      	adds	r3, #1
 80021ce:	4a12      	ldr	r2, [pc, #72]	@ (8002218 <Animation_Loop+0x6dc>)
 80021d0:	6013      	str	r3, [r2, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 80021d2:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <Animation_Loop+0x6dc>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4b11      	ldr	r3, [pc, #68]	@ (800221c <Animation_Loop+0x6e0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	db02      	blt.n	80021e4 <Animation_Loop+0x6a8>
 80021de:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <Animation_Loop+0x6dc>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
                  state = state_sequence[state_index];
 80021e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <Animation_Loop+0x6dc>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002220 <Animation_Loop+0x6e4>)
 80021ea:	5cd2      	ldrb	r2, [r2, r3]
 80021ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002224 <Animation_Loop+0x6e8>)
 80021ee:	701a      	strb	r2, [r3, #0]
                  break;
 80021f0:	e32b      	b.n	800284a <Animation_Loop+0xd0e>
 80021f2:	bf00      	nop
 80021f4:	20000234 	.word	0x20000234
 80021f8:	2000025c 	.word	0x2000025c
 80021fc:	20000238 	.word	0x20000238
 8002200:	20000260 	.word	0x20000260
 8002204:	2000021c 	.word	0x2000021c
 8002208:	20000264 	.word	0x20000264
 800220c:	20000220 	.word	0x20000220
 8002210:	20000268 	.word	0x20000268
 8002214:	2000026c 	.word	0x2000026c
 8002218:	2000027c 	.word	0x2000027c
 800221c:	20000278 	.word	0x20000278
 8002220:	20000008 	.word	0x20000008
 8002224:	2000023c 	.word	0x2000023c
 8002228:	20000228 	.word	0x20000228
 800222c:	2000022c 	.word	0x2000022c
 8002230:	20000224 	.word	0x20000224
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8002234:	4b87      	ldr	r3, [pc, #540]	@ (8002454 <Animation_Loop+0x918>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a87      	ldr	r2, [pc, #540]	@ (8002458 <Animation_Loop+0x91c>)
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	4b87      	ldr	r3, [pc, #540]	@ (800245c <Animation_Loop+0x920>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a87      	ldr	r2, [pc, #540]	@ (8002460 <Animation_Loop+0x924>)
 8002242:	6013      	str	r3, [r2, #0]
                  lerp_targetX = centerX - (rx_in - pupilRadius) * 0.7f;
 8002244:	4b87      	ldr	r3, [pc, #540]	@ (8002464 <Animation_Loop+0x928>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe f839 	bl	80002c0 <__aeabi_i2f>
 800224e:	4604      	mov	r4, r0
 8002250:	4b85      	ldr	r3, [pc, #532]	@ (8002468 <Animation_Loop+0x92c>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b85      	ldr	r3, [pc, #532]	@ (800246c <Animation_Loop+0x930>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe f830 	bl	80002c0 <__aeabi_i2f>
 8002260:	4603      	mov	r3, r0
 8002262:	4983      	ldr	r1, [pc, #524]	@ (8002470 <Animation_Loop+0x934>)
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe f87f 	bl	8000368 <__aeabi_fmul>
 800226a:	4603      	mov	r3, r0
 800226c:	4619      	mov	r1, r3
 800226e:	4620      	mov	r0, r4
 8002270:	f7fd ff70 	bl	8000154 <__aeabi_fsub>
 8002274:	4603      	mov	r3, r0
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fa52 	bl	8000720 <__aeabi_f2iz>
 800227c:	4603      	mov	r3, r0
 800227e:	4a7d      	ldr	r2, [pc, #500]	@ (8002474 <Animation_Loop+0x938>)
 8002280:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY - (ry_in - pupilRadius) * 0.7f;
 8002282:	4b7d      	ldr	r3, [pc, #500]	@ (8002478 <Animation_Loop+0x93c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe f81a 	bl	80002c0 <__aeabi_i2f>
 800228c:	4604      	mov	r4, r0
 800228e:	4b7b      	ldr	r3, [pc, #492]	@ (800247c <Animation_Loop+0x940>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4b76      	ldr	r3, [pc, #472]	@ (800246c <Animation_Loop+0x930>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe f811 	bl	80002c0 <__aeabi_i2f>
 800229e:	4603      	mov	r3, r0
 80022a0:	4973      	ldr	r1, [pc, #460]	@ (8002470 <Animation_Loop+0x934>)
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe f860 	bl	8000368 <__aeabi_fmul>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4619      	mov	r1, r3
 80022ac:	4620      	mov	r0, r4
 80022ae:	f7fd ff51 	bl	8000154 <__aeabi_fsub>
 80022b2:	4603      	mov	r3, r0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe fa33 	bl	8000720 <__aeabi_f2iz>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4a70      	ldr	r2, [pc, #448]	@ (8002480 <Animation_Loop+0x944>)
 80022be:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 80022c0:	4b70      	ldr	r3, [pc, #448]	@ (8002484 <Animation_Loop+0x948>)
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
                  state_index++;
 80022c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002488 <Animation_Loop+0x94c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3301      	adds	r3, #1
 80022ce:	4a6e      	ldr	r2, [pc, #440]	@ (8002488 <Animation_Loop+0x94c>)
 80022d0:	6013      	str	r3, [r2, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 80022d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002488 <Animation_Loop+0x94c>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	4b6d      	ldr	r3, [pc, #436]	@ (800248c <Animation_Loop+0x950>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	db02      	blt.n	80022e4 <Animation_Loop+0x7a8>
 80022de:	4b6a      	ldr	r3, [pc, #424]	@ (8002488 <Animation_Loop+0x94c>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
                  state = state_sequence[state_index];
 80022e4:	4b68      	ldr	r3, [pc, #416]	@ (8002488 <Animation_Loop+0x94c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a69      	ldr	r2, [pc, #420]	@ (8002490 <Animation_Loop+0x954>)
 80022ea:	5cd2      	ldrb	r2, [r2, r3]
 80022ec:	4b69      	ldr	r3, [pc, #420]	@ (8002494 <Animation_Loop+0x958>)
 80022ee:	701a      	strb	r2, [r3, #0]
                  break;
 80022f0:	e2ab      	b.n	800284a <Animation_Loop+0xd0e>
                  lerp_startX = pupilX; lerp_startY = pupilY;
 80022f2:	4b58      	ldr	r3, [pc, #352]	@ (8002454 <Animation_Loop+0x918>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a58      	ldr	r2, [pc, #352]	@ (8002458 <Animation_Loop+0x91c>)
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	4b58      	ldr	r3, [pc, #352]	@ (800245c <Animation_Loop+0x920>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a58      	ldr	r2, [pc, #352]	@ (8002460 <Animation_Loop+0x924>)
 8002300:	6013      	str	r3, [r2, #0]
                  lerp_targetX = centerX;
 8002302:	4b58      	ldr	r3, [pc, #352]	@ (8002464 <Animation_Loop+0x928>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a5b      	ldr	r2, [pc, #364]	@ (8002474 <Animation_Loop+0x938>)
 8002308:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY;
 800230a:	4b5b      	ldr	r3, [pc, #364]	@ (8002478 <Animation_Loop+0x93c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a5c      	ldr	r2, [pc, #368]	@ (8002480 <Animation_Loop+0x944>)
 8002310:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 8002312:	4b5c      	ldr	r3, [pc, #368]	@ (8002484 <Animation_Loop+0x948>)
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
                  state_index++;
 800231a:	4b5b      	ldr	r3, [pc, #364]	@ (8002488 <Animation_Loop+0x94c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	3301      	adds	r3, #1
 8002320:	4a59      	ldr	r2, [pc, #356]	@ (8002488 <Animation_Loop+0x94c>)
 8002322:	6013      	str	r3, [r2, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8002324:	4b58      	ldr	r3, [pc, #352]	@ (8002488 <Animation_Loop+0x94c>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4b58      	ldr	r3, [pc, #352]	@ (800248c <Animation_Loop+0x950>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	db02      	blt.n	8002336 <Animation_Loop+0x7fa>
 8002330:	4b55      	ldr	r3, [pc, #340]	@ (8002488 <Animation_Loop+0x94c>)
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
                  state = state_sequence[state_index];
 8002336:	4b54      	ldr	r3, [pc, #336]	@ (8002488 <Animation_Loop+0x94c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a55      	ldr	r2, [pc, #340]	@ (8002490 <Animation_Loop+0x954>)
 800233c:	5cd2      	ldrb	r2, [r2, r3]
 800233e:	4b55      	ldr	r3, [pc, #340]	@ (8002494 <Animation_Loop+0x958>)
 8002340:	701a      	strb	r2, [r3, #0]
                  break;
 8002342:	e282      	b.n	800284a <Animation_Loop+0xd0e>
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8002344:	4b43      	ldr	r3, [pc, #268]	@ (8002454 <Animation_Loop+0x918>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a43      	ldr	r2, [pc, #268]	@ (8002458 <Animation_Loop+0x91c>)
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	4b43      	ldr	r3, [pc, #268]	@ (800245c <Animation_Loop+0x920>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a43      	ldr	r2, [pc, #268]	@ (8002460 <Animation_Loop+0x924>)
 8002352:	6013      	str	r3, [r2, #0]
                  lerp_targetX = centerX + (rx_in - pupilRadius) * 0.7f;
 8002354:	4b43      	ldr	r3, [pc, #268]	@ (8002464 <Animation_Loop+0x928>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7fd ffb1 	bl	80002c0 <__aeabi_i2f>
 800235e:	4604      	mov	r4, r0
 8002360:	4b41      	ldr	r3, [pc, #260]	@ (8002468 <Animation_Loop+0x92c>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b41      	ldr	r3, [pc, #260]	@ (800246c <Animation_Loop+0x930>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	4618      	mov	r0, r3
 800236c:	f7fd ffa8 	bl	80002c0 <__aeabi_i2f>
 8002370:	4603      	mov	r3, r0
 8002372:	493f      	ldr	r1, [pc, #252]	@ (8002470 <Animation_Loop+0x934>)
 8002374:	4618      	mov	r0, r3
 8002376:	f7fd fff7 	bl	8000368 <__aeabi_fmul>
 800237a:	4603      	mov	r3, r0
 800237c:	4619      	mov	r1, r3
 800237e:	4620      	mov	r0, r4
 8002380:	f7fd feea 	bl	8000158 <__addsf3>
 8002384:	4603      	mov	r3, r0
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe f9ca 	bl	8000720 <__aeabi_f2iz>
 800238c:	4603      	mov	r3, r0
 800238e:	4a39      	ldr	r2, [pc, #228]	@ (8002474 <Animation_Loop+0x938>)
 8002390:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY - (ry_in - pupilRadius) * 0.7f;
 8002392:	4b39      	ldr	r3, [pc, #228]	@ (8002478 <Animation_Loop+0x93c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fd ff92 	bl	80002c0 <__aeabi_i2f>
 800239c:	4604      	mov	r4, r0
 800239e:	4b37      	ldr	r3, [pc, #220]	@ (800247c <Animation_Loop+0x940>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	4b32      	ldr	r3, [pc, #200]	@ (800246c <Animation_Loop+0x930>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fd ff89 	bl	80002c0 <__aeabi_i2f>
 80023ae:	4603      	mov	r3, r0
 80023b0:	492f      	ldr	r1, [pc, #188]	@ (8002470 <Animation_Loop+0x934>)
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fd ffd8 	bl	8000368 <__aeabi_fmul>
 80023b8:	4603      	mov	r3, r0
 80023ba:	4619      	mov	r1, r3
 80023bc:	4620      	mov	r0, r4
 80023be:	f7fd fec9 	bl	8000154 <__aeabi_fsub>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe f9ab 	bl	8000720 <__aeabi_f2iz>
 80023ca:	4603      	mov	r3, r0
 80023cc:	4a2c      	ldr	r2, [pc, #176]	@ (8002480 <Animation_Loop+0x944>)
 80023ce:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 80023d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002484 <Animation_Loop+0x948>)
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
                  state_index++;
 80023d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002488 <Animation_Loop+0x94c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	3301      	adds	r3, #1
 80023de:	4a2a      	ldr	r2, [pc, #168]	@ (8002488 <Animation_Loop+0x94c>)
 80023e0:	6013      	str	r3, [r2, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 80023e2:	4b29      	ldr	r3, [pc, #164]	@ (8002488 <Animation_Loop+0x94c>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	4b29      	ldr	r3, [pc, #164]	@ (800248c <Animation_Loop+0x950>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	db02      	blt.n	80023f4 <Animation_Loop+0x8b8>
 80023ee:	4b26      	ldr	r3, [pc, #152]	@ (8002488 <Animation_Loop+0x94c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
                  state = state_sequence[state_index];
 80023f4:	4b24      	ldr	r3, [pc, #144]	@ (8002488 <Animation_Loop+0x94c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a25      	ldr	r2, [pc, #148]	@ (8002490 <Animation_Loop+0x954>)
 80023fa:	5cd2      	ldrb	r2, [r2, r3]
 80023fc:	4b25      	ldr	r3, [pc, #148]	@ (8002494 <Animation_Loop+0x958>)
 80023fe:	701a      	strb	r2, [r3, #0]
                  break;
 8002400:	e223      	b.n	800284a <Animation_Loop+0xd0e>
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8002402:	4b14      	ldr	r3, [pc, #80]	@ (8002454 <Animation_Loop+0x918>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a14      	ldr	r2, [pc, #80]	@ (8002458 <Animation_Loop+0x91c>)
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	4b14      	ldr	r3, [pc, #80]	@ (800245c <Animation_Loop+0x920>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a14      	ldr	r2, [pc, #80]	@ (8002460 <Animation_Loop+0x924>)
 8002410:	6013      	str	r3, [r2, #0]
                  lerp_targetX = centerX;
 8002412:	4b14      	ldr	r3, [pc, #80]	@ (8002464 <Animation_Loop+0x928>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a17      	ldr	r2, [pc, #92]	@ (8002474 <Animation_Loop+0x938>)
 8002418:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY;
 800241a:	4b17      	ldr	r3, [pc, #92]	@ (8002478 <Animation_Loop+0x93c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a18      	ldr	r2, [pc, #96]	@ (8002480 <Animation_Loop+0x944>)
 8002420:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 8002422:	4b18      	ldr	r3, [pc, #96]	@ (8002484 <Animation_Loop+0x948>)
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
                  state_index++;
 800242a:	4b17      	ldr	r3, [pc, #92]	@ (8002488 <Animation_Loop+0x94c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	3301      	adds	r3, #1
 8002430:	4a15      	ldr	r2, [pc, #84]	@ (8002488 <Animation_Loop+0x94c>)
 8002432:	6013      	str	r3, [r2, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8002434:	4b14      	ldr	r3, [pc, #80]	@ (8002488 <Animation_Loop+0x94c>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4b14      	ldr	r3, [pc, #80]	@ (800248c <Animation_Loop+0x950>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	db02      	blt.n	8002446 <Animation_Loop+0x90a>
 8002440:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <Animation_Loop+0x94c>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
                  state = state_sequence[state_index];
 8002446:	4b10      	ldr	r3, [pc, #64]	@ (8002488 <Animation_Loop+0x94c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a11      	ldr	r2, [pc, #68]	@ (8002490 <Animation_Loop+0x954>)
 800244c:	5cd2      	ldrb	r2, [r2, r3]
 800244e:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <Animation_Loop+0x958>)
 8002450:	701a      	strb	r2, [r3, #0]
                  break;
 8002452:	e1fa      	b.n	800284a <Animation_Loop+0xd0e>
 8002454:	20000234 	.word	0x20000234
 8002458:	2000025c 	.word	0x2000025c
 800245c:	20000238 	.word	0x20000238
 8002460:	20000260 	.word	0x20000260
 8002464:	2000021c 	.word	0x2000021c
 8002468:	20000224 	.word	0x20000224
 800246c:	2000022c 	.word	0x2000022c
 8002470:	3f333333 	.word	0x3f333333
 8002474:	20000264 	.word	0x20000264
 8002478:	20000220 	.word	0x20000220
 800247c:	20000228 	.word	0x20000228
 8002480:	20000268 	.word	0x20000268
 8002484:	2000026c 	.word	0x2000026c
 8002488:	2000027c 	.word	0x2000027c
 800248c:	20000278 	.word	0x20000278
 8002490:	20000008 	.word	0x20000008
 8002494:	2000023c 	.word	0x2000023c
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8002498:	4b87      	ldr	r3, [pc, #540]	@ (80026b8 <Animation_Loop+0xb7c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a87      	ldr	r2, [pc, #540]	@ (80026bc <Animation_Loop+0xb80>)
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b87      	ldr	r3, [pc, #540]	@ (80026c0 <Animation_Loop+0xb84>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a87      	ldr	r2, [pc, #540]	@ (80026c4 <Animation_Loop+0xb88>)
 80024a6:	6013      	str	r3, [r2, #0]
                  lerp_targetX = centerX - (rx_in - pupilRadius) * 0.7f;
 80024a8:	4b87      	ldr	r3, [pc, #540]	@ (80026c8 <Animation_Loop+0xb8c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fd ff07 	bl	80002c0 <__aeabi_i2f>
 80024b2:	4604      	mov	r4, r0
 80024b4:	4b85      	ldr	r3, [pc, #532]	@ (80026cc <Animation_Loop+0xb90>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b85      	ldr	r3, [pc, #532]	@ (80026d0 <Animation_Loop+0xb94>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fd fefe 	bl	80002c0 <__aeabi_i2f>
 80024c4:	4603      	mov	r3, r0
 80024c6:	4983      	ldr	r1, [pc, #524]	@ (80026d4 <Animation_Loop+0xb98>)
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fd ff4d 	bl	8000368 <__aeabi_fmul>
 80024ce:	4603      	mov	r3, r0
 80024d0:	4619      	mov	r1, r3
 80024d2:	4620      	mov	r0, r4
 80024d4:	f7fd fe3e 	bl	8000154 <__aeabi_fsub>
 80024d8:	4603      	mov	r3, r0
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe f920 	bl	8000720 <__aeabi_f2iz>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4a7d      	ldr	r2, [pc, #500]	@ (80026d8 <Animation_Loop+0xb9c>)
 80024e4:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY + (ry_in - pupilRadius) * 0.7f;
 80024e6:	4b7d      	ldr	r3, [pc, #500]	@ (80026dc <Animation_Loop+0xba0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fd fee8 	bl	80002c0 <__aeabi_i2f>
 80024f0:	4604      	mov	r4, r0
 80024f2:	4b7b      	ldr	r3, [pc, #492]	@ (80026e0 <Animation_Loop+0xba4>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4b76      	ldr	r3, [pc, #472]	@ (80026d0 <Animation_Loop+0xb94>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fd fedf 	bl	80002c0 <__aeabi_i2f>
 8002502:	4603      	mov	r3, r0
 8002504:	4973      	ldr	r1, [pc, #460]	@ (80026d4 <Animation_Loop+0xb98>)
 8002506:	4618      	mov	r0, r3
 8002508:	f7fd ff2e 	bl	8000368 <__aeabi_fmul>
 800250c:	4603      	mov	r3, r0
 800250e:	4619      	mov	r1, r3
 8002510:	4620      	mov	r0, r4
 8002512:	f7fd fe21 	bl	8000158 <__addsf3>
 8002516:	4603      	mov	r3, r0
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe f901 	bl	8000720 <__aeabi_f2iz>
 800251e:	4603      	mov	r3, r0
 8002520:	4a70      	ldr	r2, [pc, #448]	@ (80026e4 <Animation_Loop+0xba8>)
 8002522:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 8002524:	4b70      	ldr	r3, [pc, #448]	@ (80026e8 <Animation_Loop+0xbac>)
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
                  state_index++;
 800252c:	4b6f      	ldr	r3, [pc, #444]	@ (80026ec <Animation_Loop+0xbb0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	3301      	adds	r3, #1
 8002532:	4a6e      	ldr	r2, [pc, #440]	@ (80026ec <Animation_Loop+0xbb0>)
 8002534:	6013      	str	r3, [r2, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8002536:	4b6d      	ldr	r3, [pc, #436]	@ (80026ec <Animation_Loop+0xbb0>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	4b6d      	ldr	r3, [pc, #436]	@ (80026f0 <Animation_Loop+0xbb4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	db02      	blt.n	8002548 <Animation_Loop+0xa0c>
 8002542:	4b6a      	ldr	r3, [pc, #424]	@ (80026ec <Animation_Loop+0xbb0>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
                  state = state_sequence[state_index];
 8002548:	4b68      	ldr	r3, [pc, #416]	@ (80026ec <Animation_Loop+0xbb0>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a69      	ldr	r2, [pc, #420]	@ (80026f4 <Animation_Loop+0xbb8>)
 800254e:	5cd2      	ldrb	r2, [r2, r3]
 8002550:	4b69      	ldr	r3, [pc, #420]	@ (80026f8 <Animation_Loop+0xbbc>)
 8002552:	701a      	strb	r2, [r3, #0]
                  break;
 8002554:	e179      	b.n	800284a <Animation_Loop+0xd0e>
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8002556:	4b58      	ldr	r3, [pc, #352]	@ (80026b8 <Animation_Loop+0xb7c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a58      	ldr	r2, [pc, #352]	@ (80026bc <Animation_Loop+0xb80>)
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b58      	ldr	r3, [pc, #352]	@ (80026c0 <Animation_Loop+0xb84>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a58      	ldr	r2, [pc, #352]	@ (80026c4 <Animation_Loop+0xb88>)
 8002564:	6013      	str	r3, [r2, #0]
                  lerp_targetX = centerX;
 8002566:	4b58      	ldr	r3, [pc, #352]	@ (80026c8 <Animation_Loop+0xb8c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a5b      	ldr	r2, [pc, #364]	@ (80026d8 <Animation_Loop+0xb9c>)
 800256c:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY;
 800256e:	4b5b      	ldr	r3, [pc, #364]	@ (80026dc <Animation_Loop+0xba0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a5c      	ldr	r2, [pc, #368]	@ (80026e4 <Animation_Loop+0xba8>)
 8002574:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 8002576:	4b5c      	ldr	r3, [pc, #368]	@ (80026e8 <Animation_Loop+0xbac>)
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
                  state_index++;
 800257e:	4b5b      	ldr	r3, [pc, #364]	@ (80026ec <Animation_Loop+0xbb0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	3301      	adds	r3, #1
 8002584:	4a59      	ldr	r2, [pc, #356]	@ (80026ec <Animation_Loop+0xbb0>)
 8002586:	6013      	str	r3, [r2, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8002588:	4b58      	ldr	r3, [pc, #352]	@ (80026ec <Animation_Loop+0xbb0>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4b58      	ldr	r3, [pc, #352]	@ (80026f0 <Animation_Loop+0xbb4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	db02      	blt.n	800259a <Animation_Loop+0xa5e>
 8002594:	4b55      	ldr	r3, [pc, #340]	@ (80026ec <Animation_Loop+0xbb0>)
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
                  state = state_sequence[state_index];
 800259a:	4b54      	ldr	r3, [pc, #336]	@ (80026ec <Animation_Loop+0xbb0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a55      	ldr	r2, [pc, #340]	@ (80026f4 <Animation_Loop+0xbb8>)
 80025a0:	5cd2      	ldrb	r2, [r2, r3]
 80025a2:	4b55      	ldr	r3, [pc, #340]	@ (80026f8 <Animation_Loop+0xbbc>)
 80025a4:	701a      	strb	r2, [r3, #0]
                  break;
 80025a6:	e150      	b.n	800284a <Animation_Loop+0xd0e>
                  lerp_startX = pupilX; lerp_startY = pupilY;
 80025a8:	4b43      	ldr	r3, [pc, #268]	@ (80026b8 <Animation_Loop+0xb7c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a43      	ldr	r2, [pc, #268]	@ (80026bc <Animation_Loop+0xb80>)
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b43      	ldr	r3, [pc, #268]	@ (80026c0 <Animation_Loop+0xb84>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a43      	ldr	r2, [pc, #268]	@ (80026c4 <Animation_Loop+0xb88>)
 80025b6:	6013      	str	r3, [r2, #0]
                  lerp_targetX = centerX + (rx_in - pupilRadius) * 0.7f;
 80025b8:	4b43      	ldr	r3, [pc, #268]	@ (80026c8 <Animation_Loop+0xb8c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fd fe7f 	bl	80002c0 <__aeabi_i2f>
 80025c2:	4604      	mov	r4, r0
 80025c4:	4b41      	ldr	r3, [pc, #260]	@ (80026cc <Animation_Loop+0xb90>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b41      	ldr	r3, [pc, #260]	@ (80026d0 <Animation_Loop+0xb94>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd fe76 	bl	80002c0 <__aeabi_i2f>
 80025d4:	4603      	mov	r3, r0
 80025d6:	493f      	ldr	r1, [pc, #252]	@ (80026d4 <Animation_Loop+0xb98>)
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fd fec5 	bl	8000368 <__aeabi_fmul>
 80025de:	4603      	mov	r3, r0
 80025e0:	4619      	mov	r1, r3
 80025e2:	4620      	mov	r0, r4
 80025e4:	f7fd fdb8 	bl	8000158 <__addsf3>
 80025e8:	4603      	mov	r3, r0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe f898 	bl	8000720 <__aeabi_f2iz>
 80025f0:	4603      	mov	r3, r0
 80025f2:	4a39      	ldr	r2, [pc, #228]	@ (80026d8 <Animation_Loop+0xb9c>)
 80025f4:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY + (ry_in - pupilRadius) * 0.7f;
 80025f6:	4b39      	ldr	r3, [pc, #228]	@ (80026dc <Animation_Loop+0xba0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fd fe60 	bl	80002c0 <__aeabi_i2f>
 8002600:	4604      	mov	r4, r0
 8002602:	4b37      	ldr	r3, [pc, #220]	@ (80026e0 <Animation_Loop+0xba4>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4b32      	ldr	r3, [pc, #200]	@ (80026d0 <Animation_Loop+0xb94>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	4618      	mov	r0, r3
 800260e:	f7fd fe57 	bl	80002c0 <__aeabi_i2f>
 8002612:	4603      	mov	r3, r0
 8002614:	492f      	ldr	r1, [pc, #188]	@ (80026d4 <Animation_Loop+0xb98>)
 8002616:	4618      	mov	r0, r3
 8002618:	f7fd fea6 	bl	8000368 <__aeabi_fmul>
 800261c:	4603      	mov	r3, r0
 800261e:	4619      	mov	r1, r3
 8002620:	4620      	mov	r0, r4
 8002622:	f7fd fd99 	bl	8000158 <__addsf3>
 8002626:	4603      	mov	r3, r0
 8002628:	4618      	mov	r0, r3
 800262a:	f7fe f879 	bl	8000720 <__aeabi_f2iz>
 800262e:	4603      	mov	r3, r0
 8002630:	4a2c      	ldr	r2, [pc, #176]	@ (80026e4 <Animation_Loop+0xba8>)
 8002632:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 8002634:	4b2c      	ldr	r3, [pc, #176]	@ (80026e8 <Animation_Loop+0xbac>)
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
                  state_index++;
 800263c:	4b2b      	ldr	r3, [pc, #172]	@ (80026ec <Animation_Loop+0xbb0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3301      	adds	r3, #1
 8002642:	4a2a      	ldr	r2, [pc, #168]	@ (80026ec <Animation_Loop+0xbb0>)
 8002644:	6013      	str	r3, [r2, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8002646:	4b29      	ldr	r3, [pc, #164]	@ (80026ec <Animation_Loop+0xbb0>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4b29      	ldr	r3, [pc, #164]	@ (80026f0 <Animation_Loop+0xbb4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	db02      	blt.n	8002658 <Animation_Loop+0xb1c>
 8002652:	4b26      	ldr	r3, [pc, #152]	@ (80026ec <Animation_Loop+0xbb0>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
                  state = state_sequence[state_index];
 8002658:	4b24      	ldr	r3, [pc, #144]	@ (80026ec <Animation_Loop+0xbb0>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a25      	ldr	r2, [pc, #148]	@ (80026f4 <Animation_Loop+0xbb8>)
 800265e:	5cd2      	ldrb	r2, [r2, r3]
 8002660:	4b25      	ldr	r3, [pc, #148]	@ (80026f8 <Animation_Loop+0xbbc>)
 8002662:	701a      	strb	r2, [r3, #0]
                  break;
 8002664:	e0f1      	b.n	800284a <Animation_Loop+0xd0e>
                  lerp_startX = pupilX; lerp_startY = pupilY;
 8002666:	4b14      	ldr	r3, [pc, #80]	@ (80026b8 <Animation_Loop+0xb7c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a14      	ldr	r2, [pc, #80]	@ (80026bc <Animation_Loop+0xb80>)
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	4b14      	ldr	r3, [pc, #80]	@ (80026c0 <Animation_Loop+0xb84>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a14      	ldr	r2, [pc, #80]	@ (80026c4 <Animation_Loop+0xb88>)
 8002674:	6013      	str	r3, [r2, #0]
                  lerp_targetX = centerX;
 8002676:	4b14      	ldr	r3, [pc, #80]	@ (80026c8 <Animation_Loop+0xb8c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a17      	ldr	r2, [pc, #92]	@ (80026d8 <Animation_Loop+0xb9c>)
 800267c:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY;
 800267e:	4b17      	ldr	r3, [pc, #92]	@ (80026dc <Animation_Loop+0xba0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a18      	ldr	r2, [pc, #96]	@ (80026e4 <Animation_Loop+0xba8>)
 8002684:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 8002686:	4b18      	ldr	r3, [pc, #96]	@ (80026e8 <Animation_Loop+0xbac>)
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
                  state_index++;
 800268e:	4b17      	ldr	r3, [pc, #92]	@ (80026ec <Animation_Loop+0xbb0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	3301      	adds	r3, #1
 8002694:	4a15      	ldr	r2, [pc, #84]	@ (80026ec <Animation_Loop+0xbb0>)
 8002696:	6013      	str	r3, [r2, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8002698:	4b14      	ldr	r3, [pc, #80]	@ (80026ec <Animation_Loop+0xbb0>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b14      	ldr	r3, [pc, #80]	@ (80026f0 <Animation_Loop+0xbb4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	db02      	blt.n	80026aa <Animation_Loop+0xb6e>
 80026a4:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <Animation_Loop+0xbb0>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
                  state = state_sequence[state_index];
 80026aa:	4b10      	ldr	r3, [pc, #64]	@ (80026ec <Animation_Loop+0xbb0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a11      	ldr	r2, [pc, #68]	@ (80026f4 <Animation_Loop+0xbb8>)
 80026b0:	5cd2      	ldrb	r2, [r2, r3]
 80026b2:	4b11      	ldr	r3, [pc, #68]	@ (80026f8 <Animation_Loop+0xbbc>)
 80026b4:	701a      	strb	r2, [r3, #0]
                  break;
 80026b6:	e0c8      	b.n	800284a <Animation_Loop+0xd0e>
 80026b8:	20000234 	.word	0x20000234
 80026bc:	2000025c 	.word	0x2000025c
 80026c0:	20000238 	.word	0x20000238
 80026c4:	20000260 	.word	0x20000260
 80026c8:	2000021c 	.word	0x2000021c
 80026cc:	20000224 	.word	0x20000224
 80026d0:	2000022c 	.word	0x2000022c
 80026d4:	3f333333 	.word	0x3f333333
 80026d8:	20000264 	.word	0x20000264
 80026dc:	20000220 	.word	0x20000220
 80026e0:	20000228 	.word	0x20000228
 80026e4:	20000268 	.word	0x20000268
 80026e8:	2000026c 	.word	0x2000026c
 80026ec:	2000027c 	.word	0x2000027c
 80026f0:	20000278 	.word	0x20000278
 80026f4:	20000008 	.word	0x20000008
 80026f8:	2000023c 	.word	0x2000023c
                  if (random_count < RANDOM_REPEAT) {
 80026fc:	4b55      	ldr	r3, [pc, #340]	@ (8002854 <Animation_Loop+0xd18>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2214      	movs	r2, #20
 8002702:	4293      	cmp	r3, r2
 8002704:	da4b      	bge.n	800279e <Animation_Loop+0xc62>
                      lerp_startX = pupilX; lerp_startY = pupilY;
 8002706:	4b54      	ldr	r3, [pc, #336]	@ (8002858 <Animation_Loop+0xd1c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a54      	ldr	r2, [pc, #336]	@ (800285c <Animation_Loop+0xd20>)
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b54      	ldr	r3, [pc, #336]	@ (8002860 <Animation_Loop+0xd24>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a54      	ldr	r2, [pc, #336]	@ (8002864 <Animation_Loop+0xd28>)
 8002714:	6013      	str	r3, [r2, #0]
                      lerp_targetX = centerX + (rand() % (rx_in - pupilRadius * 2)) - (rx_in - pupilRadius) / 2;
 8002716:	f002 f99f 	bl	8004a58 <rand>
 800271a:	4602      	mov	r2, r0
 800271c:	4b52      	ldr	r3, [pc, #328]	@ (8002868 <Animation_Loop+0xd2c>)
 800271e:	6819      	ldr	r1, [r3, #0]
 8002720:	4b52      	ldr	r3, [pc, #328]	@ (800286c <Animation_Loop+0xd30>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	1acb      	subs	r3, r1, r3
 8002728:	fb92 f1f3 	sdiv	r1, r2, r3
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	1ad2      	subs	r2, r2, r3
 8002732:	4b4f      	ldr	r3, [pc, #316]	@ (8002870 <Animation_Loop+0xd34>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	441a      	add	r2, r3
 8002738:	4b4b      	ldr	r3, [pc, #300]	@ (8002868 <Animation_Loop+0xd2c>)
 800273a:	6819      	ldr	r1, [r3, #0]
 800273c:	4b4b      	ldr	r3, [pc, #300]	@ (800286c <Animation_Loop+0xd30>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	1acb      	subs	r3, r1, r3
 8002742:	0fd9      	lsrs	r1, r3, #31
 8002744:	440b      	add	r3, r1
 8002746:	105b      	asrs	r3, r3, #1
 8002748:	425b      	negs	r3, r3
 800274a:	4413      	add	r3, r2
 800274c:	4a49      	ldr	r2, [pc, #292]	@ (8002874 <Animation_Loop+0xd38>)
 800274e:	6013      	str	r3, [r2, #0]
                      lerp_targetY = centerY + (rand() % (ry_in - pupilRadius * 2)) - (ry_in - pupilRadius) / 2;
 8002750:	f002 f982 	bl	8004a58 <rand>
 8002754:	4602      	mov	r2, r0
 8002756:	4b48      	ldr	r3, [pc, #288]	@ (8002878 <Animation_Loop+0xd3c>)
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	4b44      	ldr	r3, [pc, #272]	@ (800286c <Animation_Loop+0xd30>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	1acb      	subs	r3, r1, r3
 8002762:	fb92 f1f3 	sdiv	r1, r2, r3
 8002766:	fb01 f303 	mul.w	r3, r1, r3
 800276a:	1ad2      	subs	r2, r2, r3
 800276c:	4b43      	ldr	r3, [pc, #268]	@ (800287c <Animation_Loop+0xd40>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	441a      	add	r2, r3
 8002772:	4b41      	ldr	r3, [pc, #260]	@ (8002878 <Animation_Loop+0xd3c>)
 8002774:	6819      	ldr	r1, [r3, #0]
 8002776:	4b3d      	ldr	r3, [pc, #244]	@ (800286c <Animation_Loop+0xd30>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	1acb      	subs	r3, r1, r3
 800277c:	0fd9      	lsrs	r1, r3, #31
 800277e:	440b      	add	r3, r1
 8002780:	105b      	asrs	r3, r3, #1
 8002782:	425b      	negs	r3, r3
 8002784:	4413      	add	r3, r2
 8002786:	4a3e      	ldr	r2, [pc, #248]	@ (8002880 <Animation_Loop+0xd44>)
 8002788:	6013      	str	r3, [r2, #0]
                      lerp_t = 0.0f;
 800278a:	4b3e      	ldr	r3, [pc, #248]	@ (8002884 <Animation_Loop+0xd48>)
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
                      random_count++;
 8002792:	4b30      	ldr	r3, [pc, #192]	@ (8002854 <Animation_Loop+0xd18>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3301      	adds	r3, #1
 8002798:	4a2e      	ldr	r2, [pc, #184]	@ (8002854 <Animation_Loop+0xd18>)
 800279a:	6013      	str	r3, [r2, #0]
                  break;           
 800279c:	e055      	b.n	800284a <Animation_Loop+0xd0e>
                      random_count = 0;
 800279e:	4b2d      	ldr	r3, [pc, #180]	@ (8002854 <Animation_Loop+0xd18>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
                      lerp_startX = pupilX; lerp_startY = pupilY;
 80027a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002858 <Animation_Loop+0xd1c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a2c      	ldr	r2, [pc, #176]	@ (800285c <Animation_Loop+0xd20>)
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002860 <Animation_Loop+0xd24>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a2c      	ldr	r2, [pc, #176]	@ (8002864 <Animation_Loop+0xd28>)
 80027b2:	6013      	str	r3, [r2, #0]
                      lerp_targetX = centerX;
 80027b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002870 <Animation_Loop+0xd34>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002874 <Animation_Loop+0xd38>)
 80027ba:	6013      	str	r3, [r2, #0]
                      lerp_targetY = centerY;
 80027bc:	4b2f      	ldr	r3, [pc, #188]	@ (800287c <Animation_Loop+0xd40>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a2f      	ldr	r2, [pc, #188]	@ (8002880 <Animation_Loop+0xd44>)
 80027c2:	6013      	str	r3, [r2, #0]
                      lerp_t = 0.0f;
 80027c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002884 <Animation_Loop+0xd48>)
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
                      state_index++;
 80027cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002888 <Animation_Loop+0xd4c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	3301      	adds	r3, #1
 80027d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002888 <Animation_Loop+0xd4c>)
 80027d4:	6013      	str	r3, [r2, #0]
                      if (state_index >= state_sequence_len) state_index = 0;
 80027d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002888 <Animation_Loop+0xd4c>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	4b2c      	ldr	r3, [pc, #176]	@ (800288c <Animation_Loop+0xd50>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	db02      	blt.n	80027e8 <Animation_Loop+0xcac>
 80027e2:	4b29      	ldr	r3, [pc, #164]	@ (8002888 <Animation_Loop+0xd4c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
                      state = state_sequence[state_index];
 80027e8:	4b27      	ldr	r3, [pc, #156]	@ (8002888 <Animation_Loop+0xd4c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a28      	ldr	r2, [pc, #160]	@ (8002890 <Animation_Loop+0xd54>)
 80027ee:	5cd2      	ldrb	r2, [r2, r3]
 80027f0:	4b28      	ldr	r3, [pc, #160]	@ (8002894 <Animation_Loop+0xd58>)
 80027f2:	701a      	strb	r2, [r3, #0]
                  break;           
 80027f4:	e029      	b.n	800284a <Animation_Loop+0xd0e>
                  lerp_startX = pupilX; lerp_startY = pupilY;
 80027f6:	4b18      	ldr	r3, [pc, #96]	@ (8002858 <Animation_Loop+0xd1c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a18      	ldr	r2, [pc, #96]	@ (800285c <Animation_Loop+0xd20>)
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	4b18      	ldr	r3, [pc, #96]	@ (8002860 <Animation_Loop+0xd24>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a18      	ldr	r2, [pc, #96]	@ (8002864 <Animation_Loop+0xd28>)
 8002804:	6013      	str	r3, [r2, #0]
                  lerp_targetX = centerX;
 8002806:	4b1a      	ldr	r3, [pc, #104]	@ (8002870 <Animation_Loop+0xd34>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1a      	ldr	r2, [pc, #104]	@ (8002874 <Animation_Loop+0xd38>)
 800280c:	6013      	str	r3, [r2, #0]
                  lerp_targetY = centerY;
 800280e:	4b1b      	ldr	r3, [pc, #108]	@ (800287c <Animation_Loop+0xd40>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a1b      	ldr	r2, [pc, #108]	@ (8002880 <Animation_Loop+0xd44>)
 8002814:	6013      	str	r3, [r2, #0]
                  lerp_t = 0.0f;
 8002816:	4b1b      	ldr	r3, [pc, #108]	@ (8002884 <Animation_Loop+0xd48>)
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
                  state_index++;
 800281e:	4b1a      	ldr	r3, [pc, #104]	@ (8002888 <Animation_Loop+0xd4c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	3301      	adds	r3, #1
 8002824:	4a18      	ldr	r2, [pc, #96]	@ (8002888 <Animation_Loop+0xd4c>)
 8002826:	6013      	str	r3, [r2, #0]
                  if (state_index >= state_sequence_len) state_index = 0;
 8002828:	4b17      	ldr	r3, [pc, #92]	@ (8002888 <Animation_Loop+0xd4c>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b17      	ldr	r3, [pc, #92]	@ (800288c <Animation_Loop+0xd50>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	db02      	blt.n	800283a <Animation_Loop+0xcfe>
 8002834:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <Animation_Loop+0xd4c>)
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
                  state = state_sequence[state_index];
 800283a:	4b13      	ldr	r3, [pc, #76]	@ (8002888 <Animation_Loop+0xd4c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a14      	ldr	r2, [pc, #80]	@ (8002890 <Animation_Loop+0xd54>)
 8002840:	5cd2      	ldrb	r2, [r2, r3]
 8002842:	4b14      	ldr	r3, [pc, #80]	@ (8002894 <Animation_Loop+0xd58>)
 8002844:	701a      	strb	r2, [r3, #0]
                  break;
 8002846:	e000      	b.n	800284a <Animation_Loop+0xd0e>
                  break;
 8002848:	bf00      	nop
}
 800284a:	bf00      	nop
 800284c:	3724      	adds	r7, #36	@ 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd90      	pop	{r4, r7, pc}
 8002852:	bf00      	nop
 8002854:	20000274 	.word	0x20000274
 8002858:	20000234 	.word	0x20000234
 800285c:	2000025c 	.word	0x2000025c
 8002860:	20000238 	.word	0x20000238
 8002864:	20000260 	.word	0x20000260
 8002868:	20000224 	.word	0x20000224
 800286c:	2000022c 	.word	0x2000022c
 8002870:	2000021c 	.word	0x2000021c
 8002874:	20000264 	.word	0x20000264
 8002878:	20000228 	.word	0x20000228
 800287c:	20000220 	.word	0x20000220
 8002880:	20000268 	.word	0x20000268
 8002884:	2000026c 	.word	0x2000026c
 8002888:	2000027c 	.word	0x2000027c
 800288c:	20000278 	.word	0x20000278
 8002890:	20000008 	.word	0x20000008
 8002894:	2000023c 	.word	0x2000023c

08002898 <draw_eye_with_pupil_to_buffer>:

void draw_eye_with_pupil_to_buffer(int cx, int cy, int r, int pupil_r, int pupil_offset_x, int pupil_offset_y, uint16_t eye_color, uint16_t pupil_color, uint16_t bgcolor) {
 8002898:	b480      	push	{r7}
 800289a:	b08f      	sub	sp, #60	@ 0x3c
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
    // Vẽ tròng mắt (vòng tròn trắng)
    for (int y = 0; y < BUF_H; y++) {
 80028a6:	2300      	movs	r3, #0
 80028a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80028aa:	e036      	b.n	800291a <draw_eye_with_pupil_to_buffer+0x82>
        for (int x = 0; x < BUF_W; x++) {
 80028ac:	2300      	movs	r3, #0
 80028ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80028b0:	e02d      	b.n	800290e <draw_eye_with_pupil_to_buffer+0x76>
            int dx = x - cx;
 80028b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	617b      	str	r3, [r7, #20]
            int dy = y - cy;
 80028ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	613b      	str	r3, [r7, #16]
            if (dx*dx + dy*dy <= r*r)
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	fb03 f203 	mul.w	r2, r3, r3
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	fb03 f303 	mul.w	r3, r3, r3
 80028ce:	441a      	add	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	fb03 f303 	mul.w	r3, r3, r3
 80028d6:	429a      	cmp	r2, r3
 80028d8:	dc0b      	bgt.n	80028f2 <draw_eye_with_pupil_to_buffer+0x5a>
                framebuf[y][x] = eye_color;   // Màu tròng mắt
 80028da:	4931      	ldr	r1, [pc, #196]	@ (80029a0 <draw_eye_with_pupil_to_buffer+0x108>)
 80028dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028de:	2246      	movs	r2, #70	@ 0x46
 80028e0:	fb03 f202 	mul.w	r2, r3, r2
 80028e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e6:	4413      	add	r3, r2
 80028e8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80028ec:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 80028f0:	e00a      	b.n	8002908 <draw_eye_with_pupil_to_buffer+0x70>
            else
                framebuf[y][x] = bgcolor;     // Màu nền
 80028f2:	492b      	ldr	r1, [pc, #172]	@ (80029a0 <draw_eye_with_pupil_to_buffer+0x108>)
 80028f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f6:	2246      	movs	r2, #70	@ 0x46
 80028f8:	fb03 f202 	mul.w	r2, r3, r2
 80028fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028fe:	4413      	add	r3, r2
 8002900:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002904:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (int x = 0; x < BUF_W; x++) {
 8002908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290a:	3301      	adds	r3, #1
 800290c:	633b      	str	r3, [r7, #48]	@ 0x30
 800290e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002910:	2b45      	cmp	r3, #69	@ 0x45
 8002912:	ddce      	ble.n	80028b2 <draw_eye_with_pupil_to_buffer+0x1a>
    for (int y = 0; y < BUF_H; y++) {
 8002914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002916:	3301      	adds	r3, #1
 8002918:	637b      	str	r3, [r7, #52]	@ 0x34
 800291a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800291c:	2b45      	cmp	r3, #69	@ 0x45
 800291e:	ddc5      	ble.n	80028ac <draw_eye_with_pupil_to_buffer+0x14>
        }
    }
    // Vẽ con ngươi (vòng tròn đen nhỏ hơn, có thể lệch tâm)
    int pupil_cx = cx + pupil_offset_x;
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002924:	4413      	add	r3, r2
 8002926:	627b      	str	r3, [r7, #36]	@ 0x24
    int pupil_cy = cy + pupil_offset_y;
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800292c:	4413      	add	r3, r2
 800292e:	623b      	str	r3, [r7, #32]
    for (int y = 0; y < BUF_H; y++) {
 8002930:	2300      	movs	r3, #0
 8002932:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002934:	e02a      	b.n	800298c <draw_eye_with_pupil_to_buffer+0xf4>
        for (int x = 0; x < BUF_W; x++) {
 8002936:	2300      	movs	r3, #0
 8002938:	62bb      	str	r3, [r7, #40]	@ 0x28
 800293a:	e021      	b.n	8002980 <draw_eye_with_pupil_to_buffer+0xe8>
            int dx = x - pupil_cx;
 800293c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	61fb      	str	r3, [r7, #28]
            int dy = y - pupil_cy;
 8002944:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	61bb      	str	r3, [r7, #24]
            if (dx*dx + dy*dy <= pupil_r*pupil_r)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	fb03 f203 	mul.w	r2, r3, r3
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	fb03 f303 	mul.w	r3, r3, r3
 8002958:	441a      	add	r2, r3
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	fb03 f303 	mul.w	r3, r3, r3
 8002960:	429a      	cmp	r2, r3
 8002962:	dc0a      	bgt.n	800297a <draw_eye_with_pupil_to_buffer+0xe2>
                framebuf[y][x] = LCD128_YELLOW; // Màu con ngươi
 8002964:	490e      	ldr	r1, [pc, #56]	@ (80029a0 <draw_eye_with_pupil_to_buffer+0x108>)
 8002966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002968:	2246      	movs	r2, #70	@ 0x46
 800296a:	fb03 f202 	mul.w	r2, r3, r2
 800296e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002970:	4413      	add	r3, r2
 8002972:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002976:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (int x = 0; x < BUF_W; x++) {
 800297a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800297c:	3301      	adds	r3, #1
 800297e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002982:	2b45      	cmp	r3, #69	@ 0x45
 8002984:	ddda      	ble.n	800293c <draw_eye_with_pupil_to_buffer+0xa4>
    for (int y = 0; y < BUF_H; y++) {
 8002986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002988:	3301      	adds	r3, #1
 800298a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800298c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800298e:	2b45      	cmp	r3, #69	@ 0x45
 8002990:	ddd1      	ble.n	8002936 <draw_eye_with_pupil_to_buffer+0x9e>
        }
    }
  }
 8002992:	bf00      	nop
 8002994:	bf00      	nop
 8002996:	373c      	adds	r7, #60	@ 0x3c
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20000280 	.word	0x20000280

080029a4 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1) {
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a07      	ldr	r2, [pc, #28]	@ (80029d0 <HAL_SPI_TxCpltCallback+0x2c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d108      	bne.n	80029c8 <HAL_SPI_TxCpltCallback+0x24>
        // Đóng CS sau khi DMA xong
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); // CS_Pin
 80029b6:	2201      	movs	r2, #1
 80029b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029bc:	4805      	ldr	r0, [pc, #20]	@ (80029d4 <HAL_SPI_TxCpltCallback+0x30>)
 80029be:	f001 f88d 	bl	8003adc <HAL_GPIO_WritePin>
        lcd128_dma_busy = 0;
 80029c2:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <HAL_SPI_TxCpltCallback+0x34>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	701a      	strb	r2, [r3, #0]
    }
}
 80029c8:	bf00      	nop
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40013000 	.word	0x40013000
 80029d4:	40010c00 	.word	0x40010c00
 80029d8:	200000a8 	.word	0x200000a8

080029dc <SystemClock_Config>:

void SystemClock_Config(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b090      	sub	sp, #64	@ 0x40
 80029e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029e2:	f107 0318 	add.w	r3, r7, #24
 80029e6:	2228      	movs	r2, #40	@ 0x28
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f002 f999 	bl	8004d22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029f0:	1d3b      	adds	r3, r7, #4
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	60da      	str	r2, [r3, #12]
 80029fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029fe:	2301      	movs	r3, #1
 8002a00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a10:	2302      	movs	r3, #2
 8002a12:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a1a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a20:	f107 0318 	add.w	r3, r7, #24
 8002a24:	4618      	mov	r0, r3
 8002a26:	f001 f871 	bl	8003b0c <HAL_RCC_OscConfig>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002a30:	f000 f90e 	bl	8002c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a34:	230f      	movs	r3, #15
 8002a36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f001 fade 	bl	8004010 <HAL_RCC_ClockConfig>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002a5a:	f000 f8f9 	bl	8002c50 <Error_Handler>
  }
}
 8002a5e:	bf00      	nop
 8002a60:	3740      	adds	r7, #64	@ 0x40
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a6c:	4b17      	ldr	r3, [pc, #92]	@ (8002acc <MX_SPI1_Init+0x64>)
 8002a6e:	4a18      	ldr	r2, [pc, #96]	@ (8002ad0 <MX_SPI1_Init+0x68>)
 8002a70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a72:	4b16      	ldr	r3, [pc, #88]	@ (8002acc <MX_SPI1_Init+0x64>)
 8002a74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a7a:	4b14      	ldr	r3, [pc, #80]	@ (8002acc <MX_SPI1_Init+0x64>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a80:	4b12      	ldr	r3, [pc, #72]	@ (8002acc <MX_SPI1_Init+0x64>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a86:	4b11      	ldr	r3, [pc, #68]	@ (8002acc <MX_SPI1_Init+0x64>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002acc <MX_SPI1_Init+0x64>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a92:	4b0e      	ldr	r3, [pc, #56]	@ (8002acc <MX_SPI1_Init+0x64>)
 8002a94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002acc <MX_SPI1_Init+0x64>)
 8002a9c:	2208      	movs	r2, #8
 8002a9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8002acc <MX_SPI1_Init+0x64>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aa6:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <MX_SPI1_Init+0x64>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aac:	4b07      	ldr	r3, [pc, #28]	@ (8002acc <MX_SPI1_Init+0x64>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002ab2:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <MX_SPI1_Init+0x64>)
 8002ab4:	220a      	movs	r2, #10
 8002ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ab8:	4804      	ldr	r0, [pc, #16]	@ (8002acc <MX_SPI1_Init+0x64>)
 8002aba:	f001 fc05 	bl	80042c8 <HAL_SPI_Init>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ac4:	f000 f8c4 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	200000ac 	.word	0x200000ac
 8002ad0:	40013000 	.word	0x40013000

08002ad4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002ad8:	4b17      	ldr	r3, [pc, #92]	@ (8002b38 <MX_SPI2_Init+0x64>)
 8002ada:	4a18      	ldr	r2, [pc, #96]	@ (8002b3c <MX_SPI2_Init+0x68>)
 8002adc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ade:	4b16      	ldr	r3, [pc, #88]	@ (8002b38 <MX_SPI2_Init+0x64>)
 8002ae0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ae4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ae6:	4b14      	ldr	r3, [pc, #80]	@ (8002b38 <MX_SPI2_Init+0x64>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002aec:	4b12      	ldr	r3, [pc, #72]	@ (8002b38 <MX_SPI2_Init+0x64>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002af2:	4b11      	ldr	r3, [pc, #68]	@ (8002b38 <MX_SPI2_Init+0x64>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002af8:	4b0f      	ldr	r3, [pc, #60]	@ (8002b38 <MX_SPI2_Init+0x64>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002afe:	4b0e      	ldr	r3, [pc, #56]	@ (8002b38 <MX_SPI2_Init+0x64>)
 8002b00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b04:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b06:	4b0c      	ldr	r3, [pc, #48]	@ (8002b38 <MX_SPI2_Init+0x64>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b38 <MX_SPI2_Init+0x64>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b12:	4b09      	ldr	r3, [pc, #36]	@ (8002b38 <MX_SPI2_Init+0x64>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b18:	4b07      	ldr	r3, [pc, #28]	@ (8002b38 <MX_SPI2_Init+0x64>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002b1e:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <MX_SPI2_Init+0x64>)
 8002b20:	220a      	movs	r2, #10
 8002b22:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b24:	4804      	ldr	r0, [pc, #16]	@ (8002b38 <MX_SPI2_Init+0x64>)
 8002b26:	f001 fbcf 	bl	80042c8 <HAL_SPI_Init>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002b30:	f000 f88e 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b34:	bf00      	nop
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000104 	.word	0x20000104
 8002b3c:	40003800 	.word	0x40003800

08002b40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b46:	4b10      	ldr	r3, [pc, #64]	@ (8002b88 <MX_DMA_Init+0x48>)
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8002b88 <MX_DMA_Init+0x48>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6153      	str	r3, [r2, #20]
 8002b52:	4b0d      	ldr	r3, [pc, #52]	@ (8002b88 <MX_DMA_Init+0x48>)
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	607b      	str	r3, [r7, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2100      	movs	r1, #0
 8002b62:	200d      	movs	r0, #13
 8002b64:	f000 fc11 	bl	800338a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002b68:	200d      	movs	r0, #13
 8002b6a:	f000 fc2a 	bl	80033c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2100      	movs	r1, #0
 8002b72:	200f      	movs	r0, #15
 8002b74:	f000 fc09 	bl	800338a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002b78:	200f      	movs	r0, #15
 8002b7a:	f000 fc22 	bl	80033c2 <HAL_NVIC_EnableIRQ>

}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000

08002b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b92:	f107 0310 	add.w	r3, r7, #16
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]
 8002b9c:	609a      	str	r2, [r3, #8]
 8002b9e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ba0:	4b28      	ldr	r3, [pc, #160]	@ (8002c44 <MX_GPIO_Init+0xb8>)
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	4a27      	ldr	r2, [pc, #156]	@ (8002c44 <MX_GPIO_Init+0xb8>)
 8002ba6:	f043 0320 	orr.w	r3, r3, #32
 8002baa:	6193      	str	r3, [r2, #24]
 8002bac:	4b25      	ldr	r3, [pc, #148]	@ (8002c44 <MX_GPIO_Init+0xb8>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb8:	4b22      	ldr	r3, [pc, #136]	@ (8002c44 <MX_GPIO_Init+0xb8>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	4a21      	ldr	r2, [pc, #132]	@ (8002c44 <MX_GPIO_Init+0xb8>)
 8002bbe:	f043 0304 	orr.w	r3, r3, #4
 8002bc2:	6193      	str	r3, [r2, #24]
 8002bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c44 <MX_GPIO_Init+0xb8>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c44 <MX_GPIO_Init+0xb8>)
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c44 <MX_GPIO_Init+0xb8>)
 8002bd6:	f043 0308 	orr.w	r3, r3, #8
 8002bda:	6193      	str	r3, [r2, #24]
 8002bdc:	4b19      	ldr	r3, [pc, #100]	@ (8002c44 <MX_GPIO_Init+0xb8>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	607b      	str	r3, [r7, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 8002be8:	2200      	movs	r2, #0
 8002bea:	f240 4103 	movw	r1, #1027	@ 0x403
 8002bee:	4816      	ldr	r0, [pc, #88]	@ (8002c48 <MX_GPIO_Init+0xbc>)
 8002bf0:	f000 ff74 	bl	8003adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002bfa:	4814      	ldr	r0, [pc, #80]	@ (8002c4c <MX_GPIO_Init+0xc0>)
 8002bfc:	f000 ff6e 	bl	8003adc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 8002c00:	f240 4303 	movw	r3, #1027	@ 0x403
 8002c04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c06:	2301      	movs	r3, #1
 8002c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c12:	f107 0310 	add.w	r3, r7, #16
 8002c16:	4619      	mov	r1, r3
 8002c18:	480b      	ldr	r0, [pc, #44]	@ (8002c48 <MX_GPIO_Init+0xbc>)
 8002c1a:	f000 fddb 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002c1e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002c22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c24:	2301      	movs	r3, #1
 8002c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c30:	f107 0310 	add.w	r3, r7, #16
 8002c34:	4619      	mov	r1, r3
 8002c36:	4805      	ldr	r0, [pc, #20]	@ (8002c4c <MX_GPIO_Init+0xc0>)
 8002c38:	f000 fdcc 	bl	80037d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002c3c:	bf00      	nop
 8002c3e:	3720      	adds	r7, #32
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40010c00 	.word	0x40010c00
 8002c4c:	40010800 	.word	0x40010800

08002c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c54:	b672      	cpsid	i
}
 8002c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c58:	bf00      	nop
 8002c5a:	e7fd      	b.n	8002c58 <Error_Handler+0x8>

08002c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c62:	4b15      	ldr	r3, [pc, #84]	@ (8002cb8 <HAL_MspInit+0x5c>)
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	4a14      	ldr	r2, [pc, #80]	@ (8002cb8 <HAL_MspInit+0x5c>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6193      	str	r3, [r2, #24]
 8002c6e:	4b12      	ldr	r3, [pc, #72]	@ (8002cb8 <HAL_MspInit+0x5c>)
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb8 <HAL_MspInit+0x5c>)
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8002cb8 <HAL_MspInit+0x5c>)
 8002c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c84:	61d3      	str	r3, [r2, #28]
 8002c86:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb8 <HAL_MspInit+0x5c>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c92:	4b0a      	ldr	r3, [pc, #40]	@ (8002cbc <HAL_MspInit+0x60>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	4a04      	ldr	r2, [pc, #16]	@ (8002cbc <HAL_MspInit+0x60>)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40010000 	.word	0x40010000

08002cc0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08a      	sub	sp, #40	@ 0x28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc8:	f107 0318 	add.w	r3, r7, #24
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a5d      	ldr	r2, [pc, #372]	@ (8002e50 <HAL_SPI_MspInit+0x190>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d156      	bne.n	8002d8e <HAL_SPI_MspInit+0xce>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ce0:	4b5c      	ldr	r3, [pc, #368]	@ (8002e54 <HAL_SPI_MspInit+0x194>)
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	4a5b      	ldr	r2, [pc, #364]	@ (8002e54 <HAL_SPI_MspInit+0x194>)
 8002ce6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cea:	6193      	str	r3, [r2, #24]
 8002cec:	4b59      	ldr	r3, [pc, #356]	@ (8002e54 <HAL_SPI_MspInit+0x194>)
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf8:	4b56      	ldr	r3, [pc, #344]	@ (8002e54 <HAL_SPI_MspInit+0x194>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	4a55      	ldr	r2, [pc, #340]	@ (8002e54 <HAL_SPI_MspInit+0x194>)
 8002cfe:	f043 0304 	orr.w	r3, r3, #4
 8002d02:	6193      	str	r3, [r2, #24]
 8002d04:	4b53      	ldr	r3, [pc, #332]	@ (8002e54 <HAL_SPI_MspInit+0x194>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002d10:	23a0      	movs	r3, #160	@ 0xa0
 8002d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d14:	2302      	movs	r3, #2
 8002d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1c:	f107 0318 	add.w	r3, r7, #24
 8002d20:	4619      	mov	r1, r3
 8002d22:	484d      	ldr	r0, [pc, #308]	@ (8002e58 <HAL_SPI_MspInit+0x198>)
 8002d24:	f000 fd56 	bl	80037d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d28:	2340      	movs	r3, #64	@ 0x40
 8002d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d34:	f107 0318 	add.w	r3, r7, #24
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4847      	ldr	r0, [pc, #284]	@ (8002e58 <HAL_SPI_MspInit+0x198>)
 8002d3c:	f000 fd4a 	bl	80037d4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002d40:	4b46      	ldr	r3, [pc, #280]	@ (8002e5c <HAL_SPI_MspInit+0x19c>)
 8002d42:	4a47      	ldr	r2, [pc, #284]	@ (8002e60 <HAL_SPI_MspInit+0x1a0>)
 8002d44:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d46:	4b45      	ldr	r3, [pc, #276]	@ (8002e5c <HAL_SPI_MspInit+0x19c>)
 8002d48:	2210      	movs	r2, #16
 8002d4a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d4c:	4b43      	ldr	r3, [pc, #268]	@ (8002e5c <HAL_SPI_MspInit+0x19c>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d52:	4b42      	ldr	r3, [pc, #264]	@ (8002e5c <HAL_SPI_MspInit+0x19c>)
 8002d54:	2280      	movs	r2, #128	@ 0x80
 8002d56:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d58:	4b40      	ldr	r3, [pc, #256]	@ (8002e5c <HAL_SPI_MspInit+0x19c>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e5c <HAL_SPI_MspInit+0x19c>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002d64:	4b3d      	ldr	r3, [pc, #244]	@ (8002e5c <HAL_SPI_MspInit+0x19c>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d6a:	4b3c      	ldr	r3, [pc, #240]	@ (8002e5c <HAL_SPI_MspInit+0x19c>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002d70:	483a      	ldr	r0, [pc, #232]	@ (8002e5c <HAL_SPI_MspInit+0x19c>)
 8002d72:	f000 fb41 	bl	80033f8 <HAL_DMA_Init>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8002d7c:	f7ff ff68 	bl	8002c50 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a36      	ldr	r2, [pc, #216]	@ (8002e5c <HAL_SPI_MspInit+0x19c>)
 8002d84:	649a      	str	r2, [r3, #72]	@ 0x48
 8002d86:	4a35      	ldr	r2, [pc, #212]	@ (8002e5c <HAL_SPI_MspInit+0x19c>)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6253      	str	r3, [r2, #36]	@ 0x24
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002d8c:	e05c      	b.n	8002e48 <HAL_SPI_MspInit+0x188>
  else if(hspi->Instance==SPI2)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a34      	ldr	r2, [pc, #208]	@ (8002e64 <HAL_SPI_MspInit+0x1a4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d157      	bne.n	8002e48 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d98:	4b2e      	ldr	r3, [pc, #184]	@ (8002e54 <HAL_SPI_MspInit+0x194>)
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	4a2d      	ldr	r2, [pc, #180]	@ (8002e54 <HAL_SPI_MspInit+0x194>)
 8002d9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002da2:	61d3      	str	r3, [r2, #28]
 8002da4:	4b2b      	ldr	r3, [pc, #172]	@ (8002e54 <HAL_SPI_MspInit+0x194>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db0:	4b28      	ldr	r3, [pc, #160]	@ (8002e54 <HAL_SPI_MspInit+0x194>)
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	4a27      	ldr	r2, [pc, #156]	@ (8002e54 <HAL_SPI_MspInit+0x194>)
 8002db6:	f043 0308 	orr.w	r3, r3, #8
 8002dba:	6193      	str	r3, [r2, #24]
 8002dbc:	4b25      	ldr	r3, [pc, #148]	@ (8002e54 <HAL_SPI_MspInit+0x194>)
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002dc8:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd6:	f107 0318 	add.w	r3, r7, #24
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4822      	ldr	r0, [pc, #136]	@ (8002e68 <HAL_SPI_MspInit+0x1a8>)
 8002dde:	f000 fcf9 	bl	80037d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002de2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df0:	f107 0318 	add.w	r3, r7, #24
 8002df4:	4619      	mov	r1, r3
 8002df6:	481c      	ldr	r0, [pc, #112]	@ (8002e68 <HAL_SPI_MspInit+0x1a8>)
 8002df8:	f000 fcec 	bl	80037d4 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e6c <HAL_SPI_MspInit+0x1ac>)
 8002dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8002e70 <HAL_SPI_MspInit+0x1b0>)
 8002e00:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e02:	4b1a      	ldr	r3, [pc, #104]	@ (8002e6c <HAL_SPI_MspInit+0x1ac>)
 8002e04:	2210      	movs	r2, #16
 8002e06:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e08:	4b18      	ldr	r3, [pc, #96]	@ (8002e6c <HAL_SPI_MspInit+0x1ac>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e0e:	4b17      	ldr	r3, [pc, #92]	@ (8002e6c <HAL_SPI_MspInit+0x1ac>)
 8002e10:	2280      	movs	r2, #128	@ 0x80
 8002e12:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e14:	4b15      	ldr	r3, [pc, #84]	@ (8002e6c <HAL_SPI_MspInit+0x1ac>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e1a:	4b14      	ldr	r3, [pc, #80]	@ (8002e6c <HAL_SPI_MspInit+0x1ac>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002e20:	4b12      	ldr	r3, [pc, #72]	@ (8002e6c <HAL_SPI_MspInit+0x1ac>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e26:	4b11      	ldr	r3, [pc, #68]	@ (8002e6c <HAL_SPI_MspInit+0x1ac>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002e2c:	480f      	ldr	r0, [pc, #60]	@ (8002e6c <HAL_SPI_MspInit+0x1ac>)
 8002e2e:	f000 fae3 	bl	80033f8 <HAL_DMA_Init>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_SPI_MspInit+0x17c>
      Error_Handler();
 8002e38:	f7ff ff0a 	bl	8002c50 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a0b      	ldr	r2, [pc, #44]	@ (8002e6c <HAL_SPI_MspInit+0x1ac>)
 8002e40:	649a      	str	r2, [r3, #72]	@ 0x48
 8002e42:	4a0a      	ldr	r2, [pc, #40]	@ (8002e6c <HAL_SPI_MspInit+0x1ac>)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8002e48:	bf00      	nop
 8002e4a:	3728      	adds	r7, #40	@ 0x28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40013000 	.word	0x40013000
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40010800 	.word	0x40010800
 8002e5c:	2000015c 	.word	0x2000015c
 8002e60:	40020030 	.word	0x40020030
 8002e64:	40003800 	.word	0x40003800
 8002e68:	40010c00 	.word	0x40010c00
 8002e6c:	200001a0 	.word	0x200001a0
 8002e70:	40020058 	.word	0x40020058

08002e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e78:	bf00      	nop
 8002e7a:	e7fd      	b.n	8002e78 <NMI_Handler+0x4>

08002e7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e80:	bf00      	nop
 8002e82:	e7fd      	b.n	8002e80 <HardFault_Handler+0x4>

08002e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e88:	bf00      	nop
 8002e8a:	e7fd      	b.n	8002e88 <MemManage_Handler+0x4>

08002e8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e90:	bf00      	nop
 8002e92:	e7fd      	b.n	8002e90 <BusFault_Handler+0x4>

08002e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e98:	bf00      	nop
 8002e9a:	e7fd      	b.n	8002e98 <UsageFault_Handler+0x4>

08002e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eac:	bf00      	nop
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ec4:	f000 f94a 	bl	800315c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ec8:	bf00      	nop
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002ed0:	4802      	ldr	r0, [pc, #8]	@ (8002edc <DMA1_Channel3_IRQHandler+0x10>)
 8002ed2:	f000 fb4b 	bl	800356c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	2000015c 	.word	0x2000015c

08002ee0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002ee4:	4802      	ldr	r0, [pc, #8]	@ (8002ef0 <DMA1_Channel5_IRQHandler+0x10>)
 8002ee6:	f000 fb41 	bl	800356c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	200001a0 	.word	0x200001a0

08002ef4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return 1;
 8002ef8:	2301      	movs	r3, #1
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr

08002f02 <_kill>:

int _kill(int pid, int sig)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f0c:	f001 ff58 	bl	8004dc0 <__errno>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2216      	movs	r2, #22
 8002f14:	601a      	str	r2, [r3, #0]
  return -1;
 8002f16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <_exit>:

void _exit (int status)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f2a:	f04f 31ff 	mov.w	r1, #4294967295
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff ffe7 	bl	8002f02 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f34:	bf00      	nop
 8002f36:	e7fd      	b.n	8002f34 <_exit+0x12>

08002f38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	e00a      	b.n	8002f60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f4a:	f3af 8000 	nop.w
 8002f4e:	4601      	mov	r1, r0
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	60ba      	str	r2, [r7, #8]
 8002f56:	b2ca      	uxtb	r2, r1
 8002f58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	dbf0      	blt.n	8002f4a <_read+0x12>
  }

  return len;
 8002f68:	687b      	ldr	r3, [r7, #4]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b086      	sub	sp, #24
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	e009      	b.n	8002f98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	60ba      	str	r2, [r7, #8]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	3301      	adds	r3, #1
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	dbf1      	blt.n	8002f84 <_write+0x12>
  }
  return len;
 8002fa0:	687b      	ldr	r3, [r7, #4]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <_close>:

int _close(int file)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fd0:	605a      	str	r2, [r3, #4]
  return 0;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr

08002fde <_isatty>:

int _isatty(int file)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fe6:	2301      	movs	r3, #1
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr

08002ff2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
	...

0800300c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003014:	4a14      	ldr	r2, [pc, #80]	@ (8003068 <_sbrk+0x5c>)
 8003016:	4b15      	ldr	r3, [pc, #84]	@ (800306c <_sbrk+0x60>)
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003020:	4b13      	ldr	r3, [pc, #76]	@ (8003070 <_sbrk+0x64>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d102      	bne.n	800302e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003028:	4b11      	ldr	r3, [pc, #68]	@ (8003070 <_sbrk+0x64>)
 800302a:	4a12      	ldr	r2, [pc, #72]	@ (8003074 <_sbrk+0x68>)
 800302c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800302e:	4b10      	ldr	r3, [pc, #64]	@ (8003070 <_sbrk+0x64>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4413      	add	r3, r2
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	429a      	cmp	r2, r3
 800303a:	d207      	bcs.n	800304c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800303c:	f001 fec0 	bl	8004dc0 <__errno>
 8003040:	4603      	mov	r3, r0
 8003042:	220c      	movs	r2, #12
 8003044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003046:	f04f 33ff 	mov.w	r3, #4294967295
 800304a:	e009      	b.n	8003060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800304c:	4b08      	ldr	r3, [pc, #32]	@ (8003070 <_sbrk+0x64>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003052:	4b07      	ldr	r3, [pc, #28]	@ (8003070 <_sbrk+0x64>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	4a05      	ldr	r2, [pc, #20]	@ (8003070 <_sbrk+0x64>)
 800305c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800305e:	68fb      	ldr	r3, [r7, #12]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	20005000 	.word	0x20005000
 800306c:	00000400 	.word	0x00000400
 8003070:	200028c8 	.word	0x200028c8
 8003074:	20002a20 	.word	0x20002a20

08003078 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800307c:	bf00      	nop
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003084:	f7ff fff8 	bl	8003078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003088:	480b      	ldr	r0, [pc, #44]	@ (80030b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800308a:	490c      	ldr	r1, [pc, #48]	@ (80030bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800308c:	4a0c      	ldr	r2, [pc, #48]	@ (80030c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800308e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003090:	e002      	b.n	8003098 <LoopCopyDataInit>

08003092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003096:	3304      	adds	r3, #4

08003098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800309a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800309c:	d3f9      	bcc.n	8003092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800309e:	4a09      	ldr	r2, [pc, #36]	@ (80030c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80030a0:	4c09      	ldr	r4, [pc, #36]	@ (80030c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030a4:	e001      	b.n	80030aa <LoopFillZerobss>

080030a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030a8:	3204      	adds	r2, #4

080030aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030ac:	d3fb      	bcc.n	80030a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030ae:	f001 fe8d 	bl	8004dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030b2:	f7fe fbc1 	bl	8001838 <main>
  bx lr
 80030b6:	4770      	bx	lr
  ldr r0, =_sdata
 80030b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030bc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80030c0:	08007d3c 	.word	0x08007d3c
  ldr r2, =_sbss
 80030c4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80030c8:	20002a1c 	.word	0x20002a1c

080030cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030cc:	e7fe      	b.n	80030cc <ADC1_2_IRQHandler>
	...

080030d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030d4:	4b08      	ldr	r3, [pc, #32]	@ (80030f8 <HAL_Init+0x28>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a07      	ldr	r2, [pc, #28]	@ (80030f8 <HAL_Init+0x28>)
 80030da:	f043 0310 	orr.w	r3, r3, #16
 80030de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e0:	2003      	movs	r0, #3
 80030e2:	f000 f947 	bl	8003374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030e6:	200f      	movs	r0, #15
 80030e8:	f000 f808 	bl	80030fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030ec:	f7ff fdb6 	bl	8002c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40022000 	.word	0x40022000

080030fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003104:	4b12      	ldr	r3, [pc, #72]	@ (8003150 <HAL_InitTick+0x54>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4b12      	ldr	r3, [pc, #72]	@ (8003154 <HAL_InitTick+0x58>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	4619      	mov	r1, r3
 800310e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003112:	fbb3 f3f1 	udiv	r3, r3, r1
 8003116:	fbb2 f3f3 	udiv	r3, r2, r3
 800311a:	4618      	mov	r0, r3
 800311c:	f000 f95f 	bl	80033de <HAL_SYSTICK_Config>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e00e      	b.n	8003148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b0f      	cmp	r3, #15
 800312e:	d80a      	bhi.n	8003146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003130:	2200      	movs	r2, #0
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	f04f 30ff 	mov.w	r0, #4294967295
 8003138:	f000 f927 	bl	800338a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800313c:	4a06      	ldr	r2, [pc, #24]	@ (8003158 <HAL_InitTick+0x5c>)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	e000      	b.n	8003148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
}
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	20000024 	.word	0x20000024
 8003154:	2000002c 	.word	0x2000002c
 8003158:	20000028 	.word	0x20000028

0800315c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003160:	4b05      	ldr	r3, [pc, #20]	@ (8003178 <HAL_IncTick+0x1c>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	4b05      	ldr	r3, [pc, #20]	@ (800317c <HAL_IncTick+0x20>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4413      	add	r3, r2
 800316c:	4a03      	ldr	r2, [pc, #12]	@ (800317c <HAL_IncTick+0x20>)
 800316e:	6013      	str	r3, [r2, #0]
}
 8003170:	bf00      	nop
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	2000002c 	.word	0x2000002c
 800317c:	200028cc 	.word	0x200028cc

08003180 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return uwTick;
 8003184:	4b02      	ldr	r3, [pc, #8]	@ (8003190 <HAL_GetTick+0x10>)
 8003186:	681b      	ldr	r3, [r3, #0]
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr
 8003190:	200028cc 	.word	0x200028cc

08003194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800319c:	f7ff fff0 	bl	8003180 <HAL_GetTick>
 80031a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ac:	d005      	beq.n	80031ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ae:	4b0a      	ldr	r3, [pc, #40]	@ (80031d8 <HAL_Delay+0x44>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4413      	add	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031ba:	bf00      	nop
 80031bc:	f7ff ffe0 	bl	8003180 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d8f7      	bhi.n	80031bc <HAL_Delay+0x28>
  {
  }
}
 80031cc:	bf00      	nop
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	2000002c 	.word	0x2000002c

080031dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003220 <__NVIC_SetPriorityGrouping+0x44>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031f8:	4013      	ands	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003204:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003208:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800320c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800320e:	4a04      	ldr	r2, [pc, #16]	@ (8003220 <__NVIC_SetPriorityGrouping+0x44>)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	60d3      	str	r3, [r2, #12]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003228:	4b04      	ldr	r3, [pc, #16]	@ (800323c <__NVIC_GetPriorityGrouping+0x18>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	0a1b      	lsrs	r3, r3, #8
 800322e:	f003 0307 	and.w	r3, r3, #7
}
 8003232:	4618      	mov	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324e:	2b00      	cmp	r3, #0
 8003250:	db0b      	blt.n	800326a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	f003 021f 	and.w	r2, r3, #31
 8003258:	4906      	ldr	r1, [pc, #24]	@ (8003274 <__NVIC_EnableIRQ+0x34>)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	2001      	movs	r0, #1
 8003262:	fa00 f202 	lsl.w	r2, r0, r2
 8003266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	e000e100 	.word	0xe000e100

08003278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	6039      	str	r1, [r7, #0]
 8003282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003288:	2b00      	cmp	r3, #0
 800328a:	db0a      	blt.n	80032a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	b2da      	uxtb	r2, r3
 8003290:	490c      	ldr	r1, [pc, #48]	@ (80032c4 <__NVIC_SetPriority+0x4c>)
 8003292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003296:	0112      	lsls	r2, r2, #4
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	440b      	add	r3, r1
 800329c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032a0:	e00a      	b.n	80032b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	4908      	ldr	r1, [pc, #32]	@ (80032c8 <__NVIC_SetPriority+0x50>)
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	3b04      	subs	r3, #4
 80032b0:	0112      	lsls	r2, r2, #4
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	440b      	add	r3, r1
 80032b6:	761a      	strb	r2, [r3, #24]
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	e000e100 	.word	0xe000e100
 80032c8:	e000ed00 	.word	0xe000ed00

080032cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b089      	sub	sp, #36	@ 0x24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f1c3 0307 	rsb	r3, r3, #7
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	bf28      	it	cs
 80032ea:	2304      	movcs	r3, #4
 80032ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	3304      	adds	r3, #4
 80032f2:	2b06      	cmp	r3, #6
 80032f4:	d902      	bls.n	80032fc <NVIC_EncodePriority+0x30>
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3b03      	subs	r3, #3
 80032fa:	e000      	b.n	80032fe <NVIC_EncodePriority+0x32>
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003300:	f04f 32ff 	mov.w	r2, #4294967295
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43da      	mvns	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	401a      	ands	r2, r3
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003314:	f04f 31ff 	mov.w	r1, #4294967295
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	fa01 f303 	lsl.w	r3, r1, r3
 800331e:	43d9      	mvns	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003324:	4313      	orrs	r3, r2
         );
}
 8003326:	4618      	mov	r0, r3
 8003328:	3724      	adds	r7, #36	@ 0x24
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3b01      	subs	r3, #1
 800333c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003340:	d301      	bcc.n	8003346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003342:	2301      	movs	r3, #1
 8003344:	e00f      	b.n	8003366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003346:	4a0a      	ldr	r2, [pc, #40]	@ (8003370 <SysTick_Config+0x40>)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3b01      	subs	r3, #1
 800334c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800334e:	210f      	movs	r1, #15
 8003350:	f04f 30ff 	mov.w	r0, #4294967295
 8003354:	f7ff ff90 	bl	8003278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003358:	4b05      	ldr	r3, [pc, #20]	@ (8003370 <SysTick_Config+0x40>)
 800335a:	2200      	movs	r2, #0
 800335c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800335e:	4b04      	ldr	r3, [pc, #16]	@ (8003370 <SysTick_Config+0x40>)
 8003360:	2207      	movs	r2, #7
 8003362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	e000e010 	.word	0xe000e010

08003374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff ff2d 	bl	80031dc <__NVIC_SetPriorityGrouping>
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800338a:	b580      	push	{r7, lr}
 800338c:	b086      	sub	sp, #24
 800338e:	af00      	add	r7, sp, #0
 8003390:	4603      	mov	r3, r0
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800339c:	f7ff ff42 	bl	8003224 <__NVIC_GetPriorityGrouping>
 80033a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	6978      	ldr	r0, [r7, #20]
 80033a8:	f7ff ff90 	bl	80032cc <NVIC_EncodePriority>
 80033ac:	4602      	mov	r2, r0
 80033ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b2:	4611      	mov	r1, r2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ff5f 	bl	8003278 <__NVIC_SetPriority>
}
 80033ba:	bf00      	nop
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	4603      	mov	r3, r0
 80033ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ff35 	bl	8003240 <__NVIC_EnableIRQ>
}
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff ffa2 	bl	8003330 <SysTick_Config>
 80033ec:	4603      	mov	r3, r0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e043      	b.n	8003496 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	4b22      	ldr	r3, [pc, #136]	@ (80034a0 <HAL_DMA_Init+0xa8>)
 8003416:	4413      	add	r3, r2
 8003418:	4a22      	ldr	r2, [pc, #136]	@ (80034a4 <HAL_DMA_Init+0xac>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	091b      	lsrs	r3, r3, #4
 8003420:	009a      	lsls	r2, r3, #2
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a1f      	ldr	r2, [pc, #124]	@ (80034a8 <HAL_DMA_Init+0xb0>)
 800342a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003442:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003446:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003450:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800345c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	bffdfff8 	.word	0xbffdfff8
 80034a4:	cccccccd 	.word	0xcccccccd
 80034a8:	40020000 	.word	0x40020000

080034ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_DMA_Start_IT+0x20>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e04b      	b.n	8003564 <HAL_DMA_Start_IT+0xb8>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d13a      	bne.n	8003556 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0201 	bic.w	r2, r2, #1
 80034fc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	68b9      	ldr	r1, [r7, #8]
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 f937 	bl	8003778 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 020e 	orr.w	r2, r2, #14
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	e00f      	b.n	8003544 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0204 	bic.w	r2, r2, #4
 8003532:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 020a 	orr.w	r2, r2, #10
 8003542:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	e005      	b.n	8003562 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800355e:	2302      	movs	r3, #2
 8003560:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003562:	7dfb      	ldrb	r3, [r7, #23]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003588:	2204      	movs	r2, #4
 800358a:	409a      	lsls	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4013      	ands	r3, r2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d04f      	beq.n	8003634 <HAL_DMA_IRQHandler+0xc8>
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b00      	cmp	r3, #0
 800359c:	d04a      	beq.n	8003634 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0320 	and.w	r3, r3, #32
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d107      	bne.n	80035bc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0204 	bic.w	r2, r2, #4
 80035ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a66      	ldr	r2, [pc, #408]	@ (800375c <HAL_DMA_IRQHandler+0x1f0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d029      	beq.n	800361a <HAL_DMA_IRQHandler+0xae>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a65      	ldr	r2, [pc, #404]	@ (8003760 <HAL_DMA_IRQHandler+0x1f4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d022      	beq.n	8003616 <HAL_DMA_IRQHandler+0xaa>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a63      	ldr	r2, [pc, #396]	@ (8003764 <HAL_DMA_IRQHandler+0x1f8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d01a      	beq.n	8003610 <HAL_DMA_IRQHandler+0xa4>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a62      	ldr	r2, [pc, #392]	@ (8003768 <HAL_DMA_IRQHandler+0x1fc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d012      	beq.n	800360a <HAL_DMA_IRQHandler+0x9e>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a60      	ldr	r2, [pc, #384]	@ (800376c <HAL_DMA_IRQHandler+0x200>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00a      	beq.n	8003604 <HAL_DMA_IRQHandler+0x98>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a5f      	ldr	r2, [pc, #380]	@ (8003770 <HAL_DMA_IRQHandler+0x204>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d102      	bne.n	80035fe <HAL_DMA_IRQHandler+0x92>
 80035f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80035fc:	e00e      	b.n	800361c <HAL_DMA_IRQHandler+0xb0>
 80035fe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003602:	e00b      	b.n	800361c <HAL_DMA_IRQHandler+0xb0>
 8003604:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003608:	e008      	b.n	800361c <HAL_DMA_IRQHandler+0xb0>
 800360a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800360e:	e005      	b.n	800361c <HAL_DMA_IRQHandler+0xb0>
 8003610:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003614:	e002      	b.n	800361c <HAL_DMA_IRQHandler+0xb0>
 8003616:	2340      	movs	r3, #64	@ 0x40
 8003618:	e000      	b.n	800361c <HAL_DMA_IRQHandler+0xb0>
 800361a:	2304      	movs	r3, #4
 800361c:	4a55      	ldr	r2, [pc, #340]	@ (8003774 <HAL_DMA_IRQHandler+0x208>)
 800361e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 8094 	beq.w	8003752 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003632:	e08e      	b.n	8003752 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003638:	2202      	movs	r2, #2
 800363a:	409a      	lsls	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4013      	ands	r3, r2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d056      	beq.n	80036f2 <HAL_DMA_IRQHandler+0x186>
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d051      	beq.n	80036f2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10b      	bne.n	8003674 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 020a 	bic.w	r2, r2, #10
 800366a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a38      	ldr	r2, [pc, #224]	@ (800375c <HAL_DMA_IRQHandler+0x1f0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d029      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x166>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a37      	ldr	r2, [pc, #220]	@ (8003760 <HAL_DMA_IRQHandler+0x1f4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d022      	beq.n	80036ce <HAL_DMA_IRQHandler+0x162>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a35      	ldr	r2, [pc, #212]	@ (8003764 <HAL_DMA_IRQHandler+0x1f8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d01a      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x15c>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a34      	ldr	r2, [pc, #208]	@ (8003768 <HAL_DMA_IRQHandler+0x1fc>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d012      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x156>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a32      	ldr	r2, [pc, #200]	@ (800376c <HAL_DMA_IRQHandler+0x200>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00a      	beq.n	80036bc <HAL_DMA_IRQHandler+0x150>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a31      	ldr	r2, [pc, #196]	@ (8003770 <HAL_DMA_IRQHandler+0x204>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d102      	bne.n	80036b6 <HAL_DMA_IRQHandler+0x14a>
 80036b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80036b4:	e00e      	b.n	80036d4 <HAL_DMA_IRQHandler+0x168>
 80036b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036ba:	e00b      	b.n	80036d4 <HAL_DMA_IRQHandler+0x168>
 80036bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036c0:	e008      	b.n	80036d4 <HAL_DMA_IRQHandler+0x168>
 80036c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036c6:	e005      	b.n	80036d4 <HAL_DMA_IRQHandler+0x168>
 80036c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036cc:	e002      	b.n	80036d4 <HAL_DMA_IRQHandler+0x168>
 80036ce:	2320      	movs	r3, #32
 80036d0:	e000      	b.n	80036d4 <HAL_DMA_IRQHandler+0x168>
 80036d2:	2302      	movs	r3, #2
 80036d4:	4a27      	ldr	r2, [pc, #156]	@ (8003774 <HAL_DMA_IRQHandler+0x208>)
 80036d6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d034      	beq.n	8003752 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80036f0:	e02f      	b.n	8003752 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	2208      	movs	r2, #8
 80036f8:	409a      	lsls	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d028      	beq.n	8003754 <HAL_DMA_IRQHandler+0x1e8>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b00      	cmp	r3, #0
 800370a:	d023      	beq.n	8003754 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 020e 	bic.w	r2, r2, #14
 800371a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003724:	2101      	movs	r1, #1
 8003726:	fa01 f202 	lsl.w	r2, r1, r2
 800372a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003746:	2b00      	cmp	r3, #0
 8003748:	d004      	beq.n	8003754 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	4798      	blx	r3
    }
  }
  return;
 8003752:	bf00      	nop
 8003754:	bf00      	nop
}
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40020008 	.word	0x40020008
 8003760:	4002001c 	.word	0x4002001c
 8003764:	40020030 	.word	0x40020030
 8003768:	40020044 	.word	0x40020044
 800376c:	40020058 	.word	0x40020058
 8003770:	4002006c 	.word	0x4002006c
 8003774:	40020000 	.word	0x40020000

08003778 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800378e:	2101      	movs	r1, #1
 8003790:	fa01 f202 	lsl.w	r2, r1, r2
 8003794:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b10      	cmp	r3, #16
 80037a4:	d108      	bne.n	80037b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037b6:	e007      	b.n	80037c8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	60da      	str	r2, [r3, #12]
}
 80037c8:	bf00      	nop
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc80      	pop	{r7}
 80037d0:	4770      	bx	lr
	...

080037d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b08b      	sub	sp, #44	@ 0x2c
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037de:	2300      	movs	r3, #0
 80037e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80037e2:	2300      	movs	r3, #0
 80037e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037e6:	e169      	b.n	8003abc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80037e8:	2201      	movs	r2, #1
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69fa      	ldr	r2, [r7, #28]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	429a      	cmp	r2, r3
 8003802:	f040 8158 	bne.w	8003ab6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4a9a      	ldr	r2, [pc, #616]	@ (8003a74 <HAL_GPIO_Init+0x2a0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d05e      	beq.n	80038ce <HAL_GPIO_Init+0xfa>
 8003810:	4a98      	ldr	r2, [pc, #608]	@ (8003a74 <HAL_GPIO_Init+0x2a0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d875      	bhi.n	8003902 <HAL_GPIO_Init+0x12e>
 8003816:	4a98      	ldr	r2, [pc, #608]	@ (8003a78 <HAL_GPIO_Init+0x2a4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d058      	beq.n	80038ce <HAL_GPIO_Init+0xfa>
 800381c:	4a96      	ldr	r2, [pc, #600]	@ (8003a78 <HAL_GPIO_Init+0x2a4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d86f      	bhi.n	8003902 <HAL_GPIO_Init+0x12e>
 8003822:	4a96      	ldr	r2, [pc, #600]	@ (8003a7c <HAL_GPIO_Init+0x2a8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d052      	beq.n	80038ce <HAL_GPIO_Init+0xfa>
 8003828:	4a94      	ldr	r2, [pc, #592]	@ (8003a7c <HAL_GPIO_Init+0x2a8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d869      	bhi.n	8003902 <HAL_GPIO_Init+0x12e>
 800382e:	4a94      	ldr	r2, [pc, #592]	@ (8003a80 <HAL_GPIO_Init+0x2ac>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d04c      	beq.n	80038ce <HAL_GPIO_Init+0xfa>
 8003834:	4a92      	ldr	r2, [pc, #584]	@ (8003a80 <HAL_GPIO_Init+0x2ac>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d863      	bhi.n	8003902 <HAL_GPIO_Init+0x12e>
 800383a:	4a92      	ldr	r2, [pc, #584]	@ (8003a84 <HAL_GPIO_Init+0x2b0>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d046      	beq.n	80038ce <HAL_GPIO_Init+0xfa>
 8003840:	4a90      	ldr	r2, [pc, #576]	@ (8003a84 <HAL_GPIO_Init+0x2b0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d85d      	bhi.n	8003902 <HAL_GPIO_Init+0x12e>
 8003846:	2b12      	cmp	r3, #18
 8003848:	d82a      	bhi.n	80038a0 <HAL_GPIO_Init+0xcc>
 800384a:	2b12      	cmp	r3, #18
 800384c:	d859      	bhi.n	8003902 <HAL_GPIO_Init+0x12e>
 800384e:	a201      	add	r2, pc, #4	@ (adr r2, 8003854 <HAL_GPIO_Init+0x80>)
 8003850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003854:	080038cf 	.word	0x080038cf
 8003858:	080038a9 	.word	0x080038a9
 800385c:	080038bb 	.word	0x080038bb
 8003860:	080038fd 	.word	0x080038fd
 8003864:	08003903 	.word	0x08003903
 8003868:	08003903 	.word	0x08003903
 800386c:	08003903 	.word	0x08003903
 8003870:	08003903 	.word	0x08003903
 8003874:	08003903 	.word	0x08003903
 8003878:	08003903 	.word	0x08003903
 800387c:	08003903 	.word	0x08003903
 8003880:	08003903 	.word	0x08003903
 8003884:	08003903 	.word	0x08003903
 8003888:	08003903 	.word	0x08003903
 800388c:	08003903 	.word	0x08003903
 8003890:	08003903 	.word	0x08003903
 8003894:	08003903 	.word	0x08003903
 8003898:	080038b1 	.word	0x080038b1
 800389c:	080038c5 	.word	0x080038c5
 80038a0:	4a79      	ldr	r2, [pc, #484]	@ (8003a88 <HAL_GPIO_Init+0x2b4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d013      	beq.n	80038ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80038a6:	e02c      	b.n	8003902 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	623b      	str	r3, [r7, #32]
          break;
 80038ae:	e029      	b.n	8003904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	3304      	adds	r3, #4
 80038b6:	623b      	str	r3, [r7, #32]
          break;
 80038b8:	e024      	b.n	8003904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	3308      	adds	r3, #8
 80038c0:	623b      	str	r3, [r7, #32]
          break;
 80038c2:	e01f      	b.n	8003904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	330c      	adds	r3, #12
 80038ca:	623b      	str	r3, [r7, #32]
          break;
 80038cc:	e01a      	b.n	8003904 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d102      	bne.n	80038dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80038d6:	2304      	movs	r3, #4
 80038d8:	623b      	str	r3, [r7, #32]
          break;
 80038da:	e013      	b.n	8003904 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d105      	bne.n	80038f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038e4:	2308      	movs	r3, #8
 80038e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	611a      	str	r2, [r3, #16]
          break;
 80038ee:	e009      	b.n	8003904 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038f0:	2308      	movs	r3, #8
 80038f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69fa      	ldr	r2, [r7, #28]
 80038f8:	615a      	str	r2, [r3, #20]
          break;
 80038fa:	e003      	b.n	8003904 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80038fc:	2300      	movs	r3, #0
 80038fe:	623b      	str	r3, [r7, #32]
          break;
 8003900:	e000      	b.n	8003904 <HAL_GPIO_Init+0x130>
          break;
 8003902:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2bff      	cmp	r3, #255	@ 0xff
 8003908:	d801      	bhi.n	800390e <HAL_GPIO_Init+0x13a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	e001      	b.n	8003912 <HAL_GPIO_Init+0x13e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3304      	adds	r3, #4
 8003912:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2bff      	cmp	r3, #255	@ 0xff
 8003918:	d802      	bhi.n	8003920 <HAL_GPIO_Init+0x14c>
 800391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	e002      	b.n	8003926 <HAL_GPIO_Init+0x152>
 8003920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003922:	3b08      	subs	r3, #8
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	210f      	movs	r1, #15
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	fa01 f303 	lsl.w	r3, r1, r3
 8003934:	43db      	mvns	r3, r3
 8003936:	401a      	ands	r2, r3
 8003938:	6a39      	ldr	r1, [r7, #32]
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	fa01 f303 	lsl.w	r3, r1, r3
 8003940:	431a      	orrs	r2, r3
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 80b1 	beq.w	8003ab6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003954:	4b4d      	ldr	r3, [pc, #308]	@ (8003a8c <HAL_GPIO_Init+0x2b8>)
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	4a4c      	ldr	r2, [pc, #304]	@ (8003a8c <HAL_GPIO_Init+0x2b8>)
 800395a:	f043 0301 	orr.w	r3, r3, #1
 800395e:	6193      	str	r3, [r2, #24]
 8003960:	4b4a      	ldr	r3, [pc, #296]	@ (8003a8c <HAL_GPIO_Init+0x2b8>)
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800396c:	4a48      	ldr	r2, [pc, #288]	@ (8003a90 <HAL_GPIO_Init+0x2bc>)
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	089b      	lsrs	r3, r3, #2
 8003972:	3302      	adds	r3, #2
 8003974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003978:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	220f      	movs	r2, #15
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4013      	ands	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a40      	ldr	r2, [pc, #256]	@ (8003a94 <HAL_GPIO_Init+0x2c0>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d013      	beq.n	80039c0 <HAL_GPIO_Init+0x1ec>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a3f      	ldr	r2, [pc, #252]	@ (8003a98 <HAL_GPIO_Init+0x2c4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d00d      	beq.n	80039bc <HAL_GPIO_Init+0x1e8>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a3e      	ldr	r2, [pc, #248]	@ (8003a9c <HAL_GPIO_Init+0x2c8>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d007      	beq.n	80039b8 <HAL_GPIO_Init+0x1e4>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a3d      	ldr	r2, [pc, #244]	@ (8003aa0 <HAL_GPIO_Init+0x2cc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d101      	bne.n	80039b4 <HAL_GPIO_Init+0x1e0>
 80039b0:	2303      	movs	r3, #3
 80039b2:	e006      	b.n	80039c2 <HAL_GPIO_Init+0x1ee>
 80039b4:	2304      	movs	r3, #4
 80039b6:	e004      	b.n	80039c2 <HAL_GPIO_Init+0x1ee>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e002      	b.n	80039c2 <HAL_GPIO_Init+0x1ee>
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <HAL_GPIO_Init+0x1ee>
 80039c0:	2300      	movs	r3, #0
 80039c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c4:	f002 0203 	and.w	r2, r2, #3
 80039c8:	0092      	lsls	r2, r2, #2
 80039ca:	4093      	lsls	r3, r2
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80039d2:	492f      	ldr	r1, [pc, #188]	@ (8003a90 <HAL_GPIO_Init+0x2bc>)
 80039d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d6:	089b      	lsrs	r3, r3, #2
 80039d8:	3302      	adds	r3, #2
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d006      	beq.n	80039fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80039ec:	4b2d      	ldr	r3, [pc, #180]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	492c      	ldr	r1, [pc, #176]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	608b      	str	r3, [r1, #8]
 80039f8:	e006      	b.n	8003a08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80039fa:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	43db      	mvns	r3, r3
 8003a02:	4928      	ldr	r1, [pc, #160]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d006      	beq.n	8003a22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a14:	4b23      	ldr	r3, [pc, #140]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	4922      	ldr	r1, [pc, #136]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60cb      	str	r3, [r1, #12]
 8003a20:	e006      	b.n	8003a30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a22:	4b20      	ldr	r3, [pc, #128]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	491e      	ldr	r1, [pc, #120]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d006      	beq.n	8003a4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a3c:	4b19      	ldr	r3, [pc, #100]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	4918      	ldr	r1, [pc, #96]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	604b      	str	r3, [r1, #4]
 8003a48:	e006      	b.n	8003a58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a4a:	4b16      	ldr	r3, [pc, #88]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	43db      	mvns	r3, r3
 8003a52:	4914      	ldr	r1, [pc, #80]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d021      	beq.n	8003aa8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a64:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	490e      	ldr	r1, [pc, #56]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	600b      	str	r3, [r1, #0]
 8003a70:	e021      	b.n	8003ab6 <HAL_GPIO_Init+0x2e2>
 8003a72:	bf00      	nop
 8003a74:	10320000 	.word	0x10320000
 8003a78:	10310000 	.word	0x10310000
 8003a7c:	10220000 	.word	0x10220000
 8003a80:	10210000 	.word	0x10210000
 8003a84:	10120000 	.word	0x10120000
 8003a88:	10110000 	.word	0x10110000
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	40010000 	.word	0x40010000
 8003a94:	40010800 	.word	0x40010800
 8003a98:	40010c00 	.word	0x40010c00
 8003a9c:	40011000 	.word	0x40011000
 8003aa0:	40011400 	.word	0x40011400
 8003aa4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <HAL_GPIO_Init+0x304>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	4909      	ldr	r1, [pc, #36]	@ (8003ad8 <HAL_GPIO_Init+0x304>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab8:	3301      	adds	r3, #1
 8003aba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f47f ae8e 	bne.w	80037e8 <HAL_GPIO_Init+0x14>
  }
}
 8003acc:	bf00      	nop
 8003ace:	bf00      	nop
 8003ad0:	372c      	adds	r7, #44	@ 0x2c
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr
 8003ad8:	40010400 	.word	0x40010400

08003adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	807b      	strh	r3, [r7, #2]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003aec:	787b      	ldrb	r3, [r7, #1]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003af2:	887a      	ldrh	r2, [r7, #2]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003af8:	e003      	b.n	8003b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003afa:	887b      	ldrh	r3, [r7, #2]
 8003afc:	041a      	lsls	r2, r3, #16
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	611a      	str	r2, [r3, #16]
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr

08003b0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e272      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 8087 	beq.w	8003c3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b2c:	4b92      	ldr	r3, [pc, #584]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 030c 	and.w	r3, r3, #12
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d00c      	beq.n	8003b52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b38:	4b8f      	ldr	r3, [pc, #572]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 030c 	and.w	r3, r3, #12
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d112      	bne.n	8003b6a <HAL_RCC_OscConfig+0x5e>
 8003b44:	4b8c      	ldr	r3, [pc, #560]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b50:	d10b      	bne.n	8003b6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b52:	4b89      	ldr	r3, [pc, #548]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d06c      	beq.n	8003c38 <HAL_RCC_OscConfig+0x12c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d168      	bne.n	8003c38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e24c      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b72:	d106      	bne.n	8003b82 <HAL_RCC_OscConfig+0x76>
 8003b74:	4b80      	ldr	r3, [pc, #512]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a7f      	ldr	r2, [pc, #508]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	e02e      	b.n	8003be0 <HAL_RCC_OscConfig+0xd4>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x98>
 8003b8a:	4b7b      	ldr	r3, [pc, #492]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a7a      	ldr	r2, [pc, #488]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	4b78      	ldr	r3, [pc, #480]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a77      	ldr	r2, [pc, #476]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	e01d      	b.n	8003be0 <HAL_RCC_OscConfig+0xd4>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCC_OscConfig+0xbc>
 8003bae:	4b72      	ldr	r3, [pc, #456]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a71      	ldr	r2, [pc, #452]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	4b6f      	ldr	r3, [pc, #444]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a6e      	ldr	r2, [pc, #440]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	e00b      	b.n	8003be0 <HAL_RCC_OscConfig+0xd4>
 8003bc8:	4b6b      	ldr	r3, [pc, #428]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a6a      	ldr	r2, [pc, #424]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	4b68      	ldr	r3, [pc, #416]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a67      	ldr	r2, [pc, #412]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d013      	beq.n	8003c10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be8:	f7ff faca 	bl	8003180 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf0:	f7ff fac6 	bl	8003180 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	@ 0x64
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e200      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c02:	4b5d      	ldr	r3, [pc, #372]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCC_OscConfig+0xe4>
 8003c0e:	e014      	b.n	8003c3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c10:	f7ff fab6 	bl	8003180 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c18:	f7ff fab2 	bl	8003180 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	@ 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e1ec      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2a:	4b53      	ldr	r3, [pc, #332]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x10c>
 8003c36:	e000      	b.n	8003c3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d063      	beq.n	8003d0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c46:	4b4c      	ldr	r3, [pc, #304]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c52:	4b49      	ldr	r3, [pc, #292]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d11c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x18c>
 8003c5e:	4b46      	ldr	r3, [pc, #280]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d116      	bne.n	8003c98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6a:	4b43      	ldr	r3, [pc, #268]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_RCC_OscConfig+0x176>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d001      	beq.n	8003c82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e1c0      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c82:	4b3d      	ldr	r3, [pc, #244]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4939      	ldr	r1, [pc, #228]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c96:	e03a      	b.n	8003d0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d020      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca0:	4b36      	ldr	r3, [pc, #216]	@ (8003d7c <HAL_RCC_OscConfig+0x270>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca6:	f7ff fa6b 	bl	8003180 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cae:	f7ff fa67 	bl	8003180 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e1a1      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f0      	beq.n	8003cae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ccc:	4b2a      	ldr	r3, [pc, #168]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4927      	ldr	r1, [pc, #156]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	600b      	str	r3, [r1, #0]
 8003ce0:	e015      	b.n	8003d0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ce2:	4b26      	ldr	r3, [pc, #152]	@ (8003d7c <HAL_RCC_OscConfig+0x270>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce8:	f7ff fa4a 	bl	8003180 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cf0:	f7ff fa46 	bl	8003180 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e180      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d02:	4b1d      	ldr	r3, [pc, #116]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d03a      	beq.n	8003d90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d019      	beq.n	8003d56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d22:	4b17      	ldr	r3, [pc, #92]	@ (8003d80 <HAL_RCC_OscConfig+0x274>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d28:	f7ff fa2a 	bl	8003180 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d30:	f7ff fa26 	bl	8003180 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e160      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d42:	4b0d      	ldr	r3, [pc, #52]	@ (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d4e:	2001      	movs	r0, #1
 8003d50:	f000 fa9c 	bl	800428c <RCC_Delay>
 8003d54:	e01c      	b.n	8003d90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d56:	4b0a      	ldr	r3, [pc, #40]	@ (8003d80 <HAL_RCC_OscConfig+0x274>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5c:	f7ff fa10 	bl	8003180 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d62:	e00f      	b.n	8003d84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d64:	f7ff fa0c 	bl	8003180 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d908      	bls.n	8003d84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e146      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
 8003d76:	bf00      	nop
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	42420000 	.word	0x42420000
 8003d80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d84:	4b92      	ldr	r3, [pc, #584]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e9      	bne.n	8003d64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 80a6 	beq.w	8003eea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da2:	4b8b      	ldr	r3, [pc, #556]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10d      	bne.n	8003dca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dae:	4b88      	ldr	r3, [pc, #544]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	4a87      	ldr	r2, [pc, #540]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003db8:	61d3      	str	r3, [r2, #28]
 8003dba:	4b85      	ldr	r3, [pc, #532]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dc2:	60bb      	str	r3, [r7, #8]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dca:	4b82      	ldr	r3, [pc, #520]	@ (8003fd4 <HAL_RCC_OscConfig+0x4c8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d118      	bne.n	8003e08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dd6:	4b7f      	ldr	r3, [pc, #508]	@ (8003fd4 <HAL_RCC_OscConfig+0x4c8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a7e      	ldr	r2, [pc, #504]	@ (8003fd4 <HAL_RCC_OscConfig+0x4c8>)
 8003ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003de2:	f7ff f9cd 	bl	8003180 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dea:	f7ff f9c9 	bl	8003180 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b64      	cmp	r3, #100	@ 0x64
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e103      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfc:	4b75      	ldr	r3, [pc, #468]	@ (8003fd4 <HAL_RCC_OscConfig+0x4c8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0f0      	beq.n	8003dea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d106      	bne.n	8003e1e <HAL_RCC_OscConfig+0x312>
 8003e10:	4b6f      	ldr	r3, [pc, #444]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	4a6e      	ldr	r2, [pc, #440]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	6213      	str	r3, [r2, #32]
 8003e1c:	e02d      	b.n	8003e7a <HAL_RCC_OscConfig+0x36e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10c      	bne.n	8003e40 <HAL_RCC_OscConfig+0x334>
 8003e26:	4b6a      	ldr	r3, [pc, #424]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	4a69      	ldr	r2, [pc, #420]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	6213      	str	r3, [r2, #32]
 8003e32:	4b67      	ldr	r3, [pc, #412]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	4a66      	ldr	r2, [pc, #408]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	f023 0304 	bic.w	r3, r3, #4
 8003e3c:	6213      	str	r3, [r2, #32]
 8003e3e:	e01c      	b.n	8003e7a <HAL_RCC_OscConfig+0x36e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	2b05      	cmp	r3, #5
 8003e46:	d10c      	bne.n	8003e62 <HAL_RCC_OscConfig+0x356>
 8003e48:	4b61      	ldr	r3, [pc, #388]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	4a60      	ldr	r2, [pc, #384]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e4e:	f043 0304 	orr.w	r3, r3, #4
 8003e52:	6213      	str	r3, [r2, #32]
 8003e54:	4b5e      	ldr	r3, [pc, #376]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	4a5d      	ldr	r2, [pc, #372]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	6213      	str	r3, [r2, #32]
 8003e60:	e00b      	b.n	8003e7a <HAL_RCC_OscConfig+0x36e>
 8003e62:	4b5b      	ldr	r3, [pc, #364]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	4a5a      	ldr	r2, [pc, #360]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e68:	f023 0301 	bic.w	r3, r3, #1
 8003e6c:	6213      	str	r3, [r2, #32]
 8003e6e:	4b58      	ldr	r3, [pc, #352]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	4a57      	ldr	r2, [pc, #348]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003e74:	f023 0304 	bic.w	r3, r3, #4
 8003e78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d015      	beq.n	8003eae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e82:	f7ff f97d 	bl	8003180 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e88:	e00a      	b.n	8003ea0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8a:	f7ff f979 	bl	8003180 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e0b1      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea0:	4b4b      	ldr	r3, [pc, #300]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0ee      	beq.n	8003e8a <HAL_RCC_OscConfig+0x37e>
 8003eac:	e014      	b.n	8003ed8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eae:	f7ff f967 	bl	8003180 <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb4:	e00a      	b.n	8003ecc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb6:	f7ff f963 	bl	8003180 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e09b      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ecc:	4b40      	ldr	r3, [pc, #256]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1ee      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d105      	bne.n	8003eea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ede:	4b3c      	ldr	r3, [pc, #240]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	4a3b      	ldr	r2, [pc, #236]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003ee4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ee8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 8087 	beq.w	8004002 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ef4:	4b36      	ldr	r3, [pc, #216]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 030c 	and.w	r3, r3, #12
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d061      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d146      	bne.n	8003f96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f08:	4b33      	ldr	r3, [pc, #204]	@ (8003fd8 <HAL_RCC_OscConfig+0x4cc>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0e:	f7ff f937 	bl	8003180 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f16:	f7ff f933 	bl	8003180 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e06d      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f28:	4b29      	ldr	r3, [pc, #164]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f0      	bne.n	8003f16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f3c:	d108      	bne.n	8003f50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f3e:	4b24      	ldr	r3, [pc, #144]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	4921      	ldr	r1, [pc, #132]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f50:	4b1f      	ldr	r3, [pc, #124]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a19      	ldr	r1, [r3, #32]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f60:	430b      	orrs	r3, r1
 8003f62:	491b      	ldr	r1, [pc, #108]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f68:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd8 <HAL_RCC_OscConfig+0x4cc>)
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6e:	f7ff f907 	bl	8003180 <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f76:	f7ff f903 	bl	8003180 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e03d      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f88:	4b11      	ldr	r3, [pc, #68]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0f0      	beq.n	8003f76 <HAL_RCC_OscConfig+0x46a>
 8003f94:	e035      	b.n	8004002 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f96:	4b10      	ldr	r3, [pc, #64]	@ (8003fd8 <HAL_RCC_OscConfig+0x4cc>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9c:	f7ff f8f0 	bl	8003180 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa4:	f7ff f8ec 	bl	8003180 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e026      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fb6:	4b06      	ldr	r3, [pc, #24]	@ (8003fd0 <HAL_RCC_OscConfig+0x4c4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x498>
 8003fc2:	e01e      	b.n	8004002 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d107      	bne.n	8003fdc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e019      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40007000 	.word	0x40007000
 8003fd8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800400c <HAL_RCC_OscConfig+0x500>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d106      	bne.n	8003ffe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d001      	beq.n	8004002 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40021000 	.word	0x40021000

08004010 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0d0      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004024:	4b6a      	ldr	r3, [pc, #424]	@ (80041d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d910      	bls.n	8004054 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004032:	4b67      	ldr	r3, [pc, #412]	@ (80041d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f023 0207 	bic.w	r2, r3, #7
 800403a:	4965      	ldr	r1, [pc, #404]	@ (80041d0 <HAL_RCC_ClockConfig+0x1c0>)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	4313      	orrs	r3, r2
 8004040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004042:	4b63      	ldr	r3, [pc, #396]	@ (80041d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	429a      	cmp	r2, r3
 800404e:	d001      	beq.n	8004054 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0b8      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d020      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800406c:	4b59      	ldr	r3, [pc, #356]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	4a58      	ldr	r2, [pc, #352]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004072:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004076:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004084:	4b53      	ldr	r3, [pc, #332]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	4a52      	ldr	r2, [pc, #328]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 800408a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800408e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004090:	4b50      	ldr	r3, [pc, #320]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	494d      	ldr	r1, [pc, #308]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d040      	beq.n	8004130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d107      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b6:	4b47      	ldr	r3, [pc, #284]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d115      	bne.n	80040ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e07f      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d107      	bne.n	80040de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ce:	4b41      	ldr	r3, [pc, #260]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d109      	bne.n	80040ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e073      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040de:	4b3d      	ldr	r3, [pc, #244]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e06b      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ee:	4b39      	ldr	r3, [pc, #228]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f023 0203 	bic.w	r2, r3, #3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	4936      	ldr	r1, [pc, #216]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004100:	f7ff f83e 	bl	8003180 <HAL_GetTick>
 8004104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004106:	e00a      	b.n	800411e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004108:	f7ff f83a 	bl	8003180 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004116:	4293      	cmp	r3, r2
 8004118:	d901      	bls.n	800411e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e053      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411e:	4b2d      	ldr	r3, [pc, #180]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f003 020c 	and.w	r2, r3, #12
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	429a      	cmp	r2, r3
 800412e:	d1eb      	bne.n	8004108 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004130:	4b27      	ldr	r3, [pc, #156]	@ (80041d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d210      	bcs.n	8004160 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413e:	4b24      	ldr	r3, [pc, #144]	@ (80041d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 0207 	bic.w	r2, r3, #7
 8004146:	4922      	ldr	r1, [pc, #136]	@ (80041d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	4313      	orrs	r3, r2
 800414c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800414e:	4b20      	ldr	r3, [pc, #128]	@ (80041d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d001      	beq.n	8004160 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e032      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800416c:	4b19      	ldr	r3, [pc, #100]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4916      	ldr	r1, [pc, #88]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 800417a:	4313      	orrs	r3, r2
 800417c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b00      	cmp	r3, #0
 8004188:	d009      	beq.n	800419e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800418a:	4b12      	ldr	r3, [pc, #72]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	490e      	ldr	r1, [pc, #56]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 800419a:	4313      	orrs	r3, r2
 800419c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800419e:	f000 f821 	bl	80041e4 <HAL_RCC_GetSysClockFreq>
 80041a2:	4602      	mov	r2, r0
 80041a4:	4b0b      	ldr	r3, [pc, #44]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	091b      	lsrs	r3, r3, #4
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	490a      	ldr	r1, [pc, #40]	@ (80041d8 <HAL_RCC_ClockConfig+0x1c8>)
 80041b0:	5ccb      	ldrb	r3, [r1, r3]
 80041b2:	fa22 f303 	lsr.w	r3, r2, r3
 80041b6:	4a09      	ldr	r2, [pc, #36]	@ (80041dc <HAL_RCC_ClockConfig+0x1cc>)
 80041b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041ba:	4b09      	ldr	r3, [pc, #36]	@ (80041e0 <HAL_RCC_ClockConfig+0x1d0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fe ff9c 	bl	80030fc <HAL_InitTick>

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40022000 	.word	0x40022000
 80041d4:	40021000 	.word	0x40021000
 80041d8:	0800785c 	.word	0x0800785c
 80041dc:	20000024 	.word	0x20000024
 80041e0:	20000028 	.word	0x20000028

080041e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	2300      	movs	r3, #0
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
 80041f6:	2300      	movs	r3, #0
 80041f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x94>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	2b04      	cmp	r3, #4
 800420c:	d002      	beq.n	8004214 <HAL_RCC_GetSysClockFreq+0x30>
 800420e:	2b08      	cmp	r3, #8
 8004210:	d003      	beq.n	800421a <HAL_RCC_GetSysClockFreq+0x36>
 8004212:	e027      	b.n	8004264 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004214:	4b19      	ldr	r3, [pc, #100]	@ (800427c <HAL_RCC_GetSysClockFreq+0x98>)
 8004216:	613b      	str	r3, [r7, #16]
      break;
 8004218:	e027      	b.n	800426a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	0c9b      	lsrs	r3, r3, #18
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	4a17      	ldr	r2, [pc, #92]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004224:	5cd3      	ldrb	r3, [r2, r3]
 8004226:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d010      	beq.n	8004254 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004232:	4b11      	ldr	r3, [pc, #68]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x94>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	0c5b      	lsrs	r3, r3, #17
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	4a11      	ldr	r2, [pc, #68]	@ (8004284 <HAL_RCC_GetSysClockFreq+0xa0>)
 800423e:	5cd3      	ldrb	r3, [r2, r3]
 8004240:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a0d      	ldr	r2, [pc, #52]	@ (800427c <HAL_RCC_GetSysClockFreq+0x98>)
 8004246:	fb03 f202 	mul.w	r2, r3, r2
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	e004      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a0c      	ldr	r2, [pc, #48]	@ (8004288 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004258:	fb02 f303 	mul.w	r3, r2, r3
 800425c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	613b      	str	r3, [r7, #16]
      break;
 8004262:	e002      	b.n	800426a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004264:	4b05      	ldr	r3, [pc, #20]	@ (800427c <HAL_RCC_GetSysClockFreq+0x98>)
 8004266:	613b      	str	r3, [r7, #16]
      break;
 8004268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800426a:	693b      	ldr	r3, [r7, #16]
}
 800426c:	4618      	mov	r0, r3
 800426e:	371c      	adds	r7, #28
 8004270:	46bd      	mov	sp, r7
 8004272:	bc80      	pop	{r7}
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40021000 	.word	0x40021000
 800427c:	007a1200 	.word	0x007a1200
 8004280:	0800786c 	.word	0x0800786c
 8004284:	0800787c 	.word	0x0800787c
 8004288:	003d0900 	.word	0x003d0900

0800428c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004294:	4b0a      	ldr	r3, [pc, #40]	@ (80042c0 <RCC_Delay+0x34>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a0a      	ldr	r2, [pc, #40]	@ (80042c4 <RCC_Delay+0x38>)
 800429a:	fba2 2303 	umull	r2, r3, r2, r3
 800429e:	0a5b      	lsrs	r3, r3, #9
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	fb02 f303 	mul.w	r3, r2, r3
 80042a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042a8:	bf00      	nop
  }
  while (Delay --);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	1e5a      	subs	r2, r3, #1
 80042ae:	60fa      	str	r2, [r7, #12]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1f9      	bne.n	80042a8 <RCC_Delay+0x1c>
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr
 80042c0:	20000024 	.word	0x20000024
 80042c4:	10624dd3 	.word	0x10624dd3

080042c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e076      	b.n	80043c8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d108      	bne.n	80042f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042ea:	d009      	beq.n	8004300 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	61da      	str	r2, [r3, #28]
 80042f2:	e005      	b.n	8004300 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7fe fcd0 	bl	8002cc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004336:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004384:	ea42 0103 	orr.w	r1, r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	0c1a      	lsrs	r2, r3, #16
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f002 0204 	and.w	r2, r2, #4
 80043a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	69da      	ldr	r2, [r3, #28]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	603b      	str	r3, [r7, #0]
 80043dc:	4613      	mov	r3, r2
 80043de:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043e0:	f7fe fece 	bl	8003180 <HAL_GetTick>
 80043e4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80043e6:	88fb      	ldrh	r3, [r7, #6]
 80043e8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d001      	beq.n	80043fa <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80043f6:	2302      	movs	r3, #2
 80043f8:	e12a      	b.n	8004650 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <HAL_SPI_Transmit+0x36>
 8004400:	88fb      	ldrh	r3, [r7, #6]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e122      	b.n	8004650 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_SPI_Transmit+0x48>
 8004414:	2302      	movs	r3, #2
 8004416:	e11b      	b.n	8004650 <HAL_SPI_Transmit+0x280>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2203      	movs	r2, #3
 8004424:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	88fa      	ldrh	r2, [r7, #6]
 8004438:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	88fa      	ldrh	r2, [r7, #6]
 800443e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004466:	d10f      	bne.n	8004488 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004476:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004486:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004492:	2b40      	cmp	r3, #64	@ 0x40
 8004494:	d007      	beq.n	80044a6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044ae:	d152      	bne.n	8004556 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <HAL_SPI_Transmit+0xee>
 80044b8:	8b7b      	ldrh	r3, [r7, #26]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d145      	bne.n	800454a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c2:	881a      	ldrh	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ce:	1c9a      	adds	r2, r3, #2
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044e2:	e032      	b.n	800454a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d112      	bne.n	8004518 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f6:	881a      	ldrh	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004502:	1c9a      	adds	r2, r3, #2
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004516:	e018      	b.n	800454a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004518:	f7fe fe32 	bl	8003180 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d803      	bhi.n	8004530 <HAL_SPI_Transmit+0x160>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452e:	d102      	bne.n	8004536 <HAL_SPI_Transmit+0x166>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d109      	bne.n	800454a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e082      	b.n	8004650 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1c7      	bne.n	80044e4 <HAL_SPI_Transmit+0x114>
 8004554:	e053      	b.n	80045fe <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <HAL_SPI_Transmit+0x194>
 800455e:	8b7b      	ldrh	r3, [r7, #26]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d147      	bne.n	80045f4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	330c      	adds	r3, #12
 800456e:	7812      	ldrb	r2, [r2, #0]
 8004570:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b01      	subs	r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800458a:	e033      	b.n	80045f4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b02      	cmp	r3, #2
 8004598:	d113      	bne.n	80045c2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	330c      	adds	r3, #12
 80045a4:	7812      	ldrb	r2, [r2, #0]
 80045a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045c0:	e018      	b.n	80045f4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045c2:	f7fe fddd 	bl	8003180 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d803      	bhi.n	80045da <HAL_SPI_Transmit+0x20a>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d8:	d102      	bne.n	80045e0 <HAL_SPI_Transmit+0x210>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d109      	bne.n	80045f4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e02d      	b.n	8004650 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1c6      	bne.n	800458c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045fe:	69fa      	ldr	r2, [r7, #28]
 8004600:	6839      	ldr	r1, [r7, #0]
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 f9f6 	bl	80049f4 <SPI_EndRxTxTransaction>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2220      	movs	r2, #32
 8004612:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800464e:	2300      	movs	r3, #0
  }
}
 8004650:	4618      	mov	r0, r3
 8004652:	3720      	adds	r7, #32
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	4613      	mov	r3, r2
 8004664:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b01      	cmp	r3, #1
 8004670:	d001      	beq.n	8004676 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004672:	2302      	movs	r3, #2
 8004674:	e097      	b.n	80047a6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <HAL_SPI_Transmit_DMA+0x2a>
 800467c:	88fb      	ldrh	r3, [r7, #6]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e08f      	b.n	80047a6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_SPI_Transmit_DMA+0x3c>
 8004690:	2302      	movs	r3, #2
 8004692:	e088      	b.n	80047a6 <HAL_SPI_Transmit_DMA+0x14e>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2203      	movs	r2, #3
 80046a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	88fa      	ldrh	r2, [r7, #6]
 80046b4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	88fa      	ldrh	r2, [r7, #6]
 80046ba:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046e2:	d10f      	bne.n	8004704 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004702:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004708:	4a29      	ldr	r2, [pc, #164]	@ (80047b0 <HAL_SPI_Transmit_DMA+0x158>)
 800470a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004710:	4a28      	ldr	r2, [pc, #160]	@ (80047b4 <HAL_SPI_Transmit_DMA+0x15c>)
 8004712:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004718:	4a27      	ldr	r2, [pc, #156]	@ (80047b8 <HAL_SPI_Transmit_DMA+0x160>)
 800471a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004720:	2200      	movs	r2, #0
 8004722:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472c:	4619      	mov	r1, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	330c      	adds	r3, #12
 8004734:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800473a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800473c:	f7fe feb6 	bl	80034ac <HAL_DMA_Start_IT>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00b      	beq.n	800475e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474a:	f043 0210 	orr.w	r2, r3, #16
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e023      	b.n	80047a6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004768:	2b40      	cmp	r3, #64	@ 0x40
 800476a:	d007      	beq.n	800477c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800477a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0220 	orr.w	r2, r2, #32
 8004792:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0202 	orr.w	r2, r2, #2
 80047a2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	08004887 	.word	0x08004887
 80047b4:	080047e1 	.word	0x080047e1
 80047b8:	080048a3 	.word	0x080048a3

080047bc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr

080047ce <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr

080047e0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047ee:	f7fe fcc7 	bl	8003180 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d03b      	beq.n	800487a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0220 	bic.w	r2, r2, #32
 8004810:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0202 	bic.w	r2, r2, #2
 8004820:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	2164      	movs	r1, #100	@ 0x64
 8004826:	6978      	ldr	r0, [r7, #20]
 8004828:	f000 f8e4 	bl	80049f4 <SPI_EndRxTxTransaction>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d005      	beq.n	800483e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004836:	f043 0220 	orr.w	r2, r3, #32
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10a      	bne.n	800485c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	2200      	movs	r2, #0
 8004860:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004872:	6978      	ldr	r0, [r7, #20]
 8004874:	f7ff ffab 	bl	80047ce <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004878:	e002      	b.n	8004880 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800487a:	6978      	ldr	r0, [r7, #20]
 800487c:	f7fe f892 	bl	80029a4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b084      	sub	sp, #16
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004892:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f7ff ff91 	bl	80047bc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800489a:	bf00      	nop
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b084      	sub	sp, #16
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0203 	bic.w	r2, r2, #3
 80048be:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c4:	f043 0210 	orr.w	r2, r3, #16
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f7ff ff7a 	bl	80047ce <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80048da:	bf00      	nop
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	4613      	mov	r3, r2
 80048f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048f4:	f7fe fc44 	bl	8003180 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fc:	1a9b      	subs	r3, r3, r2
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	4413      	add	r3, r2
 8004902:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004904:	f7fe fc3c 	bl	8003180 <HAL_GetTick>
 8004908:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800490a:	4b39      	ldr	r3, [pc, #228]	@ (80049f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	015b      	lsls	r3, r3, #5
 8004910:	0d1b      	lsrs	r3, r3, #20
 8004912:	69fa      	ldr	r2, [r7, #28]
 8004914:	fb02 f303 	mul.w	r3, r2, r3
 8004918:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800491a:	e054      	b.n	80049c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004922:	d050      	beq.n	80049c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004924:	f7fe fc2c 	bl	8003180 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	69fa      	ldr	r2, [r7, #28]
 8004930:	429a      	cmp	r2, r3
 8004932:	d902      	bls.n	800493a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d13d      	bne.n	80049b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004948:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004952:	d111      	bne.n	8004978 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800495c:	d004      	beq.n	8004968 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004966:	d107      	bne.n	8004978 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004976:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004980:	d10f      	bne.n	80049a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e017      	b.n	80049e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4013      	ands	r3, r2
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	bf0c      	ite	eq
 80049d6:	2301      	moveq	r3, #1
 80049d8:	2300      	movne	r3, #0
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	461a      	mov	r2, r3
 80049de:	79fb      	ldrb	r3, [r7, #7]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d19b      	bne.n	800491c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3720      	adds	r7, #32
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000024 	.word	0x20000024

080049f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2201      	movs	r2, #1
 8004a08:	2102      	movs	r1, #2
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f7ff ff6a 	bl	80048e4 <SPI_WaitFlagStateUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1a:	f043 0220 	orr.w	r2, r3, #32
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e013      	b.n	8004a4e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2180      	movs	r1, #128	@ 0x80
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f7ff ff57 	bl	80048e4 <SPI_WaitFlagStateUntilTimeout>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d007      	beq.n	8004a4c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a40:	f043 0220 	orr.w	r2, r3, #32
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e000      	b.n	8004a4e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <rand>:
 8004a58:	4b16      	ldr	r3, [pc, #88]	@ (8004ab4 <rand+0x5c>)
 8004a5a:	b510      	push	{r4, lr}
 8004a5c:	681c      	ldr	r4, [r3, #0]
 8004a5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004a60:	b9b3      	cbnz	r3, 8004a90 <rand+0x38>
 8004a62:	2018      	movs	r0, #24
 8004a64:	f000 fa40 	bl	8004ee8 <malloc>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	6320      	str	r0, [r4, #48]	@ 0x30
 8004a6c:	b920      	cbnz	r0, 8004a78 <rand+0x20>
 8004a6e:	2152      	movs	r1, #82	@ 0x52
 8004a70:	4b11      	ldr	r3, [pc, #68]	@ (8004ab8 <rand+0x60>)
 8004a72:	4812      	ldr	r0, [pc, #72]	@ (8004abc <rand+0x64>)
 8004a74:	f000 f9d2 	bl	8004e1c <__assert_func>
 8004a78:	4911      	ldr	r1, [pc, #68]	@ (8004ac0 <rand+0x68>)
 8004a7a:	4b12      	ldr	r3, [pc, #72]	@ (8004ac4 <rand+0x6c>)
 8004a7c:	e9c0 1300 	strd	r1, r3, [r0]
 8004a80:	4b11      	ldr	r3, [pc, #68]	@ (8004ac8 <rand+0x70>)
 8004a82:	2100      	movs	r1, #0
 8004a84:	6083      	str	r3, [r0, #8]
 8004a86:	230b      	movs	r3, #11
 8004a88:	8183      	strh	r3, [r0, #12]
 8004a8a:	2001      	movs	r0, #1
 8004a8c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004a90:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004a92:	480e      	ldr	r0, [pc, #56]	@ (8004acc <rand+0x74>)
 8004a94:	690b      	ldr	r3, [r1, #16]
 8004a96:	694c      	ldr	r4, [r1, #20]
 8004a98:	4358      	muls	r0, r3
 8004a9a:	4a0d      	ldr	r2, [pc, #52]	@ (8004ad0 <rand+0x78>)
 8004a9c:	fb02 0004 	mla	r0, r2, r4, r0
 8004aa0:	fba3 3202 	umull	r3, r2, r3, r2
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	eb40 0002 	adc.w	r0, r0, r2
 8004aaa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004aae:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004ab2:	bd10      	pop	{r4, pc}
 8004ab4:	2000003c 	.word	0x2000003c
 8004ab8:	0800787e 	.word	0x0800787e
 8004abc:	08007895 	.word	0x08007895
 8004ac0:	abcd330e 	.word	0xabcd330e
 8004ac4:	e66d1234 	.word	0xe66d1234
 8004ac8:	0005deec 	.word	0x0005deec
 8004acc:	5851f42d 	.word	0x5851f42d
 8004ad0:	4c957f2d 	.word	0x4c957f2d

08004ad4 <std>:
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	b510      	push	{r4, lr}
 8004ad8:	4604      	mov	r4, r0
 8004ada:	e9c0 3300 	strd	r3, r3, [r0]
 8004ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ae2:	6083      	str	r3, [r0, #8]
 8004ae4:	8181      	strh	r1, [r0, #12]
 8004ae6:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ae8:	81c2      	strh	r2, [r0, #14]
 8004aea:	6183      	str	r3, [r0, #24]
 8004aec:	4619      	mov	r1, r3
 8004aee:	2208      	movs	r2, #8
 8004af0:	305c      	adds	r0, #92	@ 0x5c
 8004af2:	f000 f916 	bl	8004d22 <memset>
 8004af6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b2c <std+0x58>)
 8004af8:	6224      	str	r4, [r4, #32]
 8004afa:	6263      	str	r3, [r4, #36]	@ 0x24
 8004afc:	4b0c      	ldr	r3, [pc, #48]	@ (8004b30 <std+0x5c>)
 8004afe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b00:	4b0c      	ldr	r3, [pc, #48]	@ (8004b34 <std+0x60>)
 8004b02:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b04:	4b0c      	ldr	r3, [pc, #48]	@ (8004b38 <std+0x64>)
 8004b06:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b08:	4b0c      	ldr	r3, [pc, #48]	@ (8004b3c <std+0x68>)
 8004b0a:	429c      	cmp	r4, r3
 8004b0c:	d006      	beq.n	8004b1c <std+0x48>
 8004b0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b12:	4294      	cmp	r4, r2
 8004b14:	d002      	beq.n	8004b1c <std+0x48>
 8004b16:	33d0      	adds	r3, #208	@ 0xd0
 8004b18:	429c      	cmp	r4, r3
 8004b1a:	d105      	bne.n	8004b28 <std+0x54>
 8004b1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b24:	f000 b976 	b.w	8004e14 <__retarget_lock_init_recursive>
 8004b28:	bd10      	pop	{r4, pc}
 8004b2a:	bf00      	nop
 8004b2c:	08004c9d 	.word	0x08004c9d
 8004b30:	08004cbf 	.word	0x08004cbf
 8004b34:	08004cf7 	.word	0x08004cf7
 8004b38:	08004d1b 	.word	0x08004d1b
 8004b3c:	200028d0 	.word	0x200028d0

08004b40 <stdio_exit_handler>:
 8004b40:	4a02      	ldr	r2, [pc, #8]	@ (8004b4c <stdio_exit_handler+0xc>)
 8004b42:	4903      	ldr	r1, [pc, #12]	@ (8004b50 <stdio_exit_handler+0x10>)
 8004b44:	4803      	ldr	r0, [pc, #12]	@ (8004b54 <stdio_exit_handler+0x14>)
 8004b46:	f000 b869 	b.w	8004c1c <_fwalk_sglue>
 8004b4a:	bf00      	nop
 8004b4c:	20000030 	.word	0x20000030
 8004b50:	08005725 	.word	0x08005725
 8004b54:	20000040 	.word	0x20000040

08004b58 <cleanup_stdio>:
 8004b58:	6841      	ldr	r1, [r0, #4]
 8004b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8004b8c <cleanup_stdio+0x34>)
 8004b5c:	b510      	push	{r4, lr}
 8004b5e:	4299      	cmp	r1, r3
 8004b60:	4604      	mov	r4, r0
 8004b62:	d001      	beq.n	8004b68 <cleanup_stdio+0x10>
 8004b64:	f000 fdde 	bl	8005724 <_fflush_r>
 8004b68:	68a1      	ldr	r1, [r4, #8]
 8004b6a:	4b09      	ldr	r3, [pc, #36]	@ (8004b90 <cleanup_stdio+0x38>)
 8004b6c:	4299      	cmp	r1, r3
 8004b6e:	d002      	beq.n	8004b76 <cleanup_stdio+0x1e>
 8004b70:	4620      	mov	r0, r4
 8004b72:	f000 fdd7 	bl	8005724 <_fflush_r>
 8004b76:	68e1      	ldr	r1, [r4, #12]
 8004b78:	4b06      	ldr	r3, [pc, #24]	@ (8004b94 <cleanup_stdio+0x3c>)
 8004b7a:	4299      	cmp	r1, r3
 8004b7c:	d004      	beq.n	8004b88 <cleanup_stdio+0x30>
 8004b7e:	4620      	mov	r0, r4
 8004b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b84:	f000 bdce 	b.w	8005724 <_fflush_r>
 8004b88:	bd10      	pop	{r4, pc}
 8004b8a:	bf00      	nop
 8004b8c:	200028d0 	.word	0x200028d0
 8004b90:	20002938 	.word	0x20002938
 8004b94:	200029a0 	.word	0x200029a0

08004b98 <global_stdio_init.part.0>:
 8004b98:	b510      	push	{r4, lr}
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc8 <global_stdio_init.part.0+0x30>)
 8004b9c:	4c0b      	ldr	r4, [pc, #44]	@ (8004bcc <global_stdio_init.part.0+0x34>)
 8004b9e:	4a0c      	ldr	r2, [pc, #48]	@ (8004bd0 <global_stdio_init.part.0+0x38>)
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	2104      	movs	r1, #4
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f7ff ff94 	bl	8004ad4 <std>
 8004bac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	2109      	movs	r1, #9
 8004bb4:	f7ff ff8e 	bl	8004ad4 <std>
 8004bb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc2:	2112      	movs	r1, #18
 8004bc4:	f7ff bf86 	b.w	8004ad4 <std>
 8004bc8:	20002a08 	.word	0x20002a08
 8004bcc:	200028d0 	.word	0x200028d0
 8004bd0:	08004b41 	.word	0x08004b41

08004bd4 <__sfp_lock_acquire>:
 8004bd4:	4801      	ldr	r0, [pc, #4]	@ (8004bdc <__sfp_lock_acquire+0x8>)
 8004bd6:	f000 b91e 	b.w	8004e16 <__retarget_lock_acquire_recursive>
 8004bda:	bf00      	nop
 8004bdc:	20002a11 	.word	0x20002a11

08004be0 <__sfp_lock_release>:
 8004be0:	4801      	ldr	r0, [pc, #4]	@ (8004be8 <__sfp_lock_release+0x8>)
 8004be2:	f000 b919 	b.w	8004e18 <__retarget_lock_release_recursive>
 8004be6:	bf00      	nop
 8004be8:	20002a11 	.word	0x20002a11

08004bec <__sinit>:
 8004bec:	b510      	push	{r4, lr}
 8004bee:	4604      	mov	r4, r0
 8004bf0:	f7ff fff0 	bl	8004bd4 <__sfp_lock_acquire>
 8004bf4:	6a23      	ldr	r3, [r4, #32]
 8004bf6:	b11b      	cbz	r3, 8004c00 <__sinit+0x14>
 8004bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bfc:	f7ff bff0 	b.w	8004be0 <__sfp_lock_release>
 8004c00:	4b04      	ldr	r3, [pc, #16]	@ (8004c14 <__sinit+0x28>)
 8004c02:	6223      	str	r3, [r4, #32]
 8004c04:	4b04      	ldr	r3, [pc, #16]	@ (8004c18 <__sinit+0x2c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1f5      	bne.n	8004bf8 <__sinit+0xc>
 8004c0c:	f7ff ffc4 	bl	8004b98 <global_stdio_init.part.0>
 8004c10:	e7f2      	b.n	8004bf8 <__sinit+0xc>
 8004c12:	bf00      	nop
 8004c14:	08004b59 	.word	0x08004b59
 8004c18:	20002a08 	.word	0x20002a08

08004c1c <_fwalk_sglue>:
 8004c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c20:	4607      	mov	r7, r0
 8004c22:	4688      	mov	r8, r1
 8004c24:	4614      	mov	r4, r2
 8004c26:	2600      	movs	r6, #0
 8004c28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c2c:	f1b9 0901 	subs.w	r9, r9, #1
 8004c30:	d505      	bpl.n	8004c3e <_fwalk_sglue+0x22>
 8004c32:	6824      	ldr	r4, [r4, #0]
 8004c34:	2c00      	cmp	r4, #0
 8004c36:	d1f7      	bne.n	8004c28 <_fwalk_sglue+0xc>
 8004c38:	4630      	mov	r0, r6
 8004c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c3e:	89ab      	ldrh	r3, [r5, #12]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d907      	bls.n	8004c54 <_fwalk_sglue+0x38>
 8004c44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	d003      	beq.n	8004c54 <_fwalk_sglue+0x38>
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	4638      	mov	r0, r7
 8004c50:	47c0      	blx	r8
 8004c52:	4306      	orrs	r6, r0
 8004c54:	3568      	adds	r5, #104	@ 0x68
 8004c56:	e7e9      	b.n	8004c2c <_fwalk_sglue+0x10>

08004c58 <siprintf>:
 8004c58:	b40e      	push	{r1, r2, r3}
 8004c5a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004c5e:	b510      	push	{r4, lr}
 8004c60:	2400      	movs	r4, #0
 8004c62:	b09d      	sub	sp, #116	@ 0x74
 8004c64:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004c66:	9002      	str	r0, [sp, #8]
 8004c68:	9006      	str	r0, [sp, #24]
 8004c6a:	9107      	str	r1, [sp, #28]
 8004c6c:	9104      	str	r1, [sp, #16]
 8004c6e:	4809      	ldr	r0, [pc, #36]	@ (8004c94 <siprintf+0x3c>)
 8004c70:	4909      	ldr	r1, [pc, #36]	@ (8004c98 <siprintf+0x40>)
 8004c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c76:	9105      	str	r1, [sp, #20]
 8004c78:	6800      	ldr	r0, [r0, #0]
 8004c7a:	a902      	add	r1, sp, #8
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004c80:	f000 fa44 	bl	800510c <_svfiprintf_r>
 8004c84:	9b02      	ldr	r3, [sp, #8]
 8004c86:	701c      	strb	r4, [r3, #0]
 8004c88:	b01d      	add	sp, #116	@ 0x74
 8004c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c8e:	b003      	add	sp, #12
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	2000003c 	.word	0x2000003c
 8004c98:	ffff0208 	.word	0xffff0208

08004c9c <__sread>:
 8004c9c:	b510      	push	{r4, lr}
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca4:	f000 f868 	bl	8004d78 <_read_r>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	bfab      	itete	ge
 8004cac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004cae:	89a3      	ldrhlt	r3, [r4, #12]
 8004cb0:	181b      	addge	r3, r3, r0
 8004cb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004cb6:	bfac      	ite	ge
 8004cb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004cba:	81a3      	strhlt	r3, [r4, #12]
 8004cbc:	bd10      	pop	{r4, pc}

08004cbe <__swrite>:
 8004cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc2:	461f      	mov	r7, r3
 8004cc4:	898b      	ldrh	r3, [r1, #12]
 8004cc6:	4605      	mov	r5, r0
 8004cc8:	05db      	lsls	r3, r3, #23
 8004cca:	460c      	mov	r4, r1
 8004ccc:	4616      	mov	r6, r2
 8004cce:	d505      	bpl.n	8004cdc <__swrite+0x1e>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd8:	f000 f83c 	bl	8004d54 <_lseek_r>
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	4632      	mov	r2, r6
 8004ce0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ce4:	81a3      	strh	r3, [r4, #12]
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	463b      	mov	r3, r7
 8004cea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf2:	f000 b853 	b.w	8004d9c <_write_r>

08004cf6 <__sseek>:
 8004cf6:	b510      	push	{r4, lr}
 8004cf8:	460c      	mov	r4, r1
 8004cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cfe:	f000 f829 	bl	8004d54 <_lseek_r>
 8004d02:	1c43      	adds	r3, r0, #1
 8004d04:	89a3      	ldrh	r3, [r4, #12]
 8004d06:	bf15      	itete	ne
 8004d08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d12:	81a3      	strheq	r3, [r4, #12]
 8004d14:	bf18      	it	ne
 8004d16:	81a3      	strhne	r3, [r4, #12]
 8004d18:	bd10      	pop	{r4, pc}

08004d1a <__sclose>:
 8004d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d1e:	f000 b809 	b.w	8004d34 <_close_r>

08004d22 <memset>:
 8004d22:	4603      	mov	r3, r0
 8004d24:	4402      	add	r2, r0
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d100      	bne.n	8004d2c <memset+0xa>
 8004d2a:	4770      	bx	lr
 8004d2c:	f803 1b01 	strb.w	r1, [r3], #1
 8004d30:	e7f9      	b.n	8004d26 <memset+0x4>
	...

08004d34 <_close_r>:
 8004d34:	b538      	push	{r3, r4, r5, lr}
 8004d36:	2300      	movs	r3, #0
 8004d38:	4d05      	ldr	r5, [pc, #20]	@ (8004d50 <_close_r+0x1c>)
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	4608      	mov	r0, r1
 8004d3e:	602b      	str	r3, [r5, #0]
 8004d40:	f7fe f933 	bl	8002faa <_close>
 8004d44:	1c43      	adds	r3, r0, #1
 8004d46:	d102      	bne.n	8004d4e <_close_r+0x1a>
 8004d48:	682b      	ldr	r3, [r5, #0]
 8004d4a:	b103      	cbz	r3, 8004d4e <_close_r+0x1a>
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	bd38      	pop	{r3, r4, r5, pc}
 8004d50:	20002a0c 	.word	0x20002a0c

08004d54 <_lseek_r>:
 8004d54:	b538      	push	{r3, r4, r5, lr}
 8004d56:	4604      	mov	r4, r0
 8004d58:	4608      	mov	r0, r1
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	4d05      	ldr	r5, [pc, #20]	@ (8004d74 <_lseek_r+0x20>)
 8004d60:	602a      	str	r2, [r5, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	f7fe f945 	bl	8002ff2 <_lseek>
 8004d68:	1c43      	adds	r3, r0, #1
 8004d6a:	d102      	bne.n	8004d72 <_lseek_r+0x1e>
 8004d6c:	682b      	ldr	r3, [r5, #0]
 8004d6e:	b103      	cbz	r3, 8004d72 <_lseek_r+0x1e>
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	bd38      	pop	{r3, r4, r5, pc}
 8004d74:	20002a0c 	.word	0x20002a0c

08004d78 <_read_r>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	4608      	mov	r0, r1
 8004d7e:	4611      	mov	r1, r2
 8004d80:	2200      	movs	r2, #0
 8004d82:	4d05      	ldr	r5, [pc, #20]	@ (8004d98 <_read_r+0x20>)
 8004d84:	602a      	str	r2, [r5, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	f7fe f8d6 	bl	8002f38 <_read>
 8004d8c:	1c43      	adds	r3, r0, #1
 8004d8e:	d102      	bne.n	8004d96 <_read_r+0x1e>
 8004d90:	682b      	ldr	r3, [r5, #0]
 8004d92:	b103      	cbz	r3, 8004d96 <_read_r+0x1e>
 8004d94:	6023      	str	r3, [r4, #0]
 8004d96:	bd38      	pop	{r3, r4, r5, pc}
 8004d98:	20002a0c 	.word	0x20002a0c

08004d9c <_write_r>:
 8004d9c:	b538      	push	{r3, r4, r5, lr}
 8004d9e:	4604      	mov	r4, r0
 8004da0:	4608      	mov	r0, r1
 8004da2:	4611      	mov	r1, r2
 8004da4:	2200      	movs	r2, #0
 8004da6:	4d05      	ldr	r5, [pc, #20]	@ (8004dbc <_write_r+0x20>)
 8004da8:	602a      	str	r2, [r5, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	f7fe f8e1 	bl	8002f72 <_write>
 8004db0:	1c43      	adds	r3, r0, #1
 8004db2:	d102      	bne.n	8004dba <_write_r+0x1e>
 8004db4:	682b      	ldr	r3, [r5, #0]
 8004db6:	b103      	cbz	r3, 8004dba <_write_r+0x1e>
 8004db8:	6023      	str	r3, [r4, #0]
 8004dba:	bd38      	pop	{r3, r4, r5, pc}
 8004dbc:	20002a0c 	.word	0x20002a0c

08004dc0 <__errno>:
 8004dc0:	4b01      	ldr	r3, [pc, #4]	@ (8004dc8 <__errno+0x8>)
 8004dc2:	6818      	ldr	r0, [r3, #0]
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	2000003c 	.word	0x2000003c

08004dcc <__libc_init_array>:
 8004dcc:	b570      	push	{r4, r5, r6, lr}
 8004dce:	2600      	movs	r6, #0
 8004dd0:	4d0c      	ldr	r5, [pc, #48]	@ (8004e04 <__libc_init_array+0x38>)
 8004dd2:	4c0d      	ldr	r4, [pc, #52]	@ (8004e08 <__libc_init_array+0x3c>)
 8004dd4:	1b64      	subs	r4, r4, r5
 8004dd6:	10a4      	asrs	r4, r4, #2
 8004dd8:	42a6      	cmp	r6, r4
 8004dda:	d109      	bne.n	8004df0 <__libc_init_array+0x24>
 8004ddc:	f001 fe82 	bl	8006ae4 <_init>
 8004de0:	2600      	movs	r6, #0
 8004de2:	4d0a      	ldr	r5, [pc, #40]	@ (8004e0c <__libc_init_array+0x40>)
 8004de4:	4c0a      	ldr	r4, [pc, #40]	@ (8004e10 <__libc_init_array+0x44>)
 8004de6:	1b64      	subs	r4, r4, r5
 8004de8:	10a4      	asrs	r4, r4, #2
 8004dea:	42a6      	cmp	r6, r4
 8004dec:	d105      	bne.n	8004dfa <__libc_init_array+0x2e>
 8004dee:	bd70      	pop	{r4, r5, r6, pc}
 8004df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df4:	4798      	blx	r3
 8004df6:	3601      	adds	r6, #1
 8004df8:	e7ee      	b.n	8004dd8 <__libc_init_array+0xc>
 8004dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dfe:	4798      	blx	r3
 8004e00:	3601      	adds	r6, #1
 8004e02:	e7f2      	b.n	8004dea <__libc_init_array+0x1e>
 8004e04:	08007d34 	.word	0x08007d34
 8004e08:	08007d34 	.word	0x08007d34
 8004e0c:	08007d34 	.word	0x08007d34
 8004e10:	08007d38 	.word	0x08007d38

08004e14 <__retarget_lock_init_recursive>:
 8004e14:	4770      	bx	lr

08004e16 <__retarget_lock_acquire_recursive>:
 8004e16:	4770      	bx	lr

08004e18 <__retarget_lock_release_recursive>:
 8004e18:	4770      	bx	lr
	...

08004e1c <__assert_func>:
 8004e1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e1e:	4614      	mov	r4, r2
 8004e20:	461a      	mov	r2, r3
 8004e22:	4b09      	ldr	r3, [pc, #36]	@ (8004e48 <__assert_func+0x2c>)
 8004e24:	4605      	mov	r5, r0
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68d8      	ldr	r0, [r3, #12]
 8004e2a:	b14c      	cbz	r4, 8004e40 <__assert_func+0x24>
 8004e2c:	4b07      	ldr	r3, [pc, #28]	@ (8004e4c <__assert_func+0x30>)
 8004e2e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004e32:	9100      	str	r1, [sp, #0]
 8004e34:	462b      	mov	r3, r5
 8004e36:	4906      	ldr	r1, [pc, #24]	@ (8004e50 <__assert_func+0x34>)
 8004e38:	f000 fc9c 	bl	8005774 <fiprintf>
 8004e3c:	f000 fcf2 	bl	8005824 <abort>
 8004e40:	4b04      	ldr	r3, [pc, #16]	@ (8004e54 <__assert_func+0x38>)
 8004e42:	461c      	mov	r4, r3
 8004e44:	e7f3      	b.n	8004e2e <__assert_func+0x12>
 8004e46:	bf00      	nop
 8004e48:	2000003c 	.word	0x2000003c
 8004e4c:	080078ed 	.word	0x080078ed
 8004e50:	080078fa 	.word	0x080078fa
 8004e54:	08007928 	.word	0x08007928

08004e58 <_free_r>:
 8004e58:	b538      	push	{r3, r4, r5, lr}
 8004e5a:	4605      	mov	r5, r0
 8004e5c:	2900      	cmp	r1, #0
 8004e5e:	d040      	beq.n	8004ee2 <_free_r+0x8a>
 8004e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e64:	1f0c      	subs	r4, r1, #4
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	bfb8      	it	lt
 8004e6a:	18e4      	addlt	r4, r4, r3
 8004e6c:	f000 f8e6 	bl	800503c <__malloc_lock>
 8004e70:	4a1c      	ldr	r2, [pc, #112]	@ (8004ee4 <_free_r+0x8c>)
 8004e72:	6813      	ldr	r3, [r2, #0]
 8004e74:	b933      	cbnz	r3, 8004e84 <_free_r+0x2c>
 8004e76:	6063      	str	r3, [r4, #4]
 8004e78:	6014      	str	r4, [r2, #0]
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e80:	f000 b8e2 	b.w	8005048 <__malloc_unlock>
 8004e84:	42a3      	cmp	r3, r4
 8004e86:	d908      	bls.n	8004e9a <_free_r+0x42>
 8004e88:	6820      	ldr	r0, [r4, #0]
 8004e8a:	1821      	adds	r1, r4, r0
 8004e8c:	428b      	cmp	r3, r1
 8004e8e:	bf01      	itttt	eq
 8004e90:	6819      	ldreq	r1, [r3, #0]
 8004e92:	685b      	ldreq	r3, [r3, #4]
 8004e94:	1809      	addeq	r1, r1, r0
 8004e96:	6021      	streq	r1, [r4, #0]
 8004e98:	e7ed      	b.n	8004e76 <_free_r+0x1e>
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	b10b      	cbz	r3, 8004ea4 <_free_r+0x4c>
 8004ea0:	42a3      	cmp	r3, r4
 8004ea2:	d9fa      	bls.n	8004e9a <_free_r+0x42>
 8004ea4:	6811      	ldr	r1, [r2, #0]
 8004ea6:	1850      	adds	r0, r2, r1
 8004ea8:	42a0      	cmp	r0, r4
 8004eaa:	d10b      	bne.n	8004ec4 <_free_r+0x6c>
 8004eac:	6820      	ldr	r0, [r4, #0]
 8004eae:	4401      	add	r1, r0
 8004eb0:	1850      	adds	r0, r2, r1
 8004eb2:	4283      	cmp	r3, r0
 8004eb4:	6011      	str	r1, [r2, #0]
 8004eb6:	d1e0      	bne.n	8004e7a <_free_r+0x22>
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	4408      	add	r0, r1
 8004ebe:	6010      	str	r0, [r2, #0]
 8004ec0:	6053      	str	r3, [r2, #4]
 8004ec2:	e7da      	b.n	8004e7a <_free_r+0x22>
 8004ec4:	d902      	bls.n	8004ecc <_free_r+0x74>
 8004ec6:	230c      	movs	r3, #12
 8004ec8:	602b      	str	r3, [r5, #0]
 8004eca:	e7d6      	b.n	8004e7a <_free_r+0x22>
 8004ecc:	6820      	ldr	r0, [r4, #0]
 8004ece:	1821      	adds	r1, r4, r0
 8004ed0:	428b      	cmp	r3, r1
 8004ed2:	bf01      	itttt	eq
 8004ed4:	6819      	ldreq	r1, [r3, #0]
 8004ed6:	685b      	ldreq	r3, [r3, #4]
 8004ed8:	1809      	addeq	r1, r1, r0
 8004eda:	6021      	streq	r1, [r4, #0]
 8004edc:	6063      	str	r3, [r4, #4]
 8004ede:	6054      	str	r4, [r2, #4]
 8004ee0:	e7cb      	b.n	8004e7a <_free_r+0x22>
 8004ee2:	bd38      	pop	{r3, r4, r5, pc}
 8004ee4:	20002a18 	.word	0x20002a18

08004ee8 <malloc>:
 8004ee8:	4b02      	ldr	r3, [pc, #8]	@ (8004ef4 <malloc+0xc>)
 8004eea:	4601      	mov	r1, r0
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	f000 b825 	b.w	8004f3c <_malloc_r>
 8004ef2:	bf00      	nop
 8004ef4:	2000003c 	.word	0x2000003c

08004ef8 <sbrk_aligned>:
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	4e0f      	ldr	r6, [pc, #60]	@ (8004f38 <sbrk_aligned+0x40>)
 8004efc:	460c      	mov	r4, r1
 8004efe:	6831      	ldr	r1, [r6, #0]
 8004f00:	4605      	mov	r5, r0
 8004f02:	b911      	cbnz	r1, 8004f0a <sbrk_aligned+0x12>
 8004f04:	f000 fc62 	bl	80057cc <_sbrk_r>
 8004f08:	6030      	str	r0, [r6, #0]
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	f000 fc5d 	bl	80057cc <_sbrk_r>
 8004f12:	1c43      	adds	r3, r0, #1
 8004f14:	d103      	bne.n	8004f1e <sbrk_aligned+0x26>
 8004f16:	f04f 34ff 	mov.w	r4, #4294967295
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	bd70      	pop	{r4, r5, r6, pc}
 8004f1e:	1cc4      	adds	r4, r0, #3
 8004f20:	f024 0403 	bic.w	r4, r4, #3
 8004f24:	42a0      	cmp	r0, r4
 8004f26:	d0f8      	beq.n	8004f1a <sbrk_aligned+0x22>
 8004f28:	1a21      	subs	r1, r4, r0
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	f000 fc4e 	bl	80057cc <_sbrk_r>
 8004f30:	3001      	adds	r0, #1
 8004f32:	d1f2      	bne.n	8004f1a <sbrk_aligned+0x22>
 8004f34:	e7ef      	b.n	8004f16 <sbrk_aligned+0x1e>
 8004f36:	bf00      	nop
 8004f38:	20002a14 	.word	0x20002a14

08004f3c <_malloc_r>:
 8004f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f40:	1ccd      	adds	r5, r1, #3
 8004f42:	f025 0503 	bic.w	r5, r5, #3
 8004f46:	3508      	adds	r5, #8
 8004f48:	2d0c      	cmp	r5, #12
 8004f4a:	bf38      	it	cc
 8004f4c:	250c      	movcc	r5, #12
 8004f4e:	2d00      	cmp	r5, #0
 8004f50:	4606      	mov	r6, r0
 8004f52:	db01      	blt.n	8004f58 <_malloc_r+0x1c>
 8004f54:	42a9      	cmp	r1, r5
 8004f56:	d904      	bls.n	8004f62 <_malloc_r+0x26>
 8004f58:	230c      	movs	r3, #12
 8004f5a:	6033      	str	r3, [r6, #0]
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005038 <_malloc_r+0xfc>
 8004f66:	f000 f869 	bl	800503c <__malloc_lock>
 8004f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8004f6e:	461c      	mov	r4, r3
 8004f70:	bb44      	cbnz	r4, 8004fc4 <_malloc_r+0x88>
 8004f72:	4629      	mov	r1, r5
 8004f74:	4630      	mov	r0, r6
 8004f76:	f7ff ffbf 	bl	8004ef8 <sbrk_aligned>
 8004f7a:	1c43      	adds	r3, r0, #1
 8004f7c:	4604      	mov	r4, r0
 8004f7e:	d158      	bne.n	8005032 <_malloc_r+0xf6>
 8004f80:	f8d8 4000 	ldr.w	r4, [r8]
 8004f84:	4627      	mov	r7, r4
 8004f86:	2f00      	cmp	r7, #0
 8004f88:	d143      	bne.n	8005012 <_malloc_r+0xd6>
 8004f8a:	2c00      	cmp	r4, #0
 8004f8c:	d04b      	beq.n	8005026 <_malloc_r+0xea>
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	4639      	mov	r1, r7
 8004f92:	4630      	mov	r0, r6
 8004f94:	eb04 0903 	add.w	r9, r4, r3
 8004f98:	f000 fc18 	bl	80057cc <_sbrk_r>
 8004f9c:	4581      	cmp	r9, r0
 8004f9e:	d142      	bne.n	8005026 <_malloc_r+0xea>
 8004fa0:	6821      	ldr	r1, [r4, #0]
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	1a6d      	subs	r5, r5, r1
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	f7ff ffa6 	bl	8004ef8 <sbrk_aligned>
 8004fac:	3001      	adds	r0, #1
 8004fae:	d03a      	beq.n	8005026 <_malloc_r+0xea>
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	442b      	add	r3, r5
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	f8d8 3000 	ldr.w	r3, [r8]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	bb62      	cbnz	r2, 8005018 <_malloc_r+0xdc>
 8004fbe:	f8c8 7000 	str.w	r7, [r8]
 8004fc2:	e00f      	b.n	8004fe4 <_malloc_r+0xa8>
 8004fc4:	6822      	ldr	r2, [r4, #0]
 8004fc6:	1b52      	subs	r2, r2, r5
 8004fc8:	d420      	bmi.n	800500c <_malloc_r+0xd0>
 8004fca:	2a0b      	cmp	r2, #11
 8004fcc:	d917      	bls.n	8004ffe <_malloc_r+0xc2>
 8004fce:	1961      	adds	r1, r4, r5
 8004fd0:	42a3      	cmp	r3, r4
 8004fd2:	6025      	str	r5, [r4, #0]
 8004fd4:	bf18      	it	ne
 8004fd6:	6059      	strne	r1, [r3, #4]
 8004fd8:	6863      	ldr	r3, [r4, #4]
 8004fda:	bf08      	it	eq
 8004fdc:	f8c8 1000 	streq.w	r1, [r8]
 8004fe0:	5162      	str	r2, [r4, r5]
 8004fe2:	604b      	str	r3, [r1, #4]
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	f000 f82f 	bl	8005048 <__malloc_unlock>
 8004fea:	f104 000b 	add.w	r0, r4, #11
 8004fee:	1d23      	adds	r3, r4, #4
 8004ff0:	f020 0007 	bic.w	r0, r0, #7
 8004ff4:	1ac2      	subs	r2, r0, r3
 8004ff6:	bf1c      	itt	ne
 8004ff8:	1a1b      	subne	r3, r3, r0
 8004ffa:	50a3      	strne	r3, [r4, r2]
 8004ffc:	e7af      	b.n	8004f5e <_malloc_r+0x22>
 8004ffe:	6862      	ldr	r2, [r4, #4]
 8005000:	42a3      	cmp	r3, r4
 8005002:	bf0c      	ite	eq
 8005004:	f8c8 2000 	streq.w	r2, [r8]
 8005008:	605a      	strne	r2, [r3, #4]
 800500a:	e7eb      	b.n	8004fe4 <_malloc_r+0xa8>
 800500c:	4623      	mov	r3, r4
 800500e:	6864      	ldr	r4, [r4, #4]
 8005010:	e7ae      	b.n	8004f70 <_malloc_r+0x34>
 8005012:	463c      	mov	r4, r7
 8005014:	687f      	ldr	r7, [r7, #4]
 8005016:	e7b6      	b.n	8004f86 <_malloc_r+0x4a>
 8005018:	461a      	mov	r2, r3
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	42a3      	cmp	r3, r4
 800501e:	d1fb      	bne.n	8005018 <_malloc_r+0xdc>
 8005020:	2300      	movs	r3, #0
 8005022:	6053      	str	r3, [r2, #4]
 8005024:	e7de      	b.n	8004fe4 <_malloc_r+0xa8>
 8005026:	230c      	movs	r3, #12
 8005028:	4630      	mov	r0, r6
 800502a:	6033      	str	r3, [r6, #0]
 800502c:	f000 f80c 	bl	8005048 <__malloc_unlock>
 8005030:	e794      	b.n	8004f5c <_malloc_r+0x20>
 8005032:	6005      	str	r5, [r0, #0]
 8005034:	e7d6      	b.n	8004fe4 <_malloc_r+0xa8>
 8005036:	bf00      	nop
 8005038:	20002a18 	.word	0x20002a18

0800503c <__malloc_lock>:
 800503c:	4801      	ldr	r0, [pc, #4]	@ (8005044 <__malloc_lock+0x8>)
 800503e:	f7ff beea 	b.w	8004e16 <__retarget_lock_acquire_recursive>
 8005042:	bf00      	nop
 8005044:	20002a10 	.word	0x20002a10

08005048 <__malloc_unlock>:
 8005048:	4801      	ldr	r0, [pc, #4]	@ (8005050 <__malloc_unlock+0x8>)
 800504a:	f7ff bee5 	b.w	8004e18 <__retarget_lock_release_recursive>
 800504e:	bf00      	nop
 8005050:	20002a10 	.word	0x20002a10

08005054 <__ssputs_r>:
 8005054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005058:	461f      	mov	r7, r3
 800505a:	688e      	ldr	r6, [r1, #8]
 800505c:	4682      	mov	sl, r0
 800505e:	42be      	cmp	r6, r7
 8005060:	460c      	mov	r4, r1
 8005062:	4690      	mov	r8, r2
 8005064:	680b      	ldr	r3, [r1, #0]
 8005066:	d82d      	bhi.n	80050c4 <__ssputs_r+0x70>
 8005068:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800506c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005070:	d026      	beq.n	80050c0 <__ssputs_r+0x6c>
 8005072:	6965      	ldr	r5, [r4, #20]
 8005074:	6909      	ldr	r1, [r1, #16]
 8005076:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800507a:	eba3 0901 	sub.w	r9, r3, r1
 800507e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005082:	1c7b      	adds	r3, r7, #1
 8005084:	444b      	add	r3, r9
 8005086:	106d      	asrs	r5, r5, #1
 8005088:	429d      	cmp	r5, r3
 800508a:	bf38      	it	cc
 800508c:	461d      	movcc	r5, r3
 800508e:	0553      	lsls	r3, r2, #21
 8005090:	d527      	bpl.n	80050e2 <__ssputs_r+0x8e>
 8005092:	4629      	mov	r1, r5
 8005094:	f7ff ff52 	bl	8004f3c <_malloc_r>
 8005098:	4606      	mov	r6, r0
 800509a:	b360      	cbz	r0, 80050f6 <__ssputs_r+0xa2>
 800509c:	464a      	mov	r2, r9
 800509e:	6921      	ldr	r1, [r4, #16]
 80050a0:	f000 fbb2 	bl	8005808 <memcpy>
 80050a4:	89a3      	ldrh	r3, [r4, #12]
 80050a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80050aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ae:	81a3      	strh	r3, [r4, #12]
 80050b0:	6126      	str	r6, [r4, #16]
 80050b2:	444e      	add	r6, r9
 80050b4:	6026      	str	r6, [r4, #0]
 80050b6:	463e      	mov	r6, r7
 80050b8:	6165      	str	r5, [r4, #20]
 80050ba:	eba5 0509 	sub.w	r5, r5, r9
 80050be:	60a5      	str	r5, [r4, #8]
 80050c0:	42be      	cmp	r6, r7
 80050c2:	d900      	bls.n	80050c6 <__ssputs_r+0x72>
 80050c4:	463e      	mov	r6, r7
 80050c6:	4632      	mov	r2, r6
 80050c8:	4641      	mov	r1, r8
 80050ca:	6820      	ldr	r0, [r4, #0]
 80050cc:	f000 fb64 	bl	8005798 <memmove>
 80050d0:	2000      	movs	r0, #0
 80050d2:	68a3      	ldr	r3, [r4, #8]
 80050d4:	1b9b      	subs	r3, r3, r6
 80050d6:	60a3      	str	r3, [r4, #8]
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	4433      	add	r3, r6
 80050dc:	6023      	str	r3, [r4, #0]
 80050de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e2:	462a      	mov	r2, r5
 80050e4:	f000 fba5 	bl	8005832 <_realloc_r>
 80050e8:	4606      	mov	r6, r0
 80050ea:	2800      	cmp	r0, #0
 80050ec:	d1e0      	bne.n	80050b0 <__ssputs_r+0x5c>
 80050ee:	4650      	mov	r0, sl
 80050f0:	6921      	ldr	r1, [r4, #16]
 80050f2:	f7ff feb1 	bl	8004e58 <_free_r>
 80050f6:	230c      	movs	r3, #12
 80050f8:	f8ca 3000 	str.w	r3, [sl]
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005106:	81a3      	strh	r3, [r4, #12]
 8005108:	e7e9      	b.n	80050de <__ssputs_r+0x8a>
	...

0800510c <_svfiprintf_r>:
 800510c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005110:	4698      	mov	r8, r3
 8005112:	898b      	ldrh	r3, [r1, #12]
 8005114:	4607      	mov	r7, r0
 8005116:	061b      	lsls	r3, r3, #24
 8005118:	460d      	mov	r5, r1
 800511a:	4614      	mov	r4, r2
 800511c:	b09d      	sub	sp, #116	@ 0x74
 800511e:	d510      	bpl.n	8005142 <_svfiprintf_r+0x36>
 8005120:	690b      	ldr	r3, [r1, #16]
 8005122:	b973      	cbnz	r3, 8005142 <_svfiprintf_r+0x36>
 8005124:	2140      	movs	r1, #64	@ 0x40
 8005126:	f7ff ff09 	bl	8004f3c <_malloc_r>
 800512a:	6028      	str	r0, [r5, #0]
 800512c:	6128      	str	r0, [r5, #16]
 800512e:	b930      	cbnz	r0, 800513e <_svfiprintf_r+0x32>
 8005130:	230c      	movs	r3, #12
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	f04f 30ff 	mov.w	r0, #4294967295
 8005138:	b01d      	add	sp, #116	@ 0x74
 800513a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513e:	2340      	movs	r3, #64	@ 0x40
 8005140:	616b      	str	r3, [r5, #20]
 8005142:	2300      	movs	r3, #0
 8005144:	9309      	str	r3, [sp, #36]	@ 0x24
 8005146:	2320      	movs	r3, #32
 8005148:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800514c:	2330      	movs	r3, #48	@ 0x30
 800514e:	f04f 0901 	mov.w	r9, #1
 8005152:	f8cd 800c 	str.w	r8, [sp, #12]
 8005156:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80052f0 <_svfiprintf_r+0x1e4>
 800515a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800515e:	4623      	mov	r3, r4
 8005160:	469a      	mov	sl, r3
 8005162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005166:	b10a      	cbz	r2, 800516c <_svfiprintf_r+0x60>
 8005168:	2a25      	cmp	r2, #37	@ 0x25
 800516a:	d1f9      	bne.n	8005160 <_svfiprintf_r+0x54>
 800516c:	ebba 0b04 	subs.w	fp, sl, r4
 8005170:	d00b      	beq.n	800518a <_svfiprintf_r+0x7e>
 8005172:	465b      	mov	r3, fp
 8005174:	4622      	mov	r2, r4
 8005176:	4629      	mov	r1, r5
 8005178:	4638      	mov	r0, r7
 800517a:	f7ff ff6b 	bl	8005054 <__ssputs_r>
 800517e:	3001      	adds	r0, #1
 8005180:	f000 80a7 	beq.w	80052d2 <_svfiprintf_r+0x1c6>
 8005184:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005186:	445a      	add	r2, fp
 8005188:	9209      	str	r2, [sp, #36]	@ 0x24
 800518a:	f89a 3000 	ldrb.w	r3, [sl]
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 809f 	beq.w	80052d2 <_svfiprintf_r+0x1c6>
 8005194:	2300      	movs	r3, #0
 8005196:	f04f 32ff 	mov.w	r2, #4294967295
 800519a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800519e:	f10a 0a01 	add.w	sl, sl, #1
 80051a2:	9304      	str	r3, [sp, #16]
 80051a4:	9307      	str	r3, [sp, #28]
 80051a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80051ac:	4654      	mov	r4, sl
 80051ae:	2205      	movs	r2, #5
 80051b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051b4:	484e      	ldr	r0, [pc, #312]	@ (80052f0 <_svfiprintf_r+0x1e4>)
 80051b6:	f000 fb19 	bl	80057ec <memchr>
 80051ba:	9a04      	ldr	r2, [sp, #16]
 80051bc:	b9d8      	cbnz	r0, 80051f6 <_svfiprintf_r+0xea>
 80051be:	06d0      	lsls	r0, r2, #27
 80051c0:	bf44      	itt	mi
 80051c2:	2320      	movmi	r3, #32
 80051c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051c8:	0711      	lsls	r1, r2, #28
 80051ca:	bf44      	itt	mi
 80051cc:	232b      	movmi	r3, #43	@ 0x2b
 80051ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051d2:	f89a 3000 	ldrb.w	r3, [sl]
 80051d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80051d8:	d015      	beq.n	8005206 <_svfiprintf_r+0xfa>
 80051da:	4654      	mov	r4, sl
 80051dc:	2000      	movs	r0, #0
 80051de:	f04f 0c0a 	mov.w	ip, #10
 80051e2:	9a07      	ldr	r2, [sp, #28]
 80051e4:	4621      	mov	r1, r4
 80051e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051ea:	3b30      	subs	r3, #48	@ 0x30
 80051ec:	2b09      	cmp	r3, #9
 80051ee:	d94b      	bls.n	8005288 <_svfiprintf_r+0x17c>
 80051f0:	b1b0      	cbz	r0, 8005220 <_svfiprintf_r+0x114>
 80051f2:	9207      	str	r2, [sp, #28]
 80051f4:	e014      	b.n	8005220 <_svfiprintf_r+0x114>
 80051f6:	eba0 0308 	sub.w	r3, r0, r8
 80051fa:	fa09 f303 	lsl.w	r3, r9, r3
 80051fe:	4313      	orrs	r3, r2
 8005200:	46a2      	mov	sl, r4
 8005202:	9304      	str	r3, [sp, #16]
 8005204:	e7d2      	b.n	80051ac <_svfiprintf_r+0xa0>
 8005206:	9b03      	ldr	r3, [sp, #12]
 8005208:	1d19      	adds	r1, r3, #4
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	9103      	str	r1, [sp, #12]
 800520e:	2b00      	cmp	r3, #0
 8005210:	bfbb      	ittet	lt
 8005212:	425b      	neglt	r3, r3
 8005214:	f042 0202 	orrlt.w	r2, r2, #2
 8005218:	9307      	strge	r3, [sp, #28]
 800521a:	9307      	strlt	r3, [sp, #28]
 800521c:	bfb8      	it	lt
 800521e:	9204      	strlt	r2, [sp, #16]
 8005220:	7823      	ldrb	r3, [r4, #0]
 8005222:	2b2e      	cmp	r3, #46	@ 0x2e
 8005224:	d10a      	bne.n	800523c <_svfiprintf_r+0x130>
 8005226:	7863      	ldrb	r3, [r4, #1]
 8005228:	2b2a      	cmp	r3, #42	@ 0x2a
 800522a:	d132      	bne.n	8005292 <_svfiprintf_r+0x186>
 800522c:	9b03      	ldr	r3, [sp, #12]
 800522e:	3402      	adds	r4, #2
 8005230:	1d1a      	adds	r2, r3, #4
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	9203      	str	r2, [sp, #12]
 8005236:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800523a:	9305      	str	r3, [sp, #20]
 800523c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80052f4 <_svfiprintf_r+0x1e8>
 8005240:	2203      	movs	r2, #3
 8005242:	4650      	mov	r0, sl
 8005244:	7821      	ldrb	r1, [r4, #0]
 8005246:	f000 fad1 	bl	80057ec <memchr>
 800524a:	b138      	cbz	r0, 800525c <_svfiprintf_r+0x150>
 800524c:	2240      	movs	r2, #64	@ 0x40
 800524e:	9b04      	ldr	r3, [sp, #16]
 8005250:	eba0 000a 	sub.w	r0, r0, sl
 8005254:	4082      	lsls	r2, r0
 8005256:	4313      	orrs	r3, r2
 8005258:	3401      	adds	r4, #1
 800525a:	9304      	str	r3, [sp, #16]
 800525c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005260:	2206      	movs	r2, #6
 8005262:	4825      	ldr	r0, [pc, #148]	@ (80052f8 <_svfiprintf_r+0x1ec>)
 8005264:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005268:	f000 fac0 	bl	80057ec <memchr>
 800526c:	2800      	cmp	r0, #0
 800526e:	d036      	beq.n	80052de <_svfiprintf_r+0x1d2>
 8005270:	4b22      	ldr	r3, [pc, #136]	@ (80052fc <_svfiprintf_r+0x1f0>)
 8005272:	bb1b      	cbnz	r3, 80052bc <_svfiprintf_r+0x1b0>
 8005274:	9b03      	ldr	r3, [sp, #12]
 8005276:	3307      	adds	r3, #7
 8005278:	f023 0307 	bic.w	r3, r3, #7
 800527c:	3308      	adds	r3, #8
 800527e:	9303      	str	r3, [sp, #12]
 8005280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005282:	4433      	add	r3, r6
 8005284:	9309      	str	r3, [sp, #36]	@ 0x24
 8005286:	e76a      	b.n	800515e <_svfiprintf_r+0x52>
 8005288:	460c      	mov	r4, r1
 800528a:	2001      	movs	r0, #1
 800528c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005290:	e7a8      	b.n	80051e4 <_svfiprintf_r+0xd8>
 8005292:	2300      	movs	r3, #0
 8005294:	f04f 0c0a 	mov.w	ip, #10
 8005298:	4619      	mov	r1, r3
 800529a:	3401      	adds	r4, #1
 800529c:	9305      	str	r3, [sp, #20]
 800529e:	4620      	mov	r0, r4
 80052a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052a4:	3a30      	subs	r2, #48	@ 0x30
 80052a6:	2a09      	cmp	r2, #9
 80052a8:	d903      	bls.n	80052b2 <_svfiprintf_r+0x1a6>
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0c6      	beq.n	800523c <_svfiprintf_r+0x130>
 80052ae:	9105      	str	r1, [sp, #20]
 80052b0:	e7c4      	b.n	800523c <_svfiprintf_r+0x130>
 80052b2:	4604      	mov	r4, r0
 80052b4:	2301      	movs	r3, #1
 80052b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80052ba:	e7f0      	b.n	800529e <_svfiprintf_r+0x192>
 80052bc:	ab03      	add	r3, sp, #12
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	462a      	mov	r2, r5
 80052c2:	4638      	mov	r0, r7
 80052c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005300 <_svfiprintf_r+0x1f4>)
 80052c6:	a904      	add	r1, sp, #16
 80052c8:	f3af 8000 	nop.w
 80052cc:	1c42      	adds	r2, r0, #1
 80052ce:	4606      	mov	r6, r0
 80052d0:	d1d6      	bne.n	8005280 <_svfiprintf_r+0x174>
 80052d2:	89ab      	ldrh	r3, [r5, #12]
 80052d4:	065b      	lsls	r3, r3, #25
 80052d6:	f53f af2d 	bmi.w	8005134 <_svfiprintf_r+0x28>
 80052da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052dc:	e72c      	b.n	8005138 <_svfiprintf_r+0x2c>
 80052de:	ab03      	add	r3, sp, #12
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	462a      	mov	r2, r5
 80052e4:	4638      	mov	r0, r7
 80052e6:	4b06      	ldr	r3, [pc, #24]	@ (8005300 <_svfiprintf_r+0x1f4>)
 80052e8:	a904      	add	r1, sp, #16
 80052ea:	f000 f87d 	bl	80053e8 <_printf_i>
 80052ee:	e7ed      	b.n	80052cc <_svfiprintf_r+0x1c0>
 80052f0:	08007929 	.word	0x08007929
 80052f4:	0800792f 	.word	0x0800792f
 80052f8:	08007933 	.word	0x08007933
 80052fc:	00000000 	.word	0x00000000
 8005300:	08005055 	.word	0x08005055

08005304 <_printf_common>:
 8005304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005308:	4616      	mov	r6, r2
 800530a:	4698      	mov	r8, r3
 800530c:	688a      	ldr	r2, [r1, #8]
 800530e:	690b      	ldr	r3, [r1, #16]
 8005310:	4607      	mov	r7, r0
 8005312:	4293      	cmp	r3, r2
 8005314:	bfb8      	it	lt
 8005316:	4613      	movlt	r3, r2
 8005318:	6033      	str	r3, [r6, #0]
 800531a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800531e:	460c      	mov	r4, r1
 8005320:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005324:	b10a      	cbz	r2, 800532a <_printf_common+0x26>
 8005326:	3301      	adds	r3, #1
 8005328:	6033      	str	r3, [r6, #0]
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	0699      	lsls	r1, r3, #26
 800532e:	bf42      	ittt	mi
 8005330:	6833      	ldrmi	r3, [r6, #0]
 8005332:	3302      	addmi	r3, #2
 8005334:	6033      	strmi	r3, [r6, #0]
 8005336:	6825      	ldr	r5, [r4, #0]
 8005338:	f015 0506 	ands.w	r5, r5, #6
 800533c:	d106      	bne.n	800534c <_printf_common+0x48>
 800533e:	f104 0a19 	add.w	sl, r4, #25
 8005342:	68e3      	ldr	r3, [r4, #12]
 8005344:	6832      	ldr	r2, [r6, #0]
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	42ab      	cmp	r3, r5
 800534a:	dc2b      	bgt.n	80053a4 <_printf_common+0xa0>
 800534c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005350:	6822      	ldr	r2, [r4, #0]
 8005352:	3b00      	subs	r3, #0
 8005354:	bf18      	it	ne
 8005356:	2301      	movne	r3, #1
 8005358:	0692      	lsls	r2, r2, #26
 800535a:	d430      	bmi.n	80053be <_printf_common+0xba>
 800535c:	4641      	mov	r1, r8
 800535e:	4638      	mov	r0, r7
 8005360:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005364:	47c8      	blx	r9
 8005366:	3001      	adds	r0, #1
 8005368:	d023      	beq.n	80053b2 <_printf_common+0xae>
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	6922      	ldr	r2, [r4, #16]
 800536e:	f003 0306 	and.w	r3, r3, #6
 8005372:	2b04      	cmp	r3, #4
 8005374:	bf14      	ite	ne
 8005376:	2500      	movne	r5, #0
 8005378:	6833      	ldreq	r3, [r6, #0]
 800537a:	f04f 0600 	mov.w	r6, #0
 800537e:	bf08      	it	eq
 8005380:	68e5      	ldreq	r5, [r4, #12]
 8005382:	f104 041a 	add.w	r4, r4, #26
 8005386:	bf08      	it	eq
 8005388:	1aed      	subeq	r5, r5, r3
 800538a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800538e:	bf08      	it	eq
 8005390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005394:	4293      	cmp	r3, r2
 8005396:	bfc4      	itt	gt
 8005398:	1a9b      	subgt	r3, r3, r2
 800539a:	18ed      	addgt	r5, r5, r3
 800539c:	42b5      	cmp	r5, r6
 800539e:	d11a      	bne.n	80053d6 <_printf_common+0xd2>
 80053a0:	2000      	movs	r0, #0
 80053a2:	e008      	b.n	80053b6 <_printf_common+0xb2>
 80053a4:	2301      	movs	r3, #1
 80053a6:	4652      	mov	r2, sl
 80053a8:	4641      	mov	r1, r8
 80053aa:	4638      	mov	r0, r7
 80053ac:	47c8      	blx	r9
 80053ae:	3001      	adds	r0, #1
 80053b0:	d103      	bne.n	80053ba <_printf_common+0xb6>
 80053b2:	f04f 30ff 	mov.w	r0, #4294967295
 80053b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ba:	3501      	adds	r5, #1
 80053bc:	e7c1      	b.n	8005342 <_printf_common+0x3e>
 80053be:	2030      	movs	r0, #48	@ 0x30
 80053c0:	18e1      	adds	r1, r4, r3
 80053c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053cc:	4422      	add	r2, r4
 80053ce:	3302      	adds	r3, #2
 80053d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053d4:	e7c2      	b.n	800535c <_printf_common+0x58>
 80053d6:	2301      	movs	r3, #1
 80053d8:	4622      	mov	r2, r4
 80053da:	4641      	mov	r1, r8
 80053dc:	4638      	mov	r0, r7
 80053de:	47c8      	blx	r9
 80053e0:	3001      	adds	r0, #1
 80053e2:	d0e6      	beq.n	80053b2 <_printf_common+0xae>
 80053e4:	3601      	adds	r6, #1
 80053e6:	e7d9      	b.n	800539c <_printf_common+0x98>

080053e8 <_printf_i>:
 80053e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053ec:	7e0f      	ldrb	r7, [r1, #24]
 80053ee:	4691      	mov	r9, r2
 80053f0:	2f78      	cmp	r7, #120	@ 0x78
 80053f2:	4680      	mov	r8, r0
 80053f4:	460c      	mov	r4, r1
 80053f6:	469a      	mov	sl, r3
 80053f8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053fe:	d807      	bhi.n	8005410 <_printf_i+0x28>
 8005400:	2f62      	cmp	r7, #98	@ 0x62
 8005402:	d80a      	bhi.n	800541a <_printf_i+0x32>
 8005404:	2f00      	cmp	r7, #0
 8005406:	f000 80d1 	beq.w	80055ac <_printf_i+0x1c4>
 800540a:	2f58      	cmp	r7, #88	@ 0x58
 800540c:	f000 80b8 	beq.w	8005580 <_printf_i+0x198>
 8005410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005414:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005418:	e03a      	b.n	8005490 <_printf_i+0xa8>
 800541a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800541e:	2b15      	cmp	r3, #21
 8005420:	d8f6      	bhi.n	8005410 <_printf_i+0x28>
 8005422:	a101      	add	r1, pc, #4	@ (adr r1, 8005428 <_printf_i+0x40>)
 8005424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005428:	08005481 	.word	0x08005481
 800542c:	08005495 	.word	0x08005495
 8005430:	08005411 	.word	0x08005411
 8005434:	08005411 	.word	0x08005411
 8005438:	08005411 	.word	0x08005411
 800543c:	08005411 	.word	0x08005411
 8005440:	08005495 	.word	0x08005495
 8005444:	08005411 	.word	0x08005411
 8005448:	08005411 	.word	0x08005411
 800544c:	08005411 	.word	0x08005411
 8005450:	08005411 	.word	0x08005411
 8005454:	08005593 	.word	0x08005593
 8005458:	080054bf 	.word	0x080054bf
 800545c:	0800554d 	.word	0x0800554d
 8005460:	08005411 	.word	0x08005411
 8005464:	08005411 	.word	0x08005411
 8005468:	080055b5 	.word	0x080055b5
 800546c:	08005411 	.word	0x08005411
 8005470:	080054bf 	.word	0x080054bf
 8005474:	08005411 	.word	0x08005411
 8005478:	08005411 	.word	0x08005411
 800547c:	08005555 	.word	0x08005555
 8005480:	6833      	ldr	r3, [r6, #0]
 8005482:	1d1a      	adds	r2, r3, #4
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6032      	str	r2, [r6, #0]
 8005488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800548c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005490:	2301      	movs	r3, #1
 8005492:	e09c      	b.n	80055ce <_printf_i+0x1e6>
 8005494:	6833      	ldr	r3, [r6, #0]
 8005496:	6820      	ldr	r0, [r4, #0]
 8005498:	1d19      	adds	r1, r3, #4
 800549a:	6031      	str	r1, [r6, #0]
 800549c:	0606      	lsls	r6, r0, #24
 800549e:	d501      	bpl.n	80054a4 <_printf_i+0xbc>
 80054a0:	681d      	ldr	r5, [r3, #0]
 80054a2:	e003      	b.n	80054ac <_printf_i+0xc4>
 80054a4:	0645      	lsls	r5, r0, #25
 80054a6:	d5fb      	bpl.n	80054a0 <_printf_i+0xb8>
 80054a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054ac:	2d00      	cmp	r5, #0
 80054ae:	da03      	bge.n	80054b8 <_printf_i+0xd0>
 80054b0:	232d      	movs	r3, #45	@ 0x2d
 80054b2:	426d      	negs	r5, r5
 80054b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054b8:	230a      	movs	r3, #10
 80054ba:	4858      	ldr	r0, [pc, #352]	@ (800561c <_printf_i+0x234>)
 80054bc:	e011      	b.n	80054e2 <_printf_i+0xfa>
 80054be:	6821      	ldr	r1, [r4, #0]
 80054c0:	6833      	ldr	r3, [r6, #0]
 80054c2:	0608      	lsls	r0, r1, #24
 80054c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80054c8:	d402      	bmi.n	80054d0 <_printf_i+0xe8>
 80054ca:	0649      	lsls	r1, r1, #25
 80054cc:	bf48      	it	mi
 80054ce:	b2ad      	uxthmi	r5, r5
 80054d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80054d2:	6033      	str	r3, [r6, #0]
 80054d4:	bf14      	ite	ne
 80054d6:	230a      	movne	r3, #10
 80054d8:	2308      	moveq	r3, #8
 80054da:	4850      	ldr	r0, [pc, #320]	@ (800561c <_printf_i+0x234>)
 80054dc:	2100      	movs	r1, #0
 80054de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054e2:	6866      	ldr	r6, [r4, #4]
 80054e4:	2e00      	cmp	r6, #0
 80054e6:	60a6      	str	r6, [r4, #8]
 80054e8:	db05      	blt.n	80054f6 <_printf_i+0x10e>
 80054ea:	6821      	ldr	r1, [r4, #0]
 80054ec:	432e      	orrs	r6, r5
 80054ee:	f021 0104 	bic.w	r1, r1, #4
 80054f2:	6021      	str	r1, [r4, #0]
 80054f4:	d04b      	beq.n	800558e <_printf_i+0x1a6>
 80054f6:	4616      	mov	r6, r2
 80054f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80054fc:	fb03 5711 	mls	r7, r3, r1, r5
 8005500:	5dc7      	ldrb	r7, [r0, r7]
 8005502:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005506:	462f      	mov	r7, r5
 8005508:	42bb      	cmp	r3, r7
 800550a:	460d      	mov	r5, r1
 800550c:	d9f4      	bls.n	80054f8 <_printf_i+0x110>
 800550e:	2b08      	cmp	r3, #8
 8005510:	d10b      	bne.n	800552a <_printf_i+0x142>
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	07df      	lsls	r7, r3, #31
 8005516:	d508      	bpl.n	800552a <_printf_i+0x142>
 8005518:	6923      	ldr	r3, [r4, #16]
 800551a:	6861      	ldr	r1, [r4, #4]
 800551c:	4299      	cmp	r1, r3
 800551e:	bfde      	ittt	le
 8005520:	2330      	movle	r3, #48	@ 0x30
 8005522:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005526:	f106 36ff 	addle.w	r6, r6, #4294967295
 800552a:	1b92      	subs	r2, r2, r6
 800552c:	6122      	str	r2, [r4, #16]
 800552e:	464b      	mov	r3, r9
 8005530:	4621      	mov	r1, r4
 8005532:	4640      	mov	r0, r8
 8005534:	f8cd a000 	str.w	sl, [sp]
 8005538:	aa03      	add	r2, sp, #12
 800553a:	f7ff fee3 	bl	8005304 <_printf_common>
 800553e:	3001      	adds	r0, #1
 8005540:	d14a      	bne.n	80055d8 <_printf_i+0x1f0>
 8005542:	f04f 30ff 	mov.w	r0, #4294967295
 8005546:	b004      	add	sp, #16
 8005548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	f043 0320 	orr.w	r3, r3, #32
 8005552:	6023      	str	r3, [r4, #0]
 8005554:	2778      	movs	r7, #120	@ 0x78
 8005556:	4832      	ldr	r0, [pc, #200]	@ (8005620 <_printf_i+0x238>)
 8005558:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	6831      	ldr	r1, [r6, #0]
 8005560:	061f      	lsls	r7, r3, #24
 8005562:	f851 5b04 	ldr.w	r5, [r1], #4
 8005566:	d402      	bmi.n	800556e <_printf_i+0x186>
 8005568:	065f      	lsls	r7, r3, #25
 800556a:	bf48      	it	mi
 800556c:	b2ad      	uxthmi	r5, r5
 800556e:	6031      	str	r1, [r6, #0]
 8005570:	07d9      	lsls	r1, r3, #31
 8005572:	bf44      	itt	mi
 8005574:	f043 0320 	orrmi.w	r3, r3, #32
 8005578:	6023      	strmi	r3, [r4, #0]
 800557a:	b11d      	cbz	r5, 8005584 <_printf_i+0x19c>
 800557c:	2310      	movs	r3, #16
 800557e:	e7ad      	b.n	80054dc <_printf_i+0xf4>
 8005580:	4826      	ldr	r0, [pc, #152]	@ (800561c <_printf_i+0x234>)
 8005582:	e7e9      	b.n	8005558 <_printf_i+0x170>
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	f023 0320 	bic.w	r3, r3, #32
 800558a:	6023      	str	r3, [r4, #0]
 800558c:	e7f6      	b.n	800557c <_printf_i+0x194>
 800558e:	4616      	mov	r6, r2
 8005590:	e7bd      	b.n	800550e <_printf_i+0x126>
 8005592:	6833      	ldr	r3, [r6, #0]
 8005594:	6825      	ldr	r5, [r4, #0]
 8005596:	1d18      	adds	r0, r3, #4
 8005598:	6961      	ldr	r1, [r4, #20]
 800559a:	6030      	str	r0, [r6, #0]
 800559c:	062e      	lsls	r6, r5, #24
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	d501      	bpl.n	80055a6 <_printf_i+0x1be>
 80055a2:	6019      	str	r1, [r3, #0]
 80055a4:	e002      	b.n	80055ac <_printf_i+0x1c4>
 80055a6:	0668      	lsls	r0, r5, #25
 80055a8:	d5fb      	bpl.n	80055a2 <_printf_i+0x1ba>
 80055aa:	8019      	strh	r1, [r3, #0]
 80055ac:	2300      	movs	r3, #0
 80055ae:	4616      	mov	r6, r2
 80055b0:	6123      	str	r3, [r4, #16]
 80055b2:	e7bc      	b.n	800552e <_printf_i+0x146>
 80055b4:	6833      	ldr	r3, [r6, #0]
 80055b6:	2100      	movs	r1, #0
 80055b8:	1d1a      	adds	r2, r3, #4
 80055ba:	6032      	str	r2, [r6, #0]
 80055bc:	681e      	ldr	r6, [r3, #0]
 80055be:	6862      	ldr	r2, [r4, #4]
 80055c0:	4630      	mov	r0, r6
 80055c2:	f000 f913 	bl	80057ec <memchr>
 80055c6:	b108      	cbz	r0, 80055cc <_printf_i+0x1e4>
 80055c8:	1b80      	subs	r0, r0, r6
 80055ca:	6060      	str	r0, [r4, #4]
 80055cc:	6863      	ldr	r3, [r4, #4]
 80055ce:	6123      	str	r3, [r4, #16]
 80055d0:	2300      	movs	r3, #0
 80055d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055d6:	e7aa      	b.n	800552e <_printf_i+0x146>
 80055d8:	4632      	mov	r2, r6
 80055da:	4649      	mov	r1, r9
 80055dc:	4640      	mov	r0, r8
 80055de:	6923      	ldr	r3, [r4, #16]
 80055e0:	47d0      	blx	sl
 80055e2:	3001      	adds	r0, #1
 80055e4:	d0ad      	beq.n	8005542 <_printf_i+0x15a>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	079b      	lsls	r3, r3, #30
 80055ea:	d413      	bmi.n	8005614 <_printf_i+0x22c>
 80055ec:	68e0      	ldr	r0, [r4, #12]
 80055ee:	9b03      	ldr	r3, [sp, #12]
 80055f0:	4298      	cmp	r0, r3
 80055f2:	bfb8      	it	lt
 80055f4:	4618      	movlt	r0, r3
 80055f6:	e7a6      	b.n	8005546 <_printf_i+0x15e>
 80055f8:	2301      	movs	r3, #1
 80055fa:	4632      	mov	r2, r6
 80055fc:	4649      	mov	r1, r9
 80055fe:	4640      	mov	r0, r8
 8005600:	47d0      	blx	sl
 8005602:	3001      	adds	r0, #1
 8005604:	d09d      	beq.n	8005542 <_printf_i+0x15a>
 8005606:	3501      	adds	r5, #1
 8005608:	68e3      	ldr	r3, [r4, #12]
 800560a:	9903      	ldr	r1, [sp, #12]
 800560c:	1a5b      	subs	r3, r3, r1
 800560e:	42ab      	cmp	r3, r5
 8005610:	dcf2      	bgt.n	80055f8 <_printf_i+0x210>
 8005612:	e7eb      	b.n	80055ec <_printf_i+0x204>
 8005614:	2500      	movs	r5, #0
 8005616:	f104 0619 	add.w	r6, r4, #25
 800561a:	e7f5      	b.n	8005608 <_printf_i+0x220>
 800561c:	0800793a 	.word	0x0800793a
 8005620:	0800794b 	.word	0x0800794b

08005624 <__sflush_r>:
 8005624:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	0716      	lsls	r6, r2, #28
 800562c:	4605      	mov	r5, r0
 800562e:	460c      	mov	r4, r1
 8005630:	d454      	bmi.n	80056dc <__sflush_r+0xb8>
 8005632:	684b      	ldr	r3, [r1, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	dc02      	bgt.n	800563e <__sflush_r+0x1a>
 8005638:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	dd48      	ble.n	80056d0 <__sflush_r+0xac>
 800563e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005640:	2e00      	cmp	r6, #0
 8005642:	d045      	beq.n	80056d0 <__sflush_r+0xac>
 8005644:	2300      	movs	r3, #0
 8005646:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800564a:	682f      	ldr	r7, [r5, #0]
 800564c:	6a21      	ldr	r1, [r4, #32]
 800564e:	602b      	str	r3, [r5, #0]
 8005650:	d030      	beq.n	80056b4 <__sflush_r+0x90>
 8005652:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005654:	89a3      	ldrh	r3, [r4, #12]
 8005656:	0759      	lsls	r1, r3, #29
 8005658:	d505      	bpl.n	8005666 <__sflush_r+0x42>
 800565a:	6863      	ldr	r3, [r4, #4]
 800565c:	1ad2      	subs	r2, r2, r3
 800565e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005660:	b10b      	cbz	r3, 8005666 <__sflush_r+0x42>
 8005662:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005664:	1ad2      	subs	r2, r2, r3
 8005666:	2300      	movs	r3, #0
 8005668:	4628      	mov	r0, r5
 800566a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800566c:	6a21      	ldr	r1, [r4, #32]
 800566e:	47b0      	blx	r6
 8005670:	1c43      	adds	r3, r0, #1
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	d106      	bne.n	8005684 <__sflush_r+0x60>
 8005676:	6829      	ldr	r1, [r5, #0]
 8005678:	291d      	cmp	r1, #29
 800567a:	d82b      	bhi.n	80056d4 <__sflush_r+0xb0>
 800567c:	4a28      	ldr	r2, [pc, #160]	@ (8005720 <__sflush_r+0xfc>)
 800567e:	40ca      	lsrs	r2, r1
 8005680:	07d6      	lsls	r6, r2, #31
 8005682:	d527      	bpl.n	80056d4 <__sflush_r+0xb0>
 8005684:	2200      	movs	r2, #0
 8005686:	6062      	str	r2, [r4, #4]
 8005688:	6922      	ldr	r2, [r4, #16]
 800568a:	04d9      	lsls	r1, r3, #19
 800568c:	6022      	str	r2, [r4, #0]
 800568e:	d504      	bpl.n	800569a <__sflush_r+0x76>
 8005690:	1c42      	adds	r2, r0, #1
 8005692:	d101      	bne.n	8005698 <__sflush_r+0x74>
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	b903      	cbnz	r3, 800569a <__sflush_r+0x76>
 8005698:	6560      	str	r0, [r4, #84]	@ 0x54
 800569a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800569c:	602f      	str	r7, [r5, #0]
 800569e:	b1b9      	cbz	r1, 80056d0 <__sflush_r+0xac>
 80056a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056a4:	4299      	cmp	r1, r3
 80056a6:	d002      	beq.n	80056ae <__sflush_r+0x8a>
 80056a8:	4628      	mov	r0, r5
 80056aa:	f7ff fbd5 	bl	8004e58 <_free_r>
 80056ae:	2300      	movs	r3, #0
 80056b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80056b2:	e00d      	b.n	80056d0 <__sflush_r+0xac>
 80056b4:	2301      	movs	r3, #1
 80056b6:	4628      	mov	r0, r5
 80056b8:	47b0      	blx	r6
 80056ba:	4602      	mov	r2, r0
 80056bc:	1c50      	adds	r0, r2, #1
 80056be:	d1c9      	bne.n	8005654 <__sflush_r+0x30>
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0c6      	beq.n	8005654 <__sflush_r+0x30>
 80056c6:	2b1d      	cmp	r3, #29
 80056c8:	d001      	beq.n	80056ce <__sflush_r+0xaa>
 80056ca:	2b16      	cmp	r3, #22
 80056cc:	d11d      	bne.n	800570a <__sflush_r+0xe6>
 80056ce:	602f      	str	r7, [r5, #0]
 80056d0:	2000      	movs	r0, #0
 80056d2:	e021      	b.n	8005718 <__sflush_r+0xf4>
 80056d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056d8:	b21b      	sxth	r3, r3
 80056da:	e01a      	b.n	8005712 <__sflush_r+0xee>
 80056dc:	690f      	ldr	r7, [r1, #16]
 80056de:	2f00      	cmp	r7, #0
 80056e0:	d0f6      	beq.n	80056d0 <__sflush_r+0xac>
 80056e2:	0793      	lsls	r3, r2, #30
 80056e4:	bf18      	it	ne
 80056e6:	2300      	movne	r3, #0
 80056e8:	680e      	ldr	r6, [r1, #0]
 80056ea:	bf08      	it	eq
 80056ec:	694b      	ldreq	r3, [r1, #20]
 80056ee:	1bf6      	subs	r6, r6, r7
 80056f0:	600f      	str	r7, [r1, #0]
 80056f2:	608b      	str	r3, [r1, #8]
 80056f4:	2e00      	cmp	r6, #0
 80056f6:	ddeb      	ble.n	80056d0 <__sflush_r+0xac>
 80056f8:	4633      	mov	r3, r6
 80056fa:	463a      	mov	r2, r7
 80056fc:	4628      	mov	r0, r5
 80056fe:	6a21      	ldr	r1, [r4, #32]
 8005700:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005704:	47e0      	blx	ip
 8005706:	2800      	cmp	r0, #0
 8005708:	dc07      	bgt.n	800571a <__sflush_r+0xf6>
 800570a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800570e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005712:	f04f 30ff 	mov.w	r0, #4294967295
 8005716:	81a3      	strh	r3, [r4, #12]
 8005718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800571a:	4407      	add	r7, r0
 800571c:	1a36      	subs	r6, r6, r0
 800571e:	e7e9      	b.n	80056f4 <__sflush_r+0xd0>
 8005720:	20400001 	.word	0x20400001

08005724 <_fflush_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	690b      	ldr	r3, [r1, #16]
 8005728:	4605      	mov	r5, r0
 800572a:	460c      	mov	r4, r1
 800572c:	b913      	cbnz	r3, 8005734 <_fflush_r+0x10>
 800572e:	2500      	movs	r5, #0
 8005730:	4628      	mov	r0, r5
 8005732:	bd38      	pop	{r3, r4, r5, pc}
 8005734:	b118      	cbz	r0, 800573e <_fflush_r+0x1a>
 8005736:	6a03      	ldr	r3, [r0, #32]
 8005738:	b90b      	cbnz	r3, 800573e <_fflush_r+0x1a>
 800573a:	f7ff fa57 	bl	8004bec <__sinit>
 800573e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0f3      	beq.n	800572e <_fflush_r+0xa>
 8005746:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005748:	07d0      	lsls	r0, r2, #31
 800574a:	d404      	bmi.n	8005756 <_fflush_r+0x32>
 800574c:	0599      	lsls	r1, r3, #22
 800574e:	d402      	bmi.n	8005756 <_fflush_r+0x32>
 8005750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005752:	f7ff fb60 	bl	8004e16 <__retarget_lock_acquire_recursive>
 8005756:	4628      	mov	r0, r5
 8005758:	4621      	mov	r1, r4
 800575a:	f7ff ff63 	bl	8005624 <__sflush_r>
 800575e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005760:	4605      	mov	r5, r0
 8005762:	07da      	lsls	r2, r3, #31
 8005764:	d4e4      	bmi.n	8005730 <_fflush_r+0xc>
 8005766:	89a3      	ldrh	r3, [r4, #12]
 8005768:	059b      	lsls	r3, r3, #22
 800576a:	d4e1      	bmi.n	8005730 <_fflush_r+0xc>
 800576c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800576e:	f7ff fb53 	bl	8004e18 <__retarget_lock_release_recursive>
 8005772:	e7dd      	b.n	8005730 <_fflush_r+0xc>

08005774 <fiprintf>:
 8005774:	b40e      	push	{r1, r2, r3}
 8005776:	b503      	push	{r0, r1, lr}
 8005778:	4601      	mov	r1, r0
 800577a:	ab03      	add	r3, sp, #12
 800577c:	4805      	ldr	r0, [pc, #20]	@ (8005794 <fiprintf+0x20>)
 800577e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005782:	6800      	ldr	r0, [r0, #0]
 8005784:	9301      	str	r3, [sp, #4]
 8005786:	f000 f8a9 	bl	80058dc <_vfiprintf_r>
 800578a:	b002      	add	sp, #8
 800578c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005790:	b003      	add	sp, #12
 8005792:	4770      	bx	lr
 8005794:	2000003c 	.word	0x2000003c

08005798 <memmove>:
 8005798:	4288      	cmp	r0, r1
 800579a:	b510      	push	{r4, lr}
 800579c:	eb01 0402 	add.w	r4, r1, r2
 80057a0:	d902      	bls.n	80057a8 <memmove+0x10>
 80057a2:	4284      	cmp	r4, r0
 80057a4:	4623      	mov	r3, r4
 80057a6:	d807      	bhi.n	80057b8 <memmove+0x20>
 80057a8:	1e43      	subs	r3, r0, #1
 80057aa:	42a1      	cmp	r1, r4
 80057ac:	d008      	beq.n	80057c0 <memmove+0x28>
 80057ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057b6:	e7f8      	b.n	80057aa <memmove+0x12>
 80057b8:	4601      	mov	r1, r0
 80057ba:	4402      	add	r2, r0
 80057bc:	428a      	cmp	r2, r1
 80057be:	d100      	bne.n	80057c2 <memmove+0x2a>
 80057c0:	bd10      	pop	{r4, pc}
 80057c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057ca:	e7f7      	b.n	80057bc <memmove+0x24>

080057cc <_sbrk_r>:
 80057cc:	b538      	push	{r3, r4, r5, lr}
 80057ce:	2300      	movs	r3, #0
 80057d0:	4d05      	ldr	r5, [pc, #20]	@ (80057e8 <_sbrk_r+0x1c>)
 80057d2:	4604      	mov	r4, r0
 80057d4:	4608      	mov	r0, r1
 80057d6:	602b      	str	r3, [r5, #0]
 80057d8:	f7fd fc18 	bl	800300c <_sbrk>
 80057dc:	1c43      	adds	r3, r0, #1
 80057de:	d102      	bne.n	80057e6 <_sbrk_r+0x1a>
 80057e0:	682b      	ldr	r3, [r5, #0]
 80057e2:	b103      	cbz	r3, 80057e6 <_sbrk_r+0x1a>
 80057e4:	6023      	str	r3, [r4, #0]
 80057e6:	bd38      	pop	{r3, r4, r5, pc}
 80057e8:	20002a0c 	.word	0x20002a0c

080057ec <memchr>:
 80057ec:	4603      	mov	r3, r0
 80057ee:	b510      	push	{r4, lr}
 80057f0:	b2c9      	uxtb	r1, r1
 80057f2:	4402      	add	r2, r0
 80057f4:	4293      	cmp	r3, r2
 80057f6:	4618      	mov	r0, r3
 80057f8:	d101      	bne.n	80057fe <memchr+0x12>
 80057fa:	2000      	movs	r0, #0
 80057fc:	e003      	b.n	8005806 <memchr+0x1a>
 80057fe:	7804      	ldrb	r4, [r0, #0]
 8005800:	3301      	adds	r3, #1
 8005802:	428c      	cmp	r4, r1
 8005804:	d1f6      	bne.n	80057f4 <memchr+0x8>
 8005806:	bd10      	pop	{r4, pc}

08005808 <memcpy>:
 8005808:	440a      	add	r2, r1
 800580a:	4291      	cmp	r1, r2
 800580c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005810:	d100      	bne.n	8005814 <memcpy+0xc>
 8005812:	4770      	bx	lr
 8005814:	b510      	push	{r4, lr}
 8005816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800581a:	4291      	cmp	r1, r2
 800581c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005820:	d1f9      	bne.n	8005816 <memcpy+0xe>
 8005822:	bd10      	pop	{r4, pc}

08005824 <abort>:
 8005824:	2006      	movs	r0, #6
 8005826:	b508      	push	{r3, lr}
 8005828:	f000 fa2c 	bl	8005c84 <raise>
 800582c:	2001      	movs	r0, #1
 800582e:	f7fd fb78 	bl	8002f22 <_exit>

08005832 <_realloc_r>:
 8005832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005836:	4607      	mov	r7, r0
 8005838:	4614      	mov	r4, r2
 800583a:	460d      	mov	r5, r1
 800583c:	b921      	cbnz	r1, 8005848 <_realloc_r+0x16>
 800583e:	4611      	mov	r1, r2
 8005840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005844:	f7ff bb7a 	b.w	8004f3c <_malloc_r>
 8005848:	b92a      	cbnz	r2, 8005856 <_realloc_r+0x24>
 800584a:	f7ff fb05 	bl	8004e58 <_free_r>
 800584e:	4625      	mov	r5, r4
 8005850:	4628      	mov	r0, r5
 8005852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005856:	f000 fa31 	bl	8005cbc <_malloc_usable_size_r>
 800585a:	4284      	cmp	r4, r0
 800585c:	4606      	mov	r6, r0
 800585e:	d802      	bhi.n	8005866 <_realloc_r+0x34>
 8005860:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005864:	d8f4      	bhi.n	8005850 <_realloc_r+0x1e>
 8005866:	4621      	mov	r1, r4
 8005868:	4638      	mov	r0, r7
 800586a:	f7ff fb67 	bl	8004f3c <_malloc_r>
 800586e:	4680      	mov	r8, r0
 8005870:	b908      	cbnz	r0, 8005876 <_realloc_r+0x44>
 8005872:	4645      	mov	r5, r8
 8005874:	e7ec      	b.n	8005850 <_realloc_r+0x1e>
 8005876:	42b4      	cmp	r4, r6
 8005878:	4622      	mov	r2, r4
 800587a:	4629      	mov	r1, r5
 800587c:	bf28      	it	cs
 800587e:	4632      	movcs	r2, r6
 8005880:	f7ff ffc2 	bl	8005808 <memcpy>
 8005884:	4629      	mov	r1, r5
 8005886:	4638      	mov	r0, r7
 8005888:	f7ff fae6 	bl	8004e58 <_free_r>
 800588c:	e7f1      	b.n	8005872 <_realloc_r+0x40>

0800588e <__sfputc_r>:
 800588e:	6893      	ldr	r3, [r2, #8]
 8005890:	b410      	push	{r4}
 8005892:	3b01      	subs	r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	6093      	str	r3, [r2, #8]
 8005898:	da07      	bge.n	80058aa <__sfputc_r+0x1c>
 800589a:	6994      	ldr	r4, [r2, #24]
 800589c:	42a3      	cmp	r3, r4
 800589e:	db01      	blt.n	80058a4 <__sfputc_r+0x16>
 80058a0:	290a      	cmp	r1, #10
 80058a2:	d102      	bne.n	80058aa <__sfputc_r+0x1c>
 80058a4:	bc10      	pop	{r4}
 80058a6:	f000 b931 	b.w	8005b0c <__swbuf_r>
 80058aa:	6813      	ldr	r3, [r2, #0]
 80058ac:	1c58      	adds	r0, r3, #1
 80058ae:	6010      	str	r0, [r2, #0]
 80058b0:	7019      	strb	r1, [r3, #0]
 80058b2:	4608      	mov	r0, r1
 80058b4:	bc10      	pop	{r4}
 80058b6:	4770      	bx	lr

080058b8 <__sfputs_r>:
 80058b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ba:	4606      	mov	r6, r0
 80058bc:	460f      	mov	r7, r1
 80058be:	4614      	mov	r4, r2
 80058c0:	18d5      	adds	r5, r2, r3
 80058c2:	42ac      	cmp	r4, r5
 80058c4:	d101      	bne.n	80058ca <__sfputs_r+0x12>
 80058c6:	2000      	movs	r0, #0
 80058c8:	e007      	b.n	80058da <__sfputs_r+0x22>
 80058ca:	463a      	mov	r2, r7
 80058cc:	4630      	mov	r0, r6
 80058ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058d2:	f7ff ffdc 	bl	800588e <__sfputc_r>
 80058d6:	1c43      	adds	r3, r0, #1
 80058d8:	d1f3      	bne.n	80058c2 <__sfputs_r+0xa>
 80058da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080058dc <_vfiprintf_r>:
 80058dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e0:	460d      	mov	r5, r1
 80058e2:	4614      	mov	r4, r2
 80058e4:	4698      	mov	r8, r3
 80058e6:	4606      	mov	r6, r0
 80058e8:	b09d      	sub	sp, #116	@ 0x74
 80058ea:	b118      	cbz	r0, 80058f4 <_vfiprintf_r+0x18>
 80058ec:	6a03      	ldr	r3, [r0, #32]
 80058ee:	b90b      	cbnz	r3, 80058f4 <_vfiprintf_r+0x18>
 80058f0:	f7ff f97c 	bl	8004bec <__sinit>
 80058f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80058f6:	07d9      	lsls	r1, r3, #31
 80058f8:	d405      	bmi.n	8005906 <_vfiprintf_r+0x2a>
 80058fa:	89ab      	ldrh	r3, [r5, #12]
 80058fc:	059a      	lsls	r2, r3, #22
 80058fe:	d402      	bmi.n	8005906 <_vfiprintf_r+0x2a>
 8005900:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005902:	f7ff fa88 	bl	8004e16 <__retarget_lock_acquire_recursive>
 8005906:	89ab      	ldrh	r3, [r5, #12]
 8005908:	071b      	lsls	r3, r3, #28
 800590a:	d501      	bpl.n	8005910 <_vfiprintf_r+0x34>
 800590c:	692b      	ldr	r3, [r5, #16]
 800590e:	b99b      	cbnz	r3, 8005938 <_vfiprintf_r+0x5c>
 8005910:	4629      	mov	r1, r5
 8005912:	4630      	mov	r0, r6
 8005914:	f000 f938 	bl	8005b88 <__swsetup_r>
 8005918:	b170      	cbz	r0, 8005938 <_vfiprintf_r+0x5c>
 800591a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800591c:	07dc      	lsls	r4, r3, #31
 800591e:	d504      	bpl.n	800592a <_vfiprintf_r+0x4e>
 8005920:	f04f 30ff 	mov.w	r0, #4294967295
 8005924:	b01d      	add	sp, #116	@ 0x74
 8005926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800592a:	89ab      	ldrh	r3, [r5, #12]
 800592c:	0598      	lsls	r0, r3, #22
 800592e:	d4f7      	bmi.n	8005920 <_vfiprintf_r+0x44>
 8005930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005932:	f7ff fa71 	bl	8004e18 <__retarget_lock_release_recursive>
 8005936:	e7f3      	b.n	8005920 <_vfiprintf_r+0x44>
 8005938:	2300      	movs	r3, #0
 800593a:	9309      	str	r3, [sp, #36]	@ 0x24
 800593c:	2320      	movs	r3, #32
 800593e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005942:	2330      	movs	r3, #48	@ 0x30
 8005944:	f04f 0901 	mov.w	r9, #1
 8005948:	f8cd 800c 	str.w	r8, [sp, #12]
 800594c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005af8 <_vfiprintf_r+0x21c>
 8005950:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005954:	4623      	mov	r3, r4
 8005956:	469a      	mov	sl, r3
 8005958:	f813 2b01 	ldrb.w	r2, [r3], #1
 800595c:	b10a      	cbz	r2, 8005962 <_vfiprintf_r+0x86>
 800595e:	2a25      	cmp	r2, #37	@ 0x25
 8005960:	d1f9      	bne.n	8005956 <_vfiprintf_r+0x7a>
 8005962:	ebba 0b04 	subs.w	fp, sl, r4
 8005966:	d00b      	beq.n	8005980 <_vfiprintf_r+0xa4>
 8005968:	465b      	mov	r3, fp
 800596a:	4622      	mov	r2, r4
 800596c:	4629      	mov	r1, r5
 800596e:	4630      	mov	r0, r6
 8005970:	f7ff ffa2 	bl	80058b8 <__sfputs_r>
 8005974:	3001      	adds	r0, #1
 8005976:	f000 80a7 	beq.w	8005ac8 <_vfiprintf_r+0x1ec>
 800597a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800597c:	445a      	add	r2, fp
 800597e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005980:	f89a 3000 	ldrb.w	r3, [sl]
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 809f 	beq.w	8005ac8 <_vfiprintf_r+0x1ec>
 800598a:	2300      	movs	r3, #0
 800598c:	f04f 32ff 	mov.w	r2, #4294967295
 8005990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005994:	f10a 0a01 	add.w	sl, sl, #1
 8005998:	9304      	str	r3, [sp, #16]
 800599a:	9307      	str	r3, [sp, #28]
 800599c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80059a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80059a2:	4654      	mov	r4, sl
 80059a4:	2205      	movs	r2, #5
 80059a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059aa:	4853      	ldr	r0, [pc, #332]	@ (8005af8 <_vfiprintf_r+0x21c>)
 80059ac:	f7ff ff1e 	bl	80057ec <memchr>
 80059b0:	9a04      	ldr	r2, [sp, #16]
 80059b2:	b9d8      	cbnz	r0, 80059ec <_vfiprintf_r+0x110>
 80059b4:	06d1      	lsls	r1, r2, #27
 80059b6:	bf44      	itt	mi
 80059b8:	2320      	movmi	r3, #32
 80059ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059be:	0713      	lsls	r3, r2, #28
 80059c0:	bf44      	itt	mi
 80059c2:	232b      	movmi	r3, #43	@ 0x2b
 80059c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059c8:	f89a 3000 	ldrb.w	r3, [sl]
 80059cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80059ce:	d015      	beq.n	80059fc <_vfiprintf_r+0x120>
 80059d0:	4654      	mov	r4, sl
 80059d2:	2000      	movs	r0, #0
 80059d4:	f04f 0c0a 	mov.w	ip, #10
 80059d8:	9a07      	ldr	r2, [sp, #28]
 80059da:	4621      	mov	r1, r4
 80059dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059e0:	3b30      	subs	r3, #48	@ 0x30
 80059e2:	2b09      	cmp	r3, #9
 80059e4:	d94b      	bls.n	8005a7e <_vfiprintf_r+0x1a2>
 80059e6:	b1b0      	cbz	r0, 8005a16 <_vfiprintf_r+0x13a>
 80059e8:	9207      	str	r2, [sp, #28]
 80059ea:	e014      	b.n	8005a16 <_vfiprintf_r+0x13a>
 80059ec:	eba0 0308 	sub.w	r3, r0, r8
 80059f0:	fa09 f303 	lsl.w	r3, r9, r3
 80059f4:	4313      	orrs	r3, r2
 80059f6:	46a2      	mov	sl, r4
 80059f8:	9304      	str	r3, [sp, #16]
 80059fa:	e7d2      	b.n	80059a2 <_vfiprintf_r+0xc6>
 80059fc:	9b03      	ldr	r3, [sp, #12]
 80059fe:	1d19      	adds	r1, r3, #4
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	9103      	str	r1, [sp, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	bfbb      	ittet	lt
 8005a08:	425b      	neglt	r3, r3
 8005a0a:	f042 0202 	orrlt.w	r2, r2, #2
 8005a0e:	9307      	strge	r3, [sp, #28]
 8005a10:	9307      	strlt	r3, [sp, #28]
 8005a12:	bfb8      	it	lt
 8005a14:	9204      	strlt	r2, [sp, #16]
 8005a16:	7823      	ldrb	r3, [r4, #0]
 8005a18:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a1a:	d10a      	bne.n	8005a32 <_vfiprintf_r+0x156>
 8005a1c:	7863      	ldrb	r3, [r4, #1]
 8005a1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a20:	d132      	bne.n	8005a88 <_vfiprintf_r+0x1ac>
 8005a22:	9b03      	ldr	r3, [sp, #12]
 8005a24:	3402      	adds	r4, #2
 8005a26:	1d1a      	adds	r2, r3, #4
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	9203      	str	r2, [sp, #12]
 8005a2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a30:	9305      	str	r3, [sp, #20]
 8005a32:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005afc <_vfiprintf_r+0x220>
 8005a36:	2203      	movs	r2, #3
 8005a38:	4650      	mov	r0, sl
 8005a3a:	7821      	ldrb	r1, [r4, #0]
 8005a3c:	f7ff fed6 	bl	80057ec <memchr>
 8005a40:	b138      	cbz	r0, 8005a52 <_vfiprintf_r+0x176>
 8005a42:	2240      	movs	r2, #64	@ 0x40
 8005a44:	9b04      	ldr	r3, [sp, #16]
 8005a46:	eba0 000a 	sub.w	r0, r0, sl
 8005a4a:	4082      	lsls	r2, r0
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	3401      	adds	r4, #1
 8005a50:	9304      	str	r3, [sp, #16]
 8005a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a56:	2206      	movs	r2, #6
 8005a58:	4829      	ldr	r0, [pc, #164]	@ (8005b00 <_vfiprintf_r+0x224>)
 8005a5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a5e:	f7ff fec5 	bl	80057ec <memchr>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	d03f      	beq.n	8005ae6 <_vfiprintf_r+0x20a>
 8005a66:	4b27      	ldr	r3, [pc, #156]	@ (8005b04 <_vfiprintf_r+0x228>)
 8005a68:	bb1b      	cbnz	r3, 8005ab2 <_vfiprintf_r+0x1d6>
 8005a6a:	9b03      	ldr	r3, [sp, #12]
 8005a6c:	3307      	adds	r3, #7
 8005a6e:	f023 0307 	bic.w	r3, r3, #7
 8005a72:	3308      	adds	r3, #8
 8005a74:	9303      	str	r3, [sp, #12]
 8005a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a78:	443b      	add	r3, r7
 8005a7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a7c:	e76a      	b.n	8005954 <_vfiprintf_r+0x78>
 8005a7e:	460c      	mov	r4, r1
 8005a80:	2001      	movs	r0, #1
 8005a82:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a86:	e7a8      	b.n	80059da <_vfiprintf_r+0xfe>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f04f 0c0a 	mov.w	ip, #10
 8005a8e:	4619      	mov	r1, r3
 8005a90:	3401      	adds	r4, #1
 8005a92:	9305      	str	r3, [sp, #20]
 8005a94:	4620      	mov	r0, r4
 8005a96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a9a:	3a30      	subs	r2, #48	@ 0x30
 8005a9c:	2a09      	cmp	r2, #9
 8005a9e:	d903      	bls.n	8005aa8 <_vfiprintf_r+0x1cc>
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0c6      	beq.n	8005a32 <_vfiprintf_r+0x156>
 8005aa4:	9105      	str	r1, [sp, #20]
 8005aa6:	e7c4      	b.n	8005a32 <_vfiprintf_r+0x156>
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	2301      	movs	r3, #1
 8005aac:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ab0:	e7f0      	b.n	8005a94 <_vfiprintf_r+0x1b8>
 8005ab2:	ab03      	add	r3, sp, #12
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	462a      	mov	r2, r5
 8005ab8:	4630      	mov	r0, r6
 8005aba:	4b13      	ldr	r3, [pc, #76]	@ (8005b08 <_vfiprintf_r+0x22c>)
 8005abc:	a904      	add	r1, sp, #16
 8005abe:	f3af 8000 	nop.w
 8005ac2:	4607      	mov	r7, r0
 8005ac4:	1c78      	adds	r0, r7, #1
 8005ac6:	d1d6      	bne.n	8005a76 <_vfiprintf_r+0x19a>
 8005ac8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005aca:	07d9      	lsls	r1, r3, #31
 8005acc:	d405      	bmi.n	8005ada <_vfiprintf_r+0x1fe>
 8005ace:	89ab      	ldrh	r3, [r5, #12]
 8005ad0:	059a      	lsls	r2, r3, #22
 8005ad2:	d402      	bmi.n	8005ada <_vfiprintf_r+0x1fe>
 8005ad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ad6:	f7ff f99f 	bl	8004e18 <__retarget_lock_release_recursive>
 8005ada:	89ab      	ldrh	r3, [r5, #12]
 8005adc:	065b      	lsls	r3, r3, #25
 8005ade:	f53f af1f 	bmi.w	8005920 <_vfiprintf_r+0x44>
 8005ae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ae4:	e71e      	b.n	8005924 <_vfiprintf_r+0x48>
 8005ae6:	ab03      	add	r3, sp, #12
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	462a      	mov	r2, r5
 8005aec:	4630      	mov	r0, r6
 8005aee:	4b06      	ldr	r3, [pc, #24]	@ (8005b08 <_vfiprintf_r+0x22c>)
 8005af0:	a904      	add	r1, sp, #16
 8005af2:	f7ff fc79 	bl	80053e8 <_printf_i>
 8005af6:	e7e4      	b.n	8005ac2 <_vfiprintf_r+0x1e6>
 8005af8:	08007929 	.word	0x08007929
 8005afc:	0800792f 	.word	0x0800792f
 8005b00:	08007933 	.word	0x08007933
 8005b04:	00000000 	.word	0x00000000
 8005b08:	080058b9 	.word	0x080058b9

08005b0c <__swbuf_r>:
 8005b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0e:	460e      	mov	r6, r1
 8005b10:	4614      	mov	r4, r2
 8005b12:	4605      	mov	r5, r0
 8005b14:	b118      	cbz	r0, 8005b1e <__swbuf_r+0x12>
 8005b16:	6a03      	ldr	r3, [r0, #32]
 8005b18:	b90b      	cbnz	r3, 8005b1e <__swbuf_r+0x12>
 8005b1a:	f7ff f867 	bl	8004bec <__sinit>
 8005b1e:	69a3      	ldr	r3, [r4, #24]
 8005b20:	60a3      	str	r3, [r4, #8]
 8005b22:	89a3      	ldrh	r3, [r4, #12]
 8005b24:	071a      	lsls	r2, r3, #28
 8005b26:	d501      	bpl.n	8005b2c <__swbuf_r+0x20>
 8005b28:	6923      	ldr	r3, [r4, #16]
 8005b2a:	b943      	cbnz	r3, 8005b3e <__swbuf_r+0x32>
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	4628      	mov	r0, r5
 8005b30:	f000 f82a 	bl	8005b88 <__swsetup_r>
 8005b34:	b118      	cbz	r0, 8005b3e <__swbuf_r+0x32>
 8005b36:	f04f 37ff 	mov.w	r7, #4294967295
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	6922      	ldr	r2, [r4, #16]
 8005b42:	b2f6      	uxtb	r6, r6
 8005b44:	1a98      	subs	r0, r3, r2
 8005b46:	6963      	ldr	r3, [r4, #20]
 8005b48:	4637      	mov	r7, r6
 8005b4a:	4283      	cmp	r3, r0
 8005b4c:	dc05      	bgt.n	8005b5a <__swbuf_r+0x4e>
 8005b4e:	4621      	mov	r1, r4
 8005b50:	4628      	mov	r0, r5
 8005b52:	f7ff fde7 	bl	8005724 <_fflush_r>
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d1ed      	bne.n	8005b36 <__swbuf_r+0x2a>
 8005b5a:	68a3      	ldr	r3, [r4, #8]
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	60a3      	str	r3, [r4, #8]
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	6022      	str	r2, [r4, #0]
 8005b66:	701e      	strb	r6, [r3, #0]
 8005b68:	6962      	ldr	r2, [r4, #20]
 8005b6a:	1c43      	adds	r3, r0, #1
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d004      	beq.n	8005b7a <__swbuf_r+0x6e>
 8005b70:	89a3      	ldrh	r3, [r4, #12]
 8005b72:	07db      	lsls	r3, r3, #31
 8005b74:	d5e1      	bpl.n	8005b3a <__swbuf_r+0x2e>
 8005b76:	2e0a      	cmp	r6, #10
 8005b78:	d1df      	bne.n	8005b3a <__swbuf_r+0x2e>
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	f7ff fdd1 	bl	8005724 <_fflush_r>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d0d9      	beq.n	8005b3a <__swbuf_r+0x2e>
 8005b86:	e7d6      	b.n	8005b36 <__swbuf_r+0x2a>

08005b88 <__swsetup_r>:
 8005b88:	b538      	push	{r3, r4, r5, lr}
 8005b8a:	4b29      	ldr	r3, [pc, #164]	@ (8005c30 <__swsetup_r+0xa8>)
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	460c      	mov	r4, r1
 8005b92:	b118      	cbz	r0, 8005b9c <__swsetup_r+0x14>
 8005b94:	6a03      	ldr	r3, [r0, #32]
 8005b96:	b90b      	cbnz	r3, 8005b9c <__swsetup_r+0x14>
 8005b98:	f7ff f828 	bl	8004bec <__sinit>
 8005b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ba0:	0719      	lsls	r1, r3, #28
 8005ba2:	d422      	bmi.n	8005bea <__swsetup_r+0x62>
 8005ba4:	06da      	lsls	r2, r3, #27
 8005ba6:	d407      	bmi.n	8005bb8 <__swsetup_r+0x30>
 8005ba8:	2209      	movs	r2, #9
 8005baa:	602a      	str	r2, [r5, #0]
 8005bac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb4:	81a3      	strh	r3, [r4, #12]
 8005bb6:	e033      	b.n	8005c20 <__swsetup_r+0x98>
 8005bb8:	0758      	lsls	r0, r3, #29
 8005bba:	d512      	bpl.n	8005be2 <__swsetup_r+0x5a>
 8005bbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bbe:	b141      	cbz	r1, 8005bd2 <__swsetup_r+0x4a>
 8005bc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bc4:	4299      	cmp	r1, r3
 8005bc6:	d002      	beq.n	8005bce <__swsetup_r+0x46>
 8005bc8:	4628      	mov	r0, r5
 8005bca:	f7ff f945 	bl	8004e58 <_free_r>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bd2:	89a3      	ldrh	r3, [r4, #12]
 8005bd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005bd8:	81a3      	strh	r3, [r4, #12]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	6063      	str	r3, [r4, #4]
 8005bde:	6923      	ldr	r3, [r4, #16]
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	89a3      	ldrh	r3, [r4, #12]
 8005be4:	f043 0308 	orr.w	r3, r3, #8
 8005be8:	81a3      	strh	r3, [r4, #12]
 8005bea:	6923      	ldr	r3, [r4, #16]
 8005bec:	b94b      	cbnz	r3, 8005c02 <__swsetup_r+0x7a>
 8005bee:	89a3      	ldrh	r3, [r4, #12]
 8005bf0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005bf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bf8:	d003      	beq.n	8005c02 <__swsetup_r+0x7a>
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	f000 f88a 	bl	8005d16 <__smakebuf_r>
 8005c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c06:	f013 0201 	ands.w	r2, r3, #1
 8005c0a:	d00a      	beq.n	8005c22 <__swsetup_r+0x9a>
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	60a2      	str	r2, [r4, #8]
 8005c10:	6962      	ldr	r2, [r4, #20]
 8005c12:	4252      	negs	r2, r2
 8005c14:	61a2      	str	r2, [r4, #24]
 8005c16:	6922      	ldr	r2, [r4, #16]
 8005c18:	b942      	cbnz	r2, 8005c2c <__swsetup_r+0xa4>
 8005c1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005c1e:	d1c5      	bne.n	8005bac <__swsetup_r+0x24>
 8005c20:	bd38      	pop	{r3, r4, r5, pc}
 8005c22:	0799      	lsls	r1, r3, #30
 8005c24:	bf58      	it	pl
 8005c26:	6962      	ldrpl	r2, [r4, #20]
 8005c28:	60a2      	str	r2, [r4, #8]
 8005c2a:	e7f4      	b.n	8005c16 <__swsetup_r+0x8e>
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	e7f7      	b.n	8005c20 <__swsetup_r+0x98>
 8005c30:	2000003c 	.word	0x2000003c

08005c34 <_raise_r>:
 8005c34:	291f      	cmp	r1, #31
 8005c36:	b538      	push	{r3, r4, r5, lr}
 8005c38:	4605      	mov	r5, r0
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	d904      	bls.n	8005c48 <_raise_r+0x14>
 8005c3e:	2316      	movs	r3, #22
 8005c40:	6003      	str	r3, [r0, #0]
 8005c42:	f04f 30ff 	mov.w	r0, #4294967295
 8005c46:	bd38      	pop	{r3, r4, r5, pc}
 8005c48:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005c4a:	b112      	cbz	r2, 8005c52 <_raise_r+0x1e>
 8005c4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c50:	b94b      	cbnz	r3, 8005c66 <_raise_r+0x32>
 8005c52:	4628      	mov	r0, r5
 8005c54:	f000 f830 	bl	8005cb8 <_getpid_r>
 8005c58:	4622      	mov	r2, r4
 8005c5a:	4601      	mov	r1, r0
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c62:	f000 b817 	b.w	8005c94 <_kill_r>
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d00a      	beq.n	8005c80 <_raise_r+0x4c>
 8005c6a:	1c59      	adds	r1, r3, #1
 8005c6c:	d103      	bne.n	8005c76 <_raise_r+0x42>
 8005c6e:	2316      	movs	r3, #22
 8005c70:	6003      	str	r3, [r0, #0]
 8005c72:	2001      	movs	r0, #1
 8005c74:	e7e7      	b.n	8005c46 <_raise_r+0x12>
 8005c76:	2100      	movs	r1, #0
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005c7e:	4798      	blx	r3
 8005c80:	2000      	movs	r0, #0
 8005c82:	e7e0      	b.n	8005c46 <_raise_r+0x12>

08005c84 <raise>:
 8005c84:	4b02      	ldr	r3, [pc, #8]	@ (8005c90 <raise+0xc>)
 8005c86:	4601      	mov	r1, r0
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	f7ff bfd3 	b.w	8005c34 <_raise_r>
 8005c8e:	bf00      	nop
 8005c90:	2000003c 	.word	0x2000003c

08005c94 <_kill_r>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	2300      	movs	r3, #0
 8005c98:	4d06      	ldr	r5, [pc, #24]	@ (8005cb4 <_kill_r+0x20>)
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	602b      	str	r3, [r5, #0]
 8005ca2:	f7fd f92e 	bl	8002f02 <_kill>
 8005ca6:	1c43      	adds	r3, r0, #1
 8005ca8:	d102      	bne.n	8005cb0 <_kill_r+0x1c>
 8005caa:	682b      	ldr	r3, [r5, #0]
 8005cac:	b103      	cbz	r3, 8005cb0 <_kill_r+0x1c>
 8005cae:	6023      	str	r3, [r4, #0]
 8005cb0:	bd38      	pop	{r3, r4, r5, pc}
 8005cb2:	bf00      	nop
 8005cb4:	20002a0c 	.word	0x20002a0c

08005cb8 <_getpid_r>:
 8005cb8:	f7fd b91c 	b.w	8002ef4 <_getpid>

08005cbc <_malloc_usable_size_r>:
 8005cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cc0:	1f18      	subs	r0, r3, #4
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	bfbc      	itt	lt
 8005cc6:	580b      	ldrlt	r3, [r1, r0]
 8005cc8:	18c0      	addlt	r0, r0, r3
 8005cca:	4770      	bx	lr

08005ccc <__swhatbuf_r>:
 8005ccc:	b570      	push	{r4, r5, r6, lr}
 8005cce:	460c      	mov	r4, r1
 8005cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd4:	4615      	mov	r5, r2
 8005cd6:	2900      	cmp	r1, #0
 8005cd8:	461e      	mov	r6, r3
 8005cda:	b096      	sub	sp, #88	@ 0x58
 8005cdc:	da0c      	bge.n	8005cf8 <__swhatbuf_r+0x2c>
 8005cde:	89a3      	ldrh	r3, [r4, #12]
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ce6:	bf14      	ite	ne
 8005ce8:	2340      	movne	r3, #64	@ 0x40
 8005cea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005cee:	2000      	movs	r0, #0
 8005cf0:	6031      	str	r1, [r6, #0]
 8005cf2:	602b      	str	r3, [r5, #0]
 8005cf4:	b016      	add	sp, #88	@ 0x58
 8005cf6:	bd70      	pop	{r4, r5, r6, pc}
 8005cf8:	466a      	mov	r2, sp
 8005cfa:	f000 f849 	bl	8005d90 <_fstat_r>
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	dbed      	blt.n	8005cde <__swhatbuf_r+0x12>
 8005d02:	9901      	ldr	r1, [sp, #4]
 8005d04:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d08:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005d0c:	4259      	negs	r1, r3
 8005d0e:	4159      	adcs	r1, r3
 8005d10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d14:	e7eb      	b.n	8005cee <__swhatbuf_r+0x22>

08005d16 <__smakebuf_r>:
 8005d16:	898b      	ldrh	r3, [r1, #12]
 8005d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d1a:	079d      	lsls	r5, r3, #30
 8005d1c:	4606      	mov	r6, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	d507      	bpl.n	8005d32 <__smakebuf_r+0x1c>
 8005d22:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005d26:	6023      	str	r3, [r4, #0]
 8005d28:	6123      	str	r3, [r4, #16]
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	6163      	str	r3, [r4, #20]
 8005d2e:	b003      	add	sp, #12
 8005d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d32:	466a      	mov	r2, sp
 8005d34:	ab01      	add	r3, sp, #4
 8005d36:	f7ff ffc9 	bl	8005ccc <__swhatbuf_r>
 8005d3a:	9f00      	ldr	r7, [sp, #0]
 8005d3c:	4605      	mov	r5, r0
 8005d3e:	4639      	mov	r1, r7
 8005d40:	4630      	mov	r0, r6
 8005d42:	f7ff f8fb 	bl	8004f3c <_malloc_r>
 8005d46:	b948      	cbnz	r0, 8005d5c <__smakebuf_r+0x46>
 8005d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d4c:	059a      	lsls	r2, r3, #22
 8005d4e:	d4ee      	bmi.n	8005d2e <__smakebuf_r+0x18>
 8005d50:	f023 0303 	bic.w	r3, r3, #3
 8005d54:	f043 0302 	orr.w	r3, r3, #2
 8005d58:	81a3      	strh	r3, [r4, #12]
 8005d5a:	e7e2      	b.n	8005d22 <__smakebuf_r+0xc>
 8005d5c:	89a3      	ldrh	r3, [r4, #12]
 8005d5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d66:	81a3      	strh	r3, [r4, #12]
 8005d68:	9b01      	ldr	r3, [sp, #4]
 8005d6a:	6020      	str	r0, [r4, #0]
 8005d6c:	b15b      	cbz	r3, 8005d86 <__smakebuf_r+0x70>
 8005d6e:	4630      	mov	r0, r6
 8005d70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d74:	f000 f81e 	bl	8005db4 <_isatty_r>
 8005d78:	b128      	cbz	r0, 8005d86 <__smakebuf_r+0x70>
 8005d7a:	89a3      	ldrh	r3, [r4, #12]
 8005d7c:	f023 0303 	bic.w	r3, r3, #3
 8005d80:	f043 0301 	orr.w	r3, r3, #1
 8005d84:	81a3      	strh	r3, [r4, #12]
 8005d86:	89a3      	ldrh	r3, [r4, #12]
 8005d88:	431d      	orrs	r5, r3
 8005d8a:	81a5      	strh	r5, [r4, #12]
 8005d8c:	e7cf      	b.n	8005d2e <__smakebuf_r+0x18>
	...

08005d90 <_fstat_r>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	2300      	movs	r3, #0
 8005d94:	4d06      	ldr	r5, [pc, #24]	@ (8005db0 <_fstat_r+0x20>)
 8005d96:	4604      	mov	r4, r0
 8005d98:	4608      	mov	r0, r1
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	602b      	str	r3, [r5, #0]
 8005d9e:	f7fd f90f 	bl	8002fc0 <_fstat>
 8005da2:	1c43      	adds	r3, r0, #1
 8005da4:	d102      	bne.n	8005dac <_fstat_r+0x1c>
 8005da6:	682b      	ldr	r3, [r5, #0]
 8005da8:	b103      	cbz	r3, 8005dac <_fstat_r+0x1c>
 8005daa:	6023      	str	r3, [r4, #0]
 8005dac:	bd38      	pop	{r3, r4, r5, pc}
 8005dae:	bf00      	nop
 8005db0:	20002a0c 	.word	0x20002a0c

08005db4 <_isatty_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	2300      	movs	r3, #0
 8005db8:	4d05      	ldr	r5, [pc, #20]	@ (8005dd0 <_isatty_r+0x1c>)
 8005dba:	4604      	mov	r4, r0
 8005dbc:	4608      	mov	r0, r1
 8005dbe:	602b      	str	r3, [r5, #0]
 8005dc0:	f7fd f90d 	bl	8002fde <_isatty>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	d102      	bne.n	8005dce <_isatty_r+0x1a>
 8005dc8:	682b      	ldr	r3, [r5, #0]
 8005dca:	b103      	cbz	r3, 8005dce <_isatty_r+0x1a>
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	bd38      	pop	{r3, r4, r5, pc}
 8005dd0:	20002a0c 	.word	0x20002a0c

08005dd4 <sqrtf>:
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	4605      	mov	r5, r0
 8005dd8:	f000 f888 	bl	8005eec <__ieee754_sqrtf>
 8005ddc:	4629      	mov	r1, r5
 8005dde:	4604      	mov	r4, r0
 8005de0:	4628      	mov	r0, r5
 8005de2:	f7fa fc87 	bl	80006f4 <__aeabi_fcmpun>
 8005de6:	b968      	cbnz	r0, 8005e04 <sqrtf+0x30>
 8005de8:	2100      	movs	r1, #0
 8005dea:	4628      	mov	r0, r5
 8005dec:	f7fa fc5a 	bl	80006a4 <__aeabi_fcmplt>
 8005df0:	b140      	cbz	r0, 8005e04 <sqrtf+0x30>
 8005df2:	f7fe ffe5 	bl	8004dc0 <__errno>
 8005df6:	2321      	movs	r3, #33	@ 0x21
 8005df8:	2100      	movs	r1, #0
 8005dfa:	6003      	str	r3, [r0, #0]
 8005dfc:	4608      	mov	r0, r1
 8005dfe:	f7fa fb67 	bl	80004d0 <__aeabi_fdiv>
 8005e02:	4604      	mov	r4, r0
 8005e04:	4620      	mov	r0, r4
 8005e06:	bd38      	pop	{r3, r4, r5, pc}

08005e08 <cosf>:
 8005e08:	b507      	push	{r0, r1, r2, lr}
 8005e0a:	4a1a      	ldr	r2, [pc, #104]	@ (8005e74 <cosf+0x6c>)
 8005e0c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8005e10:	4293      	cmp	r3, r2
 8005e12:	4601      	mov	r1, r0
 8005e14:	d805      	bhi.n	8005e22 <cosf+0x1a>
 8005e16:	2100      	movs	r1, #0
 8005e18:	b003      	add	sp, #12
 8005e1a:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e1e:	f000 b8d5 	b.w	8005fcc <__kernel_cosf>
 8005e22:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005e26:	d304      	bcc.n	8005e32 <cosf+0x2a>
 8005e28:	f7fa f994 	bl	8000154 <__aeabi_fsub>
 8005e2c:	b003      	add	sp, #12
 8005e2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e32:	4669      	mov	r1, sp
 8005e34:	f000 f9c0 	bl	80061b8 <__ieee754_rem_pio2f>
 8005e38:	f000 0203 	and.w	r2, r0, #3
 8005e3c:	2a01      	cmp	r2, #1
 8005e3e:	d007      	beq.n	8005e50 <cosf+0x48>
 8005e40:	2a02      	cmp	r2, #2
 8005e42:	d00c      	beq.n	8005e5e <cosf+0x56>
 8005e44:	b982      	cbnz	r2, 8005e68 <cosf+0x60>
 8005e46:	9901      	ldr	r1, [sp, #4]
 8005e48:	9800      	ldr	r0, [sp, #0]
 8005e4a:	f000 f8bf 	bl	8005fcc <__kernel_cosf>
 8005e4e:	e7ed      	b.n	8005e2c <cosf+0x24>
 8005e50:	9901      	ldr	r1, [sp, #4]
 8005e52:	9800      	ldr	r0, [sp, #0]
 8005e54:	f000 f93a 	bl	80060cc <__kernel_sinf>
 8005e58:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8005e5c:	e7e6      	b.n	8005e2c <cosf+0x24>
 8005e5e:	9901      	ldr	r1, [sp, #4]
 8005e60:	9800      	ldr	r0, [sp, #0]
 8005e62:	f000 f8b3 	bl	8005fcc <__kernel_cosf>
 8005e66:	e7f7      	b.n	8005e58 <cosf+0x50>
 8005e68:	2201      	movs	r2, #1
 8005e6a:	9901      	ldr	r1, [sp, #4]
 8005e6c:	9800      	ldr	r0, [sp, #0]
 8005e6e:	f000 f92d 	bl	80060cc <__kernel_sinf>
 8005e72:	e7db      	b.n	8005e2c <cosf+0x24>
 8005e74:	3f490fd8 	.word	0x3f490fd8

08005e78 <sinf>:
 8005e78:	b507      	push	{r0, r1, r2, lr}
 8005e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ee8 <sinf+0x70>)
 8005e7c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8005e80:	4293      	cmp	r3, r2
 8005e82:	4601      	mov	r1, r0
 8005e84:	d806      	bhi.n	8005e94 <sinf+0x1c>
 8005e86:	2200      	movs	r2, #0
 8005e88:	2100      	movs	r1, #0
 8005e8a:	b003      	add	sp, #12
 8005e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e90:	f000 b91c 	b.w	80060cc <__kernel_sinf>
 8005e94:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005e98:	d304      	bcc.n	8005ea4 <sinf+0x2c>
 8005e9a:	f7fa f95b 	bl	8000154 <__aeabi_fsub>
 8005e9e:	b003      	add	sp, #12
 8005ea0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ea4:	4669      	mov	r1, sp
 8005ea6:	f000 f987 	bl	80061b8 <__ieee754_rem_pio2f>
 8005eaa:	f000 0003 	and.w	r0, r0, #3
 8005eae:	2801      	cmp	r0, #1
 8005eb0:	d008      	beq.n	8005ec4 <sinf+0x4c>
 8005eb2:	2802      	cmp	r0, #2
 8005eb4:	d00b      	beq.n	8005ece <sinf+0x56>
 8005eb6:	b990      	cbnz	r0, 8005ede <sinf+0x66>
 8005eb8:	2201      	movs	r2, #1
 8005eba:	9901      	ldr	r1, [sp, #4]
 8005ebc:	9800      	ldr	r0, [sp, #0]
 8005ebe:	f000 f905 	bl	80060cc <__kernel_sinf>
 8005ec2:	e7ec      	b.n	8005e9e <sinf+0x26>
 8005ec4:	9901      	ldr	r1, [sp, #4]
 8005ec6:	9800      	ldr	r0, [sp, #0]
 8005ec8:	f000 f880 	bl	8005fcc <__kernel_cosf>
 8005ecc:	e7e7      	b.n	8005e9e <sinf+0x26>
 8005ece:	2201      	movs	r2, #1
 8005ed0:	9901      	ldr	r1, [sp, #4]
 8005ed2:	9800      	ldr	r0, [sp, #0]
 8005ed4:	f000 f8fa 	bl	80060cc <__kernel_sinf>
 8005ed8:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8005edc:	e7df      	b.n	8005e9e <sinf+0x26>
 8005ede:	9901      	ldr	r1, [sp, #4]
 8005ee0:	9800      	ldr	r0, [sp, #0]
 8005ee2:	f000 f873 	bl	8005fcc <__kernel_cosf>
 8005ee6:	e7f7      	b.n	8005ed8 <sinf+0x60>
 8005ee8:	3f490fd8 	.word	0x3f490fd8

08005eec <__ieee754_sqrtf>:
 8005eec:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8005ef0:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8005ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef8:	4603      	mov	r3, r0
 8005efa:	4604      	mov	r4, r0
 8005efc:	d30a      	bcc.n	8005f14 <__ieee754_sqrtf+0x28>
 8005efe:	4601      	mov	r1, r0
 8005f00:	f7fa fa32 	bl	8000368 <__aeabi_fmul>
 8005f04:	4601      	mov	r1, r0
 8005f06:	4620      	mov	r0, r4
 8005f08:	f7fa f926 	bl	8000158 <__addsf3>
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	4620      	mov	r0, r4
 8005f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f14:	2a00      	cmp	r2, #0
 8005f16:	d0fa      	beq.n	8005f0e <__ieee754_sqrtf+0x22>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	da06      	bge.n	8005f2a <__ieee754_sqrtf+0x3e>
 8005f1c:	4601      	mov	r1, r0
 8005f1e:	f7fa f919 	bl	8000154 <__aeabi_fsub>
 8005f22:	4601      	mov	r1, r0
 8005f24:	f7fa fad4 	bl	80004d0 <__aeabi_fdiv>
 8005f28:	e7f0      	b.n	8005f0c <__ieee754_sqrtf+0x20>
 8005f2a:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8005f2e:	d03c      	beq.n	8005faa <__ieee754_sqrtf+0xbe>
 8005f30:	15c2      	asrs	r2, r0, #23
 8005f32:	2400      	movs	r4, #0
 8005f34:	2019      	movs	r0, #25
 8005f36:	4626      	mov	r6, r4
 8005f38:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8005f3c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005f40:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8005f44:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005f48:	07d2      	lsls	r2, r2, #31
 8005f4a:	bf58      	it	pl
 8005f4c:	005b      	lslpl	r3, r3, #1
 8005f4e:	106d      	asrs	r5, r5, #1
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	1872      	adds	r2, r6, r1
 8005f54:	429a      	cmp	r2, r3
 8005f56:	bfcf      	iteee	gt
 8005f58:	461a      	movgt	r2, r3
 8005f5a:	1856      	addle	r6, r2, r1
 8005f5c:	1864      	addle	r4, r4, r1
 8005f5e:	1a9a      	suble	r2, r3, r2
 8005f60:	3801      	subs	r0, #1
 8005f62:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8005f66:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005f6a:	d1f2      	bne.n	8005f52 <__ieee754_sqrtf+0x66>
 8005f6c:	b1ba      	cbz	r2, 8005f9e <__ieee754_sqrtf+0xb2>
 8005f6e:	4e15      	ldr	r6, [pc, #84]	@ (8005fc4 <__ieee754_sqrtf+0xd8>)
 8005f70:	4f15      	ldr	r7, [pc, #84]	@ (8005fc8 <__ieee754_sqrtf+0xdc>)
 8005f72:	6830      	ldr	r0, [r6, #0]
 8005f74:	6839      	ldr	r1, [r7, #0]
 8005f76:	f7fa f8ed 	bl	8000154 <__aeabi_fsub>
 8005f7a:	f8d6 8000 	ldr.w	r8, [r6]
 8005f7e:	4601      	mov	r1, r0
 8005f80:	4640      	mov	r0, r8
 8005f82:	f7fa fb99 	bl	80006b8 <__aeabi_fcmple>
 8005f86:	b150      	cbz	r0, 8005f9e <__ieee754_sqrtf+0xb2>
 8005f88:	6830      	ldr	r0, [r6, #0]
 8005f8a:	6839      	ldr	r1, [r7, #0]
 8005f8c:	f7fa f8e4 	bl	8000158 <__addsf3>
 8005f90:	6836      	ldr	r6, [r6, #0]
 8005f92:	4601      	mov	r1, r0
 8005f94:	4630      	mov	r0, r6
 8005f96:	f7fa fb85 	bl	80006a4 <__aeabi_fcmplt>
 8005f9a:	b170      	cbz	r0, 8005fba <__ieee754_sqrtf+0xce>
 8005f9c:	3402      	adds	r4, #2
 8005f9e:	1064      	asrs	r4, r4, #1
 8005fa0:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8005fa4:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8005fa8:	e7b1      	b.n	8005f0e <__ieee754_sqrtf+0x22>
 8005faa:	005b      	lsls	r3, r3, #1
 8005fac:	0218      	lsls	r0, r3, #8
 8005fae:	460a      	mov	r2, r1
 8005fb0:	f101 0101 	add.w	r1, r1, #1
 8005fb4:	d5f9      	bpl.n	8005faa <__ieee754_sqrtf+0xbe>
 8005fb6:	4252      	negs	r2, r2
 8005fb8:	e7bb      	b.n	8005f32 <__ieee754_sqrtf+0x46>
 8005fba:	3401      	adds	r4, #1
 8005fbc:	f024 0401 	bic.w	r4, r4, #1
 8005fc0:	e7ed      	b.n	8005f9e <__ieee754_sqrtf+0xb2>
 8005fc2:	bf00      	nop
 8005fc4:	08007960 	.word	0x08007960
 8005fc8:	0800795c 	.word	0x0800795c

08005fcc <__kernel_cosf>:
 8005fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd0:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8005fd4:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 8005fd8:	4606      	mov	r6, r0
 8005fda:	4688      	mov	r8, r1
 8005fdc:	d203      	bcs.n	8005fe6 <__kernel_cosf+0x1a>
 8005fde:	f7fa fb9f 	bl	8000720 <__aeabi_f2iz>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	d05c      	beq.n	80060a0 <__kernel_cosf+0xd4>
 8005fe6:	4631      	mov	r1, r6
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f7fa f9bd 	bl	8000368 <__aeabi_fmul>
 8005fee:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	f7fa f9b8 	bl	8000368 <__aeabi_fmul>
 8005ff8:	492b      	ldr	r1, [pc, #172]	@ (80060a8 <__kernel_cosf+0xdc>)
 8005ffa:	4607      	mov	r7, r0
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f7fa f9b3 	bl	8000368 <__aeabi_fmul>
 8006002:	492a      	ldr	r1, [pc, #168]	@ (80060ac <__kernel_cosf+0xe0>)
 8006004:	f7fa f8a8 	bl	8000158 <__addsf3>
 8006008:	4621      	mov	r1, r4
 800600a:	f7fa f9ad 	bl	8000368 <__aeabi_fmul>
 800600e:	4928      	ldr	r1, [pc, #160]	@ (80060b0 <__kernel_cosf+0xe4>)
 8006010:	f7fa f8a0 	bl	8000154 <__aeabi_fsub>
 8006014:	4621      	mov	r1, r4
 8006016:	f7fa f9a7 	bl	8000368 <__aeabi_fmul>
 800601a:	4926      	ldr	r1, [pc, #152]	@ (80060b4 <__kernel_cosf+0xe8>)
 800601c:	f7fa f89c 	bl	8000158 <__addsf3>
 8006020:	4621      	mov	r1, r4
 8006022:	f7fa f9a1 	bl	8000368 <__aeabi_fmul>
 8006026:	4924      	ldr	r1, [pc, #144]	@ (80060b8 <__kernel_cosf+0xec>)
 8006028:	f7fa f894 	bl	8000154 <__aeabi_fsub>
 800602c:	4621      	mov	r1, r4
 800602e:	f7fa f99b 	bl	8000368 <__aeabi_fmul>
 8006032:	4922      	ldr	r1, [pc, #136]	@ (80060bc <__kernel_cosf+0xf0>)
 8006034:	f7fa f890 	bl	8000158 <__addsf3>
 8006038:	4621      	mov	r1, r4
 800603a:	f7fa f995 	bl	8000368 <__aeabi_fmul>
 800603e:	4621      	mov	r1, r4
 8006040:	f7fa f992 	bl	8000368 <__aeabi_fmul>
 8006044:	4641      	mov	r1, r8
 8006046:	4604      	mov	r4, r0
 8006048:	4630      	mov	r0, r6
 800604a:	f7fa f98d 	bl	8000368 <__aeabi_fmul>
 800604e:	4601      	mov	r1, r0
 8006050:	4620      	mov	r0, r4
 8006052:	f7fa f87f 	bl	8000154 <__aeabi_fsub>
 8006056:	4b1a      	ldr	r3, [pc, #104]	@ (80060c0 <__kernel_cosf+0xf4>)
 8006058:	4604      	mov	r4, r0
 800605a:	429d      	cmp	r5, r3
 800605c:	d80a      	bhi.n	8006074 <__kernel_cosf+0xa8>
 800605e:	4601      	mov	r1, r0
 8006060:	4638      	mov	r0, r7
 8006062:	f7fa f877 	bl	8000154 <__aeabi_fsub>
 8006066:	4601      	mov	r1, r0
 8006068:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800606c:	f7fa f872 	bl	8000154 <__aeabi_fsub>
 8006070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006074:	4b13      	ldr	r3, [pc, #76]	@ (80060c4 <__kernel_cosf+0xf8>)
 8006076:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800607a:	429d      	cmp	r5, r3
 800607c:	bf8c      	ite	hi
 800607e:	4d12      	ldrhi	r5, [pc, #72]	@ (80060c8 <__kernel_cosf+0xfc>)
 8006080:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 8006084:	4629      	mov	r1, r5
 8006086:	f7fa f865 	bl	8000154 <__aeabi_fsub>
 800608a:	4629      	mov	r1, r5
 800608c:	4606      	mov	r6, r0
 800608e:	4638      	mov	r0, r7
 8006090:	f7fa f860 	bl	8000154 <__aeabi_fsub>
 8006094:	4621      	mov	r1, r4
 8006096:	f7fa f85d 	bl	8000154 <__aeabi_fsub>
 800609a:	4601      	mov	r1, r0
 800609c:	4630      	mov	r0, r6
 800609e:	e7e5      	b.n	800606c <__kernel_cosf+0xa0>
 80060a0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80060a4:	e7e4      	b.n	8006070 <__kernel_cosf+0xa4>
 80060a6:	bf00      	nop
 80060a8:	ad47d74e 	.word	0xad47d74e
 80060ac:	310f74f6 	.word	0x310f74f6
 80060b0:	3493f27c 	.word	0x3493f27c
 80060b4:	37d00d01 	.word	0x37d00d01
 80060b8:	3ab60b61 	.word	0x3ab60b61
 80060bc:	3d2aaaab 	.word	0x3d2aaaab
 80060c0:	3e999999 	.word	0x3e999999
 80060c4:	3f480000 	.word	0x3f480000
 80060c8:	3e900000 	.word	0x3e900000

080060cc <__kernel_sinf>:
 80060cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060d0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80060d4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80060d8:	4604      	mov	r4, r0
 80060da:	460f      	mov	r7, r1
 80060dc:	4691      	mov	r9, r2
 80060de:	d203      	bcs.n	80060e8 <__kernel_sinf+0x1c>
 80060e0:	f7fa fb1e 	bl	8000720 <__aeabi_f2iz>
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d035      	beq.n	8006154 <__kernel_sinf+0x88>
 80060e8:	4621      	mov	r1, r4
 80060ea:	4620      	mov	r0, r4
 80060ec:	f7fa f93c 	bl	8000368 <__aeabi_fmul>
 80060f0:	4605      	mov	r5, r0
 80060f2:	4601      	mov	r1, r0
 80060f4:	4620      	mov	r0, r4
 80060f6:	f7fa f937 	bl	8000368 <__aeabi_fmul>
 80060fa:	4929      	ldr	r1, [pc, #164]	@ (80061a0 <__kernel_sinf+0xd4>)
 80060fc:	4606      	mov	r6, r0
 80060fe:	4628      	mov	r0, r5
 8006100:	f7fa f932 	bl	8000368 <__aeabi_fmul>
 8006104:	4927      	ldr	r1, [pc, #156]	@ (80061a4 <__kernel_sinf+0xd8>)
 8006106:	f7fa f825 	bl	8000154 <__aeabi_fsub>
 800610a:	4629      	mov	r1, r5
 800610c:	f7fa f92c 	bl	8000368 <__aeabi_fmul>
 8006110:	4925      	ldr	r1, [pc, #148]	@ (80061a8 <__kernel_sinf+0xdc>)
 8006112:	f7fa f821 	bl	8000158 <__addsf3>
 8006116:	4629      	mov	r1, r5
 8006118:	f7fa f926 	bl	8000368 <__aeabi_fmul>
 800611c:	4923      	ldr	r1, [pc, #140]	@ (80061ac <__kernel_sinf+0xe0>)
 800611e:	f7fa f819 	bl	8000154 <__aeabi_fsub>
 8006122:	4629      	mov	r1, r5
 8006124:	f7fa f920 	bl	8000368 <__aeabi_fmul>
 8006128:	4921      	ldr	r1, [pc, #132]	@ (80061b0 <__kernel_sinf+0xe4>)
 800612a:	f7fa f815 	bl	8000158 <__addsf3>
 800612e:	4680      	mov	r8, r0
 8006130:	f1b9 0f00 	cmp.w	r9, #0
 8006134:	d111      	bne.n	800615a <__kernel_sinf+0x8e>
 8006136:	4601      	mov	r1, r0
 8006138:	4628      	mov	r0, r5
 800613a:	f7fa f915 	bl	8000368 <__aeabi_fmul>
 800613e:	491d      	ldr	r1, [pc, #116]	@ (80061b4 <__kernel_sinf+0xe8>)
 8006140:	f7fa f808 	bl	8000154 <__aeabi_fsub>
 8006144:	4631      	mov	r1, r6
 8006146:	f7fa f90f 	bl	8000368 <__aeabi_fmul>
 800614a:	4601      	mov	r1, r0
 800614c:	4620      	mov	r0, r4
 800614e:	f7fa f803 	bl	8000158 <__addsf3>
 8006152:	4604      	mov	r4, r0
 8006154:	4620      	mov	r0, r4
 8006156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800615a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800615e:	4638      	mov	r0, r7
 8006160:	f7fa f902 	bl	8000368 <__aeabi_fmul>
 8006164:	4641      	mov	r1, r8
 8006166:	4681      	mov	r9, r0
 8006168:	4630      	mov	r0, r6
 800616a:	f7fa f8fd 	bl	8000368 <__aeabi_fmul>
 800616e:	4601      	mov	r1, r0
 8006170:	4648      	mov	r0, r9
 8006172:	f7f9 ffef 	bl	8000154 <__aeabi_fsub>
 8006176:	4629      	mov	r1, r5
 8006178:	f7fa f8f6 	bl	8000368 <__aeabi_fmul>
 800617c:	4639      	mov	r1, r7
 800617e:	f7f9 ffe9 	bl	8000154 <__aeabi_fsub>
 8006182:	490c      	ldr	r1, [pc, #48]	@ (80061b4 <__kernel_sinf+0xe8>)
 8006184:	4605      	mov	r5, r0
 8006186:	4630      	mov	r0, r6
 8006188:	f7fa f8ee 	bl	8000368 <__aeabi_fmul>
 800618c:	4601      	mov	r1, r0
 800618e:	4628      	mov	r0, r5
 8006190:	f7f9 ffe2 	bl	8000158 <__addsf3>
 8006194:	4601      	mov	r1, r0
 8006196:	4620      	mov	r0, r4
 8006198:	f7f9 ffdc 	bl	8000154 <__aeabi_fsub>
 800619c:	e7d9      	b.n	8006152 <__kernel_sinf+0x86>
 800619e:	bf00      	nop
 80061a0:	2f2ec9d3 	.word	0x2f2ec9d3
 80061a4:	32d72f34 	.word	0x32d72f34
 80061a8:	3638ef1b 	.word	0x3638ef1b
 80061ac:	39500d01 	.word	0x39500d01
 80061b0:	3c088889 	.word	0x3c088889
 80061b4:	3e2aaaab 	.word	0x3e2aaaab

080061b8 <__ieee754_rem_pio2f>:
 80061b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061bc:	4aa4      	ldr	r2, [pc, #656]	@ (8006450 <__ieee754_rem_pio2f+0x298>)
 80061be:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 80061c2:	4590      	cmp	r8, r2
 80061c4:	460c      	mov	r4, r1
 80061c6:	4682      	mov	sl, r0
 80061c8:	b087      	sub	sp, #28
 80061ca:	d804      	bhi.n	80061d6 <__ieee754_rem_pio2f+0x1e>
 80061cc:	2300      	movs	r3, #0
 80061ce:	6008      	str	r0, [r1, #0]
 80061d0:	604b      	str	r3, [r1, #4]
 80061d2:	2500      	movs	r5, #0
 80061d4:	e01d      	b.n	8006212 <__ieee754_rem_pio2f+0x5a>
 80061d6:	4a9f      	ldr	r2, [pc, #636]	@ (8006454 <__ieee754_rem_pio2f+0x29c>)
 80061d8:	4590      	cmp	r8, r2
 80061da:	d84f      	bhi.n	800627c <__ieee754_rem_pio2f+0xc4>
 80061dc:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 80061e0:	2800      	cmp	r0, #0
 80061e2:	499d      	ldr	r1, [pc, #628]	@ (8006458 <__ieee754_rem_pio2f+0x2a0>)
 80061e4:	4f9d      	ldr	r7, [pc, #628]	@ (800645c <__ieee754_rem_pio2f+0x2a4>)
 80061e6:	f025 050f 	bic.w	r5, r5, #15
 80061ea:	dd24      	ble.n	8006236 <__ieee754_rem_pio2f+0x7e>
 80061ec:	f7f9 ffb2 	bl	8000154 <__aeabi_fsub>
 80061f0:	42bd      	cmp	r5, r7
 80061f2:	4606      	mov	r6, r0
 80061f4:	d011      	beq.n	800621a <__ieee754_rem_pio2f+0x62>
 80061f6:	499a      	ldr	r1, [pc, #616]	@ (8006460 <__ieee754_rem_pio2f+0x2a8>)
 80061f8:	f7f9 ffac 	bl	8000154 <__aeabi_fsub>
 80061fc:	4601      	mov	r1, r0
 80061fe:	4605      	mov	r5, r0
 8006200:	4630      	mov	r0, r6
 8006202:	f7f9 ffa7 	bl	8000154 <__aeabi_fsub>
 8006206:	4996      	ldr	r1, [pc, #600]	@ (8006460 <__ieee754_rem_pio2f+0x2a8>)
 8006208:	f7f9 ffa4 	bl	8000154 <__aeabi_fsub>
 800620c:	6025      	str	r5, [r4, #0]
 800620e:	2501      	movs	r5, #1
 8006210:	6060      	str	r0, [r4, #4]
 8006212:	4628      	mov	r0, r5
 8006214:	b007      	add	sp, #28
 8006216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800621a:	4992      	ldr	r1, [pc, #584]	@ (8006464 <__ieee754_rem_pio2f+0x2ac>)
 800621c:	f7f9 ff9a 	bl	8000154 <__aeabi_fsub>
 8006220:	4991      	ldr	r1, [pc, #580]	@ (8006468 <__ieee754_rem_pio2f+0x2b0>)
 8006222:	4606      	mov	r6, r0
 8006224:	f7f9 ff96 	bl	8000154 <__aeabi_fsub>
 8006228:	4601      	mov	r1, r0
 800622a:	4605      	mov	r5, r0
 800622c:	4630      	mov	r0, r6
 800622e:	f7f9 ff91 	bl	8000154 <__aeabi_fsub>
 8006232:	498d      	ldr	r1, [pc, #564]	@ (8006468 <__ieee754_rem_pio2f+0x2b0>)
 8006234:	e7e8      	b.n	8006208 <__ieee754_rem_pio2f+0x50>
 8006236:	f7f9 ff8f 	bl	8000158 <__addsf3>
 800623a:	42bd      	cmp	r5, r7
 800623c:	4606      	mov	r6, r0
 800623e:	d00f      	beq.n	8006260 <__ieee754_rem_pio2f+0xa8>
 8006240:	4987      	ldr	r1, [pc, #540]	@ (8006460 <__ieee754_rem_pio2f+0x2a8>)
 8006242:	f7f9 ff89 	bl	8000158 <__addsf3>
 8006246:	4601      	mov	r1, r0
 8006248:	4605      	mov	r5, r0
 800624a:	4630      	mov	r0, r6
 800624c:	f7f9 ff82 	bl	8000154 <__aeabi_fsub>
 8006250:	4983      	ldr	r1, [pc, #524]	@ (8006460 <__ieee754_rem_pio2f+0x2a8>)
 8006252:	f7f9 ff81 	bl	8000158 <__addsf3>
 8006256:	6025      	str	r5, [r4, #0]
 8006258:	6060      	str	r0, [r4, #4]
 800625a:	f04f 35ff 	mov.w	r5, #4294967295
 800625e:	e7d8      	b.n	8006212 <__ieee754_rem_pio2f+0x5a>
 8006260:	4980      	ldr	r1, [pc, #512]	@ (8006464 <__ieee754_rem_pio2f+0x2ac>)
 8006262:	f7f9 ff79 	bl	8000158 <__addsf3>
 8006266:	4980      	ldr	r1, [pc, #512]	@ (8006468 <__ieee754_rem_pio2f+0x2b0>)
 8006268:	4606      	mov	r6, r0
 800626a:	f7f9 ff75 	bl	8000158 <__addsf3>
 800626e:	4601      	mov	r1, r0
 8006270:	4605      	mov	r5, r0
 8006272:	4630      	mov	r0, r6
 8006274:	f7f9 ff6e 	bl	8000154 <__aeabi_fsub>
 8006278:	497b      	ldr	r1, [pc, #492]	@ (8006468 <__ieee754_rem_pio2f+0x2b0>)
 800627a:	e7ea      	b.n	8006252 <__ieee754_rem_pio2f+0x9a>
 800627c:	4a7b      	ldr	r2, [pc, #492]	@ (800646c <__ieee754_rem_pio2f+0x2b4>)
 800627e:	4590      	cmp	r8, r2
 8006280:	f200 8095 	bhi.w	80063ae <__ieee754_rem_pio2f+0x1f6>
 8006284:	f000 f8fe 	bl	8006484 <fabsf>
 8006288:	4979      	ldr	r1, [pc, #484]	@ (8006470 <__ieee754_rem_pio2f+0x2b8>)
 800628a:	4606      	mov	r6, r0
 800628c:	f7fa f86c 	bl	8000368 <__aeabi_fmul>
 8006290:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006294:	f7f9 ff60 	bl	8000158 <__addsf3>
 8006298:	f7fa fa42 	bl	8000720 <__aeabi_f2iz>
 800629c:	4605      	mov	r5, r0
 800629e:	f7fa f80f 	bl	80002c0 <__aeabi_i2f>
 80062a2:	496d      	ldr	r1, [pc, #436]	@ (8006458 <__ieee754_rem_pio2f+0x2a0>)
 80062a4:	4681      	mov	r9, r0
 80062a6:	f7fa f85f 	bl	8000368 <__aeabi_fmul>
 80062aa:	4601      	mov	r1, r0
 80062ac:	4630      	mov	r0, r6
 80062ae:	f7f9 ff51 	bl	8000154 <__aeabi_fsub>
 80062b2:	496b      	ldr	r1, [pc, #428]	@ (8006460 <__ieee754_rem_pio2f+0x2a8>)
 80062b4:	4607      	mov	r7, r0
 80062b6:	4648      	mov	r0, r9
 80062b8:	f7fa f856 	bl	8000368 <__aeabi_fmul>
 80062bc:	2d1f      	cmp	r5, #31
 80062be:	4606      	mov	r6, r0
 80062c0:	dc0e      	bgt.n	80062e0 <__ieee754_rem_pio2f+0x128>
 80062c2:	4a6c      	ldr	r2, [pc, #432]	@ (8006474 <__ieee754_rem_pio2f+0x2bc>)
 80062c4:	1e69      	subs	r1, r5, #1
 80062c6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80062ca:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 80062ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d004      	beq.n	80062e0 <__ieee754_rem_pio2f+0x128>
 80062d6:	4631      	mov	r1, r6
 80062d8:	4638      	mov	r0, r7
 80062da:	f7f9 ff3b 	bl	8000154 <__aeabi_fsub>
 80062de:	e00b      	b.n	80062f8 <__ieee754_rem_pio2f+0x140>
 80062e0:	4631      	mov	r1, r6
 80062e2:	4638      	mov	r0, r7
 80062e4:	f7f9 ff36 	bl	8000154 <__aeabi_fsub>
 80062e8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80062ec:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	ea4f 5be8 	mov.w	fp, r8, asr #23
 80062f6:	dc01      	bgt.n	80062fc <__ieee754_rem_pio2f+0x144>
 80062f8:	6020      	str	r0, [r4, #0]
 80062fa:	e026      	b.n	800634a <__ieee754_rem_pio2f+0x192>
 80062fc:	4959      	ldr	r1, [pc, #356]	@ (8006464 <__ieee754_rem_pio2f+0x2ac>)
 80062fe:	4648      	mov	r0, r9
 8006300:	f7fa f832 	bl	8000368 <__aeabi_fmul>
 8006304:	4606      	mov	r6, r0
 8006306:	4601      	mov	r1, r0
 8006308:	4638      	mov	r0, r7
 800630a:	f7f9 ff23 	bl	8000154 <__aeabi_fsub>
 800630e:	4601      	mov	r1, r0
 8006310:	4680      	mov	r8, r0
 8006312:	4638      	mov	r0, r7
 8006314:	f7f9 ff1e 	bl	8000154 <__aeabi_fsub>
 8006318:	4631      	mov	r1, r6
 800631a:	f7f9 ff1b 	bl	8000154 <__aeabi_fsub>
 800631e:	4606      	mov	r6, r0
 8006320:	4951      	ldr	r1, [pc, #324]	@ (8006468 <__ieee754_rem_pio2f+0x2b0>)
 8006322:	4648      	mov	r0, r9
 8006324:	f7fa f820 	bl	8000368 <__aeabi_fmul>
 8006328:	4631      	mov	r1, r6
 800632a:	f7f9 ff13 	bl	8000154 <__aeabi_fsub>
 800632e:	4601      	mov	r1, r0
 8006330:	4606      	mov	r6, r0
 8006332:	4640      	mov	r0, r8
 8006334:	f7f9 ff0e 	bl	8000154 <__aeabi_fsub>
 8006338:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800633c:	ebab 0b03 	sub.w	fp, fp, r3
 8006340:	f1bb 0f19 	cmp.w	fp, #25
 8006344:	dc18      	bgt.n	8006378 <__ieee754_rem_pio2f+0x1c0>
 8006346:	4647      	mov	r7, r8
 8006348:	6020      	str	r0, [r4, #0]
 800634a:	f8d4 8000 	ldr.w	r8, [r4]
 800634e:	4638      	mov	r0, r7
 8006350:	4641      	mov	r1, r8
 8006352:	f7f9 feff 	bl	8000154 <__aeabi_fsub>
 8006356:	4631      	mov	r1, r6
 8006358:	f7f9 fefc 	bl	8000154 <__aeabi_fsub>
 800635c:	f1ba 0f00 	cmp.w	sl, #0
 8006360:	6060      	str	r0, [r4, #4]
 8006362:	f6bf af56 	bge.w	8006212 <__ieee754_rem_pio2f+0x5a>
 8006366:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 800636a:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800636e:	f8c4 8000 	str.w	r8, [r4]
 8006372:	6060      	str	r0, [r4, #4]
 8006374:	426d      	negs	r5, r5
 8006376:	e74c      	b.n	8006212 <__ieee754_rem_pio2f+0x5a>
 8006378:	493f      	ldr	r1, [pc, #252]	@ (8006478 <__ieee754_rem_pio2f+0x2c0>)
 800637a:	4648      	mov	r0, r9
 800637c:	f7f9 fff4 	bl	8000368 <__aeabi_fmul>
 8006380:	4606      	mov	r6, r0
 8006382:	4601      	mov	r1, r0
 8006384:	4640      	mov	r0, r8
 8006386:	f7f9 fee5 	bl	8000154 <__aeabi_fsub>
 800638a:	4601      	mov	r1, r0
 800638c:	4607      	mov	r7, r0
 800638e:	4640      	mov	r0, r8
 8006390:	f7f9 fee0 	bl	8000154 <__aeabi_fsub>
 8006394:	4631      	mov	r1, r6
 8006396:	f7f9 fedd 	bl	8000154 <__aeabi_fsub>
 800639a:	4606      	mov	r6, r0
 800639c:	4937      	ldr	r1, [pc, #220]	@ (800647c <__ieee754_rem_pio2f+0x2c4>)
 800639e:	4648      	mov	r0, r9
 80063a0:	f7f9 ffe2 	bl	8000368 <__aeabi_fmul>
 80063a4:	4631      	mov	r1, r6
 80063a6:	f7f9 fed5 	bl	8000154 <__aeabi_fsub>
 80063aa:	4606      	mov	r6, r0
 80063ac:	e793      	b.n	80062d6 <__ieee754_rem_pio2f+0x11e>
 80063ae:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80063b2:	d305      	bcc.n	80063c0 <__ieee754_rem_pio2f+0x208>
 80063b4:	4601      	mov	r1, r0
 80063b6:	f7f9 fecd 	bl	8000154 <__aeabi_fsub>
 80063ba:	6060      	str	r0, [r4, #4]
 80063bc:	6020      	str	r0, [r4, #0]
 80063be:	e708      	b.n	80061d2 <__ieee754_rem_pio2f+0x1a>
 80063c0:	ea4f 56e8 	mov.w	r6, r8, asr #23
 80063c4:	3e86      	subs	r6, #134	@ 0x86
 80063c6:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 80063ca:	4640      	mov	r0, r8
 80063cc:	f7fa f9a8 	bl	8000720 <__aeabi_f2iz>
 80063d0:	f7f9 ff76 	bl	80002c0 <__aeabi_i2f>
 80063d4:	4601      	mov	r1, r0
 80063d6:	9003      	str	r0, [sp, #12]
 80063d8:	4640      	mov	r0, r8
 80063da:	f7f9 febb 	bl	8000154 <__aeabi_fsub>
 80063de:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80063e2:	f7f9 ffc1 	bl	8000368 <__aeabi_fmul>
 80063e6:	4607      	mov	r7, r0
 80063e8:	f7fa f99a 	bl	8000720 <__aeabi_f2iz>
 80063ec:	f7f9 ff68 	bl	80002c0 <__aeabi_i2f>
 80063f0:	4601      	mov	r1, r0
 80063f2:	9004      	str	r0, [sp, #16]
 80063f4:	4605      	mov	r5, r0
 80063f6:	4638      	mov	r0, r7
 80063f8:	f7f9 feac 	bl	8000154 <__aeabi_fsub>
 80063fc:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8006400:	f7f9 ffb2 	bl	8000368 <__aeabi_fmul>
 8006404:	2100      	movs	r1, #0
 8006406:	9005      	str	r0, [sp, #20]
 8006408:	f7fa f942 	bl	8000690 <__aeabi_fcmpeq>
 800640c:	b1f0      	cbz	r0, 800644c <__ieee754_rem_pio2f+0x294>
 800640e:	2100      	movs	r1, #0
 8006410:	4628      	mov	r0, r5
 8006412:	f7fa f93d 	bl	8000690 <__aeabi_fcmpeq>
 8006416:	2800      	cmp	r0, #0
 8006418:	bf14      	ite	ne
 800641a:	2301      	movne	r3, #1
 800641c:	2302      	moveq	r3, #2
 800641e:	4a18      	ldr	r2, [pc, #96]	@ (8006480 <__ieee754_rem_pio2f+0x2c8>)
 8006420:	4621      	mov	r1, r4
 8006422:	9201      	str	r2, [sp, #4]
 8006424:	2202      	movs	r2, #2
 8006426:	a803      	add	r0, sp, #12
 8006428:	9200      	str	r2, [sp, #0]
 800642a:	4632      	mov	r2, r6
 800642c:	f000 f87a 	bl	8006524 <__kernel_rem_pio2f>
 8006430:	f1ba 0f00 	cmp.w	sl, #0
 8006434:	4605      	mov	r5, r0
 8006436:	f6bf aeec 	bge.w	8006212 <__ieee754_rem_pio2f+0x5a>
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006440:	6023      	str	r3, [r4, #0]
 8006442:	6863      	ldr	r3, [r4, #4]
 8006444:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006448:	6063      	str	r3, [r4, #4]
 800644a:	e793      	b.n	8006374 <__ieee754_rem_pio2f+0x1bc>
 800644c:	2303      	movs	r3, #3
 800644e:	e7e6      	b.n	800641e <__ieee754_rem_pio2f+0x266>
 8006450:	3f490fd8 	.word	0x3f490fd8
 8006454:	4016cbe3 	.word	0x4016cbe3
 8006458:	3fc90f80 	.word	0x3fc90f80
 800645c:	3fc90fd0 	.word	0x3fc90fd0
 8006460:	37354443 	.word	0x37354443
 8006464:	37354400 	.word	0x37354400
 8006468:	2e85a308 	.word	0x2e85a308
 800646c:	43490f80 	.word	0x43490f80
 8006470:	3f22f984 	.word	0x3f22f984
 8006474:	08007964 	.word	0x08007964
 8006478:	2e85a300 	.word	0x2e85a300
 800647c:	248d3132 	.word	0x248d3132
 8006480:	080079e4 	.word	0x080079e4

08006484 <fabsf>:
 8006484:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006488:	4770      	bx	lr
	...

0800648c <scalbnf>:
 800648c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	4603      	mov	r3, r0
 8006494:	460d      	mov	r5, r1
 8006496:	4604      	mov	r4, r0
 8006498:	d02e      	beq.n	80064f8 <scalbnf+0x6c>
 800649a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800649e:	d304      	bcc.n	80064aa <scalbnf+0x1e>
 80064a0:	4601      	mov	r1, r0
 80064a2:	f7f9 fe59 	bl	8000158 <__addsf3>
 80064a6:	4603      	mov	r3, r0
 80064a8:	e026      	b.n	80064f8 <scalbnf+0x6c>
 80064aa:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 80064ae:	d118      	bne.n	80064e2 <scalbnf+0x56>
 80064b0:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 80064b4:	f7f9 ff58 	bl	8000368 <__aeabi_fmul>
 80064b8:	4a17      	ldr	r2, [pc, #92]	@ (8006518 <scalbnf+0x8c>)
 80064ba:	4603      	mov	r3, r0
 80064bc:	4295      	cmp	r5, r2
 80064be:	db0c      	blt.n	80064da <scalbnf+0x4e>
 80064c0:	4604      	mov	r4, r0
 80064c2:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80064c6:	3a19      	subs	r2, #25
 80064c8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80064cc:	428d      	cmp	r5, r1
 80064ce:	dd0a      	ble.n	80064e6 <scalbnf+0x5a>
 80064d0:	4912      	ldr	r1, [pc, #72]	@ (800651c <scalbnf+0x90>)
 80064d2:	4618      	mov	r0, r3
 80064d4:	f361 001e 	bfi	r0, r1, #0, #31
 80064d8:	e000      	b.n	80064dc <scalbnf+0x50>
 80064da:	4911      	ldr	r1, [pc, #68]	@ (8006520 <scalbnf+0x94>)
 80064dc:	f7f9 ff44 	bl	8000368 <__aeabi_fmul>
 80064e0:	e7e1      	b.n	80064a6 <scalbnf+0x1a>
 80064e2:	0dd2      	lsrs	r2, r2, #23
 80064e4:	e7f0      	b.n	80064c8 <scalbnf+0x3c>
 80064e6:	1951      	adds	r1, r2, r5
 80064e8:	29fe      	cmp	r1, #254	@ 0xfe
 80064ea:	dcf1      	bgt.n	80064d0 <scalbnf+0x44>
 80064ec:	2900      	cmp	r1, #0
 80064ee:	dd05      	ble.n	80064fc <scalbnf+0x70>
 80064f0:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 80064f4:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 80064f8:	4618      	mov	r0, r3
 80064fa:	bd38      	pop	{r3, r4, r5, pc}
 80064fc:	f111 0f16 	cmn.w	r1, #22
 8006500:	da01      	bge.n	8006506 <scalbnf+0x7a>
 8006502:	4907      	ldr	r1, [pc, #28]	@ (8006520 <scalbnf+0x94>)
 8006504:	e7e5      	b.n	80064d2 <scalbnf+0x46>
 8006506:	f101 0019 	add.w	r0, r1, #25
 800650a:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800650e:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8006512:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8006516:	e7e1      	b.n	80064dc <scalbnf+0x50>
 8006518:	ffff3cb0 	.word	0xffff3cb0
 800651c:	7149f2ca 	.word	0x7149f2ca
 8006520:	0da24260 	.word	0x0da24260

08006524 <__kernel_rem_pio2f>:
 8006524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006528:	b0db      	sub	sp, #364	@ 0x16c
 800652a:	9202      	str	r2, [sp, #8]
 800652c:	9304      	str	r3, [sp, #16]
 800652e:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8006530:	4bac      	ldr	r3, [pc, #688]	@ (80067e4 <__kernel_rem_pio2f+0x2c0>)
 8006532:	9005      	str	r0, [sp, #20]
 8006534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006538:	9100      	str	r1, [sp, #0]
 800653a:	9301      	str	r3, [sp, #4]
 800653c:	9b04      	ldr	r3, [sp, #16]
 800653e:	3b01      	subs	r3, #1
 8006540:	9303      	str	r3, [sp, #12]
 8006542:	9b02      	ldr	r3, [sp, #8]
 8006544:	1d1a      	adds	r2, r3, #4
 8006546:	f2c0 8099 	blt.w	800667c <__kernel_rem_pio2f+0x158>
 800654a:	1edc      	subs	r4, r3, #3
 800654c:	bf48      	it	mi
 800654e:	1d1c      	addmi	r4, r3, #4
 8006550:	10e4      	asrs	r4, r4, #3
 8006552:	2500      	movs	r5, #0
 8006554:	f04f 0b00 	mov.w	fp, #0
 8006558:	1c67      	adds	r7, r4, #1
 800655a:	00fb      	lsls	r3, r7, #3
 800655c:	9306      	str	r3, [sp, #24]
 800655e:	9b02      	ldr	r3, [sp, #8]
 8006560:	9a03      	ldr	r2, [sp, #12]
 8006562:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8006566:	9b01      	ldr	r3, [sp, #4]
 8006568:	eba4 0802 	sub.w	r8, r4, r2
 800656c:	eb03 0902 	add.w	r9, r3, r2
 8006570:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8006572:	ae1e      	add	r6, sp, #120	@ 0x78
 8006574:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8006578:	454d      	cmp	r5, r9
 800657a:	f340 8081 	ble.w	8006680 <__kernel_rem_pio2f+0x15c>
 800657e:	9a04      	ldr	r2, [sp, #16]
 8006580:	ab1e      	add	r3, sp, #120	@ 0x78
 8006582:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8006586:	f04f 0900 	mov.w	r9, #0
 800658a:	2300      	movs	r3, #0
 800658c:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8006590:	9a01      	ldr	r2, [sp, #4]
 8006592:	4591      	cmp	r9, r2
 8006594:	f340 809a 	ble.w	80066cc <__kernel_rem_pio2f+0x1a8>
 8006598:	4613      	mov	r3, r2
 800659a:	aa0a      	add	r2, sp, #40	@ 0x28
 800659c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80065a0:	9308      	str	r3, [sp, #32]
 80065a2:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 80065a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80065a8:	9c01      	ldr	r4, [sp, #4]
 80065aa:	9307      	str	r3, [sp, #28]
 80065ac:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 80065b0:	4646      	mov	r6, r8
 80065b2:	4625      	mov	r5, r4
 80065b4:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 80065b8:	ab5a      	add	r3, sp, #360	@ 0x168
 80065ba:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80065be:	f853 bc50 	ldr.w	fp, [r3, #-80]
 80065c2:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 80065c6:	2d00      	cmp	r5, #0
 80065c8:	f300 8085 	bgt.w	80066d6 <__kernel_rem_pio2f+0x1b2>
 80065cc:	4639      	mov	r1, r7
 80065ce:	4658      	mov	r0, fp
 80065d0:	f7ff ff5c 	bl	800648c <scalbnf>
 80065d4:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 80065d8:	4605      	mov	r5, r0
 80065da:	f7f9 fec5 	bl	8000368 <__aeabi_fmul>
 80065de:	f000 fa3f 	bl	8006a60 <floorf>
 80065e2:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80065e6:	f7f9 febf 	bl	8000368 <__aeabi_fmul>
 80065ea:	4601      	mov	r1, r0
 80065ec:	4628      	mov	r0, r5
 80065ee:	f7f9 fdb1 	bl	8000154 <__aeabi_fsub>
 80065f2:	4605      	mov	r5, r0
 80065f4:	f7fa f894 	bl	8000720 <__aeabi_f2iz>
 80065f8:	4606      	mov	r6, r0
 80065fa:	f7f9 fe61 	bl	80002c0 <__aeabi_i2f>
 80065fe:	4601      	mov	r1, r0
 8006600:	4628      	mov	r0, r5
 8006602:	f7f9 fda7 	bl	8000154 <__aeabi_fsub>
 8006606:	2f00      	cmp	r7, #0
 8006608:	4681      	mov	r9, r0
 800660a:	f340 8081 	ble.w	8006710 <__kernel_rem_pio2f+0x1ec>
 800660e:	1e62      	subs	r2, r4, #1
 8006610:	ab0a      	add	r3, sp, #40	@ 0x28
 8006612:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8006616:	f1c7 0108 	rsb	r1, r7, #8
 800661a:	fa45 f301 	asr.w	r3, r5, r1
 800661e:	441e      	add	r6, r3
 8006620:	408b      	lsls	r3, r1
 8006622:	1aed      	subs	r5, r5, r3
 8006624:	ab0a      	add	r3, sp, #40	@ 0x28
 8006626:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800662a:	f1c7 0307 	rsb	r3, r7, #7
 800662e:	411d      	asrs	r5, r3
 8006630:	2d00      	cmp	r5, #0
 8006632:	dd7a      	ble.n	800672a <__kernel_rem_pio2f+0x206>
 8006634:	2200      	movs	r2, #0
 8006636:	4692      	mov	sl, r2
 8006638:	3601      	adds	r6, #1
 800663a:	4294      	cmp	r4, r2
 800663c:	f300 80aa 	bgt.w	8006794 <__kernel_rem_pio2f+0x270>
 8006640:	2f00      	cmp	r7, #0
 8006642:	dd05      	ble.n	8006650 <__kernel_rem_pio2f+0x12c>
 8006644:	2f01      	cmp	r7, #1
 8006646:	f000 80b6 	beq.w	80067b6 <__kernel_rem_pio2f+0x292>
 800664a:	2f02      	cmp	r7, #2
 800664c:	f000 80bd 	beq.w	80067ca <__kernel_rem_pio2f+0x2a6>
 8006650:	2d02      	cmp	r5, #2
 8006652:	d16a      	bne.n	800672a <__kernel_rem_pio2f+0x206>
 8006654:	4649      	mov	r1, r9
 8006656:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800665a:	f7f9 fd7b 	bl	8000154 <__aeabi_fsub>
 800665e:	4681      	mov	r9, r0
 8006660:	f1ba 0f00 	cmp.w	sl, #0
 8006664:	d061      	beq.n	800672a <__kernel_rem_pio2f+0x206>
 8006666:	4639      	mov	r1, r7
 8006668:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800666c:	f7ff ff0e 	bl	800648c <scalbnf>
 8006670:	4601      	mov	r1, r0
 8006672:	4648      	mov	r0, r9
 8006674:	f7f9 fd6e 	bl	8000154 <__aeabi_fsub>
 8006678:	4681      	mov	r9, r0
 800667a:	e056      	b.n	800672a <__kernel_rem_pio2f+0x206>
 800667c:	2400      	movs	r4, #0
 800667e:	e768      	b.n	8006552 <__kernel_rem_pio2f+0x2e>
 8006680:	eb18 0f05 	cmn.w	r8, r5
 8006684:	d407      	bmi.n	8006696 <__kernel_rem_pio2f+0x172>
 8006686:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800668a:	f7f9 fe19 	bl	80002c0 <__aeabi_i2f>
 800668e:	f846 0b04 	str.w	r0, [r6], #4
 8006692:	3501      	adds	r5, #1
 8006694:	e770      	b.n	8006578 <__kernel_rem_pio2f+0x54>
 8006696:	4658      	mov	r0, fp
 8006698:	e7f9      	b.n	800668e <__kernel_rem_pio2f+0x16a>
 800669a:	9307      	str	r3, [sp, #28]
 800669c:	9b05      	ldr	r3, [sp, #20]
 800669e:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 80066a2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80066a6:	f7f9 fe5f 	bl	8000368 <__aeabi_fmul>
 80066aa:	4601      	mov	r1, r0
 80066ac:	4630      	mov	r0, r6
 80066ae:	f7f9 fd53 	bl	8000158 <__addsf3>
 80066b2:	4606      	mov	r6, r0
 80066b4:	9b07      	ldr	r3, [sp, #28]
 80066b6:	f108 0801 	add.w	r8, r8, #1
 80066ba:	9a03      	ldr	r2, [sp, #12]
 80066bc:	4590      	cmp	r8, r2
 80066be:	ddec      	ble.n	800669a <__kernel_rem_pio2f+0x176>
 80066c0:	f84a 6b04 	str.w	r6, [sl], #4
 80066c4:	f109 0901 	add.w	r9, r9, #1
 80066c8:	3504      	adds	r5, #4
 80066ca:	e761      	b.n	8006590 <__kernel_rem_pio2f+0x6c>
 80066cc:	46ab      	mov	fp, r5
 80066ce:	461e      	mov	r6, r3
 80066d0:	f04f 0800 	mov.w	r8, #0
 80066d4:	e7f1      	b.n	80066ba <__kernel_rem_pio2f+0x196>
 80066d6:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 80066da:	4658      	mov	r0, fp
 80066dc:	f7f9 fe44 	bl	8000368 <__aeabi_fmul>
 80066e0:	f7fa f81e 	bl	8000720 <__aeabi_f2iz>
 80066e4:	f7f9 fdec 	bl	80002c0 <__aeabi_i2f>
 80066e8:	4649      	mov	r1, r9
 80066ea:	9009      	str	r0, [sp, #36]	@ 0x24
 80066ec:	f7f9 fe3c 	bl	8000368 <__aeabi_fmul>
 80066f0:	4601      	mov	r1, r0
 80066f2:	4658      	mov	r0, fp
 80066f4:	f7f9 fd2e 	bl	8000154 <__aeabi_fsub>
 80066f8:	f7fa f812 	bl	8000720 <__aeabi_f2iz>
 80066fc:	3d01      	subs	r5, #1
 80066fe:	f846 0b04 	str.w	r0, [r6], #4
 8006702:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 8006706:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006708:	f7f9 fd26 	bl	8000158 <__addsf3>
 800670c:	4683      	mov	fp, r0
 800670e:	e75a      	b.n	80065c6 <__kernel_rem_pio2f+0xa2>
 8006710:	d105      	bne.n	800671e <__kernel_rem_pio2f+0x1fa>
 8006712:	1e63      	subs	r3, r4, #1
 8006714:	aa0a      	add	r2, sp, #40	@ 0x28
 8006716:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800671a:	11ed      	asrs	r5, r5, #7
 800671c:	e788      	b.n	8006630 <__kernel_rem_pio2f+0x10c>
 800671e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006722:	f7f9 ffd3 	bl	80006cc <__aeabi_fcmpge>
 8006726:	4605      	mov	r5, r0
 8006728:	bb90      	cbnz	r0, 8006790 <__kernel_rem_pio2f+0x26c>
 800672a:	2100      	movs	r1, #0
 800672c:	4648      	mov	r0, r9
 800672e:	f7f9 ffaf 	bl	8000690 <__aeabi_fcmpeq>
 8006732:	2800      	cmp	r0, #0
 8006734:	f000 8090 	beq.w	8006858 <__kernel_rem_pio2f+0x334>
 8006738:	2200      	movs	r2, #0
 800673a:	1e63      	subs	r3, r4, #1
 800673c:	9901      	ldr	r1, [sp, #4]
 800673e:	428b      	cmp	r3, r1
 8006740:	da4a      	bge.n	80067d8 <__kernel_rem_pio2f+0x2b4>
 8006742:	2a00      	cmp	r2, #0
 8006744:	d076      	beq.n	8006834 <__kernel_rem_pio2f+0x310>
 8006746:	3c01      	subs	r4, #1
 8006748:	ab0a      	add	r3, sp, #40	@ 0x28
 800674a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800674e:	3f08      	subs	r7, #8
 8006750:	2b00      	cmp	r3, #0
 8006752:	d0f8      	beq.n	8006746 <__kernel_rem_pio2f+0x222>
 8006754:	4639      	mov	r1, r7
 8006756:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800675a:	f7ff fe97 	bl	800648c <scalbnf>
 800675e:	46a2      	mov	sl, r4
 8006760:	4607      	mov	r7, r0
 8006762:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 8006766:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 800676a:	f1ba 0f00 	cmp.w	sl, #0
 800676e:	f280 80a1 	bge.w	80068b4 <__kernel_rem_pio2f+0x390>
 8006772:	4627      	mov	r7, r4
 8006774:	2200      	movs	r2, #0
 8006776:	2f00      	cmp	r7, #0
 8006778:	f2c0 80cb 	blt.w	8006912 <__kernel_rem_pio2f+0x3ee>
 800677c:	a946      	add	r1, sp, #280	@ 0x118
 800677e:	4690      	mov	r8, r2
 8006780:	f04f 0a00 	mov.w	sl, #0
 8006784:	4b18      	ldr	r3, [pc, #96]	@ (80067e8 <__kernel_rem_pio2f+0x2c4>)
 8006786:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800678a:	eba4 0907 	sub.w	r9, r4, r7
 800678e:	e0b4      	b.n	80068fa <__kernel_rem_pio2f+0x3d6>
 8006790:	2502      	movs	r5, #2
 8006792:	e74f      	b.n	8006634 <__kernel_rem_pio2f+0x110>
 8006794:	f858 3b04 	ldr.w	r3, [r8], #4
 8006798:	f1ba 0f00 	cmp.w	sl, #0
 800679c:	d108      	bne.n	80067b0 <__kernel_rem_pio2f+0x28c>
 800679e:	b123      	cbz	r3, 80067aa <__kernel_rem_pio2f+0x286>
 80067a0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80067a4:	f848 3c04 	str.w	r3, [r8, #-4]
 80067a8:	2301      	movs	r3, #1
 80067aa:	469a      	mov	sl, r3
 80067ac:	3201      	adds	r2, #1
 80067ae:	e744      	b.n	800663a <__kernel_rem_pio2f+0x116>
 80067b0:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80067b4:	e7f6      	b.n	80067a4 <__kernel_rem_pio2f+0x280>
 80067b6:	1e62      	subs	r2, r4, #1
 80067b8:	ab0a      	add	r3, sp, #40	@ 0x28
 80067ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067c2:	a90a      	add	r1, sp, #40	@ 0x28
 80067c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80067c8:	e742      	b.n	8006650 <__kernel_rem_pio2f+0x12c>
 80067ca:	1e62      	subs	r2, r4, #1
 80067cc:	ab0a      	add	r3, sp, #40	@ 0x28
 80067ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067d6:	e7f4      	b.n	80067c2 <__kernel_rem_pio2f+0x29e>
 80067d8:	a90a      	add	r1, sp, #40	@ 0x28
 80067da:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80067de:	3b01      	subs	r3, #1
 80067e0:	430a      	orrs	r2, r1
 80067e2:	e7ab      	b.n	800673c <__kernel_rem_pio2f+0x218>
 80067e4:	08007d28 	.word	0x08007d28
 80067e8:	08007cfc 	.word	0x08007cfc
 80067ec:	3301      	adds	r3, #1
 80067ee:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80067f2:	2900      	cmp	r1, #0
 80067f4:	d0fa      	beq.n	80067ec <__kernel_rem_pio2f+0x2c8>
 80067f6:	9a04      	ldr	r2, [sp, #16]
 80067f8:	a91e      	add	r1, sp, #120	@ 0x78
 80067fa:	18a2      	adds	r2, r4, r2
 80067fc:	1c66      	adds	r6, r4, #1
 80067fe:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 8006802:	441c      	add	r4, r3
 8006804:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 8006808:	42b4      	cmp	r4, r6
 800680a:	f6ff aecf 	blt.w	80065ac <__kernel_rem_pio2f+0x88>
 800680e:	9b07      	ldr	r3, [sp, #28]
 8006810:	46ab      	mov	fp, r5
 8006812:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006816:	f7f9 fd53 	bl	80002c0 <__aeabi_i2f>
 800681a:	f04f 0a00 	mov.w	sl, #0
 800681e:	f04f 0800 	mov.w	r8, #0
 8006822:	6028      	str	r0, [r5, #0]
 8006824:	9b03      	ldr	r3, [sp, #12]
 8006826:	459a      	cmp	sl, r3
 8006828:	dd07      	ble.n	800683a <__kernel_rem_pio2f+0x316>
 800682a:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800682e:	3504      	adds	r5, #4
 8006830:	3601      	adds	r6, #1
 8006832:	e7e9      	b.n	8006808 <__kernel_rem_pio2f+0x2e4>
 8006834:	2301      	movs	r3, #1
 8006836:	9a08      	ldr	r2, [sp, #32]
 8006838:	e7d9      	b.n	80067ee <__kernel_rem_pio2f+0x2ca>
 800683a:	9b05      	ldr	r3, [sp, #20]
 800683c:	f85b 0904 	ldr.w	r0, [fp], #-4
 8006840:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8006844:	f7f9 fd90 	bl	8000368 <__aeabi_fmul>
 8006848:	4601      	mov	r1, r0
 800684a:	4640      	mov	r0, r8
 800684c:	f7f9 fc84 	bl	8000158 <__addsf3>
 8006850:	f10a 0a01 	add.w	sl, sl, #1
 8006854:	4680      	mov	r8, r0
 8006856:	e7e5      	b.n	8006824 <__kernel_rem_pio2f+0x300>
 8006858:	9b06      	ldr	r3, [sp, #24]
 800685a:	9a02      	ldr	r2, [sp, #8]
 800685c:	4648      	mov	r0, r9
 800685e:	1a99      	subs	r1, r3, r2
 8006860:	f7ff fe14 	bl	800648c <scalbnf>
 8006864:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8006868:	4680      	mov	r8, r0
 800686a:	f7f9 ff2f 	bl	80006cc <__aeabi_fcmpge>
 800686e:	b1f8      	cbz	r0, 80068b0 <__kernel_rem_pio2f+0x38c>
 8006870:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8006874:	4640      	mov	r0, r8
 8006876:	f7f9 fd77 	bl	8000368 <__aeabi_fmul>
 800687a:	f7f9 ff51 	bl	8000720 <__aeabi_f2iz>
 800687e:	f7f9 fd1f 	bl	80002c0 <__aeabi_i2f>
 8006882:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8006886:	4681      	mov	r9, r0
 8006888:	f7f9 fd6e 	bl	8000368 <__aeabi_fmul>
 800688c:	4601      	mov	r1, r0
 800688e:	4640      	mov	r0, r8
 8006890:	f7f9 fc60 	bl	8000154 <__aeabi_fsub>
 8006894:	f7f9 ff44 	bl	8000720 <__aeabi_f2iz>
 8006898:	ab0a      	add	r3, sp, #40	@ 0x28
 800689a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800689e:	4648      	mov	r0, r9
 80068a0:	3401      	adds	r4, #1
 80068a2:	3708      	adds	r7, #8
 80068a4:	f7f9 ff3c 	bl	8000720 <__aeabi_f2iz>
 80068a8:	ab0a      	add	r3, sp, #40	@ 0x28
 80068aa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80068ae:	e751      	b.n	8006754 <__kernel_rem_pio2f+0x230>
 80068b0:	4640      	mov	r0, r8
 80068b2:	e7f7      	b.n	80068a4 <__kernel_rem_pio2f+0x380>
 80068b4:	ab0a      	add	r3, sp, #40	@ 0x28
 80068b6:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80068ba:	f7f9 fd01 	bl	80002c0 <__aeabi_i2f>
 80068be:	4639      	mov	r1, r7
 80068c0:	f7f9 fd52 	bl	8000368 <__aeabi_fmul>
 80068c4:	4649      	mov	r1, r9
 80068c6:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 80068ca:	4638      	mov	r0, r7
 80068cc:	f7f9 fd4c 	bl	8000368 <__aeabi_fmul>
 80068d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068d4:	4607      	mov	r7, r0
 80068d6:	e748      	b.n	800676a <__kernel_rem_pio2f+0x246>
 80068d8:	f853 0b04 	ldr.w	r0, [r3], #4
 80068dc:	f85b 1b04 	ldr.w	r1, [fp], #4
 80068e0:	9203      	str	r2, [sp, #12]
 80068e2:	9302      	str	r3, [sp, #8]
 80068e4:	f7f9 fd40 	bl	8000368 <__aeabi_fmul>
 80068e8:	4601      	mov	r1, r0
 80068ea:	4640      	mov	r0, r8
 80068ec:	f7f9 fc34 	bl	8000158 <__addsf3>
 80068f0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80068f4:	4680      	mov	r8, r0
 80068f6:	f10a 0a01 	add.w	sl, sl, #1
 80068fa:	9901      	ldr	r1, [sp, #4]
 80068fc:	458a      	cmp	sl, r1
 80068fe:	dc01      	bgt.n	8006904 <__kernel_rem_pio2f+0x3e0>
 8006900:	45ca      	cmp	sl, r9
 8006902:	dde9      	ble.n	80068d8 <__kernel_rem_pio2f+0x3b4>
 8006904:	ab5a      	add	r3, sp, #360	@ 0x168
 8006906:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800690a:	f849 8ca0 	str.w	r8, [r9, #-160]
 800690e:	3f01      	subs	r7, #1
 8006910:	e731      	b.n	8006776 <__kernel_rem_pio2f+0x252>
 8006912:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8006914:	2b02      	cmp	r3, #2
 8006916:	dc07      	bgt.n	8006928 <__kernel_rem_pio2f+0x404>
 8006918:	2b00      	cmp	r3, #0
 800691a:	dc4e      	bgt.n	80069ba <__kernel_rem_pio2f+0x496>
 800691c:	d02e      	beq.n	800697c <__kernel_rem_pio2f+0x458>
 800691e:	f006 0007 	and.w	r0, r6, #7
 8006922:	b05b      	add	sp, #364	@ 0x16c
 8006924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006928:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800692a:	2b03      	cmp	r3, #3
 800692c:	d1f7      	bne.n	800691e <__kernel_rem_pio2f+0x3fa>
 800692e:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 8006932:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8006936:	46b8      	mov	r8, r7
 8006938:	46a2      	mov	sl, r4
 800693a:	f1ba 0f00 	cmp.w	sl, #0
 800693e:	dc49      	bgt.n	80069d4 <__kernel_rem_pio2f+0x4b0>
 8006940:	46a1      	mov	r9, r4
 8006942:	f1b9 0f01 	cmp.w	r9, #1
 8006946:	dc60      	bgt.n	8006a0a <__kernel_rem_pio2f+0x4e6>
 8006948:	2000      	movs	r0, #0
 800694a:	2c01      	cmp	r4, #1
 800694c:	dc76      	bgt.n	8006a3c <__kernel_rem_pio2f+0x518>
 800694e:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8006950:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8006952:	2d00      	cmp	r5, #0
 8006954:	d178      	bne.n	8006a48 <__kernel_rem_pio2f+0x524>
 8006956:	9900      	ldr	r1, [sp, #0]
 8006958:	600a      	str	r2, [r1, #0]
 800695a:	460a      	mov	r2, r1
 800695c:	604b      	str	r3, [r1, #4]
 800695e:	6090      	str	r0, [r2, #8]
 8006960:	e7dd      	b.n	800691e <__kernel_rem_pio2f+0x3fa>
 8006962:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8006966:	f7f9 fbf7 	bl	8000158 <__addsf3>
 800696a:	3c01      	subs	r4, #1
 800696c:	2c00      	cmp	r4, #0
 800696e:	daf8      	bge.n	8006962 <__kernel_rem_pio2f+0x43e>
 8006970:	b10d      	cbz	r5, 8006976 <__kernel_rem_pio2f+0x452>
 8006972:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8006976:	9b00      	ldr	r3, [sp, #0]
 8006978:	6018      	str	r0, [r3, #0]
 800697a:	e7d0      	b.n	800691e <__kernel_rem_pio2f+0x3fa>
 800697c:	2000      	movs	r0, #0
 800697e:	af32      	add	r7, sp, #200	@ 0xc8
 8006980:	e7f4      	b.n	800696c <__kernel_rem_pio2f+0x448>
 8006982:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8006986:	f7f9 fbe7 	bl	8000158 <__addsf3>
 800698a:	f108 38ff 	add.w	r8, r8, #4294967295
 800698e:	f1b8 0f00 	cmp.w	r8, #0
 8006992:	daf6      	bge.n	8006982 <__kernel_rem_pio2f+0x45e>
 8006994:	b1ad      	cbz	r5, 80069c2 <__kernel_rem_pio2f+0x49e>
 8006996:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 800699a:	9a00      	ldr	r2, [sp, #0]
 800699c:	4601      	mov	r1, r0
 800699e:	6013      	str	r3, [r2, #0]
 80069a0:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 80069a2:	f7f9 fbd7 	bl	8000154 <__aeabi_fsub>
 80069a6:	f04f 0801 	mov.w	r8, #1
 80069aa:	4544      	cmp	r4, r8
 80069ac:	da0b      	bge.n	80069c6 <__kernel_rem_pio2f+0x4a2>
 80069ae:	b10d      	cbz	r5, 80069b4 <__kernel_rem_pio2f+0x490>
 80069b0:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80069b4:	9b00      	ldr	r3, [sp, #0]
 80069b6:	6058      	str	r0, [r3, #4]
 80069b8:	e7b1      	b.n	800691e <__kernel_rem_pio2f+0x3fa>
 80069ba:	46a0      	mov	r8, r4
 80069bc:	2000      	movs	r0, #0
 80069be:	af32      	add	r7, sp, #200	@ 0xc8
 80069c0:	e7e5      	b.n	800698e <__kernel_rem_pio2f+0x46a>
 80069c2:	4603      	mov	r3, r0
 80069c4:	e7e9      	b.n	800699a <__kernel_rem_pio2f+0x476>
 80069c6:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80069ca:	f7f9 fbc5 	bl	8000158 <__addsf3>
 80069ce:	f108 0801 	add.w	r8, r8, #1
 80069d2:	e7ea      	b.n	80069aa <__kernel_rem_pio2f+0x486>
 80069d4:	f8d8 3000 	ldr.w	r3, [r8]
 80069d8:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80069dc:	4619      	mov	r1, r3
 80069de:	4610      	mov	r0, r2
 80069e0:	9302      	str	r3, [sp, #8]
 80069e2:	9201      	str	r2, [sp, #4]
 80069e4:	f7f9 fbb8 	bl	8000158 <__addsf3>
 80069e8:	9a01      	ldr	r2, [sp, #4]
 80069ea:	4601      	mov	r1, r0
 80069ec:	4681      	mov	r9, r0
 80069ee:	4610      	mov	r0, r2
 80069f0:	f7f9 fbb0 	bl	8000154 <__aeabi_fsub>
 80069f4:	9b02      	ldr	r3, [sp, #8]
 80069f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069fa:	4619      	mov	r1, r3
 80069fc:	f7f9 fbac 	bl	8000158 <__addsf3>
 8006a00:	f848 0904 	str.w	r0, [r8], #-4
 8006a04:	f8c8 9000 	str.w	r9, [r8]
 8006a08:	e797      	b.n	800693a <__kernel_rem_pio2f+0x416>
 8006a0a:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8006a0e:	f8d7 a000 	ldr.w	sl, [r7]
 8006a12:	4618      	mov	r0, r3
 8006a14:	4651      	mov	r1, sl
 8006a16:	9301      	str	r3, [sp, #4]
 8006a18:	f7f9 fb9e 	bl	8000158 <__addsf3>
 8006a1c:	9b01      	ldr	r3, [sp, #4]
 8006a1e:	4601      	mov	r1, r0
 8006a20:	4680      	mov	r8, r0
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7f9 fb96 	bl	8000154 <__aeabi_fsub>
 8006a28:	4651      	mov	r1, sl
 8006a2a:	f7f9 fb95 	bl	8000158 <__addsf3>
 8006a2e:	f847 0904 	str.w	r0, [r7], #-4
 8006a32:	f109 39ff 	add.w	r9, r9, #4294967295
 8006a36:	f8c7 8000 	str.w	r8, [r7]
 8006a3a:	e782      	b.n	8006942 <__kernel_rem_pio2f+0x41e>
 8006a3c:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8006a40:	f7f9 fb8a 	bl	8000158 <__addsf3>
 8006a44:	3c01      	subs	r4, #1
 8006a46:	e780      	b.n	800694a <__kernel_rem_pio2f+0x426>
 8006a48:	9900      	ldr	r1, [sp, #0]
 8006a4a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8006a4e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006a52:	600a      	str	r2, [r1, #0]
 8006a54:	604b      	str	r3, [r1, #4]
 8006a56:	460a      	mov	r2, r1
 8006a58:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8006a5c:	e77f      	b.n	800695e <__kernel_rem_pio2f+0x43a>
 8006a5e:	bf00      	nop

08006a60 <floorf>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8006a66:	3d7f      	subs	r5, #127	@ 0x7f
 8006a68:	2d16      	cmp	r5, #22
 8006a6a:	4601      	mov	r1, r0
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8006a72:	dc26      	bgt.n	8006ac2 <floorf+0x62>
 8006a74:	2d00      	cmp	r5, #0
 8006a76:	da0f      	bge.n	8006a98 <floorf+0x38>
 8006a78:	4917      	ldr	r1, [pc, #92]	@ (8006ad8 <floorf+0x78>)
 8006a7a:	f7f9 fb6d 	bl	8000158 <__addsf3>
 8006a7e:	2100      	movs	r1, #0
 8006a80:	f7f9 fe2e 	bl	80006e0 <__aeabi_fcmpgt>
 8006a84:	b130      	cbz	r0, 8006a94 <floorf+0x34>
 8006a86:	2c00      	cmp	r4, #0
 8006a88:	da23      	bge.n	8006ad2 <floorf+0x72>
 8006a8a:	2e00      	cmp	r6, #0
 8006a8c:	4c13      	ldr	r4, [pc, #76]	@ (8006adc <floorf+0x7c>)
 8006a8e:	bf08      	it	eq
 8006a90:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006a94:	4621      	mov	r1, r4
 8006a96:	e01a      	b.n	8006ace <floorf+0x6e>
 8006a98:	4e11      	ldr	r6, [pc, #68]	@ (8006ae0 <floorf+0x80>)
 8006a9a:	412e      	asrs	r6, r5
 8006a9c:	4230      	tst	r0, r6
 8006a9e:	d016      	beq.n	8006ace <floorf+0x6e>
 8006aa0:	490d      	ldr	r1, [pc, #52]	@ (8006ad8 <floorf+0x78>)
 8006aa2:	f7f9 fb59 	bl	8000158 <__addsf3>
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	f7f9 fe1a 	bl	80006e0 <__aeabi_fcmpgt>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	d0f1      	beq.n	8006a94 <floorf+0x34>
 8006ab0:	2c00      	cmp	r4, #0
 8006ab2:	bfbe      	ittt	lt
 8006ab4:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8006ab8:	412b      	asrlt	r3, r5
 8006aba:	18e4      	addlt	r4, r4, r3
 8006abc:	ea24 0406 	bic.w	r4, r4, r6
 8006ac0:	e7e8      	b.n	8006a94 <floorf+0x34>
 8006ac2:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8006ac6:	d302      	bcc.n	8006ace <floorf+0x6e>
 8006ac8:	f7f9 fb46 	bl	8000158 <__addsf3>
 8006acc:	4601      	mov	r1, r0
 8006ace:	4608      	mov	r0, r1
 8006ad0:	bd70      	pop	{r4, r5, r6, pc}
 8006ad2:	2400      	movs	r4, #0
 8006ad4:	e7de      	b.n	8006a94 <floorf+0x34>
 8006ad6:	bf00      	nop
 8006ad8:	7149f2ca 	.word	0x7149f2ca
 8006adc:	bf800000 	.word	0xbf800000
 8006ae0:	007fffff 	.word	0x007fffff

08006ae4 <_init>:
 8006ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae6:	bf00      	nop
 8006ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aea:	bc08      	pop	{r3}
 8006aec:	469e      	mov	lr, r3
 8006aee:	4770      	bx	lr

08006af0 <_fini>:
 8006af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af2:	bf00      	nop
 8006af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af6:	bc08      	pop	{r3}
 8006af8:	469e      	mov	lr, r3
 8006afa:	4770      	bx	lr
